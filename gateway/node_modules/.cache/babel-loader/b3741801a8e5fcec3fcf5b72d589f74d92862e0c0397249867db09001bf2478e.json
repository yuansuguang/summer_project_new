{"ast":null,"code":"import \"core-js/modules/es.array-buffer.detached.js\";\nimport \"core-js/modules/es.array-buffer.transfer.js\";\nimport \"core-js/modules/es.array-buffer.transfer-to-fixed-length.js\";\nimport \"core-js/modules/es.typed-array.to-reversed.js\";\nimport \"core-js/modules/es.typed-array.to-sorted.js\";\nimport \"core-js/modules/es.typed-array.with.js\";\n/**\n * @module echarts-gl/util/geometry/QuadsGeometry\n * @author Yi Shen(http://github.com/pissang)\n */\nimport Geometry from 'claygl/src/Geometry';\nimport * as echarts from 'echarts/lib/echarts';\nimport dynamicConvertMixin from './dynamicConvertMixin';\nimport glmatrix from 'claygl/src/dep/glmatrix';\nvar vec3 = glmatrix.vec3;\n/**\n * @constructor\n * @alias module:echarts-gl/util/geometry/QuadsGeometry\n * @extends clay.Geometry\n */\n\nvar QuadsGeometry = Geometry.extend(function () {\n  return {\n    segmentScale: 1,\n    /**\n     * Need to use mesh to expand lines if lineWidth > MAX_LINE_WIDTH\n     */\n    useNativeLine: true,\n    attributes: {\n      position: new Geometry.Attribute('position', 'float', 3, 'POSITION'),\n      normal: new Geometry.Attribute('normal', 'float', 3, 'NORMAL'),\n      color: new Geometry.Attribute('color', 'float', 4, 'COLOR')\n    }\n  };\n}, /** @lends module: echarts-gl/util/geometry/QuadsGeometry.prototype */\n{\n  /**\n   * Reset offset\n   */\n  resetOffset: function () {\n    this._vertexOffset = 0;\n    this._faceOffset = 0;\n  },\n  /**\n   * @param {number} nQuad\n   */\n  setQuadCount: function (nQuad) {\n    var attributes = this.attributes;\n    var vertexCount = this.getQuadVertexCount() * nQuad;\n    var triangleCount = this.getQuadTriangleCount() * nQuad;\n    if (this.vertexCount !== vertexCount) {\n      attributes.position.init(vertexCount);\n      attributes.normal.init(vertexCount);\n      attributes.color.init(vertexCount);\n    }\n    if (this.triangleCount !== triangleCount) {\n      this.indices = vertexCount > 0xffff ? new Uint32Array(triangleCount * 3) : new Uint16Array(triangleCount * 3);\n    }\n  },\n  getQuadVertexCount: function () {\n    return 4;\n  },\n  getQuadTriangleCount: function () {\n    return 2;\n  },\n  /**\n   * Add a quad, which in following order:\n   * 0-----1\n   * 3-----2\n   */\n  addQuad: function () {\n    var a = vec3.create();\n    var b = vec3.create();\n    var normal = vec3.create();\n    var indices = [0, 3, 1, 3, 2, 1];\n    return function (coords, color) {\n      var positionAttr = this.attributes.position;\n      var normalAttr = this.attributes.normal;\n      var colorAttr = this.attributes.color;\n      vec3.sub(a, coords[1], coords[0]);\n      vec3.sub(b, coords[2], coords[1]);\n      vec3.cross(normal, a, b);\n      vec3.normalize(normal, normal);\n      for (var i = 0; i < 4; i++) {\n        positionAttr.set(this._vertexOffset + i, coords[i]);\n        colorAttr.set(this._vertexOffset + i, color);\n        normalAttr.set(this._vertexOffset + i, normal);\n      }\n      var idx = this._faceOffset * 3;\n      for (var i = 0; i < 6; i++) {\n        this.indices[idx + i] = indices[i] + this._vertexOffset;\n      }\n      this._vertexOffset += 4;\n      this._faceOffset += 2;\n    };\n  }()\n});\necharts.util.defaults(QuadsGeometry.prototype, dynamicConvertMixin);\nexport default QuadsGeometry;","map":{"version":3,"names":["Geometry","echarts","dynamicConvertMixin","glmatrix","vec3","QuadsGeometry","extend","segmentScale","useNativeLine","attributes","position","Attribute","normal","color","resetOffset","_vertexOffset","_faceOffset","setQuadCount","nQuad","vertexCount","getQuadVertexCount","triangleCount","getQuadTriangleCount","init","indices","Uint32Array","Uint16Array","addQuad","a","create","b","coords","positionAttr","normalAttr","colorAttr","sub","cross","normalize","i","set","idx","util","defaults","prototype"],"sources":["E:/mytest/node_modules/echarts-gl/lib/util/geometry/Quads.js"],"sourcesContent":["/**\n * @module echarts-gl/util/geometry/QuadsGeometry\n * @author Yi Shen(http://github.com/pissang)\n */\nimport Geometry from 'claygl/src/Geometry';\nimport * as echarts from 'echarts/lib/echarts';\nimport dynamicConvertMixin from './dynamicConvertMixin';\nimport glmatrix from 'claygl/src/dep/glmatrix';\nvar vec3 = glmatrix.vec3;\n/**\n * @constructor\n * @alias module:echarts-gl/util/geometry/QuadsGeometry\n * @extends clay.Geometry\n */\n\nvar QuadsGeometry = Geometry.extend(function () {\n  return {\n    segmentScale: 1,\n\n    /**\n     * Need to use mesh to expand lines if lineWidth > MAX_LINE_WIDTH\n     */\n    useNativeLine: true,\n    attributes: {\n      position: new Geometry.Attribute('position', 'float', 3, 'POSITION'),\n      normal: new Geometry.Attribute('normal', 'float', 3, 'NORMAL'),\n      color: new Geometry.Attribute('color', 'float', 4, 'COLOR')\n    }\n  };\n},\n/** @lends module: echarts-gl/util/geometry/QuadsGeometry.prototype */\n{\n  /**\n   * Reset offset\n   */\n  resetOffset: function () {\n    this._vertexOffset = 0;\n    this._faceOffset = 0;\n  },\n\n  /**\n   * @param {number} nQuad\n   */\n  setQuadCount: function (nQuad) {\n    var attributes = this.attributes;\n    var vertexCount = this.getQuadVertexCount() * nQuad;\n    var triangleCount = this.getQuadTriangleCount() * nQuad;\n\n    if (this.vertexCount !== vertexCount) {\n      attributes.position.init(vertexCount);\n      attributes.normal.init(vertexCount);\n      attributes.color.init(vertexCount);\n    }\n\n    if (this.triangleCount !== triangleCount) {\n      this.indices = vertexCount > 0xffff ? new Uint32Array(triangleCount * 3) : new Uint16Array(triangleCount * 3);\n    }\n  },\n  getQuadVertexCount: function () {\n    return 4;\n  },\n  getQuadTriangleCount: function () {\n    return 2;\n  },\n\n  /**\n   * Add a quad, which in following order:\n   * 0-----1\n   * 3-----2\n   */\n  addQuad: function () {\n    var a = vec3.create();\n    var b = vec3.create();\n    var normal = vec3.create();\n    var indices = [0, 3, 1, 3, 2, 1];\n    return function (coords, color) {\n      var positionAttr = this.attributes.position;\n      var normalAttr = this.attributes.normal;\n      var colorAttr = this.attributes.color;\n      vec3.sub(a, coords[1], coords[0]);\n      vec3.sub(b, coords[2], coords[1]);\n      vec3.cross(normal, a, b);\n      vec3.normalize(normal, normal);\n\n      for (var i = 0; i < 4; i++) {\n        positionAttr.set(this._vertexOffset + i, coords[i]);\n        colorAttr.set(this._vertexOffset + i, color);\n        normalAttr.set(this._vertexOffset + i, normal);\n      }\n\n      var idx = this._faceOffset * 3;\n\n      for (var i = 0; i < 6; i++) {\n        this.indices[idx + i] = indices[i] + this._vertexOffset;\n      }\n\n      this._vertexOffset += 4;\n      this._faceOffset += 2;\n    };\n  }()\n});\necharts.util.defaults(QuadsGeometry.prototype, dynamicConvertMixin);\nexport default QuadsGeometry;"],"mappings":";;;;;;AAAA;AACA;AACA;AACA;AACA,OAAOA,QAAQ,MAAM,qBAAqB;AAC1C,OAAO,KAAKC,OAAO,MAAM,qBAAqB;AAC9C,OAAOC,mBAAmB,MAAM,uBAAuB;AACvD,OAAOC,QAAQ,MAAM,yBAAyB;AAC9C,IAAIC,IAAI,GAAGD,QAAQ,CAACC,IAAI;AACxB;AACA;AACA;AACA;AACA;;AAEA,IAAIC,aAAa,GAAGL,QAAQ,CAACM,MAAM,CAAC,YAAY;EAC9C,OAAO;IACLC,YAAY,EAAE,CAAC;IAEf;AACJ;AACA;IACIC,aAAa,EAAE,IAAI;IACnBC,UAAU,EAAE;MACVC,QAAQ,EAAE,IAAIV,QAAQ,CAACW,SAAS,CAAC,UAAU,EAAE,OAAO,EAAE,CAAC,EAAE,UAAU,CAAC;MACpEC,MAAM,EAAE,IAAIZ,QAAQ,CAACW,SAAS,CAAC,QAAQ,EAAE,OAAO,EAAE,CAAC,EAAE,QAAQ,CAAC;MAC9DE,KAAK,EAAE,IAAIb,QAAQ,CAACW,SAAS,CAAC,OAAO,EAAE,OAAO,EAAE,CAAC,EAAE,OAAO;IAC5D;EACF,CAAC;AACH,CAAC,EACD;AACA;EACE;AACF;AACA;EACEG,WAAW,EAAE,SAAAA,CAAA,EAAY;IACvB,IAAI,CAACC,aAAa,GAAG,CAAC;IACtB,IAAI,CAACC,WAAW,GAAG,CAAC;EACtB,CAAC;EAED;AACF;AACA;EACEC,YAAY,EAAE,SAAAA,CAAUC,KAAK,EAAE;IAC7B,IAAIT,UAAU,GAAG,IAAI,CAACA,UAAU;IAChC,IAAIU,WAAW,GAAG,IAAI,CAACC,kBAAkB,CAAC,CAAC,GAAGF,KAAK;IACnD,IAAIG,aAAa,GAAG,IAAI,CAACC,oBAAoB,CAAC,CAAC,GAAGJ,KAAK;IAEvD,IAAI,IAAI,CAACC,WAAW,KAAKA,WAAW,EAAE;MACpCV,UAAU,CAACC,QAAQ,CAACa,IAAI,CAACJ,WAAW,CAAC;MACrCV,UAAU,CAACG,MAAM,CAACW,IAAI,CAACJ,WAAW,CAAC;MACnCV,UAAU,CAACI,KAAK,CAACU,IAAI,CAACJ,WAAW,CAAC;IACpC;IAEA,IAAI,IAAI,CAACE,aAAa,KAAKA,aAAa,EAAE;MACxC,IAAI,CAACG,OAAO,GAAGL,WAAW,GAAG,MAAM,GAAG,IAAIM,WAAW,CAACJ,aAAa,GAAG,CAAC,CAAC,GAAG,IAAIK,WAAW,CAACL,aAAa,GAAG,CAAC,CAAC;IAC/G;EACF,CAAC;EACDD,kBAAkB,EAAE,SAAAA,CAAA,EAAY;IAC9B,OAAO,CAAC;EACV,CAAC;EACDE,oBAAoB,EAAE,SAAAA,CAAA,EAAY;IAChC,OAAO,CAAC;EACV,CAAC;EAED;AACF;AACA;AACA;AACA;EACEK,OAAO,EAAE,YAAY;IACnB,IAAIC,CAAC,GAAGxB,IAAI,CAACyB,MAAM,CAAC,CAAC;IACrB,IAAIC,CAAC,GAAG1B,IAAI,CAACyB,MAAM,CAAC,CAAC;IACrB,IAAIjB,MAAM,GAAGR,IAAI,CAACyB,MAAM,CAAC,CAAC;IAC1B,IAAIL,OAAO,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;IAChC,OAAO,UAAUO,MAAM,EAAElB,KAAK,EAAE;MAC9B,IAAImB,YAAY,GAAG,IAAI,CAACvB,UAAU,CAACC,QAAQ;MAC3C,IAAIuB,UAAU,GAAG,IAAI,CAACxB,UAAU,CAACG,MAAM;MACvC,IAAIsB,SAAS,GAAG,IAAI,CAACzB,UAAU,CAACI,KAAK;MACrCT,IAAI,CAAC+B,GAAG,CAACP,CAAC,EAAEG,MAAM,CAAC,CAAC,CAAC,EAAEA,MAAM,CAAC,CAAC,CAAC,CAAC;MACjC3B,IAAI,CAAC+B,GAAG,CAACL,CAAC,EAAEC,MAAM,CAAC,CAAC,CAAC,EAAEA,MAAM,CAAC,CAAC,CAAC,CAAC;MACjC3B,IAAI,CAACgC,KAAK,CAACxB,MAAM,EAAEgB,CAAC,EAAEE,CAAC,CAAC;MACxB1B,IAAI,CAACiC,SAAS,CAACzB,MAAM,EAAEA,MAAM,CAAC;MAE9B,KAAK,IAAI0B,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,CAAC,EAAEA,CAAC,EAAE,EAAE;QAC1BN,YAAY,CAACO,GAAG,CAAC,IAAI,CAACxB,aAAa,GAAGuB,CAAC,EAAEP,MAAM,CAACO,CAAC,CAAC,CAAC;QACnDJ,SAAS,CAACK,GAAG,CAAC,IAAI,CAACxB,aAAa,GAAGuB,CAAC,EAAEzB,KAAK,CAAC;QAC5CoB,UAAU,CAACM,GAAG,CAAC,IAAI,CAACxB,aAAa,GAAGuB,CAAC,EAAE1B,MAAM,CAAC;MAChD;MAEA,IAAI4B,GAAG,GAAG,IAAI,CAACxB,WAAW,GAAG,CAAC;MAE9B,KAAK,IAAIsB,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,CAAC,EAAEA,CAAC,EAAE,EAAE;QAC1B,IAAI,CAACd,OAAO,CAACgB,GAAG,GAAGF,CAAC,CAAC,GAAGd,OAAO,CAACc,CAAC,CAAC,GAAG,IAAI,CAACvB,aAAa;MACzD;MAEA,IAAI,CAACA,aAAa,IAAI,CAAC;MACvB,IAAI,CAACC,WAAW,IAAI,CAAC;IACvB,CAAC;EACH,CAAC,CAAC;AACJ,CAAC,CAAC;AACFf,OAAO,CAACwC,IAAI,CAACC,QAAQ,CAACrC,aAAa,CAACsC,SAAS,EAAEzC,mBAAmB,CAAC;AACnE,eAAeG,aAAa","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}