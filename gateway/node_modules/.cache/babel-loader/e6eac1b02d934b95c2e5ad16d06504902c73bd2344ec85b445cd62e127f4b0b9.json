{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.array-buffer.detached.js\";\nimport \"core-js/modules/es.array-buffer.transfer.js\";\nimport \"core-js/modules/es.array-buffer.transfer-to-fixed-length.js\";\nimport \"core-js/modules/es.typed-array.to-reversed.js\";\nimport \"core-js/modules/es.typed-array.to-sorted.js\";\nimport \"core-js/modules/es.typed-array.with.js\";\nimport * as echarts from 'echarts/lib/echarts';\nimport graphicGL from '../../util/graphicGL';\nimport OrbitControl from '../../util/OrbitControl';\nimport SceneHelper from '../common/SceneHelper';\nimport sunCalc from '../../util/sunCalc';\nimport retrieve from '../../util/retrieve';\nimport utilShaderCode from 'claygl/src/shader/source/util.glsl.js';\nimport atmosphereShaderCode from './atmosphere.glsl.js';\ngraphicGL.Shader['import'](utilShaderCode);\ngraphicGL.Shader['import'](atmosphereShaderCode);\nexport default echarts.ComponentView.extend({\n  type: 'globe',\n  __ecgl__: true,\n  _displacementScale: 0,\n  init: function (ecModel, api) {\n    this.groupGL = new graphicGL.Node();\n    /**\n     * @type {clay.geometry.Sphere}\n     * @private\n     */\n\n    this._sphereGeometry = new graphicGL.SphereGeometry({\n      widthSegments: 200,\n      heightSegments: 100,\n      dynamic: true\n    });\n    this._overlayGeometry = new graphicGL.SphereGeometry({\n      widthSegments: 80,\n      heightSegments: 40\n    });\n    /**\n     * @type {clay.geometry.Plane}\n     */\n\n    this._planeGeometry = new graphicGL.PlaneGeometry();\n    /**\n     * @type {clay.geometry.Mesh}\n     */\n\n    this._earthMesh = new graphicGL.Mesh({\n      renderNormal: true\n    });\n    /**\n     * @type {clay.geometry.Mesh}\n     */\n\n    this._atmosphereMesh = new graphicGL.Mesh();\n    this._atmosphereGeometry = new graphicGL.SphereGeometry({\n      widthSegments: 80,\n      heightSegments: 40\n    });\n    this._atmosphereMaterial = new graphicGL.Material({\n      shader: new graphicGL.Shader(graphicGL.Shader.source('ecgl.atmosphere.vertex'), graphicGL.Shader.source('ecgl.atmosphere.fragment')),\n      transparent: true\n    });\n    this._atmosphereMesh.geometry = this._atmosphereGeometry;\n    this._atmosphereMesh.material = this._atmosphereMaterial;\n    this._atmosphereMesh.frontFace = graphicGL.Mesh.CW;\n    this._lightRoot = new graphicGL.Node();\n    this._sceneHelper = new SceneHelper();\n    this._sceneHelper.initLight(this._lightRoot);\n    this.groupGL.add(this._atmosphereMesh);\n    this.groupGL.add(this._earthMesh);\n    this._control = new OrbitControl({\n      zr: api.getZr()\n    });\n    this._control.init();\n    this._layerMeshes = {};\n  },\n  render: function (globeModel, ecModel, api) {\n    var coordSys = globeModel.coordinateSystem;\n    var shading = globeModel.get('shading'); // Always have light.\n\n    coordSys.viewGL.add(this._lightRoot);\n    if (globeModel.get('show')) {\n      // Add self to scene;\n      coordSys.viewGL.add(this.groupGL);\n    } else {\n      coordSys.viewGL.remove(this.groupGL);\n    }\n    this._sceneHelper.setScene(coordSys.viewGL.scene); // Set post effect\n\n    coordSys.viewGL.setPostEffect(globeModel.getModel('postEffect'), api);\n    coordSys.viewGL.setTemporalSuperSampling(globeModel.getModel('temporalSuperSampling'));\n    var earthMesh = this._earthMesh;\n    earthMesh.geometry = this._sphereGeometry;\n    var shadingPrefix = 'ecgl.' + shading;\n    if (!earthMesh.material || earthMesh.material.shader.name !== shadingPrefix) {\n      earthMesh.material = graphicGL.createMaterial(shadingPrefix);\n    }\n    graphicGL.setMaterialFromModel(shading, earthMesh.material, globeModel, api);\n    ['roughnessMap', 'metalnessMap', 'detailMap', 'normalMap'].forEach(function (texName) {\n      var texture = earthMesh.material.get(texName);\n      if (texture) {\n        texture.flipY = false;\n      }\n    });\n    earthMesh.material.set('color', graphicGL.parseColor(globeModel.get('baseColor'))); // shrink a little\n\n    var scale = coordSys.radius * 0.99;\n    earthMesh.scale.set(scale, scale, scale);\n    if (globeModel.get('atmosphere.show')) {\n      earthMesh.material.define('both', 'ATMOSPHERE_ENABLED');\n      this._atmosphereMesh.invisible = false;\n      this._atmosphereMaterial.setUniforms({\n        glowPower: globeModel.get('atmosphere.glowPower') || 6.0,\n        glowColor: globeModel.get('atmosphere.color') || '#ffffff'\n      });\n      earthMesh.material.setUniforms({\n        glowPower: globeModel.get('atmosphere.innerGlowPower') || 2.0,\n        glowColor: globeModel.get('atmosphere.color') || '#ffffff'\n      });\n      var offset = globeModel.get('atmosphere.offset') || 5;\n      this._atmosphereMesh.scale.set(scale + offset, scale + offset, scale + offset);\n    } else {\n      earthMesh.material.undefine('both', 'ATMOSPHERE_ENABLED');\n      this._atmosphereMesh.invisible = true;\n    }\n    var diffuseTexture = earthMesh.material.setTextureImage('diffuseMap', globeModel.get('baseTexture'), api, {\n      flipY: false,\n      anisotropic: 8\n    });\n    if (diffuseTexture && diffuseTexture.surface) {\n      diffuseTexture.surface.attachToMesh(earthMesh);\n    } // Update bump map\n\n    var bumpTexture = earthMesh.material.setTextureImage('bumpMap', globeModel.get('heightTexture'), api, {\n      flipY: false,\n      anisotropic: 8\n    });\n    if (bumpTexture && bumpTexture.surface) {\n      bumpTexture.surface.attachToMesh(earthMesh);\n    }\n    earthMesh.material[globeModel.get('postEffect.enable') ? 'define' : 'undefine']('fragment', 'SRGB_DECODE');\n    this._updateLight(globeModel, api);\n    this._displaceVertices(globeModel, api);\n    this._updateViewControl(globeModel, api);\n    this._updateLayers(globeModel, api);\n  },\n  afterRender: function (globeModel, ecModel, api, layerGL) {\n    // Create ambient cubemap after render because we need to know the renderer.\n    // TODO\n    var renderer = layerGL.renderer;\n    this._sceneHelper.updateAmbientCubemap(renderer, globeModel, api);\n    this._sceneHelper.updateSkybox(renderer, globeModel, api);\n  },\n  _updateLayers: function (globeModel, api) {\n    var coordSys = globeModel.coordinateSystem;\n    var layers = globeModel.get('layers');\n    var lastDistance = coordSys.radius;\n    var layerDiffuseTextures = [];\n    var layerDiffuseIntensity = [];\n    var layerEmissiveTextures = [];\n    var layerEmissionIntensity = [];\n    echarts.util.each(layers, function (layerOption) {\n      var layerModel = new echarts.Model(layerOption);\n      var layerType = layerModel.get('type');\n      var texture = graphicGL.loadTexture(layerModel.get('texture'), api, {\n        flipY: false,\n        anisotropic: 8\n      });\n      if (texture.surface) {\n        texture.surface.attachToMesh(this._earthMesh);\n      }\n      if (layerType === 'blend') {\n        var blendTo = layerModel.get('blendTo');\n        var intensity = retrieve.firstNotNull(layerModel.get('intensity'), 1.0);\n        if (blendTo === 'emission') {\n          layerEmissiveTextures.push(texture);\n          layerEmissionIntensity.push(intensity);\n        } else {\n          // Default is albedo\n          layerDiffuseTextures.push(texture);\n          layerDiffuseIntensity.push(intensity);\n        }\n      } else {\n        // Default use overlay\n        var id = layerModel.get('id');\n        var overlayMesh = this._layerMeshes[id];\n        if (!overlayMesh) {\n          overlayMesh = this._layerMeshes[id] = new graphicGL.Mesh({\n            geometry: this._overlayGeometry,\n            castShadow: false,\n            ignorePicking: true\n          });\n        }\n        var shading = layerModel.get('shading');\n        if (shading === 'lambert') {\n          overlayMesh.material = overlayMesh.__lambertMaterial || new graphicGL.Material({\n            autoUpdateTextureStatus: false,\n            shader: graphicGL.createShader('ecgl.lambert'),\n            transparent: true,\n            depthMask: false\n          });\n          overlayMesh.__lambertMaterial = overlayMesh.material;\n        } else {\n          // color\n          overlayMesh.material = overlayMesh.__colorMaterial || new graphicGL.Material({\n            autoUpdateTextureStatus: false,\n            shader: graphicGL.createShader('ecgl.color'),\n            transparent: true,\n            depthMask: false\n          });\n          overlayMesh.__colorMaterial = overlayMesh.material;\n        } // overlay should be transparent if texture is not loaded yet.\n\n        overlayMesh.material.enableTexture('diffuseMap');\n        var distance = layerModel.get('distance'); // Based on distance of last layer\n\n        var radius = lastDistance + (distance == null ? coordSys.radius / 100 : distance);\n        overlayMesh.scale.set(radius, radius, radius);\n        lastDistance = radius; // FIXME Exists blink.\n\n        var blankTexture = this._blankTexture || (this._blankTexture = graphicGL.createBlankTexture('rgba(255, 255, 255, 0)'));\n        overlayMesh.material.set('diffuseMap', blankTexture);\n        graphicGL.loadTexture(layerModel.get('texture'), api, {\n          flipY: false,\n          anisotropic: 8\n        }, function (texture) {\n          if (texture.surface) {\n            texture.surface.attachToMesh(overlayMesh);\n          }\n          overlayMesh.material.set('diffuseMap', texture);\n          api.getZr().refresh();\n        });\n        layerModel.get('show') ? this.groupGL.add(overlayMesh) : this.groupGL.remove(overlayMesh);\n      }\n    }, this);\n    var earthMaterial = this._earthMesh.material;\n    earthMaterial.define('fragment', 'LAYER_DIFFUSEMAP_COUNT', layerDiffuseTextures.length);\n    earthMaterial.define('fragment', 'LAYER_EMISSIVEMAP_COUNT', layerEmissiveTextures.length);\n    earthMaterial.set('layerDiffuseMap', layerDiffuseTextures);\n    earthMaterial.set('layerDiffuseIntensity', layerDiffuseIntensity);\n    earthMaterial.set('layerEmissiveMap', layerEmissiveTextures);\n    earthMaterial.set('layerEmissionIntensity', layerEmissionIntensity);\n    var debugWireframeModel = globeModel.getModel('debug.wireframe');\n    if (debugWireframeModel.get('show')) {\n      earthMaterial.define('both', 'WIREFRAME_TRIANGLE');\n      var color = graphicGL.parseColor(debugWireframeModel.get('lineStyle.color') || 'rgba(0,0,0,0.5)');\n      var width = retrieve.firstNotNull(debugWireframeModel.get('lineStyle.width'), 1);\n      earthMaterial.set('wireframeLineWidth', width);\n      earthMaterial.set('wireframeLineColor', color);\n    } else {\n      earthMaterial.undefine('both', 'WIREFRAME_TRIANGLE');\n    }\n  },\n  _updateViewControl: function (globeModel, api) {\n    var coordSys = globeModel.coordinateSystem; // Update camera\n\n    var viewControlModel = globeModel.getModel('viewControl');\n    var camera = coordSys.viewGL.camera;\n    var self = this;\n    function makeAction() {\n      return {\n        type: 'globeChangeCamera',\n        alpha: control.getAlpha(),\n        beta: control.getBeta(),\n        distance: control.getDistance() - coordSys.radius,\n        center: control.getCenter(),\n        from: self.uid,\n        globeId: globeModel.id\n      };\n    } // Update control\n\n    var control = this._control;\n    control.setViewGL(coordSys.viewGL);\n    var coord = viewControlModel.get('targetCoord');\n    var alpha, beta;\n    if (coord != null) {\n      beta = coord[0] + 90;\n      alpha = coord[1];\n    }\n    control.setFromViewControlModel(viewControlModel, {\n      baseDistance: coordSys.radius,\n      alpha: alpha,\n      beta: beta\n    });\n    control.off('update');\n    control.on('update', function () {\n      api.dispatchAction(makeAction());\n    });\n  },\n  _displaceVertices: function (globeModel, api) {\n    var displacementQuality = globeModel.get('displacementQuality');\n    var showDebugWireframe = globeModel.get('debug.wireframe.show');\n    var globe = globeModel.coordinateSystem;\n    if (!globeModel.isDisplacementChanged() && displacementQuality === this._displacementQuality && showDebugWireframe === this._showDebugWireframe) {\n      return;\n    }\n    this._displacementQuality = displacementQuality;\n    this._showDebugWireframe = showDebugWireframe;\n    var geometry = this._sphereGeometry;\n    var widthSegments = {\n      low: 100,\n      medium: 200,\n      high: 400,\n      ultra: 800\n    }[displacementQuality] || 200;\n    var heightSegments = widthSegments / 2;\n    if (geometry.widthSegments !== widthSegments || showDebugWireframe) {\n      geometry.widthSegments = widthSegments;\n      geometry.heightSegments = heightSegments;\n      geometry.build();\n    }\n    this._doDisplaceVertices(geometry, globe);\n    if (showDebugWireframe) {\n      geometry.generateBarycentric();\n    }\n  },\n  _doDisplaceVertices: function (geometry, globe) {\n    var positionArr = geometry.attributes.position.value;\n    var uvArr = geometry.attributes.texcoord0.value;\n    var originalPositionArr = geometry.__originalPosition;\n    if (!originalPositionArr || originalPositionArr.length !== positionArr.length) {\n      originalPositionArr = new Float32Array(positionArr.length);\n      originalPositionArr.set(positionArr);\n      geometry.__originalPosition = originalPositionArr;\n    }\n    var width = globe.displacementWidth;\n    var height = globe.displacementHeight;\n    var data = globe.displacementData;\n    for (var i = 0; i < geometry.vertexCount; i++) {\n      var i3 = i * 3;\n      var i2 = i * 2;\n      var x = originalPositionArr[i3 + 1];\n      var y = originalPositionArr[i3 + 2];\n      var z = originalPositionArr[i3 + 3];\n      var u = uvArr[i2++];\n      var v = uvArr[i2++];\n      var j = Math.round(u * (width - 1));\n      var k = Math.round(v * (height - 1));\n      var idx = k * width + j;\n      var scale = data ? data[idx] : 0;\n      positionArr[i3 + 1] = x + x * scale;\n      positionArr[i3 + 2] = y + y * scale;\n      positionArr[i3 + 3] = z + z * scale;\n    }\n    geometry.generateVertexNormals();\n    geometry.dirty();\n    geometry.updateBoundingBox();\n  },\n  _updateLight: function (globeModel, api) {\n    var earthMesh = this._earthMesh;\n    this._sceneHelper.updateLight(globeModel);\n    var mainLight = this._sceneHelper.mainLight; // Put sun in the right position\n\n    var time = globeModel.get('light.main.time') || new Date(); // http://en.wikipedia.org/wiki/Azimuth\n\n    var pos = sunCalc.getPosition(echarts.number.parseDate(time), 0, 0);\n    var r0 = Math.cos(pos.altitude); // FIXME How to calculate the y ?\n\n    mainLight.position.y = -r0 * Math.cos(pos.azimuth);\n    mainLight.position.x = Math.sin(pos.altitude);\n    mainLight.position.z = r0 * Math.sin(pos.azimuth);\n    mainLight.lookAt(earthMesh.getWorldPosition());\n  },\n  dispose: function (ecModel, api) {\n    this.groupGL.removeAll();\n    this._control.dispose();\n  }\n});","map":{"version":3,"names":["echarts","graphicGL","OrbitControl","SceneHelper","sunCalc","retrieve","utilShaderCode","atmosphereShaderCode","Shader","ComponentView","extend","type","__ecgl__","_displacementScale","init","ecModel","api","groupGL","Node","_sphereGeometry","SphereGeometry","widthSegments","heightSegments","dynamic","_overlayGeometry","_planeGeometry","PlaneGeometry","_earthMesh","Mesh","renderNormal","_atmosphereMesh","_atmosphereGeometry","_atmosphereMaterial","Material","shader","source","transparent","geometry","material","frontFace","CW","_lightRoot","_sceneHelper","initLight","add","_control","zr","getZr","_layerMeshes","render","globeModel","coordSys","coordinateSystem","shading","get","viewGL","remove","setScene","scene","setPostEffect","getModel","setTemporalSuperSampling","earthMesh","shadingPrefix","name","createMaterial","setMaterialFromModel","forEach","texName","texture","flipY","set","parseColor","scale","radius","define","invisible","setUniforms","glowPower","glowColor","offset","undefine","diffuseTexture","setTextureImage","anisotropic","surface","attachToMesh","bumpTexture","_updateLight","_displaceVertices","_updateViewControl","_updateLayers","afterRender","layerGL","renderer","updateAmbientCubemap","updateSkybox","layers","lastDistance","layerDiffuseTextures","layerDiffuseIntensity","layerEmissiveTextures","layerEmissionIntensity","util","each","layerOption","layerModel","Model","layerType","loadTexture","blendTo","intensity","firstNotNull","push","id","overlayMesh","castShadow","ignorePicking","__lambertMaterial","autoUpdateTextureStatus","createShader","depthMask","__colorMaterial","enableTexture","distance","blankTexture","_blankTexture","createBlankTexture","refresh","earthMaterial","length","debugWireframeModel","color","width","viewControlModel","camera","self","makeAction","alpha","control","getAlpha","beta","getBeta","getDistance","center","getCenter","from","uid","globeId","setViewGL","coord","setFromViewControlModel","baseDistance","off","on","dispatchAction","displacementQuality","showDebugWireframe","globe","isDisplacementChanged","_displacementQuality","_showDebugWireframe","low","medium","high","ultra","build","_doDisplaceVertices","generateBarycentric","positionArr","attributes","position","value","uvArr","texcoord0","originalPositionArr","__originalPosition","Float32Array","displacementWidth","height","displacementHeight","data","displacementData","i","vertexCount","i3","i2","x","y","z","u","v","j","Math","round","k","idx","generateVertexNormals","dirty","updateBoundingBox","updateLight","mainLight","time","Date","pos","getPosition","number","parseDate","r0","cos","altitude","azimuth","sin","lookAt","getWorldPosition","dispose","removeAll"],"sources":["E:/QuestionairePlanet_Fronted/mytest/node_modules/echarts-gl/lib/component/globe/GlobeView.js"],"sourcesContent":["import * as echarts from 'echarts/lib/echarts';\nimport graphicGL from '../../util/graphicGL';\nimport OrbitControl from '../../util/OrbitControl';\nimport SceneHelper from '../common/SceneHelper';\nimport sunCalc from '../../util/sunCalc';\nimport retrieve from '../../util/retrieve';\nimport utilShaderCode from 'claygl/src/shader/source/util.glsl.js';\nimport atmosphereShaderCode from './atmosphere.glsl.js';\ngraphicGL.Shader['import'](utilShaderCode);\ngraphicGL.Shader['import'](atmosphereShaderCode);\nexport default echarts.ComponentView.extend({\n  type: 'globe',\n  __ecgl__: true,\n  _displacementScale: 0,\n  init: function (ecModel, api) {\n    this.groupGL = new graphicGL.Node();\n    /**\n     * @type {clay.geometry.Sphere}\n     * @private\n     */\n\n    this._sphereGeometry = new graphicGL.SphereGeometry({\n      widthSegments: 200,\n      heightSegments: 100,\n      dynamic: true\n    });\n    this._overlayGeometry = new graphicGL.SphereGeometry({\n      widthSegments: 80,\n      heightSegments: 40\n    });\n    /**\n     * @type {clay.geometry.Plane}\n     */\n\n    this._planeGeometry = new graphicGL.PlaneGeometry();\n    /**\n     * @type {clay.geometry.Mesh}\n     */\n\n    this._earthMesh = new graphicGL.Mesh({\n      renderNormal: true\n    });\n    /**\n     * @type {clay.geometry.Mesh}\n     */\n\n    this._atmosphereMesh = new graphicGL.Mesh();\n    this._atmosphereGeometry = new graphicGL.SphereGeometry({\n      widthSegments: 80,\n      heightSegments: 40\n    });\n    this._atmosphereMaterial = new graphicGL.Material({\n      shader: new graphicGL.Shader(graphicGL.Shader.source('ecgl.atmosphere.vertex'), graphicGL.Shader.source('ecgl.atmosphere.fragment')),\n      transparent: true\n    });\n    this._atmosphereMesh.geometry = this._atmosphereGeometry;\n    this._atmosphereMesh.material = this._atmosphereMaterial;\n    this._atmosphereMesh.frontFace = graphicGL.Mesh.CW;\n    this._lightRoot = new graphicGL.Node();\n    this._sceneHelper = new SceneHelper();\n\n    this._sceneHelper.initLight(this._lightRoot);\n\n    this.groupGL.add(this._atmosphereMesh);\n    this.groupGL.add(this._earthMesh);\n    this._control = new OrbitControl({\n      zr: api.getZr()\n    });\n\n    this._control.init();\n\n    this._layerMeshes = {};\n  },\n  render: function (globeModel, ecModel, api) {\n    var coordSys = globeModel.coordinateSystem;\n    var shading = globeModel.get('shading'); // Always have light.\n\n    coordSys.viewGL.add(this._lightRoot);\n\n    if (globeModel.get('show')) {\n      // Add self to scene;\n      coordSys.viewGL.add(this.groupGL);\n    } else {\n      coordSys.viewGL.remove(this.groupGL);\n    }\n\n    this._sceneHelper.setScene(coordSys.viewGL.scene); // Set post effect\n\n\n    coordSys.viewGL.setPostEffect(globeModel.getModel('postEffect'), api);\n    coordSys.viewGL.setTemporalSuperSampling(globeModel.getModel('temporalSuperSampling'));\n    var earthMesh = this._earthMesh;\n    earthMesh.geometry = this._sphereGeometry;\n    var shadingPrefix = 'ecgl.' + shading;\n\n    if (!earthMesh.material || earthMesh.material.shader.name !== shadingPrefix) {\n      earthMesh.material = graphicGL.createMaterial(shadingPrefix);\n    }\n\n    graphicGL.setMaterialFromModel(shading, earthMesh.material, globeModel, api);\n    ['roughnessMap', 'metalnessMap', 'detailMap', 'normalMap'].forEach(function (texName) {\n      var texture = earthMesh.material.get(texName);\n\n      if (texture) {\n        texture.flipY = false;\n      }\n    });\n    earthMesh.material.set('color', graphicGL.parseColor(globeModel.get('baseColor'))); // shrink a little\n\n    var scale = coordSys.radius * 0.99;\n    earthMesh.scale.set(scale, scale, scale);\n\n    if (globeModel.get('atmosphere.show')) {\n      earthMesh.material.define('both', 'ATMOSPHERE_ENABLED');\n      this._atmosphereMesh.invisible = false;\n\n      this._atmosphereMaterial.setUniforms({\n        glowPower: globeModel.get('atmosphere.glowPower') || 6.0,\n        glowColor: globeModel.get('atmosphere.color') || '#ffffff'\n      });\n\n      earthMesh.material.setUniforms({\n        glowPower: globeModel.get('atmosphere.innerGlowPower') || 2.0,\n        glowColor: globeModel.get('atmosphere.color') || '#ffffff'\n      });\n      var offset = globeModel.get('atmosphere.offset') || 5;\n\n      this._atmosphereMesh.scale.set(scale + offset, scale + offset, scale + offset);\n    } else {\n      earthMesh.material.undefine('both', 'ATMOSPHERE_ENABLED');\n      this._atmosphereMesh.invisible = true;\n    }\n\n    var diffuseTexture = earthMesh.material.setTextureImage('diffuseMap', globeModel.get('baseTexture'), api, {\n      flipY: false,\n      anisotropic: 8\n    });\n\n    if (diffuseTexture && diffuseTexture.surface) {\n      diffuseTexture.surface.attachToMesh(earthMesh);\n    } // Update bump map\n\n\n    var bumpTexture = earthMesh.material.setTextureImage('bumpMap', globeModel.get('heightTexture'), api, {\n      flipY: false,\n      anisotropic: 8\n    });\n\n    if (bumpTexture && bumpTexture.surface) {\n      bumpTexture.surface.attachToMesh(earthMesh);\n    }\n\n    earthMesh.material[globeModel.get('postEffect.enable') ? 'define' : 'undefine']('fragment', 'SRGB_DECODE');\n\n    this._updateLight(globeModel, api);\n\n    this._displaceVertices(globeModel, api);\n\n    this._updateViewControl(globeModel, api);\n\n    this._updateLayers(globeModel, api);\n  },\n  afterRender: function (globeModel, ecModel, api, layerGL) {\n    // Create ambient cubemap after render because we need to know the renderer.\n    // TODO\n    var renderer = layerGL.renderer;\n\n    this._sceneHelper.updateAmbientCubemap(renderer, globeModel, api);\n\n    this._sceneHelper.updateSkybox(renderer, globeModel, api);\n  },\n  _updateLayers: function (globeModel, api) {\n    var coordSys = globeModel.coordinateSystem;\n    var layers = globeModel.get('layers');\n    var lastDistance = coordSys.radius;\n    var layerDiffuseTextures = [];\n    var layerDiffuseIntensity = [];\n    var layerEmissiveTextures = [];\n    var layerEmissionIntensity = [];\n    echarts.util.each(layers, function (layerOption) {\n      var layerModel = new echarts.Model(layerOption);\n      var layerType = layerModel.get('type');\n      var texture = graphicGL.loadTexture(layerModel.get('texture'), api, {\n        flipY: false,\n        anisotropic: 8\n      });\n\n      if (texture.surface) {\n        texture.surface.attachToMesh(this._earthMesh);\n      }\n\n      if (layerType === 'blend') {\n        var blendTo = layerModel.get('blendTo');\n        var intensity = retrieve.firstNotNull(layerModel.get('intensity'), 1.0);\n\n        if (blendTo === 'emission') {\n          layerEmissiveTextures.push(texture);\n          layerEmissionIntensity.push(intensity);\n        } else {\n          // Default is albedo\n          layerDiffuseTextures.push(texture);\n          layerDiffuseIntensity.push(intensity);\n        }\n      } else {\n        // Default use overlay\n        var id = layerModel.get('id');\n        var overlayMesh = this._layerMeshes[id];\n\n        if (!overlayMesh) {\n          overlayMesh = this._layerMeshes[id] = new graphicGL.Mesh({\n            geometry: this._overlayGeometry,\n            castShadow: false,\n            ignorePicking: true\n          });\n        }\n\n        var shading = layerModel.get('shading');\n\n        if (shading === 'lambert') {\n          overlayMesh.material = overlayMesh.__lambertMaterial || new graphicGL.Material({\n            autoUpdateTextureStatus: false,\n            shader: graphicGL.createShader('ecgl.lambert'),\n            transparent: true,\n            depthMask: false\n          });\n          overlayMesh.__lambertMaterial = overlayMesh.material;\n        } else {\n          // color\n          overlayMesh.material = overlayMesh.__colorMaterial || new graphicGL.Material({\n            autoUpdateTextureStatus: false,\n            shader: graphicGL.createShader('ecgl.color'),\n            transparent: true,\n            depthMask: false\n          });\n          overlayMesh.__colorMaterial = overlayMesh.material;\n        } // overlay should be transparent if texture is not loaded yet.\n\n\n        overlayMesh.material.enableTexture('diffuseMap');\n        var distance = layerModel.get('distance'); // Based on distance of last layer\n\n        var radius = lastDistance + (distance == null ? coordSys.radius / 100 : distance);\n        overlayMesh.scale.set(radius, radius, radius);\n        lastDistance = radius; // FIXME Exists blink.\n\n        var blankTexture = this._blankTexture || (this._blankTexture = graphicGL.createBlankTexture('rgba(255, 255, 255, 0)'));\n        overlayMesh.material.set('diffuseMap', blankTexture);\n        graphicGL.loadTexture(layerModel.get('texture'), api, {\n          flipY: false,\n          anisotropic: 8\n        }, function (texture) {\n          if (texture.surface) {\n            texture.surface.attachToMesh(overlayMesh);\n          }\n\n          overlayMesh.material.set('diffuseMap', texture);\n          api.getZr().refresh();\n        });\n        layerModel.get('show') ? this.groupGL.add(overlayMesh) : this.groupGL.remove(overlayMesh);\n      }\n    }, this);\n    var earthMaterial = this._earthMesh.material;\n    earthMaterial.define('fragment', 'LAYER_DIFFUSEMAP_COUNT', layerDiffuseTextures.length);\n    earthMaterial.define('fragment', 'LAYER_EMISSIVEMAP_COUNT', layerEmissiveTextures.length);\n    earthMaterial.set('layerDiffuseMap', layerDiffuseTextures);\n    earthMaterial.set('layerDiffuseIntensity', layerDiffuseIntensity);\n    earthMaterial.set('layerEmissiveMap', layerEmissiveTextures);\n    earthMaterial.set('layerEmissionIntensity', layerEmissionIntensity);\n    var debugWireframeModel = globeModel.getModel('debug.wireframe');\n\n    if (debugWireframeModel.get('show')) {\n      earthMaterial.define('both', 'WIREFRAME_TRIANGLE');\n      var color = graphicGL.parseColor(debugWireframeModel.get('lineStyle.color') || 'rgba(0,0,0,0.5)');\n      var width = retrieve.firstNotNull(debugWireframeModel.get('lineStyle.width'), 1);\n      earthMaterial.set('wireframeLineWidth', width);\n      earthMaterial.set('wireframeLineColor', color);\n    } else {\n      earthMaterial.undefine('both', 'WIREFRAME_TRIANGLE');\n    }\n  },\n  _updateViewControl: function (globeModel, api) {\n    var coordSys = globeModel.coordinateSystem; // Update camera\n\n    var viewControlModel = globeModel.getModel('viewControl');\n    var camera = coordSys.viewGL.camera;\n    var self = this;\n\n    function makeAction() {\n      return {\n        type: 'globeChangeCamera',\n        alpha: control.getAlpha(),\n        beta: control.getBeta(),\n        distance: control.getDistance() - coordSys.radius,\n        center: control.getCenter(),\n        from: self.uid,\n        globeId: globeModel.id\n      };\n    } // Update control\n\n\n    var control = this._control;\n    control.setViewGL(coordSys.viewGL);\n    var coord = viewControlModel.get('targetCoord');\n    var alpha, beta;\n\n    if (coord != null) {\n      beta = coord[0] + 90;\n      alpha = coord[1];\n    }\n\n    control.setFromViewControlModel(viewControlModel, {\n      baseDistance: coordSys.radius,\n      alpha: alpha,\n      beta: beta\n    });\n    control.off('update');\n    control.on('update', function () {\n      api.dispatchAction(makeAction());\n    });\n  },\n  _displaceVertices: function (globeModel, api) {\n    var displacementQuality = globeModel.get('displacementQuality');\n    var showDebugWireframe = globeModel.get('debug.wireframe.show');\n    var globe = globeModel.coordinateSystem;\n\n    if (!globeModel.isDisplacementChanged() && displacementQuality === this._displacementQuality && showDebugWireframe === this._showDebugWireframe) {\n      return;\n    }\n\n    this._displacementQuality = displacementQuality;\n    this._showDebugWireframe = showDebugWireframe;\n    var geometry = this._sphereGeometry;\n    var widthSegments = {\n      low: 100,\n      medium: 200,\n      high: 400,\n      ultra: 800\n    }[displacementQuality] || 200;\n    var heightSegments = widthSegments / 2;\n\n    if (geometry.widthSegments !== widthSegments || showDebugWireframe) {\n      geometry.widthSegments = widthSegments;\n      geometry.heightSegments = heightSegments;\n      geometry.build();\n    }\n\n    this._doDisplaceVertices(geometry, globe);\n\n    if (showDebugWireframe) {\n      geometry.generateBarycentric();\n    }\n  },\n  _doDisplaceVertices: function (geometry, globe) {\n    var positionArr = geometry.attributes.position.value;\n    var uvArr = geometry.attributes.texcoord0.value;\n    var originalPositionArr = geometry.__originalPosition;\n\n    if (!originalPositionArr || originalPositionArr.length !== positionArr.length) {\n      originalPositionArr = new Float32Array(positionArr.length);\n      originalPositionArr.set(positionArr);\n      geometry.__originalPosition = originalPositionArr;\n    }\n\n    var width = globe.displacementWidth;\n    var height = globe.displacementHeight;\n    var data = globe.displacementData;\n\n    for (var i = 0; i < geometry.vertexCount; i++) {\n      var i3 = i * 3;\n      var i2 = i * 2;\n      var x = originalPositionArr[i3 + 1];\n      var y = originalPositionArr[i3 + 2];\n      var z = originalPositionArr[i3 + 3];\n      var u = uvArr[i2++];\n      var v = uvArr[i2++];\n      var j = Math.round(u * (width - 1));\n      var k = Math.round(v * (height - 1));\n      var idx = k * width + j;\n      var scale = data ? data[idx] : 0;\n      positionArr[i3 + 1] = x + x * scale;\n      positionArr[i3 + 2] = y + y * scale;\n      positionArr[i3 + 3] = z + z * scale;\n    }\n\n    geometry.generateVertexNormals();\n    geometry.dirty();\n    geometry.updateBoundingBox();\n  },\n  _updateLight: function (globeModel, api) {\n    var earthMesh = this._earthMesh;\n\n    this._sceneHelper.updateLight(globeModel);\n\n    var mainLight = this._sceneHelper.mainLight; // Put sun in the right position\n\n    var time = globeModel.get('light.main.time') || new Date(); // http://en.wikipedia.org/wiki/Azimuth\n\n    var pos = sunCalc.getPosition(echarts.number.parseDate(time), 0, 0);\n    var r0 = Math.cos(pos.altitude); // FIXME How to calculate the y ?\n\n    mainLight.position.y = -r0 * Math.cos(pos.azimuth);\n    mainLight.position.x = Math.sin(pos.altitude);\n    mainLight.position.z = r0 * Math.sin(pos.azimuth);\n    mainLight.lookAt(earthMesh.getWorldPosition());\n  },\n  dispose: function (ecModel, api) {\n    this.groupGL.removeAll();\n\n    this._control.dispose();\n  }\n});"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}