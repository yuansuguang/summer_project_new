{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nfunction swap(arr, a, b) {\n  var tmp = arr[a];\n  arr[a] = arr[b];\n  arr[b] = tmp;\n}\nfunction partition(arr, pivot, left, right, compare) {\n  var storeIndex = left;\n  var pivotValue = arr[pivot]; // put the pivot on the right\n\n  swap(arr, pivot, right); // go through the rest\n\n  for (var v = left; v < right; v++) {\n    if (compare(arr[v], pivotValue) < 0) {\n      swap(arr, v, storeIndex);\n      storeIndex++;\n    }\n  } // finally put the pivot in the correct place\n\n  swap(arr, right, storeIndex);\n  return storeIndex;\n}\nfunction quickSort(array, compare, left, right) {\n  if (left < right) {\n    var pivot = Math.floor((left + right) / 2);\n    var newPivot = partition(array, pivot, left, right, compare);\n    quickSort(array, compare, left, newPivot - 1);\n    quickSort(array, compare, newPivot + 1, right);\n  }\n} // TODO Test.\n\nfunction ProgressiveQuickSort() {\n  // this._pivotList = new LinkedList();\n  this._parts = [];\n}\nProgressiveQuickSort.prototype.step = function (arr, compare, frame) {\n  var len = arr.length;\n  if (frame === 0) {\n    this._parts = [];\n    this._sorted = false; // Pick a start pivot;\n\n    var pivot = Math.floor(len / 2);\n    this._parts.push({\n      pivot: pivot,\n      left: 0,\n      right: len - 1\n    });\n    this._currentSortPartIdx = 0;\n  }\n  if (this._sorted) {\n    return;\n  }\n  var parts = this._parts;\n  if (parts.length === 0) {\n    this._sorted = true; // Already finished.\n\n    return true;\n  } else if (parts.length < 512) {\n    // Sort large parts in about 10 frames.\n    for (var i = 0; i < parts.length; i++) {\n      // Partition and Modify the pivot index.\n      parts[i].pivot = partition(arr, parts[i].pivot, parts[i].left, parts[i].right, compare);\n    }\n    var subdividedParts = [];\n    for (var i = 0; i < parts.length; i++) {\n      // Subdivide left\n      var left = parts[i].left;\n      var right = parts[i].pivot - 1;\n      if (right > left) {\n        subdividedParts.push({\n          pivot: Math.floor((right + left) / 2),\n          left: left,\n          right: right\n        });\n      } // Subdivide right\n\n      var left = parts[i].pivot + 1;\n      var right = parts[i].right;\n      if (right > left) {\n        subdividedParts.push({\n          pivot: Math.floor((right + left) / 2),\n          left: left,\n          right: right\n        });\n      }\n    }\n    parts = this._parts = subdividedParts;\n  } else {\n    // console.time('sort');\n    // Finally quick sort each parts in 10 frames.\n    for (var i = 0; i < Math.floor(parts.length / 10); i++) {\n      // Sort near parts first.\n      var idx = parts.length - 1 - this._currentSortPartIdx;\n      quickSort(arr, compare, parts[idx].left, parts[idx].right);\n      this._currentSortPartIdx++; // Finish sort\n\n      if (this._currentSortPartIdx === parts.length) {\n        this._sorted = true;\n        return true;\n      }\n    } // console.timeEnd('sort');\n  }\n  return false;\n};\nProgressiveQuickSort.sort = quickSort;\nexport default ProgressiveQuickSort;","map":{"version":3,"names":["swap","arr","a","b","tmp","partition","pivot","left","right","compare","storeIndex","pivotValue","v","quickSort","array","Math","floor","newPivot","ProgressiveQuickSort","_parts","prototype","step","frame","len","length","_sorted","push","_currentSortPartIdx","parts","i","subdividedParts","idx","sort"],"sources":["E:/QuestionairePlanet_Fronted/mytest/node_modules/echarts-gl/lib/util/ProgressiveQuickSort.js"],"sourcesContent":["function swap(arr, a, b) {\n  var tmp = arr[a];\n  arr[a] = arr[b];\n  arr[b] = tmp;\n}\n\nfunction partition(arr, pivot, left, right, compare) {\n  var storeIndex = left;\n  var pivotValue = arr[pivot]; // put the pivot on the right\n\n  swap(arr, pivot, right); // go through the rest\n\n  for (var v = left; v < right; v++) {\n    if (compare(arr[v], pivotValue) < 0) {\n      swap(arr, v, storeIndex);\n      storeIndex++;\n    }\n  } // finally put the pivot in the correct place\n\n\n  swap(arr, right, storeIndex);\n  return storeIndex;\n}\n\nfunction quickSort(array, compare, left, right) {\n  if (left < right) {\n    var pivot = Math.floor((left + right) / 2);\n    var newPivot = partition(array, pivot, left, right, compare);\n    quickSort(array, compare, left, newPivot - 1);\n    quickSort(array, compare, newPivot + 1, right);\n  }\n} // TODO Test.\n\n\nfunction ProgressiveQuickSort() {\n  // this._pivotList = new LinkedList();\n  this._parts = [];\n}\n\nProgressiveQuickSort.prototype.step = function (arr, compare, frame) {\n  var len = arr.length;\n\n  if (frame === 0) {\n    this._parts = [];\n    this._sorted = false; // Pick a start pivot;\n\n    var pivot = Math.floor(len / 2);\n\n    this._parts.push({\n      pivot: pivot,\n      left: 0,\n      right: len - 1\n    });\n\n    this._currentSortPartIdx = 0;\n  }\n\n  if (this._sorted) {\n    return;\n  }\n\n  var parts = this._parts;\n\n  if (parts.length === 0) {\n    this._sorted = true; // Already finished.\n\n    return true;\n  } else if (parts.length < 512) {\n    // Sort large parts in about 10 frames.\n    for (var i = 0; i < parts.length; i++) {\n      // Partition and Modify the pivot index.\n      parts[i].pivot = partition(arr, parts[i].pivot, parts[i].left, parts[i].right, compare);\n    }\n\n    var subdividedParts = [];\n\n    for (var i = 0; i < parts.length; i++) {\n      // Subdivide left\n      var left = parts[i].left;\n      var right = parts[i].pivot - 1;\n\n      if (right > left) {\n        subdividedParts.push({\n          pivot: Math.floor((right + left) / 2),\n          left: left,\n          right: right\n        });\n      } // Subdivide right\n\n\n      var left = parts[i].pivot + 1;\n      var right = parts[i].right;\n\n      if (right > left) {\n        subdividedParts.push({\n          pivot: Math.floor((right + left) / 2),\n          left: left,\n          right: right\n        });\n      }\n    }\n\n    parts = this._parts = subdividedParts;\n  } else {\n    // console.time('sort');\n    // Finally quick sort each parts in 10 frames.\n    for (var i = 0; i < Math.floor(parts.length / 10); i++) {\n      // Sort near parts first.\n      var idx = parts.length - 1 - this._currentSortPartIdx;\n      quickSort(arr, compare, parts[idx].left, parts[idx].right);\n      this._currentSortPartIdx++; // Finish sort\n\n      if (this._currentSortPartIdx === parts.length) {\n        this._sorted = true;\n        return true;\n      }\n    } // console.timeEnd('sort');\n\n  }\n\n  return false;\n};\n\nProgressiveQuickSort.sort = quickSort;\nexport default ProgressiveQuickSort;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}