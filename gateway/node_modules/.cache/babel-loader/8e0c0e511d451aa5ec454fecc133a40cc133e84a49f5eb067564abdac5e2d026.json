{"ast":null,"code":"import vec3 from '../glmatrix/vec3';\n\n/**\n * @constructor\n * @alias clay.Vector3\n * @param {number} x\n * @param {number} y\n * @param {number} z\n */\nvar Vector3 = function (x, y, z) {\n  x = x || 0;\n  y = y || 0;\n  z = z || 0;\n\n  /**\n   * Storage of Vector3, read and write of x, y, z will change the values in array\n   * All methods also operate on the array instead of x, y, z components\n   * @name array\n   * @type {Float32Array}\n   * @memberOf clay.Vector3#\n   */\n  this.array = vec3.fromValues(x, y, z);\n\n  /**\n   * Dirty flag is used by the Node to determine\n   * if the matrix is updated to latest\n   * @name _dirty\n   * @type {boolean}\n   * @memberOf clay.Vector3#\n   */\n  this._dirty = true;\n};\nVector3.prototype = {\n  constructor: Vector3,\n  /**\n   * Add b to self\n   * @param  {clay.Vector3} b\n   * @return {clay.Vector3}\n   */\n  add: function (b) {\n    vec3.add(this.array, this.array, b.array);\n    this._dirty = true;\n    return this;\n  },\n  /**\n   * Set x, y and z components\n   * @param  {number}  x\n   * @param  {number}  y\n   * @param  {number}  z\n   * @return {clay.Vector3}\n   */\n  set: function (x, y, z) {\n    this.array[0] = x;\n    this.array[1] = y;\n    this.array[2] = z;\n    this._dirty = true;\n    return this;\n  },\n  /**\n   * Set x, y and z components from array\n   * @param  {Float32Array|number[]} arr\n   * @return {clay.Vector3}\n   */\n  setArray: function (arr) {\n    this.array[0] = arr[0];\n    this.array[1] = arr[1];\n    this.array[2] = arr[2];\n    this._dirty = true;\n    return this;\n  },\n  /**\n   * Clone a new Vector3\n   * @return {clay.Vector3}\n   */\n  clone: function () {\n    return new Vector3(this.x, this.y, this.z);\n  },\n  /**\n   * Copy from b\n   * @param  {clay.Vector3} b\n   * @return {clay.Vector3}\n   */\n  copy: function (b) {\n    vec3.copy(this.array, b.array);\n    this._dirty = true;\n    return this;\n  },\n  /**\n   * Cross product of self and b, written to a Vector3 out\n   * @param  {clay.Vector3} a\n   * @param  {clay.Vector3} b\n   * @return {clay.Vector3}\n   */\n  cross: function (a, b) {\n    vec3.cross(this.array, a.array, b.array);\n    this._dirty = true;\n    return this;\n  },\n  /**\n   * Alias for distance\n   * @param  {clay.Vector3} b\n   * @return {number}\n   */\n  dist: function (b) {\n    return vec3.dist(this.array, b.array);\n  },\n  /**\n   * Distance between self and b\n   * @param  {clay.Vector3} b\n   * @return {number}\n   */\n  distance: function (b) {\n    return vec3.distance(this.array, b.array);\n  },\n  /**\n   * Alias for divide\n   * @param  {clay.Vector3} b\n   * @return {clay.Vector3}\n   */\n  div: function (b) {\n    vec3.div(this.array, this.array, b.array);\n    this._dirty = true;\n    return this;\n  },\n  /**\n   * Divide self by b\n   * @param  {clay.Vector3} b\n   * @return {clay.Vector3}\n   */\n  divide: function (b) {\n    vec3.divide(this.array, this.array, b.array);\n    this._dirty = true;\n    return this;\n  },\n  /**\n   * Dot product of self and b\n   * @param  {clay.Vector3} b\n   * @return {number}\n   */\n  dot: function (b) {\n    return vec3.dot(this.array, b.array);\n  },\n  /**\n   * Alias of length\n   * @return {number}\n   */\n  len: function () {\n    return vec3.len(this.array);\n  },\n  /**\n   * Calculate the length\n   * @return {number}\n   */\n  length: function () {\n    return vec3.length(this.array);\n  },\n  /**\n   * Linear interpolation between a and b\n   * @param  {clay.Vector3} a\n   * @param  {clay.Vector3} b\n   * @param  {number}  t\n   * @return {clay.Vector3}\n   */\n  lerp: function (a, b, t) {\n    vec3.lerp(this.array, a.array, b.array, t);\n    this._dirty = true;\n    return this;\n  },\n  /**\n   * Minimum of self and b\n   * @param  {clay.Vector3} b\n   * @return {clay.Vector3}\n   */\n  min: function (b) {\n    vec3.min(this.array, this.array, b.array);\n    this._dirty = true;\n    return this;\n  },\n  /**\n   * Maximum of self and b\n   * @param  {clay.Vector3} b\n   * @return {clay.Vector3}\n   */\n  max: function (b) {\n    vec3.max(this.array, this.array, b.array);\n    this._dirty = true;\n    return this;\n  },\n  /**\n   * Alias for multiply\n   * @param  {clay.Vector3} b\n   * @return {clay.Vector3}\n   */\n  mul: function (b) {\n    vec3.mul(this.array, this.array, b.array);\n    this._dirty = true;\n    return this;\n  },\n  /**\n   * Mutiply self and b\n   * @param  {clay.Vector3} b\n   * @return {clay.Vector3}\n   */\n  multiply: function (b) {\n    vec3.multiply(this.array, this.array, b.array);\n    this._dirty = true;\n    return this;\n  },\n  /**\n   * Negate self\n   * @return {clay.Vector3}\n   */\n  negate: function () {\n    vec3.negate(this.array, this.array);\n    this._dirty = true;\n    return this;\n  },\n  /**\n   * Normalize self\n   * @return {clay.Vector3}\n   */\n  normalize: function () {\n    vec3.normalize(this.array, this.array);\n    this._dirty = true;\n    return this;\n  },\n  /**\n   * Generate random x, y, z components with a given scale\n   * @param  {number} scale\n   * @return {clay.Vector3}\n   */\n  random: function (scale) {\n    vec3.random(this.array, scale);\n    this._dirty = true;\n    return this;\n  },\n  /**\n   * Scale self\n   * @param  {number}  scale\n   * @return {clay.Vector3}\n   */\n  scale: function (s) {\n    vec3.scale(this.array, this.array, s);\n    this._dirty = true;\n    return this;\n  },\n  /**\n   * Scale b and add to self\n   * @param  {clay.Vector3} b\n   * @param  {number}  scale\n   * @return {clay.Vector3}\n   */\n  scaleAndAdd: function (b, s) {\n    vec3.scaleAndAdd(this.array, this.array, b.array, s);\n    this._dirty = true;\n    return this;\n  },\n  /**\n   * Alias for squaredDistance\n   * @param  {clay.Vector3} b\n   * @return {number}\n   */\n  sqrDist: function (b) {\n    return vec3.sqrDist(this.array, b.array);\n  },\n  /**\n   * Squared distance between self and b\n   * @param  {clay.Vector3} b\n   * @return {number}\n   */\n  squaredDistance: function (b) {\n    return vec3.squaredDistance(this.array, b.array);\n  },\n  /**\n   * Alias for squaredLength\n   * @return {number}\n   */\n  sqrLen: function () {\n    return vec3.sqrLen(this.array);\n  },\n  /**\n   * Squared length of self\n   * @return {number}\n   */\n  squaredLength: function () {\n    return vec3.squaredLength(this.array);\n  },\n  /**\n   * Alias for subtract\n   * @param  {clay.Vector3} b\n   * @return {clay.Vector3}\n   */\n  sub: function (b) {\n    vec3.sub(this.array, this.array, b.array);\n    this._dirty = true;\n    return this;\n  },\n  /**\n   * Subtract b from self\n   * @param  {clay.Vector3} b\n   * @return {clay.Vector3}\n   */\n  subtract: function (b) {\n    vec3.subtract(this.array, this.array, b.array);\n    this._dirty = true;\n    return this;\n  },\n  /**\n   * Transform self with a Matrix3 m\n   * @param  {clay.Matrix3} m\n   * @return {clay.Vector3}\n   */\n  transformMat3: function (m) {\n    vec3.transformMat3(this.array, this.array, m.array);\n    this._dirty = true;\n    return this;\n  },\n  /**\n   * Transform self with a Matrix4 m\n   * @param  {clay.Matrix4} m\n   * @return {clay.Vector3}\n   */\n  transformMat4: function (m) {\n    vec3.transformMat4(this.array, this.array, m.array);\n    this._dirty = true;\n    return this;\n  },\n  /**\n   * Transform self with a Quaternion q\n   * @param  {clay.Quaternion} q\n   * @return {clay.Vector3}\n   */\n  transformQuat: function (q) {\n    vec3.transformQuat(this.array, this.array, q.array);\n    this._dirty = true;\n    return this;\n  },\n  /**\n   * Trasnform self into projection space with m\n   * @param  {clay.Matrix4} m\n   * @return {clay.Vector3}\n   */\n  applyProjection: function (m) {\n    var v = this.array;\n    m = m.array;\n\n    // Perspective projection\n    if (m[15] === 0) {\n      var w = -1 / v[2];\n      v[0] = m[0] * v[0] * w;\n      v[1] = m[5] * v[1] * w;\n      v[2] = (m[10] * v[2] + m[14]) * w;\n    } else {\n      v[0] = m[0] * v[0] + m[12];\n      v[1] = m[5] * v[1] + m[13];\n      v[2] = m[10] * v[2] + m[14];\n    }\n    this._dirty = true;\n    return this;\n  },\n  eulerFromQuat: function (q, order) {\n    Vector3.eulerFromQuat(this, q, order);\n  },\n  eulerFromMat3: function (m, order) {\n    Vector3.eulerFromMat3(this, m, order);\n  },\n  toString: function () {\n    return '[' + Array.prototype.join.call(this.array, ',') + ']';\n  },\n  toArray: function () {\n    return Array.prototype.slice.call(this.array);\n  }\n};\nvar defineProperty = Object.defineProperty;\n// Getter and Setter\nif (defineProperty) {\n  var proto = Vector3.prototype;\n  /**\n   * @name x\n   * @type {number}\n   * @memberOf clay.Vector3\n   * @instance\n   */\n  defineProperty(proto, 'x', {\n    get: function () {\n      return this.array[0];\n    },\n    set: function (value) {\n      this.array[0] = value;\n      this._dirty = true;\n    }\n  });\n\n  /**\n   * @name y\n   * @type {number}\n   * @memberOf clay.Vector3\n   * @instance\n   */\n  defineProperty(proto, 'y', {\n    get: function () {\n      return this.array[1];\n    },\n    set: function (value) {\n      this.array[1] = value;\n      this._dirty = true;\n    }\n  });\n\n  /**\n   * @name z\n   * @type {number}\n   * @memberOf clay.Vector3\n   * @instance\n   */\n  defineProperty(proto, 'z', {\n    get: function () {\n      return this.array[2];\n    },\n    set: function (value) {\n      this.array[2] = value;\n      this._dirty = true;\n    }\n  });\n}\n\n// Supply methods that are not in place\n\n/**\n * @param  {clay.Vector3} out\n * @param  {clay.Vector3} a\n * @param  {clay.Vector3} b\n * @return {clay.Vector3}\n */\nVector3.add = function (out, a, b) {\n  vec3.add(out.array, a.array, b.array);\n  out._dirty = true;\n  return out;\n};\n\n/**\n * @param  {clay.Vector3} out\n * @param  {number}  x\n * @param  {number}  y\n * @param  {number}  z\n * @return {clay.Vector3}\n */\nVector3.set = function (out, x, y, z) {\n  vec3.set(out.array, x, y, z);\n  out._dirty = true;\n};\n\n/**\n * @param  {clay.Vector3} out\n * @param  {clay.Vector3} b\n * @return {clay.Vector3}\n */\nVector3.copy = function (out, b) {\n  vec3.copy(out.array, b.array);\n  out._dirty = true;\n  return out;\n};\n\n/**\n * @param  {clay.Vector3} out\n * @param  {clay.Vector3} a\n * @param  {clay.Vector3} b\n * @return {clay.Vector3}\n */\nVector3.cross = function (out, a, b) {\n  vec3.cross(out.array, a.array, b.array);\n  out._dirty = true;\n  return out;\n};\n\n/**\n * @param  {clay.Vector3} a\n * @param  {clay.Vector3} b\n * @return {number}\n */\nVector3.dist = function (a, b) {\n  return vec3.distance(a.array, b.array);\n};\n\n/**\n * @function\n * @param  {clay.Vector3} a\n * @param  {clay.Vector3} b\n * @return {number}\n */\nVector3.distance = Vector3.dist;\n\n/**\n * @param  {clay.Vector3} out\n * @param  {clay.Vector3} a\n * @param  {clay.Vector3} b\n * @return {clay.Vector3}\n */\nVector3.div = function (out, a, b) {\n  vec3.divide(out.array, a.array, b.array);\n  out._dirty = true;\n  return out;\n};\n\n/**\n * @function\n * @param  {clay.Vector3} out\n * @param  {clay.Vector3} a\n * @param  {clay.Vector3} b\n * @return {clay.Vector3}\n */\nVector3.divide = Vector3.div;\n\n/**\n * @param  {clay.Vector3} a\n * @param  {clay.Vector3} b\n * @return {number}\n */\nVector3.dot = function (a, b) {\n  return vec3.dot(a.array, b.array);\n};\n\n/**\n * @param  {clay.Vector3} a\n * @return {number}\n */\nVector3.len = function (b) {\n  return vec3.length(b.array);\n};\n\n// Vector3.length = Vector3.len;\n\n/**\n * @param  {clay.Vector3} out\n * @param  {clay.Vector3} a\n * @param  {clay.Vector3} b\n * @param  {number}  t\n * @return {clay.Vector3}\n */\nVector3.lerp = function (out, a, b, t) {\n  vec3.lerp(out.array, a.array, b.array, t);\n  out._dirty = true;\n  return out;\n};\n/**\n * @param  {clay.Vector3} out\n * @param  {clay.Vector3} a\n * @param  {clay.Vector3} b\n * @return {clay.Vector3}\n */\nVector3.min = function (out, a, b) {\n  vec3.min(out.array, a.array, b.array);\n  out._dirty = true;\n  return out;\n};\n\n/**\n * @param  {clay.Vector3} out\n * @param  {clay.Vector3} a\n * @param  {clay.Vector3} b\n * @return {clay.Vector3}\n */\nVector3.max = function (out, a, b) {\n  vec3.max(out.array, a.array, b.array);\n  out._dirty = true;\n  return out;\n};\n/**\n * @param  {clay.Vector3} out\n * @param  {clay.Vector3} a\n * @param  {clay.Vector3} b\n * @return {clay.Vector3}\n */\nVector3.mul = function (out, a, b) {\n  vec3.multiply(out.array, a.array, b.array);\n  out._dirty = true;\n  return out;\n};\n/**\n * @function\n * @param  {clay.Vector3} out\n * @param  {clay.Vector3} a\n * @param  {clay.Vector3} b\n * @return {clay.Vector3}\n */\nVector3.multiply = Vector3.mul;\n/**\n * @param  {clay.Vector3} out\n * @param  {clay.Vector3} a\n * @return {clay.Vector3}\n */\nVector3.negate = function (out, a) {\n  vec3.negate(out.array, a.array);\n  out._dirty = true;\n  return out;\n};\n/**\n * @param  {clay.Vector3} out\n * @param  {clay.Vector3} a\n * @return {clay.Vector3}\n */\nVector3.normalize = function (out, a) {\n  vec3.normalize(out.array, a.array);\n  out._dirty = true;\n  return out;\n};\n/**\n * @param  {clay.Vector3} out\n * @param  {number}  scale\n * @return {clay.Vector3}\n */\nVector3.random = function (out, scale) {\n  vec3.random(out.array, scale);\n  out._dirty = true;\n  return out;\n};\n/**\n * @param  {clay.Vector3} out\n * @param  {clay.Vector3} a\n * @param  {number}  scale\n * @return {clay.Vector3}\n */\nVector3.scale = function (out, a, scale) {\n  vec3.scale(out.array, a.array, scale);\n  out._dirty = true;\n  return out;\n};\n/**\n * @param  {clay.Vector3} out\n * @param  {clay.Vector3} a\n * @param  {clay.Vector3} b\n * @param  {number}  scale\n * @return {clay.Vector3}\n */\nVector3.scaleAndAdd = function (out, a, b, scale) {\n  vec3.scaleAndAdd(out.array, a.array, b.array, scale);\n  out._dirty = true;\n  return out;\n};\n/**\n * @param  {clay.Vector3} a\n * @param  {clay.Vector3} b\n * @return {number}\n */\nVector3.sqrDist = function (a, b) {\n  return vec3.sqrDist(a.array, b.array);\n};\n/**\n * @function\n * @param  {clay.Vector3} a\n * @param  {clay.Vector3} b\n * @return {number}\n */\nVector3.squaredDistance = Vector3.sqrDist;\n/**\n * @param  {clay.Vector3} a\n * @return {number}\n */\nVector3.sqrLen = function (a) {\n  return vec3.sqrLen(a.array);\n};\n/**\n * @function\n * @param  {clay.Vector3} a\n * @return {number}\n */\nVector3.squaredLength = Vector3.sqrLen;\n\n/**\n * @param  {clay.Vector3} out\n * @param  {clay.Vector3} a\n * @param  {clay.Vector3} b\n * @return {clay.Vector3}\n */\nVector3.sub = function (out, a, b) {\n  vec3.subtract(out.array, a.array, b.array);\n  out._dirty = true;\n  return out;\n};\n/**\n * @function\n * @param  {clay.Vector3} out\n * @param  {clay.Vector3} a\n * @param  {clay.Vector3} b\n * @return {clay.Vector3}\n */\nVector3.subtract = Vector3.sub;\n\n/**\n * @param  {clay.Vector3} out\n * @param  {clay.Vector3} a\n * @param  {Matrix3} m\n * @return {clay.Vector3}\n */\nVector3.transformMat3 = function (out, a, m) {\n  vec3.transformMat3(out.array, a.array, m.array);\n  out._dirty = true;\n  return out;\n};\n\n/**\n * @param  {clay.Vector3} out\n * @param  {clay.Vector3} a\n * @param  {clay.Matrix4} m\n * @return {clay.Vector3}\n */\nVector3.transformMat4 = function (out, a, m) {\n  vec3.transformMat4(out.array, a.array, m.array);\n  out._dirty = true;\n  return out;\n};\n/**\n * @param  {clay.Vector3} out\n * @param  {clay.Vector3} a\n * @param  {clay.Quaternion} q\n * @return {clay.Vector3}\n */\nVector3.transformQuat = function (out, a, q) {\n  vec3.transformQuat(out.array, a.array, q.array);\n  out._dirty = true;\n  return out;\n};\nfunction clamp(val, min, max) {\n  return val < min ? min : val > max ? max : val;\n}\nvar atan2 = Math.atan2;\nvar asin = Math.asin;\nvar abs = Math.abs;\n/**\n * Convert quaternion to euler angle\n * Quaternion must be normalized\n * From three.js\n */\nVector3.eulerFromQuat = function (out, q, order) {\n  out._dirty = true;\n  q = q.array;\n  var target = out.array;\n  var x = q[0],\n    y = q[1],\n    z = q[2],\n    w = q[3];\n  var x2 = x * x;\n  var y2 = y * y;\n  var z2 = z * z;\n  var w2 = w * w;\n  var order = (order || 'XYZ').toUpperCase();\n  switch (order) {\n    case 'XYZ':\n      target[0] = atan2(2 * (x * w - y * z), w2 - x2 - y2 + z2);\n      target[1] = asin(clamp(2 * (x * z + y * w), -1, 1));\n      target[2] = atan2(2 * (z * w - x * y), w2 + x2 - y2 - z2);\n      break;\n    case 'YXZ':\n      target[0] = asin(clamp(2 * (x * w - y * z), -1, 1));\n      target[1] = atan2(2 * (x * z + y * w), w2 - x2 - y2 + z2);\n      target[2] = atan2(2 * (x * y + z * w), w2 - x2 + y2 - z2);\n      break;\n    case 'ZXY':\n      target[0] = asin(clamp(2 * (x * w + y * z), -1, 1));\n      target[1] = atan2(2 * (y * w - z * x), w2 - x2 - y2 + z2);\n      target[2] = atan2(2 * (z * w - x * y), w2 - x2 + y2 - z2);\n      break;\n    case 'ZYX':\n      target[0] = atan2(2 * (x * w + z * y), w2 - x2 - y2 + z2);\n      target[1] = asin(clamp(2 * (y * w - x * z), -1, 1));\n      target[2] = atan2(2 * (x * y + z * w), w2 + x2 - y2 - z2);\n      break;\n    case 'YZX':\n      target[0] = atan2(2 * (x * w - z * y), w2 - x2 + y2 - z2);\n      target[1] = atan2(2 * (y * w - x * z), w2 + x2 - y2 - z2);\n      target[2] = asin(clamp(2 * (x * y + z * w), -1, 1));\n      break;\n    case 'XZY':\n      target[0] = atan2(2 * (x * w + y * z), w2 - x2 + y2 - z2);\n      target[1] = atan2(2 * (x * z + y * w), w2 + x2 - y2 - z2);\n      target[2] = asin(clamp(2 * (z * w - x * y), -1, 1));\n      break;\n    default:\n      console.warn('Unkown order: ' + order);\n  }\n  return out;\n};\n\n/**\n * Convert rotation matrix to euler angle\n * from three.js\n */\nVector3.eulerFromMat3 = function (out, m, order) {\n  // assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\n  var te = m.array;\n  var m11 = te[0],\n    m12 = te[3],\n    m13 = te[6];\n  var m21 = te[1],\n    m22 = te[4],\n    m23 = te[7];\n  var m31 = te[2],\n    m32 = te[5],\n    m33 = te[8];\n  var target = out.array;\n  var order = (order || 'XYZ').toUpperCase();\n  switch (order) {\n    case 'XYZ':\n      target[1] = asin(clamp(m13, -1, 1));\n      if (abs(m13) < 0.99999) {\n        target[0] = atan2(-m23, m33);\n        target[2] = atan2(-m12, m11);\n      } else {\n        target[0] = atan2(m32, m22);\n        target[2] = 0;\n      }\n      break;\n    case 'YXZ':\n      target[0] = asin(-clamp(m23, -1, 1));\n      if (abs(m23) < 0.99999) {\n        target[1] = atan2(m13, m33);\n        target[2] = atan2(m21, m22);\n      } else {\n        target[1] = atan2(-m31, m11);\n        target[2] = 0;\n      }\n      break;\n    case 'ZXY':\n      target[0] = asin(clamp(m32, -1, 1));\n      if (abs(m32) < 0.99999) {\n        target[1] = atan2(-m31, m33);\n        target[2] = atan2(-m12, m22);\n      } else {\n        target[1] = 0;\n        target[2] = atan2(m21, m11);\n      }\n      break;\n    case 'ZYX':\n      target[1] = asin(-clamp(m31, -1, 1));\n      if (abs(m31) < 0.99999) {\n        target[0] = atan2(m32, m33);\n        target[2] = atan2(m21, m11);\n      } else {\n        target[0] = 0;\n        target[2] = atan2(-m12, m22);\n      }\n      break;\n    case 'YZX':\n      target[2] = asin(clamp(m21, -1, 1));\n      if (abs(m21) < 0.99999) {\n        target[0] = atan2(-m23, m22);\n        target[1] = atan2(-m31, m11);\n      } else {\n        target[0] = 0;\n        target[1] = atan2(m13, m33);\n      }\n      break;\n    case 'XZY':\n      target[2] = asin(-clamp(m12, -1, 1));\n      if (abs(m12) < 0.99999) {\n        target[0] = atan2(m32, m22);\n        target[1] = atan2(m13, m11);\n      } else {\n        target[0] = atan2(-m23, m33);\n        target[1] = 0;\n      }\n      break;\n    default:\n      console.warn('Unkown order: ' + order);\n  }\n  out._dirty = true;\n  return out;\n};\nObject.defineProperties(Vector3, {\n  /**\n   * @type {clay.Vector3}\n   * @readOnly\n   * @memberOf clay.Vector3\n   */\n  POSITIVE_X: {\n    get: function () {\n      return new Vector3(1, 0, 0);\n    }\n  },\n  /**\n   * @type {clay.Vector3}\n   * @readOnly\n   * @memberOf clay.Vector3\n   */\n  NEGATIVE_X: {\n    get: function () {\n      return new Vector3(-1, 0, 0);\n    }\n  },\n  /**\n   * @type {clay.Vector3}\n   * @readOnly\n   * @memberOf clay.Vector3\n   */\n  POSITIVE_Y: {\n    get: function () {\n      return new Vector3(0, 1, 0);\n    }\n  },\n  /**\n   * @type {clay.Vector3}\n   * @readOnly\n   * @memberOf clay.Vector3\n   */\n  NEGATIVE_Y: {\n    get: function () {\n      return new Vector3(0, -1, 0);\n    }\n  },\n  /**\n   * @type {clay.Vector3}\n   * @readOnly\n   * @memberOf clay.Vector3\n   */\n  POSITIVE_Z: {\n    get: function () {\n      return new Vector3(0, 0, 1);\n    }\n  },\n  /**\n   * @type {clay.Vector3}\n   * @readOnly\n   */\n  NEGATIVE_Z: {\n    get: function () {\n      return new Vector3(0, 0, -1);\n    }\n  },\n  /**\n   * @type {clay.Vector3}\n   * @readOnly\n   * @memberOf clay.Vector3\n   */\n  UP: {\n    get: function () {\n      return new Vector3(0, 1, 0);\n    }\n  },\n  /**\n   * @type {clay.Vector3}\n   * @readOnly\n   * @memberOf clay.Vector3\n   */\n  ZERO: {\n    get: function () {\n      return new Vector3();\n    }\n  }\n});\nexport default Vector3;","map":{"version":3,"names":["vec3","Vector3","x","y","z","array","fromValues","_dirty","prototype","constructor","add","b","set","setArray","arr","clone","copy","cross","a","dist","distance","div","divide","dot","len","length","lerp","t","min","max","mul","multiply","negate","normalize","random","scale","s","scaleAndAdd","sqrDist","squaredDistance","sqrLen","squaredLength","sub","subtract","transformMat3","m","transformMat4","transformQuat","q","applyProjection","v","w","eulerFromQuat","order","eulerFromMat3","toString","Array","join","call","toArray","slice","defineProperty","Object","proto","get","value","out","clamp","val","atan2","Math","asin","abs","target","x2","y2","z2","w2","toUpperCase","console","warn","te","m11","m12","m13","m21","m22","m23","m31","m32","m33","defineProperties","POSITIVE_X","NEGATIVE_X","POSITIVE_Y","NEGATIVE_Y","POSITIVE_Z","NEGATIVE_Z","UP","ZERO"],"sources":["E:/QuestionairePlanet_Fronted/mytest/node_modules/claygl/src/math/Vector3.js"],"sourcesContent":["import vec3 from '../glmatrix/vec3';\n\n/**\n * @constructor\n * @alias clay.Vector3\n * @param {number} x\n * @param {number} y\n * @param {number} z\n */\nvar Vector3 = function(x, y, z) {\n\n    x = x || 0;\n    y = y || 0;\n    z = z || 0;\n\n    /**\n     * Storage of Vector3, read and write of x, y, z will change the values in array\n     * All methods also operate on the array instead of x, y, z components\n     * @name array\n     * @type {Float32Array}\n     * @memberOf clay.Vector3#\n     */\n    this.array = vec3.fromValues(x, y, z);\n\n    /**\n     * Dirty flag is used by the Node to determine\n     * if the matrix is updated to latest\n     * @name _dirty\n     * @type {boolean}\n     * @memberOf clay.Vector3#\n     */\n    this._dirty = true;\n};\n\nVector3.prototype = {\n\n    constructor: Vector3,\n\n    /**\n     * Add b to self\n     * @param  {clay.Vector3} b\n     * @return {clay.Vector3}\n     */\n    add: function (b) {\n        vec3.add(this.array, this.array, b.array);\n        this._dirty = true;\n        return this;\n    },\n\n    /**\n     * Set x, y and z components\n     * @param  {number}  x\n     * @param  {number}  y\n     * @param  {number}  z\n     * @return {clay.Vector3}\n     */\n    set: function (x, y, z) {\n        this.array[0] = x;\n        this.array[1] = y;\n        this.array[2] = z;\n        this._dirty = true;\n        return this;\n    },\n\n    /**\n     * Set x, y and z components from array\n     * @param  {Float32Array|number[]} arr\n     * @return {clay.Vector3}\n     */\n    setArray: function (arr) {\n        this.array[0] = arr[0];\n        this.array[1] = arr[1];\n        this.array[2] = arr[2];\n\n        this._dirty = true;\n        return this;\n    },\n\n    /**\n     * Clone a new Vector3\n     * @return {clay.Vector3}\n     */\n    clone: function () {\n        return new Vector3(this.x, this.y, this.z);\n    },\n\n    /**\n     * Copy from b\n     * @param  {clay.Vector3} b\n     * @return {clay.Vector3}\n     */\n    copy: function (b) {\n        vec3.copy(this.array, b.array);\n        this._dirty = true;\n        return this;\n    },\n\n    /**\n     * Cross product of self and b, written to a Vector3 out\n     * @param  {clay.Vector3} a\n     * @param  {clay.Vector3} b\n     * @return {clay.Vector3}\n     */\n    cross: function (a, b) {\n        vec3.cross(this.array, a.array, b.array);\n        this._dirty = true;\n        return this;\n    },\n\n    /**\n     * Alias for distance\n     * @param  {clay.Vector3} b\n     * @return {number}\n     */\n    dist: function (b) {\n        return vec3.dist(this.array, b.array);\n    },\n\n    /**\n     * Distance between self and b\n     * @param  {clay.Vector3} b\n     * @return {number}\n     */\n    distance: function (b) {\n        return vec3.distance(this.array, b.array);\n    },\n\n    /**\n     * Alias for divide\n     * @param  {clay.Vector3} b\n     * @return {clay.Vector3}\n     */\n    div: function (b) {\n        vec3.div(this.array, this.array, b.array);\n        this._dirty = true;\n        return this;\n    },\n\n    /**\n     * Divide self by b\n     * @param  {clay.Vector3} b\n     * @return {clay.Vector3}\n     */\n    divide: function (b) {\n        vec3.divide(this.array, this.array, b.array);\n        this._dirty = true;\n        return this;\n    },\n\n    /**\n     * Dot product of self and b\n     * @param  {clay.Vector3} b\n     * @return {number}\n     */\n    dot: function (b) {\n        return vec3.dot(this.array, b.array);\n    },\n\n    /**\n     * Alias of length\n     * @return {number}\n     */\n    len: function () {\n        return vec3.len(this.array);\n    },\n\n    /**\n     * Calculate the length\n     * @return {number}\n     */\n    length: function () {\n        return vec3.length(this.array);\n    },\n    /**\n     * Linear interpolation between a and b\n     * @param  {clay.Vector3} a\n     * @param  {clay.Vector3} b\n     * @param  {number}  t\n     * @return {clay.Vector3}\n     */\n    lerp: function (a, b, t) {\n        vec3.lerp(this.array, a.array, b.array, t);\n        this._dirty = true;\n        return this;\n    },\n\n    /**\n     * Minimum of self and b\n     * @param  {clay.Vector3} b\n     * @return {clay.Vector3}\n     */\n    min: function (b) {\n        vec3.min(this.array, this.array, b.array);\n        this._dirty = true;\n        return this;\n    },\n\n    /**\n     * Maximum of self and b\n     * @param  {clay.Vector3} b\n     * @return {clay.Vector3}\n     */\n    max: function (b) {\n        vec3.max(this.array, this.array, b.array);\n        this._dirty = true;\n        return this;\n    },\n\n    /**\n     * Alias for multiply\n     * @param  {clay.Vector3} b\n     * @return {clay.Vector3}\n     */\n    mul: function (b) {\n        vec3.mul(this.array, this.array, b.array);\n        this._dirty = true;\n        return this;\n    },\n\n    /**\n     * Mutiply self and b\n     * @param  {clay.Vector3} b\n     * @return {clay.Vector3}\n     */\n    multiply: function (b) {\n        vec3.multiply(this.array, this.array, b.array);\n        this._dirty = true;\n        return this;\n    },\n\n    /**\n     * Negate self\n     * @return {clay.Vector3}\n     */\n    negate: function () {\n        vec3.negate(this.array, this.array);\n        this._dirty = true;\n        return this;\n    },\n\n    /**\n     * Normalize self\n     * @return {clay.Vector3}\n     */\n    normalize: function () {\n        vec3.normalize(this.array, this.array);\n        this._dirty = true;\n        return this;\n    },\n\n    /**\n     * Generate random x, y, z components with a given scale\n     * @param  {number} scale\n     * @return {clay.Vector3}\n     */\n    random: function (scale) {\n        vec3.random(this.array, scale);\n        this._dirty = true;\n        return this;\n    },\n\n    /**\n     * Scale self\n     * @param  {number}  scale\n     * @return {clay.Vector3}\n     */\n    scale: function (s) {\n        vec3.scale(this.array, this.array, s);\n        this._dirty = true;\n        return this;\n    },\n\n    /**\n     * Scale b and add to self\n     * @param  {clay.Vector3} b\n     * @param  {number}  scale\n     * @return {clay.Vector3}\n     */\n    scaleAndAdd: function (b, s) {\n        vec3.scaleAndAdd(this.array, this.array, b.array, s);\n        this._dirty = true;\n        return this;\n    },\n\n    /**\n     * Alias for squaredDistance\n     * @param  {clay.Vector3} b\n     * @return {number}\n     */\n    sqrDist: function (b) {\n        return vec3.sqrDist(this.array, b.array);\n    },\n\n    /**\n     * Squared distance between self and b\n     * @param  {clay.Vector3} b\n     * @return {number}\n     */\n    squaredDistance: function (b) {\n        return vec3.squaredDistance(this.array, b.array);\n    },\n\n    /**\n     * Alias for squaredLength\n     * @return {number}\n     */\n    sqrLen: function () {\n        return vec3.sqrLen(this.array);\n    },\n\n    /**\n     * Squared length of self\n     * @return {number}\n     */\n    squaredLength: function () {\n        return vec3.squaredLength(this.array);\n    },\n\n    /**\n     * Alias for subtract\n     * @param  {clay.Vector3} b\n     * @return {clay.Vector3}\n     */\n    sub: function (b) {\n        vec3.sub(this.array, this.array, b.array);\n        this._dirty = true;\n        return this;\n    },\n\n    /**\n     * Subtract b from self\n     * @param  {clay.Vector3} b\n     * @return {clay.Vector3}\n     */\n    subtract: function (b) {\n        vec3.subtract(this.array, this.array, b.array);\n        this._dirty = true;\n        return this;\n    },\n\n    /**\n     * Transform self with a Matrix3 m\n     * @param  {clay.Matrix3} m\n     * @return {clay.Vector3}\n     */\n    transformMat3: function (m) {\n        vec3.transformMat3(this.array, this.array, m.array);\n        this._dirty = true;\n        return this;\n    },\n\n    /**\n     * Transform self with a Matrix4 m\n     * @param  {clay.Matrix4} m\n     * @return {clay.Vector3}\n     */\n    transformMat4: function (m) {\n        vec3.transformMat4(this.array, this.array, m.array);\n        this._dirty = true;\n        return this;\n    },\n    /**\n     * Transform self with a Quaternion q\n     * @param  {clay.Quaternion} q\n     * @return {clay.Vector3}\n     */\n    transformQuat: function (q) {\n        vec3.transformQuat(this.array, this.array, q.array);\n        this._dirty = true;\n        return this;\n    },\n\n    /**\n     * Trasnform self into projection space with m\n     * @param  {clay.Matrix4} m\n     * @return {clay.Vector3}\n     */\n    applyProjection: function (m) {\n        var v = this.array;\n        m = m.array;\n\n        // Perspective projection\n        if (m[15] === 0) {\n            var w = -1 / v[2];\n            v[0] = m[0] * v[0] * w;\n            v[1] = m[5] * v[1] * w;\n            v[2] = (m[10] * v[2] + m[14]) * w;\n        }\n        else {\n            v[0] = m[0] * v[0] + m[12];\n            v[1] = m[5] * v[1] + m[13];\n            v[2] = m[10] * v[2] + m[14];\n        }\n        this._dirty = true;\n\n        return this;\n    },\n\n    eulerFromQuat: function(q, order) {\n        Vector3.eulerFromQuat(this, q, order);\n    },\n\n    eulerFromMat3: function (m, order) {\n        Vector3.eulerFromMat3(this, m, order);\n    },\n\n    toString: function() {\n        return '[' + Array.prototype.join.call(this.array, ',') + ']';\n    },\n\n    toArray: function () {\n        return Array.prototype.slice.call(this.array);\n    }\n};\n\nvar defineProperty = Object.defineProperty;\n// Getter and Setter\nif (defineProperty) {\n\n    var proto = Vector3.prototype;\n    /**\n     * @name x\n     * @type {number}\n     * @memberOf clay.Vector3\n     * @instance\n     */\n    defineProperty(proto, 'x', {\n        get: function () {\n            return this.array[0];\n        },\n        set: function (value) {\n            this.array[0] = value;\n            this._dirty = true;\n        }\n    });\n\n    /**\n     * @name y\n     * @type {number}\n     * @memberOf clay.Vector3\n     * @instance\n     */\n    defineProperty(proto, 'y', {\n        get: function () {\n            return this.array[1];\n        },\n        set: function (value) {\n            this.array[1] = value;\n            this._dirty = true;\n        }\n    });\n\n    /**\n     * @name z\n     * @type {number}\n     * @memberOf clay.Vector3\n     * @instance\n     */\n    defineProperty(proto, 'z', {\n        get: function () {\n            return this.array[2];\n        },\n        set: function (value) {\n            this.array[2] = value;\n            this._dirty = true;\n        }\n    });\n}\n\n\n// Supply methods that are not in place\n\n/**\n * @param  {clay.Vector3} out\n * @param  {clay.Vector3} a\n * @param  {clay.Vector3} b\n * @return {clay.Vector3}\n */\nVector3.add = function(out, a, b) {\n    vec3.add(out.array, a.array, b.array);\n    out._dirty = true;\n    return out;\n};\n\n/**\n * @param  {clay.Vector3} out\n * @param  {number}  x\n * @param  {number}  y\n * @param  {number}  z\n * @return {clay.Vector3}\n */\nVector3.set = function(out, x, y, z) {\n    vec3.set(out.array, x, y, z);\n    out._dirty = true;\n};\n\n/**\n * @param  {clay.Vector3} out\n * @param  {clay.Vector3} b\n * @return {clay.Vector3}\n */\nVector3.copy = function(out, b) {\n    vec3.copy(out.array, b.array);\n    out._dirty = true;\n    return out;\n};\n\n/**\n * @param  {clay.Vector3} out\n * @param  {clay.Vector3} a\n * @param  {clay.Vector3} b\n * @return {clay.Vector3}\n */\nVector3.cross = function(out, a, b) {\n    vec3.cross(out.array, a.array, b.array);\n    out._dirty = true;\n    return out;\n};\n\n/**\n * @param  {clay.Vector3} a\n * @param  {clay.Vector3} b\n * @return {number}\n */\nVector3.dist = function(a, b) {\n    return vec3.distance(a.array, b.array);\n};\n\n/**\n * @function\n * @param  {clay.Vector3} a\n * @param  {clay.Vector3} b\n * @return {number}\n */\nVector3.distance = Vector3.dist;\n\n/**\n * @param  {clay.Vector3} out\n * @param  {clay.Vector3} a\n * @param  {clay.Vector3} b\n * @return {clay.Vector3}\n */\nVector3.div = function(out, a, b) {\n    vec3.divide(out.array, a.array, b.array);\n    out._dirty = true;\n    return out;\n};\n\n/**\n * @function\n * @param  {clay.Vector3} out\n * @param  {clay.Vector3} a\n * @param  {clay.Vector3} b\n * @return {clay.Vector3}\n */\nVector3.divide = Vector3.div;\n\n/**\n * @param  {clay.Vector3} a\n * @param  {clay.Vector3} b\n * @return {number}\n */\nVector3.dot = function(a, b) {\n    return vec3.dot(a.array, b.array);\n};\n\n/**\n * @param  {clay.Vector3} a\n * @return {number}\n */\nVector3.len = function(b) {\n    return vec3.length(b.array);\n};\n\n// Vector3.length = Vector3.len;\n\n/**\n * @param  {clay.Vector3} out\n * @param  {clay.Vector3} a\n * @param  {clay.Vector3} b\n * @param  {number}  t\n * @return {clay.Vector3}\n */\nVector3.lerp = function(out, a, b, t) {\n    vec3.lerp(out.array, a.array, b.array, t);\n    out._dirty = true;\n    return out;\n};\n/**\n * @param  {clay.Vector3} out\n * @param  {clay.Vector3} a\n * @param  {clay.Vector3} b\n * @return {clay.Vector3}\n */\nVector3.min = function(out, a, b) {\n    vec3.min(out.array, a.array, b.array);\n    out._dirty = true;\n    return out;\n};\n\n/**\n * @param  {clay.Vector3} out\n * @param  {clay.Vector3} a\n * @param  {clay.Vector3} b\n * @return {clay.Vector3}\n */\nVector3.max = function(out, a, b) {\n    vec3.max(out.array, a.array, b.array);\n    out._dirty = true;\n    return out;\n};\n/**\n * @param  {clay.Vector3} out\n * @param  {clay.Vector3} a\n * @param  {clay.Vector3} b\n * @return {clay.Vector3}\n */\nVector3.mul = function(out, a, b) {\n    vec3.multiply(out.array, a.array, b.array);\n    out._dirty = true;\n    return out;\n};\n/**\n * @function\n * @param  {clay.Vector3} out\n * @param  {clay.Vector3} a\n * @param  {clay.Vector3} b\n * @return {clay.Vector3}\n */\nVector3.multiply = Vector3.mul;\n/**\n * @param  {clay.Vector3} out\n * @param  {clay.Vector3} a\n * @return {clay.Vector3}\n */\nVector3.negate = function(out, a) {\n    vec3.negate(out.array, a.array);\n    out._dirty = true;\n    return out;\n};\n/**\n * @param  {clay.Vector3} out\n * @param  {clay.Vector3} a\n * @return {clay.Vector3}\n */\nVector3.normalize = function(out, a) {\n    vec3.normalize(out.array, a.array);\n    out._dirty = true;\n    return out;\n};\n/**\n * @param  {clay.Vector3} out\n * @param  {number}  scale\n * @return {clay.Vector3}\n */\nVector3.random = function(out, scale) {\n    vec3.random(out.array, scale);\n    out._dirty = true;\n    return out;\n};\n/**\n * @param  {clay.Vector3} out\n * @param  {clay.Vector3} a\n * @param  {number}  scale\n * @return {clay.Vector3}\n */\nVector3.scale = function(out, a, scale) {\n    vec3.scale(out.array, a.array, scale);\n    out._dirty = true;\n    return out;\n};\n/**\n * @param  {clay.Vector3} out\n * @param  {clay.Vector3} a\n * @param  {clay.Vector3} b\n * @param  {number}  scale\n * @return {clay.Vector3}\n */\nVector3.scaleAndAdd = function(out, a, b, scale) {\n    vec3.scaleAndAdd(out.array, a.array, b.array, scale);\n    out._dirty = true;\n    return out;\n};\n/**\n * @param  {clay.Vector3} a\n * @param  {clay.Vector3} b\n * @return {number}\n */\nVector3.sqrDist = function(a, b) {\n    return vec3.sqrDist(a.array, b.array);\n};\n/**\n * @function\n * @param  {clay.Vector3} a\n * @param  {clay.Vector3} b\n * @return {number}\n */\nVector3.squaredDistance = Vector3.sqrDist;\n/**\n * @param  {clay.Vector3} a\n * @return {number}\n */\nVector3.sqrLen = function(a) {\n    return vec3.sqrLen(a.array);\n};\n/**\n * @function\n * @param  {clay.Vector3} a\n * @return {number}\n */\nVector3.squaredLength = Vector3.sqrLen;\n\n/**\n * @param  {clay.Vector3} out\n * @param  {clay.Vector3} a\n * @param  {clay.Vector3} b\n * @return {clay.Vector3}\n */\nVector3.sub = function(out, a, b) {\n    vec3.subtract(out.array, a.array, b.array);\n    out._dirty = true;\n    return out;\n};\n/**\n * @function\n * @param  {clay.Vector3} out\n * @param  {clay.Vector3} a\n * @param  {clay.Vector3} b\n * @return {clay.Vector3}\n */\nVector3.subtract = Vector3.sub;\n\n/**\n * @param  {clay.Vector3} out\n * @param  {clay.Vector3} a\n * @param  {Matrix3} m\n * @return {clay.Vector3}\n */\nVector3.transformMat3 = function(out, a, m) {\n    vec3.transformMat3(out.array, a.array, m.array);\n    out._dirty = true;\n    return out;\n};\n\n/**\n * @param  {clay.Vector3} out\n * @param  {clay.Vector3} a\n * @param  {clay.Matrix4} m\n * @return {clay.Vector3}\n */\nVector3.transformMat4 = function(out, a, m) {\n    vec3.transformMat4(out.array, a.array, m.array);\n    out._dirty = true;\n    return out;\n};\n/**\n * @param  {clay.Vector3} out\n * @param  {clay.Vector3} a\n * @param  {clay.Quaternion} q\n * @return {clay.Vector3}\n */\nVector3.transformQuat = function(out, a, q) {\n    vec3.transformQuat(out.array, a.array, q.array);\n    out._dirty = true;\n    return out;\n};\n\nfunction clamp(val, min, max) {\n    return val < min ? min : (val > max ? max : val);\n}\nvar atan2 = Math.atan2;\nvar asin = Math.asin;\nvar abs = Math.abs;\n/**\n * Convert quaternion to euler angle\n * Quaternion must be normalized\n * From three.js\n */\nVector3.eulerFromQuat = function (out, q, order) {\n    out._dirty = true;\n    q = q.array;\n\n    var target = out.array;\n    var x = q[0], y = q[1], z = q[2], w = q[3];\n    var x2 = x * x;\n    var y2 = y * y;\n    var z2 = z * z;\n    var w2 = w * w;\n\n    var order = (order || 'XYZ').toUpperCase();\n\n    switch (order) {\n        case 'XYZ':\n            target[0] = atan2(2 * (x * w - y * z), (w2 - x2 - y2 + z2));\n            target[1] = asin(clamp(2 * (x * z + y * w), - 1, 1));\n            target[2] = atan2(2 * (z * w - x * y), (w2 + x2 - y2 - z2));\n            break;\n        case 'YXZ':\n            target[0] = asin(clamp(2 * (x * w - y * z), - 1, 1));\n            target[1] = atan2(2 * (x * z + y * w), (w2 - x2 - y2 + z2));\n            target[2] = atan2(2 * (x * y + z * w), (w2 - x2 + y2 - z2));\n            break;\n        case 'ZXY':\n            target[0] = asin(clamp(2 * (x * w + y * z), - 1, 1));\n            target[1] = atan2(2 * (y * w - z * x), (w2 - x2 - y2 + z2));\n            target[2] = atan2(2 * (z * w - x * y), (w2 - x2 + y2 - z2));\n            break;\n        case 'ZYX':\n            target[0] = atan2(2 * (x * w + z * y), (w2 - x2 - y2 + z2));\n            target[1] = asin(clamp(2 * (y * w - x * z), - 1, 1));\n            target[2] = atan2(2 * (x * y + z * w), (w2 + x2 - y2 - z2));\n            break;\n        case 'YZX':\n            target[0] = atan2(2 * (x * w - z * y), (w2 - x2 + y2 - z2));\n            target[1] = atan2(2 * (y * w - x * z), (w2 + x2 - y2 - z2));\n            target[2] = asin(clamp(2 * (x * y + z * w), - 1, 1));\n            break;\n        case 'XZY':\n            target[0] = atan2(2 * (x * w + y * z), (w2 - x2 + y2 - z2));\n            target[1] = atan2(2 * (x * z + y * w), (w2 + x2 - y2 - z2));\n            target[2] = asin(clamp(2 * (z * w - x * y), - 1, 1));\n            break;\n        default:\n            console.warn('Unkown order: ' + order);\n    }\n    return out;\n};\n\n/**\n * Convert rotation matrix to euler angle\n * from three.js\n */\nVector3.eulerFromMat3 = function (out, m, order) {\n    // assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\n    var te = m.array;\n    var m11 = te[0], m12 = te[3], m13 = te[6];\n    var m21 = te[1], m22 = te[4], m23 = te[7];\n    var m31 = te[2], m32 = te[5], m33 = te[8];\n    var target = out.array;\n\n    var order = (order || 'XYZ').toUpperCase();\n\n    switch (order) {\n        case 'XYZ':\n            target[1] = asin(clamp(m13, -1, 1));\n            if (abs(m13) < 0.99999) {\n                target[0] = atan2(-m23, m33);\n                target[2] = atan2(-m12, m11);\n            }\n            else {\n                target[0] = atan2(m32, m22);\n                target[2] = 0;\n            }\n            break;\n        case 'YXZ':\n            target[0] = asin(-clamp(m23, -1, 1));\n            if (abs(m23) < 0.99999) {\n                target[1] = atan2(m13, m33);\n                target[2] = atan2(m21, m22);\n            }\n            else {\n                target[1] = atan2(-m31, m11);\n                target[2] = 0;\n            }\n            break;\n        case 'ZXY':\n            target[0] = asin(clamp(m32, -1, 1));\n            if (abs(m32) < 0.99999) {\n                target[1] = atan2(-m31, m33);\n                target[2] = atan2(-m12, m22);\n            }\n            else {\n                target[1] = 0;\n                target[2] = atan2(m21, m11);\n            }\n            break;\n        case 'ZYX':\n            target[1] = asin(-clamp(m31, -1, 1));\n            if (abs(m31) < 0.99999) {\n                target[0] = atan2(m32, m33);\n                target[2] = atan2(m21, m11);\n            }\n            else {\n                target[0] = 0;\n                target[2] = atan2(-m12, m22);\n            }\n            break;\n        case 'YZX':\n            target[2] = asin(clamp(m21, -1, 1));\n            if (abs(m21) < 0.99999) {\n                target[0] = atan2(-m23, m22);\n                target[1] = atan2(-m31, m11);\n            }\n            else {\n                target[0] = 0;\n                target[1] = atan2(m13, m33);\n            }\n            break;\n        case 'XZY':\n            target[2] = asin(-clamp(m12, -1, 1));\n            if (abs(m12) < 0.99999) {\n                target[0] = atan2(m32, m22);\n                target[1] = atan2(m13, m11);\n            }\n            else {\n                target[0] = atan2(-m23, m33);\n                target[1] = 0;\n            }\n            break;\n        default:\n            console.warn('Unkown order: ' + order);\n    }\n    out._dirty = true;\n\n    return out;\n};\n\nObject.defineProperties(Vector3, {\n    /**\n     * @type {clay.Vector3}\n     * @readOnly\n     * @memberOf clay.Vector3\n     */\n    POSITIVE_X: {\n        get: function () {\n            return new Vector3(1, 0, 0);\n        }\n    },\n    /**\n     * @type {clay.Vector3}\n     * @readOnly\n     * @memberOf clay.Vector3\n     */\n    NEGATIVE_X: {\n        get: function () {\n            return new Vector3(-1, 0, 0);\n        }\n    },\n    /**\n     * @type {clay.Vector3}\n     * @readOnly\n     * @memberOf clay.Vector3\n     */\n    POSITIVE_Y: {\n        get: function () {\n            return new Vector3(0, 1, 0);\n        }\n    },\n    /**\n     * @type {clay.Vector3}\n     * @readOnly\n     * @memberOf clay.Vector3\n     */\n    NEGATIVE_Y: {\n        get: function () {\n            return new Vector3(0, -1, 0);\n        }\n    },\n    /**\n     * @type {clay.Vector3}\n     * @readOnly\n     * @memberOf clay.Vector3\n     */\n    POSITIVE_Z: {\n        get: function () {\n            return new Vector3(0, 0, 1);\n        }\n    },\n    /**\n     * @type {clay.Vector3}\n     * @readOnly\n     */\n    NEGATIVE_Z: {\n        get: function () {\n            return new Vector3(0, 0, -1);\n        }\n    },\n    /**\n     * @type {clay.Vector3}\n     * @readOnly\n     * @memberOf clay.Vector3\n     */\n    UP: {\n        get: function () {\n            return new Vector3(0, 1, 0);\n        }\n    },\n    /**\n     * @type {clay.Vector3}\n     * @readOnly\n     * @memberOf clay.Vector3\n     */\n    ZERO: {\n        get: function () {\n            return new Vector3();\n        }\n    }\n});\n\nexport default Vector3;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}