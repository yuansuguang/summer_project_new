{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\n// https://github.com/mapbox/earcut/blob/master/src/earcut.js\nexport default earcut;\nfunction earcut(data, holeIndices, dim) {\n  dim = dim || 2;\n  var hasHoles = holeIndices && holeIndices.length,\n    outerLen = hasHoles ? holeIndices[0] * dim : data.length,\n    outerNode = linkedList(data, 0, outerLen, dim, true),\n    triangles = [];\n  if (!outerNode) return triangles;\n  var minX, minY, maxX, maxY, x, y, size;\n  if (hasHoles) outerNode = eliminateHoles(data, holeIndices, outerNode, dim); // if the shape is not too simple, we'll use z-order curve hash later; calculate polygon bbox\n\n  if (data.length > 80 * dim) {\n    minX = maxX = data[0];\n    minY = maxY = data[1];\n    for (var i = dim; i < outerLen; i += dim) {\n      x = data[i];\n      y = data[i + 1];\n      if (x < minX) minX = x;\n      if (y < minY) minY = y;\n      if (x > maxX) maxX = x;\n      if (y > maxY) maxY = y;\n    } // minX, minY and size are later used to transform coords into integers for z-order calculation\n\n    size = Math.max(maxX - minX, maxY - minY);\n  }\n  earcutLinked(outerNode, triangles, dim, minX, minY, size);\n  return triangles;\n} // create a circular doubly linked list from polygon points in the specified winding order\n\nfunction linkedList(data, start, end, dim, clockwise) {\n  var i, last;\n  if (clockwise === signedArea(data, start, end, dim) > 0) {\n    for (i = start; i < end; i += dim) last = insertNode(i, data[i], data[i + 1], last);\n  } else {\n    for (i = end - dim; i >= start; i -= dim) last = insertNode(i, data[i], data[i + 1], last);\n  }\n  if (last && equals(last, last.next)) {\n    removeNode(last);\n    last = last.next;\n  }\n  return last;\n} // eliminate colinear or duplicate points\n\nfunction filterPoints(start, end) {\n  if (!start) return start;\n  if (!end) end = start;\n  var p = start,\n    again;\n  do {\n    again = false;\n    if (!p.steiner && (equals(p, p.next) || area(p.prev, p, p.next) === 0)) {\n      removeNode(p);\n      p = end = p.prev;\n      if (p === p.next) return null;\n      again = true;\n    } else {\n      p = p.next;\n    }\n  } while (again || p !== end);\n  return end;\n} // main ear slicing loop which triangulates a polygon (given as a linked list)\n\nfunction earcutLinked(ear, triangles, dim, minX, minY, size, pass) {\n  if (!ear) return; // interlink polygon nodes in z-order\n\n  if (!pass && size) indexCurve(ear, minX, minY, size);\n  var stop = ear,\n    prev,\n    next; // iterate through ears, slicing them one by one\n\n  while (ear.prev !== ear.next) {\n    prev = ear.prev;\n    next = ear.next;\n    if (size ? isEarHashed(ear, minX, minY, size) : isEar(ear)) {\n      // cut off the triangle\n      triangles.push(prev.i / dim);\n      triangles.push(ear.i / dim);\n      triangles.push(next.i / dim);\n      removeNode(ear); // skipping the next vertice leads to less sliver triangles\n\n      ear = next.next;\n      stop = next.next;\n      continue;\n    }\n    ear = next; // if we looped through the whole remaining polygon and can't find any more ears\n\n    if (ear === stop) {\n      // try filtering points and slicing again\n      if (!pass) {\n        earcutLinked(filterPoints(ear), triangles, dim, minX, minY, size, 1); // if this didn't work, try curing all small self-intersections locally\n      } else if (pass === 1) {\n        ear = cureLocalIntersections(ear, triangles, dim);\n        earcutLinked(ear, triangles, dim, minX, minY, size, 2); // as a last resort, try splitting the remaining polygon into two\n      } else if (pass === 2) {\n        splitEarcut(ear, triangles, dim, minX, minY, size);\n      }\n      break;\n    }\n  }\n} // check whether a polygon node forms a valid ear with adjacent nodes\n\nfunction isEar(ear) {\n  var a = ear.prev,\n    b = ear,\n    c = ear.next;\n  if (area(a, b, c) >= 0) return false; // reflex, can't be an ear\n  // now make sure we don't have other points inside the potential ear\n\n  var p = ear.next.next;\n  while (p !== ear.prev) {\n    if (pointInTriangle(a.x, a.y, b.x, b.y, c.x, c.y, p.x, p.y) && area(p.prev, p, p.next) >= 0) return false;\n    p = p.next;\n  }\n  return true;\n}\nfunction isEarHashed(ear, minX, minY, size) {\n  var a = ear.prev,\n    b = ear,\n    c = ear.next;\n  if (area(a, b, c) >= 0) return false; // reflex, can't be an ear\n  // triangle bbox; min & max are calculated like this for speed\n\n  var minTX = a.x < b.x ? a.x < c.x ? a.x : c.x : b.x < c.x ? b.x : c.x,\n    minTY = a.y < b.y ? a.y < c.y ? a.y : c.y : b.y < c.y ? b.y : c.y,\n    maxTX = a.x > b.x ? a.x > c.x ? a.x : c.x : b.x > c.x ? b.x : c.x,\n    maxTY = a.y > b.y ? a.y > c.y ? a.y : c.y : b.y > c.y ? b.y : c.y; // z-order range for the current triangle bbox;\n\n  var minZ = zOrder(minTX, minTY, minX, minY, size),\n    maxZ = zOrder(maxTX, maxTY, minX, minY, size); // first look for points inside the triangle in increasing z-order\n\n  var p = ear.nextZ;\n  while (p && p.z <= maxZ) {\n    if (p !== ear.prev && p !== ear.next && pointInTriangle(a.x, a.y, b.x, b.y, c.x, c.y, p.x, p.y) && area(p.prev, p, p.next) >= 0) return false;\n    p = p.nextZ;\n  } // then look for points in decreasing z-order\n\n  p = ear.prevZ;\n  while (p && p.z >= minZ) {\n    if (p !== ear.prev && p !== ear.next && pointInTriangle(a.x, a.y, b.x, b.y, c.x, c.y, p.x, p.y) && area(p.prev, p, p.next) >= 0) return false;\n    p = p.prevZ;\n  }\n  return true;\n} // go through all polygon nodes and cure small local self-intersections\n\nfunction cureLocalIntersections(start, triangles, dim) {\n  var p = start;\n  do {\n    var a = p.prev,\n      b = p.next.next;\n    if (!equals(a, b) && intersects(a, p, p.next, b) && locallyInside(a, b) && locallyInside(b, a)) {\n      triangles.push(a.i / dim);\n      triangles.push(p.i / dim);\n      triangles.push(b.i / dim); // remove two nodes involved\n\n      removeNode(p);\n      removeNode(p.next);\n      p = start = b;\n    }\n    p = p.next;\n  } while (p !== start);\n  return p;\n} // try splitting polygon into two and triangulate them independently\n\nfunction splitEarcut(start, triangles, dim, minX, minY, size) {\n  // look for a valid diagonal that divides the polygon into two\n  var a = start;\n  do {\n    var b = a.next.next;\n    while (b !== a.prev) {\n      if (a.i !== b.i && isValidDiagonal(a, b)) {\n        // split the polygon in two by the diagonal\n        var c = splitPolygon(a, b); // filter colinear points around the cuts\n\n        a = filterPoints(a, a.next);\n        c = filterPoints(c, c.next); // run earcut on each half\n\n        earcutLinked(a, triangles, dim, minX, minY, size);\n        earcutLinked(c, triangles, dim, minX, minY, size);\n        return;\n      }\n      b = b.next;\n    }\n    a = a.next;\n  } while (a !== start);\n} // link every hole into the outer loop, producing a single-ring polygon without holes\n\nfunction eliminateHoles(data, holeIndices, outerNode, dim) {\n  var queue = [],\n    i,\n    len,\n    start,\n    end,\n    list;\n  for (i = 0, len = holeIndices.length; i < len; i++) {\n    start = holeIndices[i] * dim;\n    end = i < len - 1 ? holeIndices[i + 1] * dim : data.length;\n    list = linkedList(data, start, end, dim, false);\n    if (list === list.next) list.steiner = true;\n    queue.push(getLeftmost(list));\n  }\n  queue.sort(compareX); // process holes from left to right\n\n  for (i = 0; i < queue.length; i++) {\n    eliminateHole(queue[i], outerNode);\n    outerNode = filterPoints(outerNode, outerNode.next);\n  }\n  return outerNode;\n}\nfunction compareX(a, b) {\n  return a.x - b.x;\n} // find a bridge between vertices that connects hole with an outer ring and and link it\n\nfunction eliminateHole(hole, outerNode) {\n  outerNode = findHoleBridge(hole, outerNode);\n  if (outerNode) {\n    var b = splitPolygon(outerNode, hole);\n    filterPoints(b, b.next);\n  }\n} // David Eberly's algorithm for finding a bridge between hole and outer polygon\n\nfunction findHoleBridge(hole, outerNode) {\n  var p = outerNode,\n    hx = hole.x,\n    hy = hole.y,\n    qx = -Infinity,\n    m; // find a segment intersected by a ray from the hole's leftmost point to the left;\n  // segment's endpoint with lesser x will be potential connection point\n\n  do {\n    if (hy <= p.y && hy >= p.next.y && p.next.y !== p.y) {\n      var x = p.x + (hy - p.y) * (p.next.x - p.x) / (p.next.y - p.y);\n      if (x <= hx && x > qx) {\n        qx = x;\n        if (x === hx) {\n          if (hy === p.y) return p;\n          if (hy === p.next.y) return p.next;\n        }\n        m = p.x < p.next.x ? p : p.next;\n      }\n    }\n    p = p.next;\n  } while (p !== outerNode);\n  if (!m) return null;\n  if (hx === qx) return m.prev; // hole touches outer segment; pick lower endpoint\n  // look for points inside the triangle of hole point, segment intersection and endpoint;\n  // if there are no points found, we have a valid connection;\n  // otherwise choose the point of the minimum angle with the ray as connection point\n\n  var stop = m,\n    mx = m.x,\n    my = m.y,\n    tanMin = Infinity,\n    tan;\n  p = m.next;\n  while (p !== stop) {\n    if (hx >= p.x && p.x >= mx && hx !== p.x && pointInTriangle(hy < my ? hx : qx, hy, mx, my, hy < my ? qx : hx, hy, p.x, p.y)) {\n      tan = Math.abs(hy - p.y) / (hx - p.x); // tangential\n\n      if ((tan < tanMin || tan === tanMin && p.x > m.x) && locallyInside(p, hole)) {\n        m = p;\n        tanMin = tan;\n      }\n    }\n    p = p.next;\n  }\n  return m;\n} // interlink polygon nodes in z-order\n\nfunction indexCurve(start, minX, minY, size) {\n  var p = start;\n  do {\n    if (p.z === null) p.z = zOrder(p.x, p.y, minX, minY, size);\n    p.prevZ = p.prev;\n    p.nextZ = p.next;\n    p = p.next;\n  } while (p !== start);\n  p.prevZ.nextZ = null;\n  p.prevZ = null;\n  sortLinked(p);\n} // Simon Tatham's linked list merge sort algorithm\n// http://www.chiark.greenend.org.uk/~sgtatham/algorithms/listsort.html\n\nfunction sortLinked(list) {\n  var i,\n    p,\n    q,\n    e,\n    tail,\n    numMerges,\n    pSize,\n    qSize,\n    inSize = 1;\n  do {\n    p = list;\n    list = null;\n    tail = null;\n    numMerges = 0;\n    while (p) {\n      numMerges++;\n      q = p;\n      pSize = 0;\n      for (i = 0; i < inSize; i++) {\n        pSize++;\n        q = q.nextZ;\n        if (!q) break;\n      }\n      qSize = inSize;\n      while (pSize > 0 || qSize > 0 && q) {\n        if (pSize !== 0 && (qSize === 0 || !q || p.z <= q.z)) {\n          e = p;\n          p = p.nextZ;\n          pSize--;\n        } else {\n          e = q;\n          q = q.nextZ;\n          qSize--;\n        }\n        if (tail) tail.nextZ = e;else list = e;\n        e.prevZ = tail;\n        tail = e;\n      }\n      p = q;\n    }\n    tail.nextZ = null;\n    inSize *= 2;\n  } while (numMerges > 1);\n  return list;\n} // z-order of a point given coords and size of the data bounding box\n\nfunction zOrder(x, y, minX, minY, size) {\n  // coords are transformed into non-negative 15-bit integer range\n  x = 32767 * (x - minX) / size;\n  y = 32767 * (y - minY) / size;\n  x = (x | x << 8) & 0x00FF00FF;\n  x = (x | x << 4) & 0x0F0F0F0F;\n  x = (x | x << 2) & 0x33333333;\n  x = (x | x << 1) & 0x55555555;\n  y = (y | y << 8) & 0x00FF00FF;\n  y = (y | y << 4) & 0x0F0F0F0F;\n  y = (y | y << 2) & 0x33333333;\n  y = (y | y << 1) & 0x55555555;\n  return x | y << 1;\n} // find the leftmost node of a polygon ring\n\nfunction getLeftmost(start) {\n  var p = start,\n    leftmost = start;\n  do {\n    if (p.x < leftmost.x) leftmost = p;\n    p = p.next;\n  } while (p !== start);\n  return leftmost;\n} // check if a point lies within a convex triangle\n\nfunction pointInTriangle(ax, ay, bx, by, cx, cy, px, py) {\n  return (cx - px) * (ay - py) - (ax - px) * (cy - py) >= 0 && (ax - px) * (by - py) - (bx - px) * (ay - py) >= 0 && (bx - px) * (cy - py) - (cx - px) * (by - py) >= 0;\n} // check if a diagonal between two polygon nodes is valid (lies in polygon interior)\n\nfunction isValidDiagonal(a, b) {\n  return a.next.i !== b.i && a.prev.i !== b.i && !intersectsPolygon(a, b) && locallyInside(a, b) && locallyInside(b, a) && middleInside(a, b);\n} // signed area of a triangle\n\nfunction area(p, q, r) {\n  return (q.y - p.y) * (r.x - q.x) - (q.x - p.x) * (r.y - q.y);\n} // check if two points are equal\n\nfunction equals(p1, p2) {\n  return p1.x === p2.x && p1.y === p2.y;\n} // check if two segments intersect\n\nfunction intersects(p1, q1, p2, q2) {\n  if (equals(p1, q1) && equals(p2, q2) || equals(p1, q2) && equals(p2, q1)) return true;\n  return area(p1, q1, p2) > 0 !== area(p1, q1, q2) > 0 && area(p2, q2, p1) > 0 !== area(p2, q2, q1) > 0;\n} // check if a polygon diagonal intersects any polygon segments\n\nfunction intersectsPolygon(a, b) {\n  var p = a;\n  do {\n    if (p.i !== a.i && p.next.i !== a.i && p.i !== b.i && p.next.i !== b.i && intersects(p, p.next, a, b)) return true;\n    p = p.next;\n  } while (p !== a);\n  return false;\n} // check if a polygon diagonal is locally inside the polygon\n\nfunction locallyInside(a, b) {\n  return area(a.prev, a, a.next) < 0 ? area(a, b, a.next) >= 0 && area(a, a.prev, b) >= 0 : area(a, b, a.prev) < 0 || area(a, a.next, b) < 0;\n} // check if the middle point of a polygon diagonal is inside the polygon\n\nfunction middleInside(a, b) {\n  var p = a,\n    inside = false,\n    px = (a.x + b.x) / 2,\n    py = (a.y + b.y) / 2;\n  do {\n    if (p.y > py !== p.next.y > py && p.next.y !== p.y && px < (p.next.x - p.x) * (py - p.y) / (p.next.y - p.y) + p.x) inside = !inside;\n    p = p.next;\n  } while (p !== a);\n  return inside;\n} // link two polygon vertices with a bridge; if the vertices belong to the same ring, it splits polygon into two;\n// if one belongs to the outer ring and another to a hole, it merges it into a single ring\n\nfunction splitPolygon(a, b) {\n  var a2 = new Node(a.i, a.x, a.y),\n    b2 = new Node(b.i, b.x, b.y),\n    an = a.next,\n    bp = b.prev;\n  a.next = b;\n  b.prev = a;\n  a2.next = an;\n  an.prev = a2;\n  b2.next = a2;\n  a2.prev = b2;\n  bp.next = b2;\n  b2.prev = bp;\n  return b2;\n} // create a node and optionally link it with previous one (in a circular doubly linked list)\n\nfunction insertNode(i, x, y, last) {\n  var p = new Node(i, x, y);\n  if (!last) {\n    p.prev = p;\n    p.next = p;\n  } else {\n    p.next = last.next;\n    p.prev = last;\n    last.next.prev = p;\n    last.next = p;\n  }\n  return p;\n}\nfunction removeNode(p) {\n  p.next.prev = p.prev;\n  p.prev.next = p.next;\n  if (p.prevZ) p.prevZ.nextZ = p.nextZ;\n  if (p.nextZ) p.nextZ.prevZ = p.prevZ;\n}\nfunction Node(i, x, y) {\n  // vertice index in coordinates array\n  this.i = i; // vertex coordinates\n\n  this.x = x;\n  this.y = y; // previous and next vertice nodes in a polygon ring\n\n  this.prev = null;\n  this.next = null; // z-order curve value\n\n  this.z = null; // previous and next nodes in z-order\n\n  this.prevZ = null;\n  this.nextZ = null; // indicates whether this is a steiner point\n\n  this.steiner = false;\n} // return a percentage difference between the polygon area and its triangulation area;\n// used to verify correctness of triangulation\n\nearcut.deviation = function (data, holeIndices, dim, triangles) {\n  var hasHoles = holeIndices && holeIndices.length;\n  var outerLen = hasHoles ? holeIndices[0] * dim : data.length;\n  var polygonArea = Math.abs(signedArea(data, 0, outerLen, dim));\n  if (hasHoles) {\n    for (var i = 0, len = holeIndices.length; i < len; i++) {\n      var start = holeIndices[i] * dim;\n      var end = i < len - 1 ? holeIndices[i + 1] * dim : data.length;\n      polygonArea -= Math.abs(signedArea(data, start, end, dim));\n    }\n  }\n  var trianglesArea = 0;\n  for (i = 0; i < triangles.length; i += 3) {\n    var a = triangles[i] * dim;\n    var b = triangles[i + 1] * dim;\n    var c = triangles[i + 2] * dim;\n    trianglesArea += Math.abs((data[a] - data[c]) * (data[b + 1] - data[a + 1]) - (data[a] - data[b]) * (data[c + 1] - data[a + 1]));\n  }\n  return polygonArea === 0 && trianglesArea === 0 ? 0 : Math.abs((trianglesArea - polygonArea) / polygonArea);\n};\nfunction signedArea(data, start, end, dim) {\n  var sum = 0;\n  for (var i = start, j = end - dim; i < end; i += dim) {\n    sum += (data[j] - data[i]) * (data[i + 1] + data[j + 1]);\n    j = i;\n  }\n  return sum;\n}","map":{"version":3,"names":["earcut","data","holeIndices","dim","hasHoles","length","outerLen","outerNode","linkedList","triangles","minX","minY","maxX","maxY","x","y","size","eliminateHoles","i","Math","max","earcutLinked","start","end","clockwise","last","signedArea","insertNode","equals","next","removeNode","filterPoints","p","again","steiner","area","prev","ear","pass","indexCurve","stop","isEarHashed","isEar","push","cureLocalIntersections","splitEarcut","a","b","c","pointInTriangle","minTX","minTY","maxTX","maxTY","minZ","zOrder","maxZ","nextZ","z","prevZ","intersects","locallyInside","isValidDiagonal","splitPolygon","queue","len","list","getLeftmost","sort","compareX","eliminateHole","hole","findHoleBridge","hx","hy","qx","Infinity","m","mx","my","tanMin","tan","abs","sortLinked","q","e","tail","numMerges","pSize","qSize","inSize","leftmost","ax","ay","bx","by","cx","cy","px","py","intersectsPolygon","middleInside","r","p1","p2","q1","q2","inside","a2","Node","b2","an","bp","deviation","polygonArea","trianglesArea","sum","j"],"sources":["E:/QuestionairePlanet_Fronted/mytest/node_modules/echarts-gl/lib/util/earcut.js"],"sourcesContent":["// https://github.com/mapbox/earcut/blob/master/src/earcut.js\nexport default earcut;\n\nfunction earcut(data, holeIndices, dim) {\n  dim = dim || 2;\n  var hasHoles = holeIndices && holeIndices.length,\n      outerLen = hasHoles ? holeIndices[0] * dim : data.length,\n      outerNode = linkedList(data, 0, outerLen, dim, true),\n      triangles = [];\n  if (!outerNode) return triangles;\n  var minX, minY, maxX, maxY, x, y, size;\n  if (hasHoles) outerNode = eliminateHoles(data, holeIndices, outerNode, dim); // if the shape is not too simple, we'll use z-order curve hash later; calculate polygon bbox\n\n  if (data.length > 80 * dim) {\n    minX = maxX = data[0];\n    minY = maxY = data[1];\n\n    for (var i = dim; i < outerLen; i += dim) {\n      x = data[i];\n      y = data[i + 1];\n      if (x < minX) minX = x;\n      if (y < minY) minY = y;\n      if (x > maxX) maxX = x;\n      if (y > maxY) maxY = y;\n    } // minX, minY and size are later used to transform coords into integers for z-order calculation\n\n\n    size = Math.max(maxX - minX, maxY - minY);\n  }\n\n  earcutLinked(outerNode, triangles, dim, minX, minY, size);\n  return triangles;\n} // create a circular doubly linked list from polygon points in the specified winding order\n\n\nfunction linkedList(data, start, end, dim, clockwise) {\n  var i, last;\n\n  if (clockwise === signedArea(data, start, end, dim) > 0) {\n    for (i = start; i < end; i += dim) last = insertNode(i, data[i], data[i + 1], last);\n  } else {\n    for (i = end - dim; i >= start; i -= dim) last = insertNode(i, data[i], data[i + 1], last);\n  }\n\n  if (last && equals(last, last.next)) {\n    removeNode(last);\n    last = last.next;\n  }\n\n  return last;\n} // eliminate colinear or duplicate points\n\n\nfunction filterPoints(start, end) {\n  if (!start) return start;\n  if (!end) end = start;\n  var p = start,\n      again;\n\n  do {\n    again = false;\n\n    if (!p.steiner && (equals(p, p.next) || area(p.prev, p, p.next) === 0)) {\n      removeNode(p);\n      p = end = p.prev;\n      if (p === p.next) return null;\n      again = true;\n    } else {\n      p = p.next;\n    }\n  } while (again || p !== end);\n\n  return end;\n} // main ear slicing loop which triangulates a polygon (given as a linked list)\n\n\nfunction earcutLinked(ear, triangles, dim, minX, minY, size, pass) {\n  if (!ear) return; // interlink polygon nodes in z-order\n\n  if (!pass && size) indexCurve(ear, minX, minY, size);\n  var stop = ear,\n      prev,\n      next; // iterate through ears, slicing them one by one\n\n  while (ear.prev !== ear.next) {\n    prev = ear.prev;\n    next = ear.next;\n\n    if (size ? isEarHashed(ear, minX, minY, size) : isEar(ear)) {\n      // cut off the triangle\n      triangles.push(prev.i / dim);\n      triangles.push(ear.i / dim);\n      triangles.push(next.i / dim);\n      removeNode(ear); // skipping the next vertice leads to less sliver triangles\n\n      ear = next.next;\n      stop = next.next;\n      continue;\n    }\n\n    ear = next; // if we looped through the whole remaining polygon and can't find any more ears\n\n    if (ear === stop) {\n      // try filtering points and slicing again\n      if (!pass) {\n        earcutLinked(filterPoints(ear), triangles, dim, minX, minY, size, 1); // if this didn't work, try curing all small self-intersections locally\n      } else if (pass === 1) {\n        ear = cureLocalIntersections(ear, triangles, dim);\n        earcutLinked(ear, triangles, dim, minX, minY, size, 2); // as a last resort, try splitting the remaining polygon into two\n      } else if (pass === 2) {\n        splitEarcut(ear, triangles, dim, minX, minY, size);\n      }\n\n      break;\n    }\n  }\n} // check whether a polygon node forms a valid ear with adjacent nodes\n\n\nfunction isEar(ear) {\n  var a = ear.prev,\n      b = ear,\n      c = ear.next;\n  if (area(a, b, c) >= 0) return false; // reflex, can't be an ear\n  // now make sure we don't have other points inside the potential ear\n\n  var p = ear.next.next;\n\n  while (p !== ear.prev) {\n    if (pointInTriangle(a.x, a.y, b.x, b.y, c.x, c.y, p.x, p.y) && area(p.prev, p, p.next) >= 0) return false;\n    p = p.next;\n  }\n\n  return true;\n}\n\nfunction isEarHashed(ear, minX, minY, size) {\n  var a = ear.prev,\n      b = ear,\n      c = ear.next;\n  if (area(a, b, c) >= 0) return false; // reflex, can't be an ear\n  // triangle bbox; min & max are calculated like this for speed\n\n  var minTX = a.x < b.x ? a.x < c.x ? a.x : c.x : b.x < c.x ? b.x : c.x,\n      minTY = a.y < b.y ? a.y < c.y ? a.y : c.y : b.y < c.y ? b.y : c.y,\n      maxTX = a.x > b.x ? a.x > c.x ? a.x : c.x : b.x > c.x ? b.x : c.x,\n      maxTY = a.y > b.y ? a.y > c.y ? a.y : c.y : b.y > c.y ? b.y : c.y; // z-order range for the current triangle bbox;\n\n  var minZ = zOrder(minTX, minTY, minX, minY, size),\n      maxZ = zOrder(maxTX, maxTY, minX, minY, size); // first look for points inside the triangle in increasing z-order\n\n  var p = ear.nextZ;\n\n  while (p && p.z <= maxZ) {\n    if (p !== ear.prev && p !== ear.next && pointInTriangle(a.x, a.y, b.x, b.y, c.x, c.y, p.x, p.y) && area(p.prev, p, p.next) >= 0) return false;\n    p = p.nextZ;\n  } // then look for points in decreasing z-order\n\n\n  p = ear.prevZ;\n\n  while (p && p.z >= minZ) {\n    if (p !== ear.prev && p !== ear.next && pointInTriangle(a.x, a.y, b.x, b.y, c.x, c.y, p.x, p.y) && area(p.prev, p, p.next) >= 0) return false;\n    p = p.prevZ;\n  }\n\n  return true;\n} // go through all polygon nodes and cure small local self-intersections\n\n\nfunction cureLocalIntersections(start, triangles, dim) {\n  var p = start;\n\n  do {\n    var a = p.prev,\n        b = p.next.next;\n\n    if (!equals(a, b) && intersects(a, p, p.next, b) && locallyInside(a, b) && locallyInside(b, a)) {\n      triangles.push(a.i / dim);\n      triangles.push(p.i / dim);\n      triangles.push(b.i / dim); // remove two nodes involved\n\n      removeNode(p);\n      removeNode(p.next);\n      p = start = b;\n    }\n\n    p = p.next;\n  } while (p !== start);\n\n  return p;\n} // try splitting polygon into two and triangulate them independently\n\n\nfunction splitEarcut(start, triangles, dim, minX, minY, size) {\n  // look for a valid diagonal that divides the polygon into two\n  var a = start;\n\n  do {\n    var b = a.next.next;\n\n    while (b !== a.prev) {\n      if (a.i !== b.i && isValidDiagonal(a, b)) {\n        // split the polygon in two by the diagonal\n        var c = splitPolygon(a, b); // filter colinear points around the cuts\n\n        a = filterPoints(a, a.next);\n        c = filterPoints(c, c.next); // run earcut on each half\n\n        earcutLinked(a, triangles, dim, minX, minY, size);\n        earcutLinked(c, triangles, dim, minX, minY, size);\n        return;\n      }\n\n      b = b.next;\n    }\n\n    a = a.next;\n  } while (a !== start);\n} // link every hole into the outer loop, producing a single-ring polygon without holes\n\n\nfunction eliminateHoles(data, holeIndices, outerNode, dim) {\n  var queue = [],\n      i,\n      len,\n      start,\n      end,\n      list;\n\n  for (i = 0, len = holeIndices.length; i < len; i++) {\n    start = holeIndices[i] * dim;\n    end = i < len - 1 ? holeIndices[i + 1] * dim : data.length;\n    list = linkedList(data, start, end, dim, false);\n    if (list === list.next) list.steiner = true;\n    queue.push(getLeftmost(list));\n  }\n\n  queue.sort(compareX); // process holes from left to right\n\n  for (i = 0; i < queue.length; i++) {\n    eliminateHole(queue[i], outerNode);\n    outerNode = filterPoints(outerNode, outerNode.next);\n  }\n\n  return outerNode;\n}\n\nfunction compareX(a, b) {\n  return a.x - b.x;\n} // find a bridge between vertices that connects hole with an outer ring and and link it\n\n\nfunction eliminateHole(hole, outerNode) {\n  outerNode = findHoleBridge(hole, outerNode);\n\n  if (outerNode) {\n    var b = splitPolygon(outerNode, hole);\n    filterPoints(b, b.next);\n  }\n} // David Eberly's algorithm for finding a bridge between hole and outer polygon\n\n\nfunction findHoleBridge(hole, outerNode) {\n  var p = outerNode,\n      hx = hole.x,\n      hy = hole.y,\n      qx = -Infinity,\n      m; // find a segment intersected by a ray from the hole's leftmost point to the left;\n  // segment's endpoint with lesser x will be potential connection point\n\n  do {\n    if (hy <= p.y && hy >= p.next.y && p.next.y !== p.y) {\n      var x = p.x + (hy - p.y) * (p.next.x - p.x) / (p.next.y - p.y);\n\n      if (x <= hx && x > qx) {\n        qx = x;\n\n        if (x === hx) {\n          if (hy === p.y) return p;\n          if (hy === p.next.y) return p.next;\n        }\n\n        m = p.x < p.next.x ? p : p.next;\n      }\n    }\n\n    p = p.next;\n  } while (p !== outerNode);\n\n  if (!m) return null;\n  if (hx === qx) return m.prev; // hole touches outer segment; pick lower endpoint\n  // look for points inside the triangle of hole point, segment intersection and endpoint;\n  // if there are no points found, we have a valid connection;\n  // otherwise choose the point of the minimum angle with the ray as connection point\n\n  var stop = m,\n      mx = m.x,\n      my = m.y,\n      tanMin = Infinity,\n      tan;\n  p = m.next;\n\n  while (p !== stop) {\n    if (hx >= p.x && p.x >= mx && hx !== p.x && pointInTriangle(hy < my ? hx : qx, hy, mx, my, hy < my ? qx : hx, hy, p.x, p.y)) {\n      tan = Math.abs(hy - p.y) / (hx - p.x); // tangential\n\n      if ((tan < tanMin || tan === tanMin && p.x > m.x) && locallyInside(p, hole)) {\n        m = p;\n        tanMin = tan;\n      }\n    }\n\n    p = p.next;\n  }\n\n  return m;\n} // interlink polygon nodes in z-order\n\n\nfunction indexCurve(start, minX, minY, size) {\n  var p = start;\n\n  do {\n    if (p.z === null) p.z = zOrder(p.x, p.y, minX, minY, size);\n    p.prevZ = p.prev;\n    p.nextZ = p.next;\n    p = p.next;\n  } while (p !== start);\n\n  p.prevZ.nextZ = null;\n  p.prevZ = null;\n  sortLinked(p);\n} // Simon Tatham's linked list merge sort algorithm\n// http://www.chiark.greenend.org.uk/~sgtatham/algorithms/listsort.html\n\n\nfunction sortLinked(list) {\n  var i,\n      p,\n      q,\n      e,\n      tail,\n      numMerges,\n      pSize,\n      qSize,\n      inSize = 1;\n\n  do {\n    p = list;\n    list = null;\n    tail = null;\n    numMerges = 0;\n\n    while (p) {\n      numMerges++;\n      q = p;\n      pSize = 0;\n\n      for (i = 0; i < inSize; i++) {\n        pSize++;\n        q = q.nextZ;\n        if (!q) break;\n      }\n\n      qSize = inSize;\n\n      while (pSize > 0 || qSize > 0 && q) {\n        if (pSize !== 0 && (qSize === 0 || !q || p.z <= q.z)) {\n          e = p;\n          p = p.nextZ;\n          pSize--;\n        } else {\n          e = q;\n          q = q.nextZ;\n          qSize--;\n        }\n\n        if (tail) tail.nextZ = e;else list = e;\n        e.prevZ = tail;\n        tail = e;\n      }\n\n      p = q;\n    }\n\n    tail.nextZ = null;\n    inSize *= 2;\n  } while (numMerges > 1);\n\n  return list;\n} // z-order of a point given coords and size of the data bounding box\n\n\nfunction zOrder(x, y, minX, minY, size) {\n  // coords are transformed into non-negative 15-bit integer range\n  x = 32767 * (x - minX) / size;\n  y = 32767 * (y - minY) / size;\n  x = (x | x << 8) & 0x00FF00FF;\n  x = (x | x << 4) & 0x0F0F0F0F;\n  x = (x | x << 2) & 0x33333333;\n  x = (x | x << 1) & 0x55555555;\n  y = (y | y << 8) & 0x00FF00FF;\n  y = (y | y << 4) & 0x0F0F0F0F;\n  y = (y | y << 2) & 0x33333333;\n  y = (y | y << 1) & 0x55555555;\n  return x | y << 1;\n} // find the leftmost node of a polygon ring\n\n\nfunction getLeftmost(start) {\n  var p = start,\n      leftmost = start;\n\n  do {\n    if (p.x < leftmost.x) leftmost = p;\n    p = p.next;\n  } while (p !== start);\n\n  return leftmost;\n} // check if a point lies within a convex triangle\n\n\nfunction pointInTriangle(ax, ay, bx, by, cx, cy, px, py) {\n  return (cx - px) * (ay - py) - (ax - px) * (cy - py) >= 0 && (ax - px) * (by - py) - (bx - px) * (ay - py) >= 0 && (bx - px) * (cy - py) - (cx - px) * (by - py) >= 0;\n} // check if a diagonal between two polygon nodes is valid (lies in polygon interior)\n\n\nfunction isValidDiagonal(a, b) {\n  return a.next.i !== b.i && a.prev.i !== b.i && !intersectsPolygon(a, b) && locallyInside(a, b) && locallyInside(b, a) && middleInside(a, b);\n} // signed area of a triangle\n\n\nfunction area(p, q, r) {\n  return (q.y - p.y) * (r.x - q.x) - (q.x - p.x) * (r.y - q.y);\n} // check if two points are equal\n\n\nfunction equals(p1, p2) {\n  return p1.x === p2.x && p1.y === p2.y;\n} // check if two segments intersect\n\n\nfunction intersects(p1, q1, p2, q2) {\n  if (equals(p1, q1) && equals(p2, q2) || equals(p1, q2) && equals(p2, q1)) return true;\n  return area(p1, q1, p2) > 0 !== area(p1, q1, q2) > 0 && area(p2, q2, p1) > 0 !== area(p2, q2, q1) > 0;\n} // check if a polygon diagonal intersects any polygon segments\n\n\nfunction intersectsPolygon(a, b) {\n  var p = a;\n\n  do {\n    if (p.i !== a.i && p.next.i !== a.i && p.i !== b.i && p.next.i !== b.i && intersects(p, p.next, a, b)) return true;\n    p = p.next;\n  } while (p !== a);\n\n  return false;\n} // check if a polygon diagonal is locally inside the polygon\n\n\nfunction locallyInside(a, b) {\n  return area(a.prev, a, a.next) < 0 ? area(a, b, a.next) >= 0 && area(a, a.prev, b) >= 0 : area(a, b, a.prev) < 0 || area(a, a.next, b) < 0;\n} // check if the middle point of a polygon diagonal is inside the polygon\n\n\nfunction middleInside(a, b) {\n  var p = a,\n      inside = false,\n      px = (a.x + b.x) / 2,\n      py = (a.y + b.y) / 2;\n\n  do {\n    if (p.y > py !== p.next.y > py && p.next.y !== p.y && px < (p.next.x - p.x) * (py - p.y) / (p.next.y - p.y) + p.x) inside = !inside;\n    p = p.next;\n  } while (p !== a);\n\n  return inside;\n} // link two polygon vertices with a bridge; if the vertices belong to the same ring, it splits polygon into two;\n// if one belongs to the outer ring and another to a hole, it merges it into a single ring\n\n\nfunction splitPolygon(a, b) {\n  var a2 = new Node(a.i, a.x, a.y),\n      b2 = new Node(b.i, b.x, b.y),\n      an = a.next,\n      bp = b.prev;\n  a.next = b;\n  b.prev = a;\n  a2.next = an;\n  an.prev = a2;\n  b2.next = a2;\n  a2.prev = b2;\n  bp.next = b2;\n  b2.prev = bp;\n  return b2;\n} // create a node and optionally link it with previous one (in a circular doubly linked list)\n\n\nfunction insertNode(i, x, y, last) {\n  var p = new Node(i, x, y);\n\n  if (!last) {\n    p.prev = p;\n    p.next = p;\n  } else {\n    p.next = last.next;\n    p.prev = last;\n    last.next.prev = p;\n    last.next = p;\n  }\n\n  return p;\n}\n\nfunction removeNode(p) {\n  p.next.prev = p.prev;\n  p.prev.next = p.next;\n  if (p.prevZ) p.prevZ.nextZ = p.nextZ;\n  if (p.nextZ) p.nextZ.prevZ = p.prevZ;\n}\n\nfunction Node(i, x, y) {\n  // vertice index in coordinates array\n  this.i = i; // vertex coordinates\n\n  this.x = x;\n  this.y = y; // previous and next vertice nodes in a polygon ring\n\n  this.prev = null;\n  this.next = null; // z-order curve value\n\n  this.z = null; // previous and next nodes in z-order\n\n  this.prevZ = null;\n  this.nextZ = null; // indicates whether this is a steiner point\n\n  this.steiner = false;\n} // return a percentage difference between the polygon area and its triangulation area;\n// used to verify correctness of triangulation\n\n\nearcut.deviation = function (data, holeIndices, dim, triangles) {\n  var hasHoles = holeIndices && holeIndices.length;\n  var outerLen = hasHoles ? holeIndices[0] * dim : data.length;\n  var polygonArea = Math.abs(signedArea(data, 0, outerLen, dim));\n\n  if (hasHoles) {\n    for (var i = 0, len = holeIndices.length; i < len; i++) {\n      var start = holeIndices[i] * dim;\n      var end = i < len - 1 ? holeIndices[i + 1] * dim : data.length;\n      polygonArea -= Math.abs(signedArea(data, start, end, dim));\n    }\n  }\n\n  var trianglesArea = 0;\n\n  for (i = 0; i < triangles.length; i += 3) {\n    var a = triangles[i] * dim;\n    var b = triangles[i + 1] * dim;\n    var c = triangles[i + 2] * dim;\n    trianglesArea += Math.abs((data[a] - data[c]) * (data[b + 1] - data[a + 1]) - (data[a] - data[b]) * (data[c + 1] - data[a + 1]));\n  }\n\n  return polygonArea === 0 && trianglesArea === 0 ? 0 : Math.abs((trianglesArea - polygonArea) / polygonArea);\n};\n\nfunction signedArea(data, start, end, dim) {\n  var sum = 0;\n\n  for (var i = start, j = end - dim; i < end; i += dim) {\n    sum += (data[j] - data[i]) * (data[i + 1] + data[j + 1]);\n    j = i;\n  }\n\n  return sum;\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}