{"ast":null,"code":"import { resolveComponent as _resolveComponent, createVNode as _createVNode, createElementVNode as _createElementVNode, createCommentVNode as _createCommentVNode, toDisplayString as _toDisplayString, openBlock as _openBlock, createElementBlock as _createElementBlock, withCtx as _withCtx, renderList as _renderList, Fragment as _Fragment, createBlock as _createBlock, createTextVNode as _createTextVNode, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\nconst _withScopeId = n => (_pushScopeId(\"data-v-5d5abda6\"), n = n(), _popScopeId(), n);\nconst _hoisted_1 = {\n  class: \"common-layout\"\n};\nconst _hoisted_2 = {\n  class: \"mytable\"\n};\nconst _hoisted_3 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"h2\", null, \"考试统计\", -1 /* HOISTED */));\nconst _hoisted_4 = {\n  key: 0,\n  class: \"question-description\",\n  style: {\n    \"margin-top\": \"-60px\"\n  }\n};\nconst _hoisted_5 = {\n  style: {\n    \"margin-top\": \"0px\",\n    \"margin-bottom\": \"-30px\",\n    \"display\": \"flex\",\n    \"justify-content\": \"space-around\",\n    \"align-items\": \"center\",\n    \"width\": \"50%\"\n  }\n};\nconst _hoisted_6 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"div\", null, \"本题正确率:\", -1 /* HOISTED */));\nconst _hoisted_7 = {\n  style: {\n    \"flex-shrink\": \"0\",\n    \"margin-right\": \"10px\"\n  }\n};\nconst _hoisted_8 = {\n  class: \"chart-buttons\"\n};\nconst _hoisted_9 = {\n  key: 1,\n  id: \"export-content\",\n  class: \"chart-container\"\n};\nconst _hoisted_10 = {\n  ref: \"chartCanvas\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_el_header = _resolveComponent(\"el-header\");\n  const _component_el_table_column = _resolveComponent(\"el-table-column\");\n  const _component_el_progress = _resolveComponent(\"el-progress\");\n  const _component_el_table = _resolveComponent(\"el-table\");\n  const _component_el_option = _resolveComponent(\"el-option\");\n  const _component_el_select = _resolveComponent(\"el-select\");\n  const _component_el_button = _resolveComponent(\"el-button\");\n  const _component_el_main = _resolveComponent(\"el-main\");\n  const _component_el_container = _resolveComponent(\"el-container\");\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createVNode(_component_el_container, null, {\n    default: _withCtx(() => [_createVNode(_component_el_header), _createVNode(_component_el_main, null, {\n      default: _withCtx(() => [_createElementVNode(\"div\", _hoisted_2, [_hoisted_3, _createCommentVNode(\" 问题描述显示 \"), $data.currentQuestion ? (_openBlock(), _createElementBlock(\"div\", _hoisted_4, [_createElementVNode(\"h3\", null, _toDisplayString($options.currentQuestionDescription), 1 /* TEXT */)])) : _createCommentVNode(\"v-if\", true), _createVNode(_component_el_table, {\n        data: $data.options,\n        style: {\n          \"width\": \"50%\"\n        },\n        height: \"250\",\n        stripe: \"\",\n        fit: \"\",\n        size: \"large\"\n      }, {\n        default: _withCtx(() => [_createVNode(_component_el_table_column, {\n          fixed: \"\",\n          prop: \"name\",\n          label: \"选项\"\n        }), _createVNode(_component_el_table_column, {\n          prop: \"count\",\n          label: \"选择人数\"\n        }), _createVNode(_component_el_table_column, {\n          label: \"占比\"\n        }, {\n          default: _withCtx(scope => [_createVNode(_component_el_progress, {\n            percentage: parseFloat(scope.row.percentage)\n          }, null, 8 /* PROPS */, [\"percentage\"]), _createCommentVNode(\" 注意：将占比转换成数值类型 \")]),\n          _: 1 /* STABLE */\n        })]),\n        _: 1 /* STABLE */\n      }, 8 /* PROPS */, [\"data\"]), _createElementVNode(\"div\", _hoisted_5, [_hoisted_6, _createElementVNode(\"div\", _hoisted_7, _toDisplayString(Math.round($data.correctRate)) + \" 人正确\", 1 /* TEXT */), _createVNode(_component_el_progress, {\n        percentage: $data.correctRate,\n        style: {\n          \"width\": \"100%\",\n          \"max-width\": \"300px\"\n        }\n      }, null, 8 /* PROPS */, [\"percentage\"])]), _createCommentVNode(\" 图表展示按钮 \"), _createElementVNode(\"div\", _hoisted_8, [_createCommentVNode(\" 添加一个下拉菜单选择要查看的问题 \"), _createVNode(_component_el_select, {\n        modelValue: $data.currentQuestion,\n        \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => $data.currentQuestion = $event),\n        placeholder: \"请选择一个问题\"\n      }, {\n        default: _withCtx(() => [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.questions, (question, index) => {\n          return _openBlock(), _createBlock(_component_el_option, {\n            key: question.id,\n            label: `问题 ${index + 1}`,\n            value: question.id\n          }, null, 8 /* PROPS */, [\"label\", \"value\"]);\n        }), 128 /* KEYED_FRAGMENT */))]),\n        _: 1 /* STABLE */\n      }, 8 /* PROPS */, [\"modelValue\"]), _createVNode(_component_el_button, {\n        type: \"primary\",\n        onClick: _cache[1] || (_cache[1] = $event => $options.toggleChart('bar'))\n      }, {\n        default: _withCtx(() => [_createTextVNode(\"柱状图\")]),\n        _: 1 /* STABLE */\n      }), _createVNode(_component_el_button, {\n        type: \"primary\",\n        onClick: _cache[2] || (_cache[2] = $event => $options.toggleChart('line'))\n      }, {\n        default: _withCtx(() => [_createTextVNode(\"折线图\")]),\n        _: 1 /* STABLE */\n      }), _createVNode(_component_el_button, {\n        type: \"primary\",\n        onClick: _cache[3] || (_cache[3] = $event => $options.toggleChart('pie'))\n      }, {\n        default: _withCtx(() => [_createTextVNode(\"饼状图\")]),\n        _: 1 /* STABLE */\n      }), _createVNode(_component_el_button, {\n        type: \"primary\",\n        onClick: $options.exportToExcel\n      }, {\n        default: _withCtx(() => [_createTextVNode(\"导出为 Excel\")]),\n        _: 1 /* STABLE */\n      }, 8 /* PROPS */, [\"onClick\"]), _createVNode(_component_el_button, {\n        type: \"primary\",\n        onClick: _ctx.exportToWordAndPDF\n      }, {\n        default: _withCtx(() => [_createTextVNode(\"导出为 PDF\")]),\n        _: 1 /* STABLE */\n      }, 8 /* PROPS */, [\"onClick\"])]), _createCommentVNode(\" 图表展示区域 \"), $data.showChart ? (_openBlock(), _createElementBlock(\"div\", _hoisted_9, [_createElementVNode(\"canvas\", _hoisted_10, null, 512 /* NEED_PATCH */)])) : _createCommentVNode(\"v-if\", true)])]),\n      _: 1 /* STABLE */\n    })]),\n    _: 1 /* STABLE */\n  })]);\n}","map":{"version":3,"names":["class","_createElementVNode","key","style","id","ref","_createElementBlock","_hoisted_1","_createVNode","_component_el_container","default","_withCtx","_component_el_header","_component_el_main","_hoisted_2","_hoisted_3","_createCommentVNode","$data","currentQuestion","_hoisted_4","_toDisplayString","$options","currentQuestionDescription","_component_el_table","data","options","height","stripe","fit","size","_component_el_table_column","fixed","prop","label","scope","_component_el_progress","percentage","parseFloat","row","_","_hoisted_5","_hoisted_6","_hoisted_7","Math","round","correctRate","_hoisted_8","_component_el_select","modelValue","_cache","$event","placeholder","_Fragment","_renderList","questions","question","index","_createBlock","_component_el_option","value","_component_el_button","type","onClick","toggleChart","_createTextVNode","exportToExcel","_ctx","exportToWordAndPDF","showChart","_hoisted_9","_hoisted_10"],"sources":["E:\\mytest\\src\\views\\qn-data\\qnTestDataview.vue"],"sourcesContent":["<template>\r\n    <div class=\"common-layout\">\r\n      <el-container>\r\n        <el-header></el-header>\r\n        <el-main>\r\n          <div class=\"mytable\">\r\n            <h2>考试统计</h2>\r\n\r\n            <!-- 问题描述显示 -->\r\n            <div v-if=\"currentQuestion\" class=\"question-description\" style=\"margin-top: -60px;\">\r\n                <h3>{{ currentQuestionDescription }}</h3>\r\n            </div>\r\n\r\n            <el-table :data=\"options\" style=\"width: 50%\" height=\"250\" stripe fit size=\"large\">\r\n              <el-table-column fixed prop=\"name\" label=\"选项\" />\r\n              <el-table-column prop=\"count\" label=\"选择人数\" />\r\n              <el-table-column label=\"占比\" >\r\n                <template #default=\"scope\">\r\n                  <el-progress :percentage=\"parseFloat(scope.row.percentage)\" /> <!-- 注意：将占比转换成数值类型 -->\r\n                </template>              \r\n              </el-table-column>\r\n            </el-table>\r\n  \r\n            <div style=\"margin-top: 0px; margin-bottom: -30px; display: flex; justify-content: space-around; align-items: center; width: 50%;\">\r\n              <div>本题正确率:</div>\r\n              <div style=\"flex-shrink: 0; margin-right: 10px;\">{{ Math.round(correctRate) }} 人正确</div>\r\n              <el-progress :percentage=\"correctRate\" style=\"width: 100%; max-width: 300px;\"></el-progress>\r\n            </div>\r\n  \r\n            <!-- 图表展示按钮 -->\r\n            <div class=\"chart-buttons\">\r\n              <!-- 添加一个下拉菜单选择要查看的问题 -->\r\n              <el-select v-model=\"currentQuestion\" placeholder=\"请选择一个问题\">\r\n                <el-option\r\n                    v-for=\"(question, index) in questions\"\r\n                    :key=\"question.id\"\r\n                    :label=\"`问题 ${index + 1}`\"\r\n                    :value=\"question.id\">\r\n                </el-option>\r\n                </el-select>\r\n                <el-button type=\"primary\" @click=\"toggleChart('bar')\">柱状图</el-button>\r\n                <el-button type=\"primary\" @click=\"toggleChart('line')\">折线图</el-button>\r\n                <el-button type=\"primary\" @click=\"toggleChart('pie')\">饼状图</el-button>\r\n                <el-button type=\"primary\" @click=\"exportToExcel\">导出为 Excel</el-button>\r\n                <el-button type=\"primary\" @click=\"exportToWordAndPDF\">导出为 PDF</el-button>\r\n            </div>\r\n  \r\n            <!-- 图表展示区域 -->\r\n            <div id=\"export-content\" v-if=\"showChart\" class=\"chart-container\">\r\n              <canvas ref=\"chartCanvas\"></canvas>\r\n            </div>\r\n  \r\n          </div>\r\n        </el-main>\r\n      </el-container>\r\n    </div>\r\n    \r\n  </template>\r\n  \r\n  <script >\r\n  import Chart from 'chart.js/auto';\r\n  import * as XLSX from 'xlsx';\r\n  import html2canvas from 'html2canvas';\r\n  import jsPDF from 'jspdf';\r\n  import 'element-plus/dist/index.css';\r\n  \r\n  export default {\r\n    props: {\r\n      correctAnswer: { // 接收正确答案\r\n        type: String,\r\n        default: ''\r\n      }\r\n    },\r\n    data() {\r\n      return {\r\n        currentQuestion: '', // 当前被选中查看的问题ID\r\n        questions: [], // 存储问卷的所有问题\r\n        options: [], // 当前问题的选项统计数据\r\n        showChart: false,\r\n        chartType: '',\r\n        chartData: null,\r\n        chartLabels: [], // 图表标签\r\n        correctRate: 0,\r\n        // 其他数据...\r\n      };\r\n    },\r\n    computed: {\r\n        currentQuestionDescription() {\r\n        // 在问题列表中找到当前选中的问题并返回其描述\r\n            const currentQuestion = this.questions.find(question => question.id === this.currentQuestion);\r\n            return currentQuestion ? currentQuestion.description : '';\r\n        }\r\n    },\r\n    mounted() {\r\n        // 在组件挂载后，初始化问题数据\r\n        this.initQuestionsData();\r\n    },\r\n    watch: {\r\n      // 监听当前选定问题的变化，以更新相关的图表和统计信息\r\n      currentQuestion(newValue, oldValue) {\r\n        if(newValue !== oldValue) {\r\n          this.updateCurrentQuestionStatistics(newValue);\r\n        }\r\n      }\r\n    },\r\n    methods: {\r\n        initQuestionsData() {\r\n            this.questions = [\r\n            {\r\n                id: 'q1',\r\n                description: '问题1：JavaScript是一种______语言。',\r\n                options: [\r\n                { id: 'q1o1', name: '编译型', count: 20 },\r\n                { id: 'q1o2', name: '解释型', count: 180 },\r\n                { id: 'q1o3', name: '汇编语言', count: 5 },\r\n                { id: 'q1o4', name: '标记语言', count: 15 }\r\n                ],\r\n                correctAnswer: 'q1o2'\r\n            },\r\n            {\r\n                id: 'q2',\r\n                description: '问题2：下列哪个是Vue.js的核心特性？',\r\n                options: [\r\n                { id: 'q2o1', name: '虚拟DOM', count: 150 },\r\n                { id: 'q2o2', name: '组件', count: 140 },\r\n                { id: 'q2o3', name: '响应式', count: 160 },\r\n                { id: 'q2o4', name: '以上都是', count: 100 }\r\n                ],\r\n                correctAnswer: 'q2o4'\r\n            }\r\n            // 可以根据需要添加更多的问题\r\n            ];\r\n            // 默认选中第一个问题进行展示\r\n            if(this.questions.length > 0) {\r\n            this.currentQuestion = this.questions[0].id;\r\n            this.updateCurrentQuestionStatistics(this.currentQuestion);\r\n            }\r\n        },\r\n        updateCurrentQuestionStatistics(questionId) {\r\n            // 根据当前选中的问题ID更新选项统计数据和正确率\r\n            const currentQuestion = this.questions.find(q => q.id === questionId);\r\n            if(currentQuestion) {\r\n                this.options = this.calculatePercentage(currentQuestion.options);\r\n                this.calculateCorrectRate(); \r\n                // 确保你更新了showChart、chartType等变量后调用了generateChart\r\n                this.showChart = true; // 举一个例子\r\n                // 之后可以添加generateChart的调用，如果需要\r\n            }\r\n            },\r\n        // 保留其他方法...\r\n        exportToExcel() {\r\n            const tableData = this.getTableData(); // 获取表格数据\r\n            const wb = XLSX.utils.book_new();\r\n            const ws = XLSX.utils.json_to_sheet(tableData);\r\n            XLSX.utils.book_append_sheet(wb, ws, 'Sheet1');\r\n            XLSX.writeFile(wb, 'table_data.xlsx');\r\n        },\r\n        getTableData() {\r\n            const tableData = this.options.map(option => ({\r\n            name: option.name,\r\n            count: option.count,\r\n            percentage: option.percentage,\r\n            }));\r\n            tableData.push({ name: '本题正确率', count: this.correctRate, percentage: this.correctRate });\r\n            return tableData;\r\n        },\r\n        exportToPDF() {\r\n            const exportContent = document.getElementById('export-content');\r\n            if (!exportContent) {\r\n            console.error('未找到需要导出的内容');\r\n            return;\r\n            }\r\n            html2canvas(exportContent).then(canvas => {\r\n            const imgData = canvas.toDataURL('image/png');\r\n            const pdf = new jsPDF();\r\n            // 获取画布的宽度和高度，并以此为基础设置PDF中图片的尺寸\r\n            const imgProps = pdf.getImageProperties(imgData);\r\n            const pdfWidth = pdf.internal.pageSize.getWidth();\r\n            const pdfHeight = (imgProps.height * pdfWidth) / imgProps.width;\r\n            \r\n            // 将图片添加到PDF中，并保持比例\r\n            pdf.addImage(imgData, 'PNG', 10, 10, pdfWidth - 20, pdfHeight); // 减去20是为了确保图片两侧有边距\r\n            pdf.save('table_and_chart.pdf');\r\n            }).catch(error => {\r\n            console.error('导出PDF时发生错误:', error);\r\n            });\r\n        },\r\n        getData() {\r\n            // 获取后端数据的方法\r\n            return [{ name: '选项1', count: 10 }, { name: '选项2', count: 15 }, { name: '选项3', count: 300 }, { name: '选项4', count: 8 }, { name: '选项5', count: 10 }];\r\n        },\r\n        calculatePercentage(data) {\r\n            // 计算占比\r\n            const total = data.reduce((sum, option) => sum + option.count, 0);\r\n            return data.map(option => ({\r\n            ...option,\r\n            percentage: ((option.count / total) * 100).toFixed(2)\r\n            }));\r\n        },\r\n        calculateCorrectRate() {\r\n            // 计算本题正确率\r\n            const totalResponses = this.options.reduce((sum, option) => sum + option.count, 0);\r\n            const correctResponses = this.options.find(option => option.name === this.correctAnswer)?.count || 0;\r\n            this.correctRate = ((correctResponses / totalResponses) * 100).toFixed(2);\r\n        },\r\n        toggleChart(type) {\r\n            if (this.chartType === type) {\r\n            // 如果当前已经显示该类型的图表，则收起图表\r\n                this.showChart = false;\r\n                this.chartType = '';\r\n                // 销毁当前的图表实例\r\n                if (this.chartData) {\r\n                    this.chartData.destroy();\r\n                    this.chartData = null;\r\n                }\r\n            } else {\r\n                console.log('切换图表类型', type);\r\n                // 否则，显示对应类型的图表\r\n                this.showChart = true;\r\n                this.chartType = type;\r\n                this.$nextTick(() => {\r\n                    this.generateChart(type);\r\n                });\r\n            }\r\n        },\r\n        generateChart(chartType) {\r\n            // 确保chartType有效且showChart为true\r\n            if (!chartType || !this.showChart) {\r\n                return;\r\n            }\r\n\r\n            // 现在不需要以下代码，因为我们将使用传入的chartType参数\r\n            // if (this.chartType === type) {\r\n            //   // 如果当前已经显示该类型的图表，则收起图表\r\n            //   this.showChart = false;\r\n            //   …\r\n\r\n            if (this.chartData) {\r\n                // 销毁当前图表实例\r\n                this.chartData.destroy();\r\n                this.chartData = null;\r\n            }\r\n\r\n            const ctx = this.$refs.chartCanvas.getContext('2d');\r\n            const labels = this.options.map(option => option.name);\r\n            const percentages = this.options.map(option => parseFloat(option.percentage));\r\n\r\n            // 使用数据数量来确定背景色和边框色数组的大小\r\n            const colors = this.generateColors(labels.length);\r\n\r\n            const data = {\r\n                labels,\r\n                datasets: [{\r\n                label: '占比',\r\n                data: percentages,\r\n                backgroundColor: colors.background,\r\n                borderColor: colors.border,\r\n                borderWidth: 1\r\n                }]\r\n            };\r\n\r\n            const options = {\r\n                scales: {\r\n                y: {\r\n                    beginAtZero: true\r\n                }\r\n                }\r\n            };\r\n\r\n            // 只有在确实需要时才创建新的图表实例\r\n            if (ctx) {\r\n                this.chartData = new Chart(ctx, {\r\n                type: chartType,\r\n                data,\r\n                options\r\n                });\r\n            }\r\n        },\r\n        \r\n        // 添加新方法用于生成颜色数组\r\n        generateColors(numOptions) {\r\n            const baseColors = [\r\n            'rgba(255, 99, 132, 0.2)',\r\n            'rgba(54, 162, 235, 0.2)',\r\n            'rgba(255, 80, 192, 0.2)',\r\n            'rgba(255, 206, 86, 0.2)',\r\n            'rgba(75, 255, 192, 0.2)',\r\n            'rgba(130, 20, 255, 0.2)',\r\n            ];\r\n    \r\n            // 循环生成颜色数组，如果选项数量超过预定义颜色数量，则循环使用这些颜色\r\n            const colors = {\r\n            background: [],\r\n            border: []\r\n            };\r\n            for (let i = 0; i < numOptions; i++) {\r\n            const index = i % baseColors.length;\r\n            colors.background.push(baseColors[index]);\r\n            colors.border.push(baseColors[index].replace('0.2)', '1)')); // 将透明度从0.2改为1\r\n            }\r\n            return colors;\r\n        },\r\n    }\r\n  };\r\n  </script>\r\n  \r\n  <style scoped>\r\n  .common-layout {\r\n    display: flex;  \r\n    flex-direction: column;\r\n    min-height: 100vh; /* 使得父容器至少有一个视窗的高度 */\r\n  }\r\n  \r\n  el-header, el-main, el-container {\r\n    display: flex;\r\n    flex-direction: column;\r\n  }\r\n  \r\n  el-main {\r\n    flex: 1;\r\n    display: flex;\r\n    justify-content: center; /* 在垂直方向上居中内容 */\r\n    align-items: center; /* 在水平方向上居中内容 */\r\n  }\r\n  \r\n  .mytable {\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: center;\r\n    padding: 20px;\r\n    background-color: #f9f9f9;\r\n    /* Added styles */\r\n    margin: 0 auto; /* 水平居中 */\r\n    max-width: 80%; /* 限制最大宽度，让内容不会过于分散 */\r\n    box-shadow: 0px 2px 15px rgba(0, 0, 0, 0.3);\r\n    border-radius: 5px;\r\n    overflow: hidden; /* 隐藏溢出的内容 */\r\n    border: 1px solid #d8d8d8;\r\n    border-bottom: 2px solid #d8d8d8;\r\n    border-radius: 5px;\r\n    background-color: #fff;\r\n    color: #565a5c;\r\n    font-family: \"Open Sans\", sans-serif;\r\n    font-weight: 400;\r\n    text-shadow: none;\r\n    box-sizing: border-box;\r\n    font-size: 12px;\r\n    line-height: 32px;\r\n    font-size: 1rem;\r\n    line-height: 6rem;\r\n    font-weight: 400;\r\n  }\r\n  .chart-container {\r\n    width: 600px; /* 调整为你希望的宽度 */\r\n    height: 400px; /* 调整为你希望的高度 */\r\n    margin: 0 auto; /* 水平居中 */\r\n    padding: 20px;\r\n    max-width: 80%; /* 限制最大宽度，让内容不会过于分散 */\r\n    display: flex;\r\n    justify-content: center; /* 在水平方向上居中内容 */\r\n    align-items: center; /* 在垂直方向上居中内容 */\r\n  }\r\n  </style>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}