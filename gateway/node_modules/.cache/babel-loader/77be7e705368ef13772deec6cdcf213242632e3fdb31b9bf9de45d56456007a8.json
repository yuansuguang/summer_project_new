{"ast":null,"code":"import Texture from './Texture';\nimport glenum from './core/glenum';\nimport util from './core/util';\nimport mathUtil from './math/util';\nimport vendor from './core/vendor';\nvar isPowerOfTwo = mathUtil.isPowerOfTwo;\nvar targetList = ['px', 'nx', 'py', 'ny', 'pz', 'nz'];\n\n/**\n * @constructor clay.TextureCube\n * @extends clay.Texture\n *\n * @example\n *     ...\n *     var mat = new clay.Material({\n *         shader: clay.shader.library.get('clay.phong', 'environmentMap')\n *     });\n *     var envMap = new clay.TextureCube();\n *     envMap.load({\n *         'px': 'assets/textures/sky/px.jpg',\n *         'nx': 'assets/textures/sky/nx.jpg'\n *         'py': 'assets/textures/sky/py.jpg'\n *         'ny': 'assets/textures/sky/ny.jpg'\n *         'pz': 'assets/textures/sky/pz.jpg'\n *         'nz': 'assets/textures/sky/nz.jpg'\n *     });\n *     mat.set('environmentMap', envMap);\n *     ...\n *     envMap.success(function () {\n *         // Wait for the sky texture loaded\n *         animation.on('frame', function (frameTime) {\n *             renderer.render(scene, camera);\n *         });\n *     });\n */\nvar TextureCube = Texture.extend(function () {\n  return /** @lends clay.TextureCube# */{\n    /**\n     * @type {boolean}\n     * @default false\n     */\n    // PENDING cubemap should not flipY in default.\n    // flipY: false,\n\n    /**\n     * @type {Object}\n     * @property {?HTMLImageElement|HTMLCanvasElemnet} px\n     * @property {?HTMLImageElement|HTMLCanvasElemnet} nx\n     * @property {?HTMLImageElement|HTMLCanvasElemnet} py\n     * @property {?HTMLImageElement|HTMLCanvasElemnet} ny\n     * @property {?HTMLImageElement|HTMLCanvasElemnet} pz\n     * @property {?HTMLImageElement|HTMLCanvasElemnet} nz\n     */\n    image: {\n      px: null,\n      nx: null,\n      py: null,\n      ny: null,\n      pz: null,\n      nz: null\n    },\n    /**\n     * Pixels data of each side. Will be ignored if images are set.\n     * @type {Object}\n     * @property {?Uint8Array} px\n     * @property {?Uint8Array} nx\n     * @property {?Uint8Array} py\n     * @property {?Uint8Array} ny\n     * @property {?Uint8Array} pz\n     * @property {?Uint8Array} nz\n     */\n    pixels: {\n      px: null,\n      nx: null,\n      py: null,\n      ny: null,\n      pz: null,\n      nz: null\n    },\n    /**\n     * @type {Array.<Object>}\n     */\n    mipmaps: []\n  };\n}, {\n  textureType: 'textureCube',\n  update: function (renderer) {\n    var _gl = renderer.gl;\n    _gl.bindTexture(_gl.TEXTURE_CUBE_MAP, this._cache.get('webgl_texture'));\n    this.updateCommon(renderer);\n    var glFormat = this.format;\n    var glType = this.type;\n    _gl.texParameteri(_gl.TEXTURE_CUBE_MAP, _gl.TEXTURE_WRAP_S, this.getAvailableWrapS());\n    _gl.texParameteri(_gl.TEXTURE_CUBE_MAP, _gl.TEXTURE_WRAP_T, this.getAvailableWrapT());\n    _gl.texParameteri(_gl.TEXTURE_CUBE_MAP, _gl.TEXTURE_MAG_FILTER, this.getAvailableMagFilter());\n    _gl.texParameteri(_gl.TEXTURE_CUBE_MAP, _gl.TEXTURE_MIN_FILTER, this.getAvailableMinFilter());\n    var anisotropicExt = renderer.getGLExtension('EXT_texture_filter_anisotropic');\n    if (anisotropicExt && this.anisotropic > 1) {\n      _gl.texParameterf(_gl.TEXTURE_CUBE_MAP, anisotropicExt.TEXTURE_MAX_ANISOTROPY_EXT, this.anisotropic);\n    }\n\n    // Fallback to float type if browser don't have half float extension\n    if (glType === 36193) {\n      var halfFloatExt = renderer.getGLExtension('OES_texture_half_float');\n      if (!halfFloatExt) {\n        glType = glenum.FLOAT;\n      }\n    }\n    if (this.mipmaps.length) {\n      var width = this.width;\n      var height = this.height;\n      for (var i = 0; i < this.mipmaps.length; i++) {\n        var mipmap = this.mipmaps[i];\n        this._updateTextureData(_gl, mipmap, i, width, height, glFormat, glType);\n        width /= 2;\n        height /= 2;\n      }\n    } else {\n      this._updateTextureData(_gl, this, 0, this.width, this.height, glFormat, glType);\n      if (!this.NPOT && this.useMipmap) {\n        _gl.generateMipmap(_gl.TEXTURE_CUBE_MAP);\n      }\n    }\n    _gl.bindTexture(_gl.TEXTURE_CUBE_MAP, null);\n  },\n  _updateTextureData: function (_gl, data, level, width, height, glFormat, glType) {\n    for (var i = 0; i < 6; i++) {\n      var target = targetList[i];\n      var img = data.image && data.image[target];\n      if (img) {\n        _gl.texImage2D(_gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, level, glFormat, glFormat, glType, img);\n      } else {\n        _gl.texImage2D(_gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, level, glFormat, width, height, 0, glFormat, glType, data.pixels && data.pixels[target]);\n      }\n    }\n  },\n  /**\n   * @param  {clay.Renderer} renderer\n   * @memberOf clay.TextureCube.prototype\n   */\n  generateMipmap: function (renderer) {\n    var _gl = renderer.gl;\n    if (this.useMipmap && !this.NPOT) {\n      _gl.bindTexture(_gl.TEXTURE_CUBE_MAP, this._cache.get('webgl_texture'));\n      _gl.generateMipmap(_gl.TEXTURE_CUBE_MAP);\n    }\n  },\n  bind: function (renderer) {\n    renderer.gl.bindTexture(renderer.gl.TEXTURE_CUBE_MAP, this.getWebGLTexture(renderer));\n  },\n  unbind: function (renderer) {\n    renderer.gl.bindTexture(renderer.gl.TEXTURE_CUBE_MAP, null);\n  },\n  // Overwrite the isPowerOfTwo method\n  isPowerOfTwo: function () {\n    if (this.image.px) {\n      return isPowerOfTwo(this.image.px.width) && isPowerOfTwo(this.image.px.height);\n    } else {\n      return isPowerOfTwo(this.width) && isPowerOfTwo(this.height);\n    }\n  },\n  isRenderable: function () {\n    if (this.image.px) {\n      return isImageRenderable(this.image.px) && isImageRenderable(this.image.nx) && isImageRenderable(this.image.py) && isImageRenderable(this.image.ny) && isImageRenderable(this.image.pz) && isImageRenderable(this.image.nz);\n    } else {\n      return !!(this.width && this.height);\n    }\n  },\n  load: function (imageList, crossOrigin) {\n    var loading = 0;\n    var self = this;\n    util.each(imageList, function (src, target) {\n      var image = vendor.createImage();\n      if (crossOrigin) {\n        image.crossOrigin = crossOrigin;\n      }\n      image.onload = function () {\n        loading--;\n        if (loading === 0) {\n          self.dirty();\n          self.trigger('success', self);\n        }\n      };\n      image.onerror = function () {\n        loading--;\n      };\n      loading++;\n      image.src = src;\n      self.image[target] = image;\n    });\n    return this;\n  }\n});\nObject.defineProperty(TextureCube.prototype, 'width', {\n  get: function () {\n    if (this.image && this.image.px) {\n      return this.image.px.width;\n    }\n    return this._width;\n  },\n  set: function (value) {\n    if (this.image && this.image.px) {\n      console.warn('Texture from image can\\'t set width');\n    } else {\n      if (this._width !== value) {\n        this.dirty();\n      }\n      this._width = value;\n    }\n  }\n});\nObject.defineProperty(TextureCube.prototype, 'height', {\n  get: function () {\n    if (this.image && this.image.px) {\n      return this.image.px.height;\n    }\n    return this._height;\n  },\n  set: function (value) {\n    if (this.image && this.image.px) {\n      console.warn('Texture from image can\\'t set height');\n    } else {\n      if (this._height !== value) {\n        this.dirty();\n      }\n      this._height = value;\n    }\n  }\n});\nfunction isImageRenderable(image) {\n  return image.width > 0 && image.height > 0;\n}\nexport default TextureCube;","map":{"version":3,"names":["Texture","glenum","util","mathUtil","vendor","isPowerOfTwo","targetList","TextureCube","extend","image","px","nx","py","ny","pz","nz","pixels","mipmaps","textureType","update","renderer","_gl","gl","bindTexture","TEXTURE_CUBE_MAP","_cache","get","updateCommon","glFormat","format","glType","type","texParameteri","TEXTURE_WRAP_S","getAvailableWrapS","TEXTURE_WRAP_T","getAvailableWrapT","TEXTURE_MAG_FILTER","getAvailableMagFilter","TEXTURE_MIN_FILTER","getAvailableMinFilter","anisotropicExt","getGLExtension","anisotropic","texParameterf","TEXTURE_MAX_ANISOTROPY_EXT","halfFloatExt","FLOAT","length","width","height","i","mipmap","_updateTextureData","NPOT","useMipmap","generateMipmap","data","level","target","img","texImage2D","TEXTURE_CUBE_MAP_POSITIVE_X","bind","getWebGLTexture","unbind","isRenderable","isImageRenderable","load","imageList","crossOrigin","loading","self","each","src","createImage","onload","dirty","trigger","onerror","Object","defineProperty","prototype","_width","set","value","console","warn","_height"],"sources":["E:/QuestionairePlanet_Fronted/mytest/node_modules/claygl/src/TextureCube.js"],"sourcesContent":["import Texture from './Texture';\nimport glenum from './core/glenum';\nimport util from './core/util';\nimport mathUtil from './math/util';\nimport vendor from './core/vendor';\nvar isPowerOfTwo = mathUtil.isPowerOfTwo;\n\nvar targetList = ['px', 'nx', 'py', 'ny', 'pz', 'nz'];\n\n/**\n * @constructor clay.TextureCube\n * @extends clay.Texture\n *\n * @example\n *     ...\n *     var mat = new clay.Material({\n *         shader: clay.shader.library.get('clay.phong', 'environmentMap')\n *     });\n *     var envMap = new clay.TextureCube();\n *     envMap.load({\n *         'px': 'assets/textures/sky/px.jpg',\n *         'nx': 'assets/textures/sky/nx.jpg'\n *         'py': 'assets/textures/sky/py.jpg'\n *         'ny': 'assets/textures/sky/ny.jpg'\n *         'pz': 'assets/textures/sky/pz.jpg'\n *         'nz': 'assets/textures/sky/nz.jpg'\n *     });\n *     mat.set('environmentMap', envMap);\n *     ...\n *     envMap.success(function () {\n *         // Wait for the sky texture loaded\n *         animation.on('frame', function (frameTime) {\n *             renderer.render(scene, camera);\n *         });\n *     });\n */\nvar TextureCube = Texture.extend(function () {\n    return /** @lends clay.TextureCube# */{\n\n        /**\n         * @type {boolean}\n         * @default false\n         */\n        // PENDING cubemap should not flipY in default.\n        // flipY: false,\n\n        /**\n         * @type {Object}\n         * @property {?HTMLImageElement|HTMLCanvasElemnet} px\n         * @property {?HTMLImageElement|HTMLCanvasElemnet} nx\n         * @property {?HTMLImageElement|HTMLCanvasElemnet} py\n         * @property {?HTMLImageElement|HTMLCanvasElemnet} ny\n         * @property {?HTMLImageElement|HTMLCanvasElemnet} pz\n         * @property {?HTMLImageElement|HTMLCanvasElemnet} nz\n         */\n        image: {\n            px: null,\n            nx: null,\n            py: null,\n            ny: null,\n            pz: null,\n            nz: null\n        },\n        /**\n         * Pixels data of each side. Will be ignored if images are set.\n         * @type {Object}\n         * @property {?Uint8Array} px\n         * @property {?Uint8Array} nx\n         * @property {?Uint8Array} py\n         * @property {?Uint8Array} ny\n         * @property {?Uint8Array} pz\n         * @property {?Uint8Array} nz\n         */\n        pixels: {\n            px: null,\n            nx: null,\n            py: null,\n            ny: null,\n            pz: null,\n            nz: null\n        },\n\n        /**\n         * @type {Array.<Object>}\n         */\n        mipmaps: []\n    };\n}, {\n\n    textureType: 'textureCube',\n\n    update: function (renderer) {\n        var _gl = renderer.gl;\n        _gl.bindTexture(_gl.TEXTURE_CUBE_MAP, this._cache.get('webgl_texture'));\n\n        this.updateCommon(renderer);\n\n        var glFormat = this.format;\n        var glType = this.type;\n\n        _gl.texParameteri(_gl.TEXTURE_CUBE_MAP, _gl.TEXTURE_WRAP_S, this.getAvailableWrapS());\n        _gl.texParameteri(_gl.TEXTURE_CUBE_MAP, _gl.TEXTURE_WRAP_T, this.getAvailableWrapT());\n\n        _gl.texParameteri(_gl.TEXTURE_CUBE_MAP, _gl.TEXTURE_MAG_FILTER, this.getAvailableMagFilter());\n        _gl.texParameteri(_gl.TEXTURE_CUBE_MAP, _gl.TEXTURE_MIN_FILTER, this.getAvailableMinFilter());\n\n        var anisotropicExt = renderer.getGLExtension('EXT_texture_filter_anisotropic');\n        if (anisotropicExt && this.anisotropic > 1) {\n            _gl.texParameterf(_gl.TEXTURE_CUBE_MAP, anisotropicExt.TEXTURE_MAX_ANISOTROPY_EXT, this.anisotropic);\n        }\n\n        // Fallback to float type if browser don't have half float extension\n        if (glType === 36193) {\n            var halfFloatExt = renderer.getGLExtension('OES_texture_half_float');\n            if (!halfFloatExt) {\n                glType = glenum.FLOAT;\n            }\n        }\n\n        if (this.mipmaps.length) {\n            var width = this.width;\n            var height = this.height;\n            for (var i = 0; i < this.mipmaps.length; i++) {\n                var mipmap = this.mipmaps[i];\n                this._updateTextureData(_gl, mipmap, i, width, height, glFormat, glType);\n                width /= 2;\n                height /= 2;\n            }\n        }\n        else {\n            this._updateTextureData(_gl, this, 0, this.width, this.height, glFormat, glType);\n\n            if (!this.NPOT && this.useMipmap) {\n                _gl.generateMipmap(_gl.TEXTURE_CUBE_MAP);\n            }\n        }\n\n        _gl.bindTexture(_gl.TEXTURE_CUBE_MAP, null);\n    },\n\n    _updateTextureData: function (_gl, data, level, width, height, glFormat, glType) {\n        for (var i = 0; i < 6; i++) {\n            var target = targetList[i];\n            var img = data.image && data.image[target];\n            if (img) {\n                _gl.texImage2D(_gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, level, glFormat, glFormat, glType, img);\n            }\n            else {\n                _gl.texImage2D(_gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, level, glFormat, width, height, 0, glFormat, glType, data.pixels && data.pixels[target]);\n            }\n        }\n    },\n\n    /**\n     * @param  {clay.Renderer} renderer\n     * @memberOf clay.TextureCube.prototype\n     */\n    generateMipmap: function (renderer) {\n        var _gl = renderer.gl;\n        if (this.useMipmap && !this.NPOT) {\n            _gl.bindTexture(_gl.TEXTURE_CUBE_MAP, this._cache.get('webgl_texture'));\n            _gl.generateMipmap(_gl.TEXTURE_CUBE_MAP);\n        }\n    },\n\n    bind: function (renderer) {\n        renderer.gl.bindTexture(renderer.gl.TEXTURE_CUBE_MAP, this.getWebGLTexture(renderer));\n    },\n\n    unbind: function (renderer) {\n        renderer.gl.bindTexture(renderer.gl.TEXTURE_CUBE_MAP, null);\n    },\n\n    // Overwrite the isPowerOfTwo method\n    isPowerOfTwo: function () {\n        if (this.image.px) {\n            return isPowerOfTwo(this.image.px.width)\n                && isPowerOfTwo(this.image.px.height);\n        }\n        else {\n            return isPowerOfTwo(this.width)\n                && isPowerOfTwo(this.height);\n        }\n    },\n\n    isRenderable: function () {\n        if (this.image.px) {\n            return isImageRenderable(this.image.px)\n                && isImageRenderable(this.image.nx)\n                && isImageRenderable(this.image.py)\n                && isImageRenderable(this.image.ny)\n                && isImageRenderable(this.image.pz)\n                && isImageRenderable(this.image.nz);\n        }\n        else {\n            return !!(this.width && this.height);\n        }\n    },\n\n    load: function (imageList, crossOrigin) {\n        var loading = 0;\n        var self = this;\n        util.each(imageList, function (src, target){\n            var image = vendor.createImage();\n            if (crossOrigin) {\n                image.crossOrigin = crossOrigin;\n            }\n            image.onload = function () {\n                loading --;\n                if (loading === 0){\n                    self.dirty();\n                    self.trigger('success', self);\n                }\n            };\n            image.onerror = function () {\n                loading --;\n            };\n\n            loading++;\n            image.src = src;\n            self.image[target] = image;\n        });\n\n        return this;\n    }\n});\n\nObject.defineProperty(TextureCube.prototype, 'width', {\n    get: function () {\n        if (this.image && this.image.px) {\n            return this.image.px.width;\n        }\n        return this._width;\n    },\n    set: function (value) {\n        if (this.image && this.image.px) {\n            console.warn('Texture from image can\\'t set width');\n        }\n        else {\n            if (this._width !== value) {\n                this.dirty();\n            }\n            this._width = value;\n        }\n    }\n});\nObject.defineProperty(TextureCube.prototype, 'height', {\n    get: function () {\n        if (this.image && this.image.px) {\n            return this.image.px.height;\n        }\n        return this._height;\n    },\n    set: function (value) {\n        if (this.image && this.image.px) {\n            console.warn('Texture from image can\\'t set height');\n        }\n        else {\n            if (this._height !== value) {\n                this.dirty();\n            }\n            this._height = value;\n        }\n    }\n});\nfunction isImageRenderable(image) {\n    return image.width > 0 && image.height > 0;\n}\n\nexport default TextureCube;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}