{"ast":null,"code":"import mat3 from '../glmatrix/mat3';\n\n/**\n * @constructor\n * @alias clay.Matrix3\n */\nvar Matrix3 = function () {\n  /**\n   * Storage of Matrix3\n   * @name array\n   * @type {Float32Array}\n   * @memberOf clay.Matrix3#\n   */\n  this.array = mat3.create();\n\n  /**\n   * @name _dirty\n   * @type {boolean}\n   * @memberOf clay.Matrix3#\n   */\n  this._dirty = true;\n};\nMatrix3.prototype = {\n  constructor: Matrix3,\n  /**\n   * Set components from array\n   * @param  {Float32Array|number[]} arr\n   */\n  setArray: function (arr) {\n    for (var i = 0; i < this.array.length; i++) {\n      this.array[i] = arr[i];\n    }\n    this._dirty = true;\n    return this;\n  },\n  /**\n   * Calculate the adjugate of self, in-place\n   * @return {clay.Matrix3}\n   */\n  adjoint: function () {\n    mat3.adjoint(this.array, this.array);\n    this._dirty = true;\n    return this;\n  },\n  /**\n   * Clone a new Matrix3\n   * @return {clay.Matrix3}\n   */\n  clone: function () {\n    return new Matrix3().copy(this);\n  },\n  /**\n   * Copy from b\n   * @param  {clay.Matrix3} b\n   * @return {clay.Matrix3}\n   */\n  copy: function (b) {\n    mat3.copy(this.array, b.array);\n    this._dirty = true;\n    return this;\n  },\n  /**\n   * Calculate matrix determinant\n   * @return {number}\n   */\n  determinant: function () {\n    return mat3.determinant(this.array);\n  },\n  /**\n   * Copy the values from Matrix2d a\n   * @param  {clay.Matrix2d} a\n   * @return {clay.Matrix3}\n   */\n  fromMat2d: function (a) {\n    mat3.fromMat2d(this.array, a.array);\n    this._dirty = true;\n    return this;\n  },\n  /**\n   * Copies the upper-left 3x3 values of Matrix4\n   * @param  {clay.Matrix4} a\n   * @return {clay.Matrix3}\n   */\n  fromMat4: function (a) {\n    mat3.fromMat4(this.array, a.array);\n    this._dirty = true;\n    return this;\n  },\n  /**\n   * Calculates a rotation matrix from the given quaternion\n   * @param  {clay.Quaternion} q\n   * @return {clay.Matrix3}\n   */\n  fromQuat: function (q) {\n    mat3.fromQuat(this.array, q.array);\n    this._dirty = true;\n    return this;\n  },\n  /**\n   * Set to a identity matrix\n   * @return {clay.Matrix3}\n   */\n  identity: function () {\n    mat3.identity(this.array);\n    this._dirty = true;\n    return this;\n  },\n  /**\n   * Invert self\n   * @return {clay.Matrix3}\n   */\n  invert: function () {\n    mat3.invert(this.array, this.array);\n    this._dirty = true;\n    return this;\n  },\n  /**\n   * Alias for mutiply\n   * @param  {clay.Matrix3} b\n   * @return {clay.Matrix3}\n   */\n  mul: function (b) {\n    mat3.mul(this.array, this.array, b.array);\n    this._dirty = true;\n    return this;\n  },\n  /**\n   * Alias for multiplyLeft\n   * @param  {clay.Matrix3} a\n   * @return {clay.Matrix3}\n   */\n  mulLeft: function (a) {\n    mat3.mul(this.array, a.array, this.array);\n    this._dirty = true;\n    return this;\n  },\n  /**\n   * Multiply self and b\n   * @param  {clay.Matrix3} b\n   * @return {clay.Matrix3}\n   */\n  multiply: function (b) {\n    mat3.multiply(this.array, this.array, b.array);\n    this._dirty = true;\n    return this;\n  },\n  /**\n   * Multiply a and self, a is on the left\n   * @param  {clay.Matrix3} a\n   * @return {clay.Matrix3}\n   */\n  multiplyLeft: function (a) {\n    mat3.multiply(this.array, a.array, this.array);\n    this._dirty = true;\n    return this;\n  },\n  /**\n   * Rotate self by a given radian\n   * @param  {number}   rad\n   * @return {clay.Matrix3}\n   */\n  rotate: function (rad) {\n    mat3.rotate(this.array, this.array, rad);\n    this._dirty = true;\n    return this;\n  },\n  /**\n   * Scale self by s\n   * @param  {clay.Vector2}  s\n   * @return {clay.Matrix3}\n   */\n  scale: function (v) {\n    mat3.scale(this.array, this.array, v.array);\n    this._dirty = true;\n    return this;\n  },\n  /**\n   * Translate self by v\n   * @param  {clay.Vector2}  v\n   * @return {clay.Matrix3}\n   */\n  translate: function (v) {\n    mat3.translate(this.array, this.array, v.array);\n    this._dirty = true;\n    return this;\n  },\n  /**\n   * Calculates a 3x3 normal matrix (transpose inverse) from the 4x4 matrix\n   * @param {clay.Matrix4} a\n   */\n  normalFromMat4: function (a) {\n    mat3.normalFromMat4(this.array, a.array);\n    this._dirty = true;\n    return this;\n  },\n  /**\n   * Transpose self, in-place.\n   * @return {clay.Matrix2}\n   */\n  transpose: function () {\n    mat3.transpose(this.array, this.array);\n    this._dirty = true;\n    return this;\n  },\n  toString: function () {\n    return '[' + Array.prototype.join.call(this.array, ',') + ']';\n  },\n  toArray: function () {\n    return Array.prototype.slice.call(this.array);\n  }\n};\n/**\n * @param  {clay.Matrix3} out\n * @param  {clay.Matrix3} a\n * @return {clay.Matrix3}\n */\nMatrix3.adjoint = function (out, a) {\n  mat3.adjoint(out.array, a.array);\n  out._dirty = true;\n  return out;\n};\n\n/**\n * @param  {clay.Matrix3} out\n * @param  {clay.Matrix3} a\n * @return {clay.Matrix3}\n */\nMatrix3.copy = function (out, a) {\n  mat3.copy(out.array, a.array);\n  out._dirty = true;\n  return out;\n};\n\n/**\n * @param  {clay.Matrix3} a\n * @return {number}\n */\nMatrix3.determinant = function (a) {\n  return mat3.determinant(a.array);\n};\n\n/**\n * @param  {clay.Matrix3} out\n * @return {clay.Matrix3}\n */\nMatrix3.identity = function (out) {\n  mat3.identity(out.array);\n  out._dirty = true;\n  return out;\n};\n\n/**\n * @param  {clay.Matrix3} out\n * @param  {clay.Matrix3} a\n * @return {clay.Matrix3}\n */\nMatrix3.invert = function (out, a) {\n  mat3.invert(out.array, a.array);\n  return out;\n};\n\n/**\n * @param  {clay.Matrix3} out\n * @param  {clay.Matrix3} a\n * @param  {clay.Matrix3} b\n * @return {clay.Matrix3}\n */\nMatrix3.mul = function (out, a, b) {\n  mat3.mul(out.array, a.array, b.array);\n  out._dirty = true;\n  return out;\n};\n\n/**\n * @function\n * @param  {clay.Matrix3} out\n * @param  {clay.Matrix3} a\n * @param  {clay.Matrix3} b\n * @return {clay.Matrix3}\n */\nMatrix3.multiply = Matrix3.mul;\n\n/**\n * @param  {clay.Matrix3}  out\n * @param  {clay.Matrix2d} a\n * @return {clay.Matrix3}\n */\nMatrix3.fromMat2d = function (out, a) {\n  mat3.fromMat2d(out.array, a.array);\n  out._dirty = true;\n  return out;\n};\n\n/**\n * @param  {clay.Matrix3} out\n * @param  {clay.Matrix4} a\n * @return {clay.Matrix3}\n */\nMatrix3.fromMat4 = function (out, a) {\n  mat3.fromMat4(out.array, a.array);\n  out._dirty = true;\n  return out;\n};\n\n/**\n * @param  {clay.Matrix3}    out\n * @param  {clay.Quaternion} a\n * @return {clay.Matrix3}\n */\nMatrix3.fromQuat = function (out, q) {\n  mat3.fromQuat(out.array, q.array);\n  out._dirty = true;\n  return out;\n};\n\n/**\n * @param  {clay.Matrix3} out\n * @param  {clay.Matrix4} a\n * @return {clay.Matrix3}\n */\nMatrix3.normalFromMat4 = function (out, a) {\n  mat3.normalFromMat4(out.array, a.array);\n  out._dirty = true;\n  return out;\n};\n\n/**\n * @param  {clay.Matrix3} out\n * @param  {clay.Matrix3} a\n * @param  {number}  rad\n * @return {clay.Matrix3}\n */\nMatrix3.rotate = function (out, a, rad) {\n  mat3.rotate(out.array, a.array, rad);\n  out._dirty = true;\n  return out;\n};\n\n/**\n * @param  {clay.Matrix3} out\n * @param  {clay.Matrix3} a\n * @param  {clay.Vector2} v\n * @return {clay.Matrix3}\n */\nMatrix3.scale = function (out, a, v) {\n  mat3.scale(out.array, a.array, v.array);\n  out._dirty = true;\n  return out;\n};\n\n/**\n * @param  {clay.Matrix3} out\n * @param  {clay.Matrix3} a\n * @return {clay.Matrix3}\n */\nMatrix3.transpose = function (out, a) {\n  mat3.transpose(out.array, a.array);\n  out._dirty = true;\n  return out;\n};\n\n/**\n * @param  {clay.Matrix3} out\n * @param  {clay.Matrix3} a\n * @param  {clay.Vector2} v\n * @return {clay.Matrix3}\n */\nMatrix3.translate = function (out, a, v) {\n  mat3.translate(out.array, a.array, v.array);\n  out._dirty = true;\n  return out;\n};\nexport default Matrix3;","map":{"version":3,"names":["mat3","Matrix3","array","create","_dirty","prototype","constructor","setArray","arr","i","length","adjoint","clone","copy","b","determinant","fromMat2d","a","fromMat4","fromQuat","q","identity","invert","mul","mulLeft","multiply","multiplyLeft","rotate","rad","scale","v","translate","normalFromMat4","transpose","toString","Array","join","call","toArray","slice","out"],"sources":["E:/mytest/node_modules/claygl/src/math/Matrix3.js"],"sourcesContent":["import mat3 from '../glmatrix/mat3';\n\n/**\n * @constructor\n * @alias clay.Matrix3\n */\nvar Matrix3 = function () {\n\n    /**\n     * Storage of Matrix3\n     * @name array\n     * @type {Float32Array}\n     * @memberOf clay.Matrix3#\n     */\n    this.array = mat3.create();\n\n    /**\n     * @name _dirty\n     * @type {boolean}\n     * @memberOf clay.Matrix3#\n     */\n    this._dirty = true;\n};\n\nMatrix3.prototype = {\n\n    constructor: Matrix3,\n\n    /**\n     * Set components from array\n     * @param  {Float32Array|number[]} arr\n     */\n    setArray: function (arr) {\n        for (var i = 0; i < this.array.length; i++) {\n            this.array[i] = arr[i];\n        }\n        this._dirty = true;\n        return this;\n    },\n    /**\n     * Calculate the adjugate of self, in-place\n     * @return {clay.Matrix3}\n     */\n    adjoint: function () {\n        mat3.adjoint(this.array, this.array);\n        this._dirty = true;\n        return this;\n    },\n\n    /**\n     * Clone a new Matrix3\n     * @return {clay.Matrix3}\n     */\n    clone: function () {\n        return (new Matrix3()).copy(this);\n    },\n\n    /**\n     * Copy from b\n     * @param  {clay.Matrix3} b\n     * @return {clay.Matrix3}\n     */\n    copy: function (b) {\n        mat3.copy(this.array, b.array);\n        this._dirty = true;\n        return this;\n    },\n\n    /**\n     * Calculate matrix determinant\n     * @return {number}\n     */\n    determinant: function () {\n        return mat3.determinant(this.array);\n    },\n\n    /**\n     * Copy the values from Matrix2d a\n     * @param  {clay.Matrix2d} a\n     * @return {clay.Matrix3}\n     */\n    fromMat2d: function (a) {\n        mat3.fromMat2d(this.array, a.array);\n        this._dirty = true;\n        return this;\n    },\n\n    /**\n     * Copies the upper-left 3x3 values of Matrix4\n     * @param  {clay.Matrix4} a\n     * @return {clay.Matrix3}\n     */\n    fromMat4: function (a) {\n        mat3.fromMat4(this.array, a.array);\n        this._dirty = true;\n        return this;\n    },\n\n    /**\n     * Calculates a rotation matrix from the given quaternion\n     * @param  {clay.Quaternion} q\n     * @return {clay.Matrix3}\n     */\n    fromQuat: function (q) {\n        mat3.fromQuat(this.array, q.array);\n        this._dirty = true;\n        return this;\n    },\n\n    /**\n     * Set to a identity matrix\n     * @return {clay.Matrix3}\n     */\n    identity: function () {\n        mat3.identity(this.array);\n        this._dirty = true;\n        return this;\n    },\n\n    /**\n     * Invert self\n     * @return {clay.Matrix3}\n     */\n    invert: function () {\n        mat3.invert(this.array, this.array);\n        this._dirty = true;\n        return this;\n    },\n\n    /**\n     * Alias for mutiply\n     * @param  {clay.Matrix3} b\n     * @return {clay.Matrix3}\n     */\n    mul: function (b) {\n        mat3.mul(this.array, this.array, b.array);\n        this._dirty = true;\n        return this;\n    },\n\n    /**\n     * Alias for multiplyLeft\n     * @param  {clay.Matrix3} a\n     * @return {clay.Matrix3}\n     */\n    mulLeft: function (a) {\n        mat3.mul(this.array, a.array, this.array);\n        this._dirty = true;\n        return this;\n    },\n\n    /**\n     * Multiply self and b\n     * @param  {clay.Matrix3} b\n     * @return {clay.Matrix3}\n     */\n    multiply: function (b) {\n        mat3.multiply(this.array, this.array, b.array);\n        this._dirty = true;\n        return this;\n    },\n\n    /**\n     * Multiply a and self, a is on the left\n     * @param  {clay.Matrix3} a\n     * @return {clay.Matrix3}\n     */\n    multiplyLeft: function (a) {\n        mat3.multiply(this.array, a.array, this.array);\n        this._dirty = true;\n        return this;\n    },\n\n    /**\n     * Rotate self by a given radian\n     * @param  {number}   rad\n     * @return {clay.Matrix3}\n     */\n    rotate: function (rad) {\n        mat3.rotate(this.array, this.array, rad);\n        this._dirty = true;\n        return this;\n    },\n\n    /**\n     * Scale self by s\n     * @param  {clay.Vector2}  s\n     * @return {clay.Matrix3}\n     */\n    scale: function (v) {\n        mat3.scale(this.array, this.array, v.array);\n        this._dirty = true;\n        return this;\n    },\n\n    /**\n     * Translate self by v\n     * @param  {clay.Vector2}  v\n     * @return {clay.Matrix3}\n     */\n    translate: function (v) {\n        mat3.translate(this.array, this.array, v.array);\n        this._dirty = true;\n        return this;\n    },\n    /**\n     * Calculates a 3x3 normal matrix (transpose inverse) from the 4x4 matrix\n     * @param {clay.Matrix4} a\n     */\n    normalFromMat4: function (a) {\n        mat3.normalFromMat4(this.array, a.array);\n        this._dirty = true;\n        return this;\n    },\n\n    /**\n     * Transpose self, in-place.\n     * @return {clay.Matrix2}\n     */\n    transpose: function () {\n        mat3.transpose(this.array, this.array);\n        this._dirty = true;\n        return this;\n    },\n\n    toString: function () {\n        return '[' + Array.prototype.join.call(this.array, ',') + ']';\n    },\n\n    toArray: function () {\n        return Array.prototype.slice.call(this.array);\n    }\n};\n/**\n * @param  {clay.Matrix3} out\n * @param  {clay.Matrix3} a\n * @return {clay.Matrix3}\n */\nMatrix3.adjoint = function (out, a) {\n    mat3.adjoint(out.array, a.array);\n    out._dirty = true;\n    return out;\n};\n\n/**\n * @param  {clay.Matrix3} out\n * @param  {clay.Matrix3} a\n * @return {clay.Matrix3}\n */\nMatrix3.copy = function (out, a) {\n    mat3.copy(out.array, a.array);\n    out._dirty = true;\n    return out;\n};\n\n/**\n * @param  {clay.Matrix3} a\n * @return {number}\n */\nMatrix3.determinant = function (a) {\n    return mat3.determinant(a.array);\n};\n\n/**\n * @param  {clay.Matrix3} out\n * @return {clay.Matrix3}\n */\nMatrix3.identity = function (out) {\n    mat3.identity(out.array);\n    out._dirty = true;\n    return out;\n};\n\n/**\n * @param  {clay.Matrix3} out\n * @param  {clay.Matrix3} a\n * @return {clay.Matrix3}\n */\nMatrix3.invert = function (out, a) {\n    mat3.invert(out.array, a.array);\n    return out;\n};\n\n/**\n * @param  {clay.Matrix3} out\n * @param  {clay.Matrix3} a\n * @param  {clay.Matrix3} b\n * @return {clay.Matrix3}\n */\nMatrix3.mul = function (out, a, b) {\n    mat3.mul(out.array, a.array, b.array);\n    out._dirty = true;\n    return out;\n};\n\n/**\n * @function\n * @param  {clay.Matrix3} out\n * @param  {clay.Matrix3} a\n * @param  {clay.Matrix3} b\n * @return {clay.Matrix3}\n */\nMatrix3.multiply = Matrix3.mul;\n\n/**\n * @param  {clay.Matrix3}  out\n * @param  {clay.Matrix2d} a\n * @return {clay.Matrix3}\n */\nMatrix3.fromMat2d = function (out, a) {\n    mat3.fromMat2d(out.array, a.array);\n    out._dirty = true;\n    return out;\n};\n\n/**\n * @param  {clay.Matrix3} out\n * @param  {clay.Matrix4} a\n * @return {clay.Matrix3}\n */\nMatrix3.fromMat4 = function (out, a) {\n    mat3.fromMat4(out.array, a.array);\n    out._dirty = true;\n    return out;\n};\n\n/**\n * @param  {clay.Matrix3}    out\n * @param  {clay.Quaternion} a\n * @return {clay.Matrix3}\n */\nMatrix3.fromQuat = function (out, q) {\n    mat3.fromQuat(out.array, q.array);\n    out._dirty = true;\n    return out;\n};\n\n/**\n * @param  {clay.Matrix3} out\n * @param  {clay.Matrix4} a\n * @return {clay.Matrix3}\n */\nMatrix3.normalFromMat4 = function (out, a) {\n    mat3.normalFromMat4(out.array, a.array);\n    out._dirty = true;\n    return out;\n};\n\n/**\n * @param  {clay.Matrix3} out\n * @param  {clay.Matrix3} a\n * @param  {number}  rad\n * @return {clay.Matrix3}\n */\nMatrix3.rotate = function (out, a, rad) {\n    mat3.rotate(out.array, a.array, rad);\n    out._dirty = true;\n    return out;\n};\n\n/**\n * @param  {clay.Matrix3} out\n * @param  {clay.Matrix3} a\n * @param  {clay.Vector2} v\n * @return {clay.Matrix3}\n */\nMatrix3.scale = function (out, a, v) {\n    mat3.scale(out.array, a.array, v.array);\n    out._dirty = true;\n    return out;\n};\n\n/**\n * @param  {clay.Matrix3} out\n * @param  {clay.Matrix3} a\n * @return {clay.Matrix3}\n */\nMatrix3.transpose = function (out, a) {\n    mat3.transpose(out.array, a.array);\n    out._dirty = true;\n    return out;\n};\n\n/**\n * @param  {clay.Matrix3} out\n * @param  {clay.Matrix3} a\n * @param  {clay.Vector2} v\n * @return {clay.Matrix3}\n */\nMatrix3.translate = function (out, a, v) {\n    mat3.translate(out.array, a.array, v.array);\n    out._dirty = true;\n    return out;\n};\n\nexport default Matrix3;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}