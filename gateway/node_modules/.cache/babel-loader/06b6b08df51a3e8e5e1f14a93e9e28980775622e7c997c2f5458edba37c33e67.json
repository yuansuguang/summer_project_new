{"ast":null,"code":"import Vector3 from './Vector3';\nimport vec3 from '../glmatrix/vec3';\nvar vec3Set = vec3.set;\nvar vec3Copy = vec3.copy;\n\n/**\n * Axis aligned bounding box\n * @constructor\n * @alias clay.BoundingBox\n * @param {clay.Vector3} [min]\n * @param {clay.Vector3} [max]\n */\nvar BoundingBox = function (min, max) {\n  /**\n   * Minimum coords of bounding box\n   * @type {clay.Vector3}\n   */\n  this.min = min || new Vector3(Infinity, Infinity, Infinity);\n\n  /**\n   * Maximum coords of bounding box\n   * @type {clay.Vector3}\n   */\n  this.max = max || new Vector3(-Infinity, -Infinity, -Infinity);\n  this.vertices = null;\n};\nBoundingBox.prototype = {\n  constructor: BoundingBox,\n  /**\n   * Update min and max coords from a vertices array\n   * @param  {array} vertices\n   */\n  updateFromVertices: function (vertices) {\n    if (vertices.length > 0) {\n      var min = this.min;\n      var max = this.max;\n      var minArr = min.array;\n      var maxArr = max.array;\n      vec3Copy(minArr, vertices[0]);\n      vec3Copy(maxArr, vertices[0]);\n      for (var i = 1; i < vertices.length; i++) {\n        var vertex = vertices[i];\n        if (vertex[0] < minArr[0]) {\n          minArr[0] = vertex[0];\n        }\n        if (vertex[1] < minArr[1]) {\n          minArr[1] = vertex[1];\n        }\n        if (vertex[2] < minArr[2]) {\n          minArr[2] = vertex[2];\n        }\n        if (vertex[0] > maxArr[0]) {\n          maxArr[0] = vertex[0];\n        }\n        if (vertex[1] > maxArr[1]) {\n          maxArr[1] = vertex[1];\n        }\n        if (vertex[2] > maxArr[2]) {\n          maxArr[2] = vertex[2];\n        }\n      }\n      min._dirty = true;\n      max._dirty = true;\n    }\n  },\n  /**\n   * Union operation with another bounding box\n   * @param  {clay.BoundingBox} bbox\n   */\n  union: function (bbox) {\n    var min = this.min;\n    var max = this.max;\n    vec3.min(min.array, min.array, bbox.min.array);\n    vec3.max(max.array, max.array, bbox.max.array);\n    min._dirty = true;\n    max._dirty = true;\n    return this;\n  },\n  /**\n   * Intersection operation with another bounding box\n   * @param  {clay.BoundingBox} bbox\n   */\n  intersection: function (bbox) {\n    var min = this.min;\n    var max = this.max;\n    vec3.max(min.array, min.array, bbox.min.array);\n    vec3.min(max.array, max.array, bbox.max.array);\n    min._dirty = true;\n    max._dirty = true;\n    return this;\n  },\n  /**\n   * If intersect with another bounding box\n   * @param  {clay.BoundingBox} bbox\n   * @return {boolean}\n   */\n  intersectBoundingBox: function (bbox) {\n    var _min = this.min.array;\n    var _max = this.max.array;\n    var _min2 = bbox.min.array;\n    var _max2 = bbox.max.array;\n    return !(_min[0] > _max2[0] || _min[1] > _max2[1] || _min[2] > _max2[2] || _max[0] < _min2[0] || _max[1] < _min2[1] || _max[2] < _min2[2]);\n  },\n  /**\n   * If contain another bounding box entirely\n   * @param  {clay.BoundingBox} bbox\n   * @return {boolean}\n   */\n  containBoundingBox: function (bbox) {\n    var _min = this.min.array;\n    var _max = this.max.array;\n    var _min2 = bbox.min.array;\n    var _max2 = bbox.max.array;\n    return _min[0] <= _min2[0] && _min[1] <= _min2[1] && _min[2] <= _min2[2] && _max[0] >= _max2[0] && _max[1] >= _max2[1] && _max[2] >= _max2[2];\n  },\n  /**\n   * If contain point entirely\n   * @param  {clay.Vector3} point\n   * @return {boolean}\n   */\n  containPoint: function (p) {\n    var _min = this.min.array;\n    var _max = this.max.array;\n    var _p = p.array;\n    return _min[0] <= _p[0] && _min[1] <= _p[1] && _min[2] <= _p[2] && _max[0] >= _p[0] && _max[1] >= _p[1] && _max[2] >= _p[2];\n  },\n  /**\n   * If bounding box is finite\n   */\n  isFinite: function () {\n    var _min = this.min.array;\n    var _max = this.max.array;\n    return isFinite(_min[0]) && isFinite(_min[1]) && isFinite(_min[2]) && isFinite(_max[0]) && isFinite(_max[1]) && isFinite(_max[2]);\n  },\n  /**\n   * Apply an affine transform matrix to the bounding box\n   * @param  {clay.Matrix4} matrix\n   */\n  applyTransform: function (matrix) {\n    this.transformFrom(this, matrix);\n  },\n  /**\n   * Get from another bounding box and an affine transform matrix.\n   * @param {clay.BoundingBox} source\n   * @param {clay.Matrix4} matrix\n   */\n  transformFrom: function () {\n    // http://dev.theomader.com/transform-bounding-boxes/\n    var xa = vec3.create();\n    var xb = vec3.create();\n    var ya = vec3.create();\n    var yb = vec3.create();\n    var za = vec3.create();\n    var zb = vec3.create();\n    return function (source, matrix) {\n      var min = source.min.array;\n      var max = source.max.array;\n      var m = matrix.array;\n      xa[0] = m[0] * min[0];\n      xa[1] = m[1] * min[0];\n      xa[2] = m[2] * min[0];\n      xb[0] = m[0] * max[0];\n      xb[1] = m[1] * max[0];\n      xb[2] = m[2] * max[0];\n      ya[0] = m[4] * min[1];\n      ya[1] = m[5] * min[1];\n      ya[2] = m[6] * min[1];\n      yb[0] = m[4] * max[1];\n      yb[1] = m[5] * max[1];\n      yb[2] = m[6] * max[1];\n      za[0] = m[8] * min[2];\n      za[1] = m[9] * min[2];\n      za[2] = m[10] * min[2];\n      zb[0] = m[8] * max[2];\n      zb[1] = m[9] * max[2];\n      zb[2] = m[10] * max[2];\n      min = this.min.array;\n      max = this.max.array;\n      min[0] = Math.min(xa[0], xb[0]) + Math.min(ya[0], yb[0]) + Math.min(za[0], zb[0]) + m[12];\n      min[1] = Math.min(xa[1], xb[1]) + Math.min(ya[1], yb[1]) + Math.min(za[1], zb[1]) + m[13];\n      min[2] = Math.min(xa[2], xb[2]) + Math.min(ya[2], yb[2]) + Math.min(za[2], zb[2]) + m[14];\n      max[0] = Math.max(xa[0], xb[0]) + Math.max(ya[0], yb[0]) + Math.max(za[0], zb[0]) + m[12];\n      max[1] = Math.max(xa[1], xb[1]) + Math.max(ya[1], yb[1]) + Math.max(za[1], zb[1]) + m[13];\n      max[2] = Math.max(xa[2], xb[2]) + Math.max(ya[2], yb[2]) + Math.max(za[2], zb[2]) + m[14];\n      this.min._dirty = true;\n      this.max._dirty = true;\n      return this;\n    };\n  }(),\n  /**\n   * Apply a projection matrix to the bounding box\n   * @param  {clay.Matrix4} matrix\n   */\n  applyProjection: function (matrix) {\n    var min = this.min.array;\n    var max = this.max.array;\n    var m = matrix.array;\n    // min in min z\n    var v10 = min[0];\n    var v11 = min[1];\n    var v12 = min[2];\n    // max in min z\n    var v20 = max[0];\n    var v21 = max[1];\n    var v22 = min[2];\n    // max in max z\n    var v30 = max[0];\n    var v31 = max[1];\n    var v32 = max[2];\n    if (m[15] === 1) {\n      // Orthographic projection\n      min[0] = m[0] * v10 + m[12];\n      min[1] = m[5] * v11 + m[13];\n      max[2] = m[10] * v12 + m[14];\n      max[0] = m[0] * v30 + m[12];\n      max[1] = m[5] * v31 + m[13];\n      min[2] = m[10] * v32 + m[14];\n    } else {\n      var w = -1 / v12;\n      min[0] = m[0] * v10 * w;\n      min[1] = m[5] * v11 * w;\n      max[2] = (m[10] * v12 + m[14]) * w;\n      w = -1 / v22;\n      max[0] = m[0] * v20 * w;\n      max[1] = m[5] * v21 * w;\n      w = -1 / v32;\n      min[2] = (m[10] * v32 + m[14]) * w;\n    }\n    this.min._dirty = true;\n    this.max._dirty = true;\n    return this;\n  },\n  updateVertices: function () {\n    var vertices = this.vertices;\n    if (!vertices) {\n      // Cube vertices\n      vertices = [];\n      for (var i = 0; i < 8; i++) {\n        vertices[i] = vec3.fromValues(0, 0, 0);\n      }\n\n      /**\n       * Eight coords of bounding box\n       * @type {Float32Array[]}\n       */\n      this.vertices = vertices;\n    }\n    var min = this.min.array;\n    var max = this.max.array;\n    //--- min z\n    // min x\n    vec3Set(vertices[0], min[0], min[1], min[2]);\n    vec3Set(vertices[1], min[0], max[1], min[2]);\n    // max x\n    vec3Set(vertices[2], max[0], min[1], min[2]);\n    vec3Set(vertices[3], max[0], max[1], min[2]);\n\n    //-- max z\n    vec3Set(vertices[4], min[0], min[1], max[2]);\n    vec3Set(vertices[5], min[0], max[1], max[2]);\n    vec3Set(vertices[6], max[0], min[1], max[2]);\n    vec3Set(vertices[7], max[0], max[1], max[2]);\n    return this;\n  },\n  /**\n   * Copy values from another bounding box\n   * @param  {clay.BoundingBox} bbox\n   */\n  copy: function (bbox) {\n    var min = this.min;\n    var max = this.max;\n    vec3Copy(min.array, bbox.min.array);\n    vec3Copy(max.array, bbox.max.array);\n    min._dirty = true;\n    max._dirty = true;\n    return this;\n  },\n  /**\n   * Clone a new bounding box\n   * @return {clay.BoundingBox}\n   */\n  clone: function () {\n    var boundingBox = new BoundingBox();\n    boundingBox.copy(this);\n    return boundingBox;\n  }\n};\nexport default BoundingBox;","map":{"version":3,"names":["Vector3","vec3","vec3Set","set","vec3Copy","copy","BoundingBox","min","max","Infinity","vertices","prototype","constructor","updateFromVertices","length","minArr","array","maxArr","i","vertex","_dirty","union","bbox","intersection","intersectBoundingBox","_min","_max","_min2","_max2","containBoundingBox","containPoint","p","_p","isFinite","applyTransform","matrix","transformFrom","xa","create","xb","ya","yb","za","zb","source","m","Math","applyProjection","v10","v11","v12","v20","v21","v22","v30","v31","v32","w","updateVertices","fromValues","clone","boundingBox"],"sources":["E:/QuestionairePlanet_Fronted/mytest/node_modules/claygl/src/math/BoundingBox.js"],"sourcesContent":["import Vector3 from './Vector3';\nimport vec3 from '../glmatrix/vec3';\n\nvar vec3Set = vec3.set;\nvar vec3Copy = vec3.copy;\n\n/**\n * Axis aligned bounding box\n * @constructor\n * @alias clay.BoundingBox\n * @param {clay.Vector3} [min]\n * @param {clay.Vector3} [max]\n */\nvar BoundingBox = function (min, max) {\n\n    /**\n     * Minimum coords of bounding box\n     * @type {clay.Vector3}\n     */\n    this.min = min || new Vector3(Infinity, Infinity, Infinity);\n\n    /**\n     * Maximum coords of bounding box\n     * @type {clay.Vector3}\n     */\n    this.max = max || new Vector3(-Infinity, -Infinity, -Infinity);\n\n    this.vertices = null;\n};\n\nBoundingBox.prototype = {\n\n    constructor: BoundingBox,\n    /**\n     * Update min and max coords from a vertices array\n     * @param  {array} vertices\n     */\n    updateFromVertices: function (vertices) {\n        if (vertices.length > 0) {\n            var min = this.min;\n            var max = this.max;\n            var minArr = min.array;\n            var maxArr = max.array;\n            vec3Copy(minArr, vertices[0]);\n            vec3Copy(maxArr, vertices[0]);\n            for (var i = 1; i < vertices.length; i++) {\n                var vertex = vertices[i];\n\n                if (vertex[0] < minArr[0]) { minArr[0] = vertex[0]; }\n                if (vertex[1] < minArr[1]) { minArr[1] = vertex[1]; }\n                if (vertex[2] < minArr[2]) { minArr[2] = vertex[2]; }\n\n                if (vertex[0] > maxArr[0]) { maxArr[0] = vertex[0]; }\n                if (vertex[1] > maxArr[1]) { maxArr[1] = vertex[1]; }\n                if (vertex[2] > maxArr[2]) { maxArr[2] = vertex[2]; }\n            }\n            min._dirty = true;\n            max._dirty = true;\n        }\n    },\n\n    /**\n     * Union operation with another bounding box\n     * @param  {clay.BoundingBox} bbox\n     */\n    union: function (bbox) {\n        var min = this.min;\n        var max = this.max;\n        vec3.min(min.array, min.array, bbox.min.array);\n        vec3.max(max.array, max.array, bbox.max.array);\n        min._dirty = true;\n        max._dirty = true;\n        return this;\n    },\n\n    /**\n     * Intersection operation with another bounding box\n     * @param  {clay.BoundingBox} bbox\n     */\n    intersection: function (bbox) {\n        var min = this.min;\n        var max = this.max;\n        vec3.max(min.array, min.array, bbox.min.array);\n        vec3.min(max.array, max.array, bbox.max.array);\n        min._dirty = true;\n        max._dirty = true;\n        return this;\n    },\n\n    /**\n     * If intersect with another bounding box\n     * @param  {clay.BoundingBox} bbox\n     * @return {boolean}\n     */\n    intersectBoundingBox: function (bbox) {\n        var _min = this.min.array;\n        var _max = this.max.array;\n\n        var _min2 = bbox.min.array;\n        var _max2 = bbox.max.array;\n\n        return ! (_min[0] > _max2[0] || _min[1] > _max2[1] || _min[2] > _max2[2]\n            || _max[0] < _min2[0] || _max[1] < _min2[1] || _max[2] < _min2[2]);\n    },\n\n    /**\n     * If contain another bounding box entirely\n     * @param  {clay.BoundingBox} bbox\n     * @return {boolean}\n     */\n    containBoundingBox: function (bbox) {\n\n        var _min = this.min.array;\n        var _max = this.max.array;\n\n        var _min2 = bbox.min.array;\n        var _max2 = bbox.max.array;\n\n        return _min[0] <= _min2[0] && _min[1] <= _min2[1] && _min[2] <= _min2[2]\n            && _max[0] >= _max2[0] && _max[1] >= _max2[1] && _max[2] >= _max2[2];\n    },\n\n    /**\n     * If contain point entirely\n     * @param  {clay.Vector3} point\n     * @return {boolean}\n     */\n    containPoint: function (p) {\n        var _min = this.min.array;\n        var _max = this.max.array;\n\n        var _p = p.array;\n\n        return _min[0] <= _p[0] && _min[1] <= _p[1] && _min[2] <= _p[2]\n            && _max[0] >= _p[0] && _max[1] >= _p[1] && _max[2] >= _p[2];\n    },\n\n    /**\n     * If bounding box is finite\n     */\n    isFinite: function () {\n        var _min = this.min.array;\n        var _max = this.max.array;\n        return isFinite(_min[0]) && isFinite(_min[1]) && isFinite(_min[2])\n            && isFinite(_max[0]) && isFinite(_max[1]) && isFinite(_max[2]);\n    },\n\n    /**\n     * Apply an affine transform matrix to the bounding box\n     * @param  {clay.Matrix4} matrix\n     */\n    applyTransform: function (matrix) {\n        this.transformFrom(this, matrix);\n    },\n\n    /**\n     * Get from another bounding box and an affine transform matrix.\n     * @param {clay.BoundingBox} source\n     * @param {clay.Matrix4} matrix\n     */\n    transformFrom: (function () {\n        // http://dev.theomader.com/transform-bounding-boxes/\n        var xa = vec3.create();\n        var xb = vec3.create();\n        var ya = vec3.create();\n        var yb = vec3.create();\n        var za = vec3.create();\n        var zb = vec3.create();\n\n        return function (source, matrix) {\n            var min = source.min.array;\n            var max = source.max.array;\n\n            var m = matrix.array;\n\n            xa[0] = m[0] * min[0]; xa[1] = m[1] * min[0]; xa[2] = m[2] * min[0];\n            xb[0] = m[0] * max[0]; xb[1] = m[1] * max[0]; xb[2] = m[2] * max[0];\n\n            ya[0] = m[4] * min[1]; ya[1] = m[5] * min[1]; ya[2] = m[6] * min[1];\n            yb[0] = m[4] * max[1]; yb[1] = m[5] * max[1]; yb[2] = m[6] * max[1];\n\n            za[0] = m[8] * min[2]; za[1] = m[9] * min[2]; za[2] = m[10] * min[2];\n            zb[0] = m[8] * max[2]; zb[1] = m[9] * max[2]; zb[2] = m[10] * max[2];\n\n            min = this.min.array;\n            max = this.max.array;\n            min[0] = Math.min(xa[0], xb[0]) + Math.min(ya[0], yb[0]) + Math.min(za[0], zb[0]) + m[12];\n            min[1] = Math.min(xa[1], xb[1]) + Math.min(ya[1], yb[1]) + Math.min(za[1], zb[1]) + m[13];\n            min[2] = Math.min(xa[2], xb[2]) + Math.min(ya[2], yb[2]) + Math.min(za[2], zb[2]) + m[14];\n\n            max[0] = Math.max(xa[0], xb[0]) + Math.max(ya[0], yb[0]) + Math.max(za[0], zb[0]) + m[12];\n            max[1] = Math.max(xa[1], xb[1]) + Math.max(ya[1], yb[1]) + Math.max(za[1], zb[1]) + m[13];\n            max[2] = Math.max(xa[2], xb[2]) + Math.max(ya[2], yb[2]) + Math.max(za[2], zb[2]) + m[14];\n\n            this.min._dirty = true;\n            this.max._dirty = true;\n\n            return this;\n        };\n    })(),\n\n    /**\n     * Apply a projection matrix to the bounding box\n     * @param  {clay.Matrix4} matrix\n     */\n    applyProjection: function (matrix) {\n        var min = this.min.array;\n        var max = this.max.array;\n\n        var m = matrix.array;\n        // min in min z\n        var v10 = min[0];\n        var v11 = min[1];\n        var v12 = min[2];\n        // max in min z\n        var v20 = max[0];\n        var v21 = max[1];\n        var v22 = min[2];\n        // max in max z\n        var v30 = max[0];\n        var v31 = max[1];\n        var v32 = max[2];\n\n        if (m[15] === 1) {  // Orthographic projection\n            min[0] = m[0] * v10 + m[12];\n            min[1] = m[5] * v11 + m[13];\n            max[2] = m[10] * v12 + m[14];\n\n            max[0] = m[0] * v30 + m[12];\n            max[1] = m[5] * v31 + m[13];\n            min[2] = m[10] * v32 + m[14];\n        }\n        else {\n            var w = -1 / v12;\n            min[0] = m[0] * v10 * w;\n            min[1] = m[5] * v11 * w;\n            max[2] = (m[10] * v12 + m[14]) * w;\n\n            w = -1 / v22;\n            max[0] = m[0] * v20 * w;\n            max[1] = m[5] * v21 * w;\n\n            w = -1 / v32;\n            min[2] = (m[10] * v32 + m[14]) * w;\n        }\n        this.min._dirty = true;\n        this.max._dirty = true;\n\n        return this;\n    },\n\n    updateVertices: function () {\n        var vertices = this.vertices;\n        if (!vertices) {\n            // Cube vertices\n            vertices = [];\n            for (var i = 0; i < 8; i++) {\n                vertices[i] = vec3.fromValues(0, 0, 0);\n            }\n\n            /**\n             * Eight coords of bounding box\n             * @type {Float32Array[]}\n             */\n            this.vertices = vertices;\n        }\n        var min = this.min.array;\n        var max = this.max.array;\n        //--- min z\n        // min x\n        vec3Set(vertices[0], min[0], min[1], min[2]);\n        vec3Set(vertices[1], min[0], max[1], min[2]);\n        // max x\n        vec3Set(vertices[2], max[0], min[1], min[2]);\n        vec3Set(vertices[3], max[0], max[1], min[2]);\n\n        //-- max z\n        vec3Set(vertices[4], min[0], min[1], max[2]);\n        vec3Set(vertices[5], min[0], max[1], max[2]);\n        vec3Set(vertices[6], max[0], min[1], max[2]);\n        vec3Set(vertices[7], max[0], max[1], max[2]);\n\n        return this;\n    },\n    /**\n     * Copy values from another bounding box\n     * @param  {clay.BoundingBox} bbox\n     */\n    copy: function (bbox) {\n        var min = this.min;\n        var max = this.max;\n        vec3Copy(min.array, bbox.min.array);\n        vec3Copy(max.array, bbox.max.array);\n        min._dirty = true;\n        max._dirty = true;\n        return this;\n    },\n\n    /**\n     * Clone a new bounding box\n     * @return {clay.BoundingBox}\n     */\n    clone: function () {\n        var boundingBox = new BoundingBox();\n        boundingBox.copy(this);\n        return boundingBox;\n    }\n};\n\nexport default BoundingBox;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}