{"ast":null,"code":"import { onMounted, reactive, watch, ref, onBeforeUnmount, shallowRef } from 'vue';\n\n// 渲染数\n\nimport Chart from 'chart.js/auto';\n// import { ref } from 'vue';\n\nconst __default__ = {\n  props: {\n    correctAnswer: {\n      // 接收正确答案\n      type: String,\n      default: ''\n    }\n  },\n  data() {\n    return {\n      options: [],\n      // 选项统计数据，包括名称、人数、占比\n      showChart: false,\n      // 是否显示图表\n      chartType: '',\n      // 图表类型\n      chartData: null,\n      // 图表数据\n      chartLabels: [],\n      // 图表标签\n      correctRate: 0 // 本题正确率\n    };\n  },\n  mounted() {\n    // 假设从后端获取的数据格式为 [{ name: '选项1', count: 10 }, { name: '选项2', count: 20 }, ...]\n    this.options = this.calculatePercentage(this.getData());\n    this.calculateCorrectRate();\n    this.generateChart();\n  },\n  methods: {\n    getData() {\n      // 获取后端数据的方法\n      return [{\n        name: '选项1',\n        count: 10\n      }, {\n        name: '选项2',\n        count: 20\n      }];\n    },\n    calculatePercentage(data) {\n      // 计算占比\n      const total = data.reduce((sum, option) => sum + option.count, 0);\n      return data.map(option => ({\n        ...option,\n        percentage: (option.count / total * 100).toFixed(2)\n      }));\n    },\n    calculateCorrectRate() {\n      // 计算本题正确率\n      const totalResponses = this.options.reduce((sum, option) => sum + option.count, 0);\n      const correctResponses = this.options.find(option => option.name === this.correctAnswer)?.count || 0;\n      this.correctRate = (correctResponses / totalResponses * 100).toFixed(2);\n    },\n    toggleChart(type) {\n      if (this.chartType === type) {\n        // 如果当前已经显示该类型的图表，则收起图表\n        this.showChart = false;\n        this.chartType = '';\n      } else {\n        // 否则，显示对应类型的图表\n        this.showChart = true;\n        this.chartType = type;\n        this.$nextTick(() => {\n          this.generateChart();\n        });\n      }\n    },\n    generateChart() {\n      // 生成图表\n      if (this.chartData) {\n        this.chartData.destroy();\n      }\n      const ctx = this.$refs.chartCanvas.getContext('2d');\n      const data = {\n        labels: this.options.map(option => option.name),\n        datasets: [{\n          label: '占比',\n          data: this.options.map(option => parseFloat(option.percentage)),\n          backgroundColor: ['rgba(255, 99, 132, 0.2)', 'rgba(54, 162, 235, 0.2)', 'rgba(255, 206, 86, 0.2)', 'rgba(75, 192, 192, 0.2)'],\n          borderColor: ['rgba(255, 99, 132, 1)', 'rgba(54, 162, 235, 1)', 'rgba(255, 206, 86, 1)', 'rgba(75, 192, 192, 1)'],\n          borderWidth: 1\n        }]\n      };\n      const options = {\n        scales: {\n          y: {\n            beginAtZero: true\n          }\n        }\n      };\n      this.chartData = new Chart(ctx, {\n        type: this.chartType,\n        data: data,\n        options: options\n      });\n    }\n  }\n};\nexport default /*#__PURE__*/Object.assign(__default__, {\n  __name: 'qnDataview',\n  setup(__props, {\n    expose: __expose\n  }) {\n    __expose();\n    mychart1.value.setOption(renderLineOptions());\n\n    // 定义属性\n    const mychart1 = ref(null);\n    const optionBar = ref(null);\n\n    // 坐标轴及其属性定义\n    const renderLineOptions = () => {\n      return {\n        grid: {\n          left: '3%',\n          right: '4%',\n          bottom: '8%',\n          containLabel: true\n        },\n        xAxis: {\n          data: data.chartName,\n          // x轴的标题（定义的变量），可以是直接的数组[\"衬衫\", \"羊毛衫\", \"雪纺衫\", \"裤子\", \"高跟鞋\", \"袜子\"]\n          axisLabel: {\n            show: true,\n            textStyle: {\n              fontSize: 15 // 字体大小\n            }\n          },\n          axisLabel: {\n            show: true,\n            rotate: 30 // 设置x轴标签旋转角度\n          }\n        },\n        yAxis: {\n          name: '工时/h',\n          nameTextStyle: {\n            nameLocation: 'start'\n          },\n          axisLabel: {\n            show: true,\n            fontSize: 16\n          },\n          axisLine: {\n            show: true,\n            // 是否显示Y轴线\n            lineStyle: {\n              width: 1,\n              // 线的大小\n              type: 'solid' // Y轴线的类型\n            }\n          }\n        },\n        series: [{\n          // 渲染的数据，可以使用 [5, 20, 36, 10, 10, 20]，也可以是定义的变量（记得赋值）\n          data: data.chartRows,\n          type: 'bar',\n          barWidth: '20%',\n          itemStyle: {\n            // 通常情况下：\n            color: function (params) {\n              // 每根柱子的颜色\n              return data.colorList[params.dataIndex];\n            },\n            offset: 6 // 偏移量\n          },\n          label: {\n            show: true,\n            position: 'top',\n            fontSize: 14,\n            formatter: params => {\n              const reData = (params.data || 0).toString().replace(/(\\d)(?=(?:\\d{3}) + $)/g, '$1,');\n              return reData;\n            }\n          }\n        }]\n      };\n    };\n    const __returned__ = {\n      mychart1,\n      optionBar,\n      renderLineOptions,\n      get Chart() {\n        return Chart;\n      },\n      onMounted,\n      reactive,\n      watch,\n      ref,\n      onBeforeUnmount,\n      shallowRef\n    };\n    Object.defineProperty(__returned__, '__isScriptSetup', {\n      enumerable: false,\n      value: true\n    });\n    return __returned__;\n  }\n});","map":{"version":3,"names":["onMounted","reactive","watch","ref","onBeforeUnmount","shallowRef","Chart","__default__","props","correctAnswer","type","String","default","data","options","showChart","chartType","chartData","chartLabels","correctRate","mounted","calculatePercentage","getData","calculateCorrectRate","generateChart","methods","name","count","total","reduce","sum","option","map","percentage","toFixed","totalResponses","correctResponses","find","toggleChart","$nextTick","destroy","ctx","$refs","chartCanvas","getContext","labels","datasets","label","parseFloat","backgroundColor","borderColor","borderWidth","scales","y","beginAtZero","mychart1","value","setOption","renderLineOptions","optionBar","grid","left","right","bottom","containLabel","xAxis","chartName","axisLabel","show","textStyle","fontSize","rotate","yAxis","nameTextStyle","nameLocation","axisLine","lineStyle","width","series","chartRows","barWidth","itemStyle","color","params","colorList","dataIndex","offset","position","formatter","reData","toString","replace"],"sources":["E:/mytest/src/views/qn-data/qnDataview.vue"],"sourcesContent":["<template>\r\n  <div>\r\n    <h2>选项统计</h2>\r\n    <table>\r\n      <thead>\r\n        <tr>\r\n          <th>选项</th>\r\n          <th>选择人数</th>\r\n          <th>占比</th>\r\n        </tr>\r\n      </thead>\r\n      <tbody>\r\n        <tr v-for=\"(option, index) in options\" :key=\"index\">\r\n          <td>{{ option.name }}</td>\r\n          <td>{{ option.count }}</td>\r\n          <td>\r\n            <div class=\"percentage-bar\">\r\n              <div class=\"percentage-fill\" :style=\"{ width: option.percentage + '%' }\">\r\n                {{ option.percentage }}%\r\n              </div>\r\n            </div>\r\n          </td>\r\n        </tr>\r\n        <tr>\r\n          <td>本题正确率</td>\r\n          <td>{{ correctRate }}</td>\r\n          <td>\r\n            <div class=\"percentage-bar\">\r\n              <div class=\"percentage-fill\" :style=\"{ width: correctRate + '%' }\">\r\n                {{ correctRate }}%\r\n              </div>\r\n            </div>\r\n          </td>\r\n        </tr>\r\n      </tbody>\r\n    </table>\r\n\r\n    <!-- 图表展示按钮 -->\r\n    <div class=\"chart-buttons\">\r\n      <button @click=\"toggleChart('bar')\">条形图</button>\r\n      <button @click=\"toggleChart('column')\">柱状图</button>\r\n      <button @click=\"toggleChart('line')\">折线图</button>\r\n      <button @click=\"toggleChart('pie')\">饼状图</button>\r\n    </div>\r\n\r\n    <!-- 图表展示区域 -->\r\n    <!-- <div v-if=\"showChart\" class=\"chart-container\">\r\n      <canvas ref=\"chartCanvas\"></canvas>\r\n    </div> -->\r\n     \r\n\r\n    <div style=\"width:100vw\">\r\n      <v-chart autoresize :option=\"option_column\" style=\"height: 400px\"></v-chart>\r\n    </div>\r\n\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport Chart from 'chart.js/auto';\r\n// import { ref } from 'vue';\r\n\r\n\r\nexport default {\r\n  props: {\r\n    correctAnswer: { // 接收正确答案\r\n      type: String,\r\n      default: ''\r\n    }\r\n  },\r\n  data() {\r\n    return {\r\n      options: [], // 选项统计数据，包括名称、人数、占比\r\n      showChart: false, // 是否显示图表\r\n      chartType: '', // 图表类型\r\n      chartData: null, // 图表数据\r\n      chartLabels: [], // 图表标签\r\n      correctRate: 0 // 本题正确率\r\n    };\r\n  },\r\n  mounted() {\r\n    // 假设从后端获取的数据格式为 [{ name: '选项1', count: 10 }, { name: '选项2', count: 20 }, ...]\r\n    this.options = this.calculatePercentage(this.getData());\r\n    this.calculateCorrectRate();\r\n    this.generateChart();\r\n  },\r\n  methods: {\r\n    getData() {\r\n      // 获取后端数据的方法\r\n      return [{ name: '选项1', count: 10 }, { name: '选项2', count: 20 }];\r\n    },\r\n    calculatePercentage(data) {\r\n      // 计算占比\r\n      const total = data.reduce((sum, option) => sum + option.count, 0);\r\n      return data.map(option => ({\r\n        ...option,\r\n        percentage: ((option.count / total) * 100).toFixed(2)\r\n      }));\r\n    },\r\n    calculateCorrectRate() {\r\n      // 计算本题正确率\r\n      const totalResponses = this.options.reduce((sum, option) => sum + option.count, 0);\r\n      const correctResponses = this.options.find(option => option.name === this.correctAnswer)?.count || 0;\r\n      this.correctRate = ((correctResponses / totalResponses) * 100).toFixed(2);\r\n    },\r\n    toggleChart(type) {\r\n      if (this.chartType === type) {\r\n        // 如果当前已经显示该类型的图表，则收起图表\r\n        this.showChart = false;\r\n        this.chartType = '';\r\n      } else {\r\n        // 否则，显示对应类型的图表\r\n        this.showChart = true;\r\n        this.chartType = type;\r\n        this.$nextTick(() => {\r\n          this.generateChart();\r\n        });\r\n      }\r\n    },\r\n    generateChart() {\r\n      // 生成图表\r\n      if (this.chartData) {\r\n        this.chartData.destroy();\r\n      }\r\n      const ctx = this.$refs.chartCanvas.getContext('2d');\r\n      const data = {\r\n        labels: this.options.map(option => option.name),\r\n        datasets: [{\r\n          label: '占比',\r\n          data: this.options.map(option => parseFloat(option.percentage)),\r\n          backgroundColor: [\r\n            'rgba(255, 99, 132, 0.2)',\r\n            'rgba(54, 162, 235, 0.2)',\r\n            'rgba(255, 206, 86, 0.2)',\r\n            'rgba(75, 192, 192, 0.2)'\r\n          ],\r\n          borderColor: [\r\n            'rgba(255, 99, 132, 1)',\r\n            'rgba(54, 162, 235, 1)',\r\n            'rgba(255, 206, 86, 1)',\r\n            'rgba(75, 192, 192, 1)'\r\n          ],\r\n          borderWidth: 1\r\n        }]\r\n      };\r\n      const options = {\r\n        scales: {\r\n          y: {\r\n            beginAtZero: true\r\n          }\r\n        }\r\n      };\r\n      this.chartData = new Chart(ctx, {\r\n        type: this.chartType,\r\n        data: data,\r\n        options: options\r\n      });\r\n    }\r\n  }\r\n};\r\n</script>\r\n<script setup>\r\n    import { onMounted, reactive, watch, ref, onBeforeUnmount, shallowRef } from 'vue'\r\n \r\n    // 渲染数\r\n    mychart1.value.setOption(renderLineOptions())\r\n \r\n    // 定义属性\r\n    const mychart1 = ref(null)\r\n    const optionBar = ref(null)\r\n \r\n    // 坐标轴及其属性定义\r\n    const renderLineOptions = () => {\r\n        return {\r\n            grid: {\r\n                left: '3%',\r\n                right: '4%',\r\n                bottom: '8%',\r\n                containLabel: true\r\n            },\r\n            xAxis: {\r\n                data: data.chartName, // x轴的标题（定义的变量），可以是直接的数组[\"衬衫\", \"羊毛衫\", \"雪纺衫\", \"裤子\", \"高跟鞋\", \"袜子\"]\r\n                axisLabel: {\r\n                    show: true,\r\n                    textStyle: {\r\n                        fontSize: 15// 字体大小\r\n                    }\r\n                },\r\n                axisLabel: {\r\n                    show: true,\r\n                rotate: 30    // 设置x轴标签旋转角度\r\n                }\r\n            },\r\n            yAxis: {\r\n                name: '工时/h',\r\n                nameTextStyle: {\r\n                    nameLocation: 'start'\r\n                },\r\n                axisLabel: {\r\n                    show: true,\r\n                    fontSize: 16\r\n                },\r\n                axisLine: {\r\n                    show: true, // 是否显示Y轴线\r\n                    lineStyle: {\r\n                        width: 1, // 线的大小\r\n                        type: 'solid' // Y轴线的类型\r\n                    }\r\n                }\r\n            },\r\n            series: [\r\n                {\r\n                    // 渲染的数据，可以使用 [5, 20, 36, 10, 10, 20]，也可以是定义的变量（记得赋值）\r\n                    data: data.chartRows, \r\n                    type: 'bar',\r\n                    barWidth: '20%',\r\n                    itemStyle: {\r\n                        // 通常情况下：\r\n                        color: function (params) {\r\n                            // 每根柱子的颜色\r\n                            return data.colorList[params.dataIndex]\r\n                        },\r\n                        offset: 6 // 偏移量\r\n                    },\r\n                    label: {\r\n                        show: true,\r\n                        position: 'top',\r\n                        fontSize: 14,\r\n                        formatter: (params) => {\r\n                            const reData = (params.data || 0).toString().replace(/(\\d)(?=(?:\\d{3}) + $)/g, '$1,')\r\n                            return reData\r\n                        }\r\n                    }\r\n                }\r\n            ]\r\n        }\r\n    }\r\n \r\n\r\n</script>\r\n\r\n<style scoped>\r\n.percentage-bar {\r\n  width: 100%;\r\n  height: 20px;\r\n  background-color: #f0f0f0;\r\n}\r\n\r\n.percentage-fill {\r\n  height: 100%;\r\n  background-color: #007bff;\r\n  color: #fff;\r\n  text-align: center;\r\n  line-height: 20px;\r\n}\r\n\r\n.chart-buttons button {\r\n  margin-right: 10px;\r\n}\r\n\r\n.chart-container {\r\n  margin-top: 20px;\r\n}\r\n</style>\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}