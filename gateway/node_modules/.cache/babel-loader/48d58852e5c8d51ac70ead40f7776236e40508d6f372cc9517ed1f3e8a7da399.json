{"ast":null,"code":"/**\n * Simple double linked list. Compared with array, it has O(1) remove operation.\n * @constructor\n * @alias clay.core.LinkedList\n */\nvar LinkedList = function () {\n  /**\n   * @type {clay.core.LinkedList.Entry}\n   */\n  this.head = null;\n\n  /**\n   * @type {clay.core.LinkedList.Entry}\n   */\n  this.tail = null;\n  this._length = 0;\n};\n\n/**\n * Insert a new value at the tail\n * @param  {} val\n * @return {clay.core.LinkedList.Entry}\n */\nLinkedList.prototype.insert = function (val) {\n  var entry = new LinkedList.Entry(val);\n  this.insertEntry(entry);\n  return entry;\n};\n\n/**\n * Insert a new value at idx\n * @param {number} idx\n * @param  {} val\n * @return {clay.core.LinkedList.Entry}\n */\nLinkedList.prototype.insertAt = function (idx, val) {\n  if (idx < 0) {\n    return;\n  }\n  var next = this.head;\n  var cursor = 0;\n  while (next && cursor != idx) {\n    next = next.next;\n    cursor++;\n  }\n  if (next) {\n    var entry = new LinkedList.Entry(val);\n    var prev = next.prev;\n    if (!prev) {\n      //next is head\n      this.head = entry;\n    } else {\n      prev.next = entry;\n      entry.prev = prev;\n    }\n    entry.next = next;\n    next.prev = entry;\n  } else {\n    this.insert(val);\n  }\n};\nLinkedList.prototype.insertBeforeEntry = function (val, next) {\n  var entry = new LinkedList.Entry(val);\n  var prev = next.prev;\n  if (!prev) {\n    //next is head\n    this.head = entry;\n  } else {\n    prev.next = entry;\n    entry.prev = prev;\n  }\n  entry.next = next;\n  next.prev = entry;\n  this._length++;\n};\n\n/**\n * Insert an entry at the tail\n * @param  {clay.core.LinkedList.Entry} entry\n */\nLinkedList.prototype.insertEntry = function (entry) {\n  if (!this.head) {\n    this.head = this.tail = entry;\n  } else {\n    this.tail.next = entry;\n    entry.prev = this.tail;\n    this.tail = entry;\n  }\n  this._length++;\n};\n\n/**\n * Remove entry.\n * @param  {clay.core.LinkedList.Entry} entry\n */\nLinkedList.prototype.remove = function (entry) {\n  var prev = entry.prev;\n  var next = entry.next;\n  if (prev) {\n    prev.next = next;\n  } else {\n    // Is head\n    this.head = next;\n  }\n  if (next) {\n    next.prev = prev;\n  } else {\n    // Is tail\n    this.tail = prev;\n  }\n  entry.next = entry.prev = null;\n  this._length--;\n};\n\n/**\n * Remove entry at index.\n * @param  {number} idx\n * @return {}\n */\nLinkedList.prototype.removeAt = function (idx) {\n  if (idx < 0) {\n    return;\n  }\n  var curr = this.head;\n  var cursor = 0;\n  while (curr && cursor != idx) {\n    curr = curr.next;\n    cursor++;\n  }\n  if (curr) {\n    this.remove(curr);\n    return curr.value;\n  }\n};\n/**\n * Get head value\n * @return {}\n */\nLinkedList.prototype.getHead = function () {\n  if (this.head) {\n    return this.head.value;\n  }\n};\n/**\n * Get tail value\n * @return {}\n */\nLinkedList.prototype.getTail = function () {\n  if (this.tail) {\n    return this.tail.value;\n  }\n};\n/**\n * Get value at idx\n * @param {number} idx\n * @return {}\n */\nLinkedList.prototype.getAt = function (idx) {\n  if (idx < 0) {\n    return;\n  }\n  var curr = this.head;\n  var cursor = 0;\n  while (curr && cursor != idx) {\n    curr = curr.next;\n    cursor++;\n  }\n  return curr.value;\n};\n\n/**\n * @param  {} value\n * @return {number}\n */\nLinkedList.prototype.indexOf = function (value) {\n  var curr = this.head;\n  var cursor = 0;\n  while (curr) {\n    if (curr.value === value) {\n      return cursor;\n    }\n    curr = curr.next;\n    cursor++;\n  }\n};\n\n/**\n * @return {number}\n */\nLinkedList.prototype.length = function () {\n  return this._length;\n};\n\n/**\n * If list is empty\n */\nLinkedList.prototype.isEmpty = function () {\n  return this._length === 0;\n};\n\n/**\n * @param  {Function} cb\n * @param  {} context\n */\nLinkedList.prototype.forEach = function (cb, context) {\n  var curr = this.head;\n  var idx = 0;\n  var haveContext = typeof context != 'undefined';\n  while (curr) {\n    if (haveContext) {\n      cb.call(context, curr.value, idx);\n    } else {\n      cb(curr.value, idx);\n    }\n    curr = curr.next;\n    idx++;\n  }\n};\n\n/**\n * Clear the list\n */\nLinkedList.prototype.clear = function () {\n  this.tail = this.head = null;\n  this._length = 0;\n};\n\n/**\n * @constructor\n * @param {} val\n */\nLinkedList.Entry = function (val) {\n  /**\n   * @type {}\n   */\n  this.value = val;\n\n  /**\n   * @type {clay.core.LinkedList.Entry}\n   */\n  this.next = null;\n\n  /**\n   * @type {clay.core.LinkedList.Entry}\n   */\n  this.prev = null;\n};\nexport default LinkedList;","map":{"version":3,"names":["LinkedList","head","tail","_length","prototype","insert","val","entry","Entry","insertEntry","insertAt","idx","next","cursor","prev","insertBeforeEntry","remove","removeAt","curr","value","getHead","getTail","getAt","indexOf","length","isEmpty","forEach","cb","context","haveContext","call","clear"],"sources":["E:/QuestionairePlanet_Fronted/mytest/node_modules/claygl/src/core/LinkedList.js"],"sourcesContent":["/**\n * Simple double linked list. Compared with array, it has O(1) remove operation.\n * @constructor\n * @alias clay.core.LinkedList\n */\nvar LinkedList = function () {\n\n    /**\n     * @type {clay.core.LinkedList.Entry}\n     */\n    this.head = null;\n\n    /**\n     * @type {clay.core.LinkedList.Entry}\n     */\n    this.tail = null;\n\n    this._length = 0;\n};\n\n/**\n * Insert a new value at the tail\n * @param  {} val\n * @return {clay.core.LinkedList.Entry}\n */\nLinkedList.prototype.insert = function (val) {\n    var entry = new LinkedList.Entry(val);\n    this.insertEntry(entry);\n    return entry;\n};\n\n/**\n * Insert a new value at idx\n * @param {number} idx\n * @param  {} val\n * @return {clay.core.LinkedList.Entry}\n */\nLinkedList.prototype.insertAt = function (idx, val) {\n    if (idx < 0) {\n        return;\n    }\n    var next = this.head;\n    var cursor = 0;\n    while (next && cursor != idx) {\n        next = next.next;\n        cursor++;\n    }\n    if (next) {\n        var entry = new LinkedList.Entry(val);\n        var prev = next.prev;\n        if (!prev) { //next is head\n            this.head = entry;\n        }\n        else {\n            prev.next = entry;\n            entry.prev = prev;\n        }\n        entry.next = next;\n        next.prev = entry;\n    }\n    else {\n        this.insert(val);\n    }\n};\n\nLinkedList.prototype.insertBeforeEntry = function (val, next) {\n    var entry = new LinkedList.Entry(val);\n    var prev = next.prev;\n    if (!prev) { //next is head\n        this.head = entry;\n    }\n    else {\n        prev.next = entry;\n        entry.prev = prev;\n    }\n    entry.next = next;\n    next.prev = entry;\n\n    this._length++;\n};\n\n/**\n * Insert an entry at the tail\n * @param  {clay.core.LinkedList.Entry} entry\n */\nLinkedList.prototype.insertEntry = function (entry) {\n    if (!this.head) {\n        this.head = this.tail = entry;\n    }\n    else {\n        this.tail.next = entry;\n        entry.prev = this.tail;\n        this.tail = entry;\n    }\n    this._length++;\n};\n\n/**\n * Remove entry.\n * @param  {clay.core.LinkedList.Entry} entry\n */\nLinkedList.prototype.remove = function (entry) {\n    var prev = entry.prev;\n    var next = entry.next;\n    if (prev) {\n        prev.next = next;\n    }\n    else {\n        // Is head\n        this.head = next;\n    }\n    if (next) {\n        next.prev = prev;\n    }\n    else {\n        // Is tail\n        this.tail = prev;\n    }\n    entry.next = entry.prev = null;\n    this._length--;\n};\n\n/**\n * Remove entry at index.\n * @param  {number} idx\n * @return {}\n */\nLinkedList.prototype.removeAt = function (idx) {\n    if (idx < 0) {\n        return;\n    }\n    var curr = this.head;\n    var cursor = 0;\n    while (curr && cursor != idx) {\n        curr = curr.next;\n        cursor++;\n    }\n    if (curr) {\n        this.remove(curr);\n        return curr.value;\n    }\n};\n/**\n * Get head value\n * @return {}\n */\nLinkedList.prototype.getHead = function () {\n    if (this.head) {\n        return this.head.value;\n    }\n};\n/**\n * Get tail value\n * @return {}\n */\nLinkedList.prototype.getTail = function () {\n    if (this.tail) {\n        return this.tail.value;\n    }\n};\n/**\n * Get value at idx\n * @param {number} idx\n * @return {}\n */\nLinkedList.prototype.getAt = function (idx) {\n    if (idx < 0) {\n        return;\n    }\n    var curr = this.head;\n    var cursor = 0;\n    while (curr && cursor != idx) {\n        curr = curr.next;\n        cursor++;\n    }\n    return curr.value;\n};\n\n/**\n * @param  {} value\n * @return {number}\n */\nLinkedList.prototype.indexOf = function (value) {\n    var curr = this.head;\n    var cursor = 0;\n    while (curr) {\n        if (curr.value === value) {\n            return cursor;\n        }\n        curr = curr.next;\n        cursor++;\n    }\n};\n\n/**\n * @return {number}\n */\nLinkedList.prototype.length = function () {\n    return this._length;\n};\n\n/**\n * If list is empty\n */\nLinkedList.prototype.isEmpty = function () {\n    return this._length === 0;\n};\n\n/**\n * @param  {Function} cb\n * @param  {} context\n */\nLinkedList.prototype.forEach = function (cb, context) {\n    var curr = this.head;\n    var idx = 0;\n    var haveContext = typeof(context) != 'undefined';\n    while (curr) {\n        if (haveContext) {\n            cb.call(context, curr.value, idx);\n        }\n        else {\n            cb(curr.value, idx);\n        }\n        curr = curr.next;\n        idx++;\n    }\n};\n\n/**\n * Clear the list\n */\nLinkedList.prototype.clear = function () {\n    this.tail = this.head = null;\n    this._length = 0;\n};\n\n/**\n * @constructor\n * @param {} val\n */\nLinkedList.Entry = function (val) {\n    /**\n     * @type {}\n     */\n    this.value = val;\n\n    /**\n     * @type {clay.core.LinkedList.Entry}\n     */\n    this.next = null;\n\n    /**\n     * @type {clay.core.LinkedList.Entry}\n     */\n    this.prev = null;\n};\n\nexport default LinkedList;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}