{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\n/**\n * @namespace clay.core.color\n */\nimport LRU from '../core/LRU';\nvar colorUtil = {};\nvar kCSSColorTable = {\n  'transparent': [0, 0, 0, 0],\n  'aliceblue': [240, 248, 255, 1],\n  'antiquewhite': [250, 235, 215, 1],\n  'aqua': [0, 255, 255, 1],\n  'aquamarine': [127, 255, 212, 1],\n  'azure': [240, 255, 255, 1],\n  'beige': [245, 245, 220, 1],\n  'bisque': [255, 228, 196, 1],\n  'black': [0, 0, 0, 1],\n  'blanchedalmond': [255, 235, 205, 1],\n  'blue': [0, 0, 255, 1],\n  'blueviolet': [138, 43, 226, 1],\n  'brown': [165, 42, 42, 1],\n  'burlywood': [222, 184, 135, 1],\n  'cadetblue': [95, 158, 160, 1],\n  'chartreuse': [127, 255, 0, 1],\n  'chocolate': [210, 105, 30, 1],\n  'coral': [255, 127, 80, 1],\n  'cornflowerblue': [100, 149, 237, 1],\n  'cornsilk': [255, 248, 220, 1],\n  'crimson': [220, 20, 60, 1],\n  'cyan': [0, 255, 255, 1],\n  'darkblue': [0, 0, 139, 1],\n  'darkcyan': [0, 139, 139, 1],\n  'darkgoldenrod': [184, 134, 11, 1],\n  'darkgray': [169, 169, 169, 1],\n  'darkgreen': [0, 100, 0, 1],\n  'darkgrey': [169, 169, 169, 1],\n  'darkkhaki': [189, 183, 107, 1],\n  'darkmagenta': [139, 0, 139, 1],\n  'darkolivegreen': [85, 107, 47, 1],\n  'darkorange': [255, 140, 0, 1],\n  'darkorchid': [153, 50, 204, 1],\n  'darkred': [139, 0, 0, 1],\n  'darksalmon': [233, 150, 122, 1],\n  'darkseagreen': [143, 188, 143, 1],\n  'darkslateblue': [72, 61, 139, 1],\n  'darkslategray': [47, 79, 79, 1],\n  'darkslategrey': [47, 79, 79, 1],\n  'darkturquoise': [0, 206, 209, 1],\n  'darkviolet': [148, 0, 211, 1],\n  'deeppink': [255, 20, 147, 1],\n  'deepskyblue': [0, 191, 255, 1],\n  'dimgray': [105, 105, 105, 1],\n  'dimgrey': [105, 105, 105, 1],\n  'dodgerblue': [30, 144, 255, 1],\n  'firebrick': [178, 34, 34, 1],\n  'floralwhite': [255, 250, 240, 1],\n  'forestgreen': [34, 139, 34, 1],\n  'fuchsia': [255, 0, 255, 1],\n  'gainsboro': [220, 220, 220, 1],\n  'ghostwhite': [248, 248, 255, 1],\n  'gold': [255, 215, 0, 1],\n  'goldenrod': [218, 165, 32, 1],\n  'gray': [128, 128, 128, 1],\n  'green': [0, 128, 0, 1],\n  'greenyellow': [173, 255, 47, 1],\n  'grey': [128, 128, 128, 1],\n  'honeydew': [240, 255, 240, 1],\n  'hotpink': [255, 105, 180, 1],\n  'indianred': [205, 92, 92, 1],\n  'indigo': [75, 0, 130, 1],\n  'ivory': [255, 255, 240, 1],\n  'khaki': [240, 230, 140, 1],\n  'lavender': [230, 230, 250, 1],\n  'lavenderblush': [255, 240, 245, 1],\n  'lawngreen': [124, 252, 0, 1],\n  'lemonchiffon': [255, 250, 205, 1],\n  'lightblue': [173, 216, 230, 1],\n  'lightcoral': [240, 128, 128, 1],\n  'lightcyan': [224, 255, 255, 1],\n  'lightgoldenrodyellow': [250, 250, 210, 1],\n  'lightgray': [211, 211, 211, 1],\n  'lightgreen': [144, 238, 144, 1],\n  'lightgrey': [211, 211, 211, 1],\n  'lightpink': [255, 182, 193, 1],\n  'lightsalmon': [255, 160, 122, 1],\n  'lightseagreen': [32, 178, 170, 1],\n  'lightskyblue': [135, 206, 250, 1],\n  'lightslategray': [119, 136, 153, 1],\n  'lightslategrey': [119, 136, 153, 1],\n  'lightsteelblue': [176, 196, 222, 1],\n  'lightyellow': [255, 255, 224, 1],\n  'lime': [0, 255, 0, 1],\n  'limegreen': [50, 205, 50, 1],\n  'linen': [250, 240, 230, 1],\n  'magenta': [255, 0, 255, 1],\n  'maroon': [128, 0, 0, 1],\n  'mediumaquamarine': [102, 205, 170, 1],\n  'mediumblue': [0, 0, 205, 1],\n  'mediumorchid': [186, 85, 211, 1],\n  'mediumpurple': [147, 112, 219, 1],\n  'mediumseagreen': [60, 179, 113, 1],\n  'mediumslateblue': [123, 104, 238, 1],\n  'mediumspringgreen': [0, 250, 154, 1],\n  'mediumturquoise': [72, 209, 204, 1],\n  'mediumvioletred': [199, 21, 133, 1],\n  'midnightblue': [25, 25, 112, 1],\n  'mintcream': [245, 255, 250, 1],\n  'mistyrose': [255, 228, 225, 1],\n  'moccasin': [255, 228, 181, 1],\n  'navajowhite': [255, 222, 173, 1],\n  'navy': [0, 0, 128, 1],\n  'oldlace': [253, 245, 230, 1],\n  'olive': [128, 128, 0, 1],\n  'olivedrab': [107, 142, 35, 1],\n  'orange': [255, 165, 0, 1],\n  'orangered': [255, 69, 0, 1],\n  'orchid': [218, 112, 214, 1],\n  'palegoldenrod': [238, 232, 170, 1],\n  'palegreen': [152, 251, 152, 1],\n  'paleturquoise': [175, 238, 238, 1],\n  'palevioletred': [219, 112, 147, 1],\n  'papayawhip': [255, 239, 213, 1],\n  'peachpuff': [255, 218, 185, 1],\n  'peru': [205, 133, 63, 1],\n  'pink': [255, 192, 203, 1],\n  'plum': [221, 160, 221, 1],\n  'powderblue': [176, 224, 230, 1],\n  'purple': [128, 0, 128, 1],\n  'red': [255, 0, 0, 1],\n  'rosybrown': [188, 143, 143, 1],\n  'royalblue': [65, 105, 225, 1],\n  'saddlebrown': [139, 69, 19, 1],\n  'salmon': [250, 128, 114, 1],\n  'sandybrown': [244, 164, 96, 1],\n  'seagreen': [46, 139, 87, 1],\n  'seashell': [255, 245, 238, 1],\n  'sienna': [160, 82, 45, 1],\n  'silver': [192, 192, 192, 1],\n  'skyblue': [135, 206, 235, 1],\n  'slateblue': [106, 90, 205, 1],\n  'slategray': [112, 128, 144, 1],\n  'slategrey': [112, 128, 144, 1],\n  'snow': [255, 250, 250, 1],\n  'springgreen': [0, 255, 127, 1],\n  'steelblue': [70, 130, 180, 1],\n  'tan': [210, 180, 140, 1],\n  'teal': [0, 128, 128, 1],\n  'thistle': [216, 191, 216, 1],\n  'tomato': [255, 99, 71, 1],\n  'turquoise': [64, 224, 208, 1],\n  'violet': [238, 130, 238, 1],\n  'wheat': [245, 222, 179, 1],\n  'white': [255, 255, 255, 1],\n  'whitesmoke': [245, 245, 245, 1],\n  'yellow': [255, 255, 0, 1],\n  'yellowgreen': [154, 205, 50, 1]\n};\nfunction clampCssByte(i) {\n  // Clamp to integer 0 .. 255.\n  i = Math.round(i); // Seems to be what Chrome does (vs truncation).\n  return i < 0 ? 0 : i > 255 ? 255 : i;\n}\nfunction clampCssAngle(i) {\n  // Clamp to integer 0 .. 360.\n  i = Math.round(i); // Seems to be what Chrome does (vs truncation).\n  return i < 0 ? 0 : i > 360 ? 360 : i;\n}\nfunction clampCssFloat(f) {\n  // Clamp to float 0.0 .. 1.0.\n  return f < 0 ? 0 : f > 1 ? 1 : f;\n}\nfunction parseCssInt(str) {\n  // int or percentage.\n  if (str.length && str.charAt(str.length - 1) === '%') {\n    return clampCssByte(parseFloat(str) / 100 * 255);\n  }\n  return clampCssByte(parseInt(str, 10));\n}\nfunction parseCssFloat(str) {\n  // float or percentage.\n  if (str.length && str.charAt(str.length - 1) === '%') {\n    return clampCssFloat(parseFloat(str) / 100);\n  }\n  return clampCssFloat(parseFloat(str));\n}\nfunction cssHueToRgb(m1, m2, h) {\n  if (h < 0) {\n    h += 1;\n  } else if (h > 1) {\n    h -= 1;\n  }\n  if (h * 6 < 1) {\n    return m1 + (m2 - m1) * h * 6;\n  }\n  if (h * 2 < 1) {\n    return m2;\n  }\n  if (h * 3 < 2) {\n    return m1 + (m2 - m1) * (2 / 3 - h) * 6;\n  }\n  return m1;\n}\nfunction lerpNumber(a, b, p) {\n  return a + (b - a) * p;\n}\nfunction setRgba(out, r, g, b, a) {\n  out[0] = r;\n  out[1] = g;\n  out[2] = b;\n  out[3] = a;\n  return out;\n}\nfunction copyRgba(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  return out;\n}\nvar colorCache = new LRU(20);\nvar lastRemovedArr = null;\nfunction putToCache(colorStr, rgbaArr) {\n  // Reuse removed array\n  if (lastRemovedArr) {\n    copyRgba(lastRemovedArr, rgbaArr);\n  }\n  lastRemovedArr = colorCache.put(colorStr, lastRemovedArr || rgbaArr.slice());\n}\n\n/**\n * @name clay.core.color.parse\n * @param {string} colorStr\n * @param {Array.<number>} out\n * @return {Array.<number>}\n */\ncolorUtil.parse = function (colorStr, rgbaArr) {\n  if (!colorStr) {\n    return;\n  }\n  rgbaArr = rgbaArr || [];\n  var cached = colorCache.get(colorStr);\n  if (cached) {\n    return copyRgba(rgbaArr, cached);\n  }\n\n  // colorStr may be not string\n  colorStr = colorStr + '';\n  // Remove all whitespace, not compliant, but should just be more accepting.\n  var str = colorStr.replace(/ /g, '').toLowerCase();\n\n  // Color keywords (and transparent) lookup.\n  if (str in kCSSColorTable) {\n    copyRgba(rgbaArr, kCSSColorTable[str]);\n    putToCache(colorStr, rgbaArr);\n    return rgbaArr;\n  }\n\n  // #abc and #abc123 syntax.\n  if (str.charAt(0) === '#') {\n    if (str.length === 4) {\n      var iv = parseInt(str.substr(1), 16); // TODO(deanm): Stricter parsing.\n      if (!(iv >= 0 && iv <= 0xfff)) {\n        setRgba(rgbaArr, 0, 0, 0, 1);\n        return; // Covers NaN.\n      }\n      setRgba(rgbaArr, (iv & 0xf00) >> 4 | (iv & 0xf00) >> 8, iv & 0xf0 | (iv & 0xf0) >> 4, iv & 0xf | (iv & 0xf) << 4, 1);\n      putToCache(colorStr, rgbaArr);\n      return rgbaArr;\n    } else if (str.length === 7) {\n      var iv = parseInt(str.substr(1), 16); // TODO(deanm): Stricter parsing.\n      if (!(iv >= 0 && iv <= 0xffffff)) {\n        setRgba(rgbaArr, 0, 0, 0, 1);\n        return; // Covers NaN.\n      }\n      setRgba(rgbaArr, (iv & 0xff0000) >> 16, (iv & 0xff00) >> 8, iv & 0xff, 1);\n      putToCache(colorStr, rgbaArr);\n      return rgbaArr;\n    }\n    return;\n  }\n  var op = str.indexOf('('),\n    ep = str.indexOf(')');\n  if (op !== -1 && ep + 1 === str.length) {\n    var fname = str.substr(0, op);\n    var params = str.substr(op + 1, ep - (op + 1)).split(',');\n    var alpha = 1; // To allow case fallthrough.\n    switch (fname) {\n      case 'rgba':\n        if (params.length !== 4) {\n          setRgba(rgbaArr, 0, 0, 0, 1);\n          return;\n        }\n        alpha = parseCssFloat(params.pop());\n      // jshint ignore:line\n      // Fall through.\n      case 'rgb':\n        if (params.length !== 3) {\n          setRgba(rgbaArr, 0, 0, 0, 1);\n          return;\n        }\n        setRgba(rgbaArr, parseCssInt(params[0]), parseCssInt(params[1]), parseCssInt(params[2]), alpha);\n        putToCache(colorStr, rgbaArr);\n        return rgbaArr;\n      case 'hsla':\n        if (params.length !== 4) {\n          setRgba(rgbaArr, 0, 0, 0, 1);\n          return;\n        }\n        params[3] = parseCssFloat(params[3]);\n        hsla2rgba(params, rgbaArr);\n        putToCache(colorStr, rgbaArr);\n        return rgbaArr;\n      case 'hsl':\n        if (params.length !== 3) {\n          setRgba(rgbaArr, 0, 0, 0, 1);\n          return;\n        }\n        hsla2rgba(params, rgbaArr);\n        putToCache(colorStr, rgbaArr);\n        return rgbaArr;\n      default:\n        return;\n    }\n  }\n  setRgba(rgbaArr, 0, 0, 0, 1);\n  return;\n};\ncolorUtil.parseToFloat = function (colorStr, rgbaArr) {\n  rgbaArr = colorUtil.parse(colorStr, rgbaArr);\n  if (!rgbaArr) {\n    return;\n  }\n  rgbaArr[0] /= 255;\n  rgbaArr[1] /= 255;\n  rgbaArr[2] /= 255;\n  return rgbaArr;\n};\n\n/**\n * @name clay.core.color.hsla2rgba\n * @param {Array.<number>} hsla\n * @param {Array.<number>} rgba\n * @return {Array.<number>} rgba\n */\nfunction hsla2rgba(hsla, rgba) {\n  var h = (parseFloat(hsla[0]) % 360 + 360) % 360 / 360; // 0 .. 1\n  // NOTE(deanm): According to the CSS spec s/l should only be\n  // percentages, but we don't bother and let float or percentage.\n  var s = parseCssFloat(hsla[1]);\n  var l = parseCssFloat(hsla[2]);\n  var m2 = l <= 0.5 ? l * (s + 1) : l + s - l * s;\n  var m1 = l * 2 - m2;\n  rgba = rgba || [];\n  setRgba(rgba, clampCssByte(cssHueToRgb(m1, m2, h + 1 / 3) * 255), clampCssByte(cssHueToRgb(m1, m2, h) * 255), clampCssByte(cssHueToRgb(m1, m2, h - 1 / 3) * 255), 1);\n  if (hsla.length === 4) {\n    rgba[3] = hsla[3];\n  }\n  return rgba;\n}\n\n/**\n * @name clay.core.color.rgba2hsla\n * @param {Array.<number>} rgba\n * @return {Array.<number>} hsla\n */\nfunction rgba2hsla(rgba) {\n  if (!rgba) {\n    return;\n  }\n\n  // RGB from 0 to 255\n  var R = rgba[0] / 255;\n  var G = rgba[1] / 255;\n  var B = rgba[2] / 255;\n  var vMin = Math.min(R, G, B); // Min. value of RGB\n  var vMax = Math.max(R, G, B); // Max. value of RGB\n  var delta = vMax - vMin; // Delta RGB value\n\n  var L = (vMax + vMin) / 2;\n  var H;\n  var S;\n  // HSL results from 0 to 1\n  if (delta === 0) {\n    H = 0;\n    S = 0;\n  } else {\n    if (L < 0.5) {\n      S = delta / (vMax + vMin);\n    } else {\n      S = delta / (2 - vMax - vMin);\n    }\n    var deltaR = ((vMax - R) / 6 + delta / 2) / delta;\n    var deltaG = ((vMax - G) / 6 + delta / 2) / delta;\n    var deltaB = ((vMax - B) / 6 + delta / 2) / delta;\n    if (R === vMax) {\n      H = deltaB - deltaG;\n    } else if (G === vMax) {\n      H = 1 / 3 + deltaR - deltaB;\n    } else if (B === vMax) {\n      H = 2 / 3 + deltaG - deltaR;\n    }\n    if (H < 0) {\n      H += 1;\n    }\n    if (H > 1) {\n      H -= 1;\n    }\n  }\n  var hsla = [H * 360, S, L];\n  if (rgba[3] != null) {\n    hsla.push(rgba[3]);\n  }\n  return hsla;\n}\n\n/**\n * @name clay.core.color.lift\n * @param {string} color\n * @param {number} level\n * @return {string}\n */\ncolorUtil.lift = function (color, level) {\n  var colorArr = colorUtil.parse(color);\n  if (colorArr) {\n    for (var i = 0; i < 3; i++) {\n      if (level < 0) {\n        colorArr[i] = colorArr[i] * (1 - level) | 0;\n      } else {\n        colorArr[i] = (255 - colorArr[i]) * level + colorArr[i] | 0;\n      }\n    }\n    return colorUtil.stringify(colorArr, colorArr.length === 4 ? 'rgba' : 'rgb');\n  }\n};\n\n/**\n * @name clay.core.color.toHex\n * @param {string} color\n * @return {string}\n */\ncolorUtil.toHex = function (color) {\n  var colorArr = colorUtil.parse(color);\n  if (colorArr) {\n    return ((1 << 24) + (colorArr[0] << 16) + (colorArr[1] << 8) + +colorArr[2]).toString(16).slice(1);\n  }\n};\n\n/**\n * Map value to color. Faster than lerp methods because color is represented by rgba array.\n * @name clay.core.color\n * @param {number} normalizedValue A float between 0 and 1.\n * @param {Array.<Array.<number>>} colors List of rgba color array\n * @param {Array.<number>} [out] Mapped gba color array\n * @return {Array.<number>} will be null/undefined if input illegal.\n */\ncolorUtil.fastLerp = function (normalizedValue, colors, out) {\n  if (!(colors && colors.length) || !(normalizedValue >= 0 && normalizedValue <= 1)) {\n    return;\n  }\n  out = out || [];\n  var value = normalizedValue * (colors.length - 1);\n  var leftIndex = Math.floor(value);\n  var rightIndex = Math.ceil(value);\n  var leftColor = colors[leftIndex];\n  var rightColor = colors[rightIndex];\n  var dv = value - leftIndex;\n  out[0] = clampCssByte(lerpNumber(leftColor[0], rightColor[0], dv));\n  out[1] = clampCssByte(lerpNumber(leftColor[1], rightColor[1], dv));\n  out[2] = clampCssByte(lerpNumber(leftColor[2], rightColor[2], dv));\n  out[3] = clampCssFloat(lerpNumber(leftColor[3], rightColor[3], dv));\n  return out;\n};\ncolorUtil.fastMapToColor = colorUtil.fastLerp;\n\n/**\n * @param {number} normalizedValue A float between 0 and 1.\n * @param {Array.<string>} colors Color list.\n * @param {boolean=} fullOutput Default false.\n * @return {(string|Object)} Result color. If fullOutput,\n *                           return {color: ..., leftIndex: ..., rightIndex: ..., value: ...},\n */\ncolorUtil.lerp = function (normalizedValue, colors, fullOutput) {\n  if (!(colors && colors.length) || !(normalizedValue >= 0 && normalizedValue <= 1)) {\n    return;\n  }\n  var value = normalizedValue * (colors.length - 1);\n  var leftIndex = Math.floor(value);\n  var rightIndex = Math.ceil(value);\n  var leftColor = colorUtil.parse(colors[leftIndex]);\n  var rightColor = colorUtil.parse(colors[rightIndex]);\n  var dv = value - leftIndex;\n  var color = colorUtil.stringify([clampCssByte(lerpNumber(leftColor[0], rightColor[0], dv)), clampCssByte(lerpNumber(leftColor[1], rightColor[1], dv)), clampCssByte(lerpNumber(leftColor[2], rightColor[2], dv)), clampCssFloat(lerpNumber(leftColor[3], rightColor[3], dv))], 'rgba');\n  return fullOutput ? {\n    color: color,\n    leftIndex: leftIndex,\n    rightIndex: rightIndex,\n    value: value\n  } : color;\n};\n\n/**\n * @deprecated\n */\ncolorUtil.mapToColor = colorUtil.lerp;\n\n/**\n * @name clay.core.color\n * @param {string} color\n * @param {number=} h 0 ~ 360, ignore when null.\n * @param {number=} s 0 ~ 1, ignore when null.\n * @param {number=} l 0 ~ 1, ignore when null.\n * @return {string} Color string in rgba format.\n */\ncolorUtil.modifyHSL = function (color, h, s, l) {\n  color = colorUtil.parse(color);\n  if (color) {\n    color = rgba2hsla(color);\n    h != null && (color[0] = clampCssAngle(h));\n    s != null && (color[1] = parseCssFloat(s));\n    l != null && (color[2] = parseCssFloat(l));\n    return colorUtil.stringify(hsla2rgba(color), 'rgba');\n  }\n};\n\n/**\n * @param {string} color\n * @param {number=} alpha 0 ~ 1\n * @return {string} Color string in rgba format.\n */\ncolorUtil.modifyAlpha = function (color, alpha) {\n  color = colorUtil.parse(color);\n  if (color && alpha != null) {\n    color[3] = clampCssFloat(alpha);\n    return colorUtil.stringify(color, 'rgba');\n  }\n};\n\n/**\n * @param {Array.<number>} arrColor like [12,33,44,0.4]\n * @param {string} type 'rgba', 'hsva', ...\n * @return {string} Result color. (If input illegal, return undefined).\n */\ncolorUtil.stringify = function (arrColor, type) {\n  if (!arrColor || !arrColor.length) {\n    return;\n  }\n  var colorStr = arrColor[0] + ',' + arrColor[1] + ',' + arrColor[2];\n  if (type === 'rgba' || type === 'hsva' || type === 'hsla') {\n    colorStr += ',' + arrColor[3];\n  }\n  return type + '(' + colorStr + ')';\n};\nexport default colorUtil;","map":{"version":3,"names":["LRU","colorUtil","kCSSColorTable","clampCssByte","i","Math","round","clampCssAngle","clampCssFloat","f","parseCssInt","str","length","charAt","parseFloat","parseInt","parseCssFloat","cssHueToRgb","m1","m2","h","lerpNumber","a","b","p","setRgba","out","r","g","copyRgba","colorCache","lastRemovedArr","putToCache","colorStr","rgbaArr","put","slice","parse","cached","get","replace","toLowerCase","iv","substr","op","indexOf","ep","fname","params","split","alpha","pop","hsla2rgba","parseToFloat","hsla","rgba","s","l","rgba2hsla","R","G","B","vMin","min","vMax","max","delta","L","H","S","deltaR","deltaG","deltaB","push","lift","color","level","colorArr","stringify","toHex","toString","fastLerp","normalizedValue","colors","value","leftIndex","floor","rightIndex","ceil","leftColor","rightColor","dv","fastMapToColor","lerp","fullOutput","mapToColor","modifyHSL","modifyAlpha","arrColor","type"],"sources":["E:/QuestionairePlanet_Fronted/mytest/node_modules/claygl/src/core/color.js"],"sourcesContent":["/**\n * @namespace clay.core.color\n */\nimport LRU from '../core/LRU';\n\nvar colorUtil = {};\n\nvar kCSSColorTable = {\n    'transparent': [0,0,0,0], 'aliceblue': [240,248,255,1],\n    'antiquewhite': [250,235,215,1], 'aqua': [0,255,255,1],\n    'aquamarine': [127,255,212,1], 'azure': [240,255,255,1],\n    'beige': [245,245,220,1], 'bisque': [255,228,196,1],\n    'black': [0,0,0,1], 'blanchedalmond': [255,235,205,1],\n    'blue': [0,0,255,1], 'blueviolet': [138,43,226,1],\n    'brown': [165,42,42,1], 'burlywood': [222,184,135,1],\n    'cadetblue': [95,158,160,1], 'chartreuse': [127,255,0,1],\n    'chocolate': [210,105,30,1], 'coral': [255,127,80,1],\n    'cornflowerblue': [100,149,237,1], 'cornsilk': [255,248,220,1],\n    'crimson': [220,20,60,1], 'cyan': [0,255,255,1],\n    'darkblue': [0,0,139,1], 'darkcyan': [0,139,139,1],\n    'darkgoldenrod': [184,134,11,1], 'darkgray': [169,169,169,1],\n    'darkgreen': [0,100,0,1], 'darkgrey': [169,169,169,1],\n    'darkkhaki': [189,183,107,1], 'darkmagenta': [139,0,139,1],\n    'darkolivegreen': [85,107,47,1], 'darkorange': [255,140,0,1],\n    'darkorchid': [153,50,204,1], 'darkred': [139,0,0,1],\n    'darksalmon': [233,150,122,1], 'darkseagreen': [143,188,143,1],\n    'darkslateblue': [72,61,139,1], 'darkslategray': [47,79,79,1],\n    'darkslategrey': [47,79,79,1], 'darkturquoise': [0,206,209,1],\n    'darkviolet': [148,0,211,1], 'deeppink': [255,20,147,1],\n    'deepskyblue': [0,191,255,1], 'dimgray': [105,105,105,1],\n    'dimgrey': [105,105,105,1], 'dodgerblue': [30,144,255,1],\n    'firebrick': [178,34,34,1], 'floralwhite': [255,250,240,1],\n    'forestgreen': [34,139,34,1], 'fuchsia': [255,0,255,1],\n    'gainsboro': [220,220,220,1], 'ghostwhite': [248,248,255,1],\n    'gold': [255,215,0,1], 'goldenrod': [218,165,32,1],\n    'gray': [128,128,128,1], 'green': [0,128,0,1],\n    'greenyellow': [173,255,47,1], 'grey': [128,128,128,1],\n    'honeydew': [240,255,240,1], 'hotpink': [255,105,180,1],\n    'indianred': [205,92,92,1], 'indigo': [75,0,130,1],\n    'ivory': [255,255,240,1], 'khaki': [240,230,140,1],\n    'lavender': [230,230,250,1], 'lavenderblush': [255,240,245,1],\n    'lawngreen': [124,252,0,1], 'lemonchiffon': [255,250,205,1],\n    'lightblue': [173,216,230,1], 'lightcoral': [240,128,128,1],\n    'lightcyan': [224,255,255,1], 'lightgoldenrodyellow': [250,250,210,1],\n    'lightgray': [211,211,211,1], 'lightgreen': [144,238,144,1],\n    'lightgrey': [211,211,211,1], 'lightpink': [255,182,193,1],\n    'lightsalmon': [255,160,122,1], 'lightseagreen': [32,178,170,1],\n    'lightskyblue': [135,206,250,1], 'lightslategray': [119,136,153,1],\n    'lightslategrey': [119,136,153,1], 'lightsteelblue': [176,196,222,1],\n    'lightyellow': [255,255,224,1], 'lime': [0,255,0,1],\n    'limegreen': [50,205,50,1], 'linen': [250,240,230,1],\n    'magenta': [255,0,255,1], 'maroon': [128,0,0,1],\n    'mediumaquamarine': [102,205,170,1], 'mediumblue': [0,0,205,1],\n    'mediumorchid': [186,85,211,1], 'mediumpurple': [147,112,219,1],\n    'mediumseagreen': [60,179,113,1], 'mediumslateblue': [123,104,238,1],\n    'mediumspringgreen': [0,250,154,1], 'mediumturquoise': [72,209,204,1],\n    'mediumvioletred': [199,21,133,1], 'midnightblue': [25,25,112,1],\n    'mintcream': [245,255,250,1], 'mistyrose': [255,228,225,1],\n    'moccasin': [255,228,181,1], 'navajowhite': [255,222,173,1],\n    'navy': [0,0,128,1], 'oldlace': [253,245,230,1],\n    'olive': [128,128,0,1], 'olivedrab': [107,142,35,1],\n    'orange': [255,165,0,1], 'orangered': [255,69,0,1],\n    'orchid': [218,112,214,1], 'palegoldenrod': [238,232,170,1],\n    'palegreen': [152,251,152,1], 'paleturquoise': [175,238,238,1],\n    'palevioletred': [219,112,147,1], 'papayawhip': [255,239,213,1],\n    'peachpuff': [255,218,185,1], 'peru': [205,133,63,1],\n    'pink': [255,192,203,1], 'plum': [221,160,221,1],\n    'powderblue': [176,224,230,1], 'purple': [128,0,128,1],\n    'red': [255,0,0,1], 'rosybrown': [188,143,143,1],\n    'royalblue': [65,105,225,1], 'saddlebrown': [139,69,19,1],\n    'salmon': [250,128,114,1], 'sandybrown': [244,164,96,1],\n    'seagreen': [46,139,87,1], 'seashell': [255,245,238,1],\n    'sienna': [160,82,45,1], 'silver': [192,192,192,1],\n    'skyblue': [135,206,235,1], 'slateblue': [106,90,205,1],\n    'slategray': [112,128,144,1], 'slategrey': [112,128,144,1],\n    'snow': [255,250,250,1], 'springgreen': [0,255,127,1],\n    'steelblue': [70,130,180,1], 'tan': [210,180,140,1],\n    'teal': [0,128,128,1], 'thistle': [216,191,216,1],\n    'tomato': [255,99,71,1], 'turquoise': [64,224,208,1],\n    'violet': [238,130,238,1], 'wheat': [245,222,179,1],\n    'white': [255,255,255,1], 'whitesmoke': [245,245,245,1],\n    'yellow': [255,255,0,1], 'yellowgreen': [154,205,50,1]\n};\n\nfunction clampCssByte(i) {  // Clamp to integer 0 .. 255.\n    i = Math.round(i);  // Seems to be what Chrome does (vs truncation).\n    return i < 0 ? 0 : i > 255 ? 255 : i;\n}\n\nfunction clampCssAngle(i) {  // Clamp to integer 0 .. 360.\n    i = Math.round(i);  // Seems to be what Chrome does (vs truncation).\n    return i < 0 ? 0 : i > 360 ? 360 : i;\n}\n\nfunction clampCssFloat(f) {  // Clamp to float 0.0 .. 1.0.\n    return f < 0 ? 0 : f > 1 ? 1 : f;\n}\n\nfunction parseCssInt(str) {  // int or percentage.\n    if (str.length && str.charAt(str.length - 1) === '%') {\n        return clampCssByte(parseFloat(str) / 100 * 255);\n    }\n    return clampCssByte(parseInt(str, 10));\n}\n\nfunction parseCssFloat(str) {  // float or percentage.\n    if (str.length && str.charAt(str.length - 1) === '%') {\n        return clampCssFloat(parseFloat(str) / 100);\n    }\n    return clampCssFloat(parseFloat(str));\n}\n\nfunction cssHueToRgb(m1, m2, h) {\n    if (h < 0) {\n        h += 1;\n    }\n    else if (h > 1) {\n        h -= 1;\n    }\n\n    if (h * 6 < 1) {\n        return m1 + (m2 - m1) * h * 6;\n    }\n    if (h * 2 < 1) {\n        return m2;\n    }\n    if (h * 3 < 2) {\n        return m1 + (m2 - m1) * (2/3 - h) * 6;\n    }\n    return m1;\n}\n\nfunction lerpNumber(a, b, p) {\n    return a + (b - a) * p;\n}\n\nfunction setRgba(out, r, g, b, a) {\n    out[0] = r; out[1] = g; out[2] = b; out[3] = a;\n    return out;\n}\nfunction copyRgba(out, a) {\n    out[0] = a[0]; out[1] = a[1]; out[2] = a[2]; out[3] = a[3];\n    return out;\n}\n\nvar colorCache = new LRU(20);\nvar lastRemovedArr = null;\n\nfunction putToCache(colorStr, rgbaArr) {\n    // Reuse removed array\n    if (lastRemovedArr) {\n        copyRgba(lastRemovedArr, rgbaArr);\n    }\n    lastRemovedArr = colorCache.put(colorStr, lastRemovedArr || (rgbaArr.slice()));\n}\n\n/**\n * @name clay.core.color.parse\n * @param {string} colorStr\n * @param {Array.<number>} out\n * @return {Array.<number>}\n */\ncolorUtil.parse = function (colorStr, rgbaArr) {\n    if (!colorStr) {\n        return;\n    }\n    rgbaArr = rgbaArr || [];\n\n    var cached = colorCache.get(colorStr);\n    if (cached) {\n        return copyRgba(rgbaArr, cached);\n    }\n\n    // colorStr may be not string\n    colorStr = colorStr + '';\n    // Remove all whitespace, not compliant, but should just be more accepting.\n    var str = colorStr.replace(/ /g, '').toLowerCase();\n\n    // Color keywords (and transparent) lookup.\n    if (str in kCSSColorTable) {\n        copyRgba(rgbaArr, kCSSColorTable[str]);\n        putToCache(colorStr, rgbaArr);\n        return rgbaArr;\n    }\n\n    // #abc and #abc123 syntax.\n    if (str.charAt(0) === '#') {\n        if (str.length === 4) {\n            var iv = parseInt(str.substr(1), 16);  // TODO(deanm): Stricter parsing.\n            if (!(iv >= 0 && iv <= 0xfff)) {\n                setRgba(rgbaArr, 0, 0, 0, 1);\n                return;  // Covers NaN.\n            }\n            setRgba(rgbaArr,\n                ((iv & 0xf00) >> 4) | ((iv & 0xf00) >> 8),\n                (iv & 0xf0) | ((iv & 0xf0) >> 4),\n                (iv & 0xf) | ((iv & 0xf) << 4),\n                1\n            );\n            putToCache(colorStr, rgbaArr);\n            return rgbaArr;\n        }\n        else if (str.length === 7) {\n            var iv = parseInt(str.substr(1), 16);  // TODO(deanm): Stricter parsing.\n            if (!(iv >= 0 && iv <= 0xffffff)) {\n                setRgba(rgbaArr, 0, 0, 0, 1);\n                return;  // Covers NaN.\n            }\n            setRgba(rgbaArr,\n                (iv & 0xff0000) >> 16,\n                (iv & 0xff00) >> 8,\n                iv & 0xff,\n                1\n            );\n            putToCache(colorStr, rgbaArr);\n            return rgbaArr;\n        }\n\n        return;\n    }\n    var op = str.indexOf('('), ep = str.indexOf(')');\n    if (op !== -1 && ep + 1 === str.length) {\n        var fname = str.substr(0, op);\n        var params = str.substr(op + 1, ep - (op + 1)).split(',');\n        var alpha = 1;  // To allow case fallthrough.\n        switch (fname) {\n            case 'rgba':\n                if (params.length !== 4) {\n                    setRgba(rgbaArr, 0, 0, 0, 1);\n                    return;\n                }\n                alpha = parseCssFloat(params.pop()); // jshint ignore:line\n            // Fall through.\n            case 'rgb':\n                if (params.length !== 3) {\n                    setRgba(rgbaArr, 0, 0, 0, 1);\n                    return;\n                }\n                setRgba(rgbaArr,\n                    parseCssInt(params[0]),\n                    parseCssInt(params[1]),\n                    parseCssInt(params[2]),\n                    alpha\n                );\n                putToCache(colorStr, rgbaArr);\n                return rgbaArr;\n            case 'hsla':\n                if (params.length !== 4) {\n                    setRgba(rgbaArr, 0, 0, 0, 1);\n                    return;\n                }\n                params[3] = parseCssFloat(params[3]);\n                hsla2rgba(params, rgbaArr);\n                putToCache(colorStr, rgbaArr);\n                return rgbaArr;\n            case 'hsl':\n                if (params.length !== 3) {\n                    setRgba(rgbaArr, 0, 0, 0, 1);\n                    return;\n                }\n                hsla2rgba(params, rgbaArr);\n                putToCache(colorStr, rgbaArr);\n                return rgbaArr;\n            default:\n                return;\n        }\n    }\n\n    setRgba(rgbaArr, 0, 0, 0, 1);\n    return;\n};\n\ncolorUtil.parseToFloat = function (colorStr, rgbaArr) {\n    rgbaArr = colorUtil.parse(colorStr, rgbaArr);\n    if (!rgbaArr) {\n        return;\n    }\n    rgbaArr[0] /= 255;\n    rgbaArr[1] /= 255;\n    rgbaArr[2] /= 255;\n    return rgbaArr;\n}\n\n/**\n * @name clay.core.color.hsla2rgba\n * @param {Array.<number>} hsla\n * @param {Array.<number>} rgba\n * @return {Array.<number>} rgba\n */\nfunction hsla2rgba(hsla, rgba) {\n    var h = (((parseFloat(hsla[0]) % 360) + 360) % 360) / 360;  // 0 .. 1\n    // NOTE(deanm): According to the CSS spec s/l should only be\n    // percentages, but we don't bother and let float or percentage.\n    var s = parseCssFloat(hsla[1]);\n    var l = parseCssFloat(hsla[2]);\n    var m2 = l <= 0.5 ? l * (s + 1) : l + s - l * s;\n    var m1 = l * 2 - m2;\n\n    rgba = rgba || [];\n    setRgba(rgba,\n        clampCssByte(cssHueToRgb(m1, m2, h + 1 / 3) * 255),\n        clampCssByte(cssHueToRgb(m1, m2, h) * 255),\n        clampCssByte(cssHueToRgb(m1, m2, h - 1 / 3) * 255),\n        1\n    );\n\n    if (hsla.length === 4) {\n        rgba[3] = hsla[3];\n    }\n\n    return rgba;\n}\n\n/**\n * @name clay.core.color.rgba2hsla\n * @param {Array.<number>} rgba\n * @return {Array.<number>} hsla\n */\nfunction rgba2hsla(rgba) {\n    if (!rgba) {\n        return;\n    }\n\n    // RGB from 0 to 255\n    var R = rgba[0] / 255;\n    var G = rgba[1] / 255;\n    var B = rgba[2] / 255;\n\n    var vMin = Math.min(R, G, B); // Min. value of RGB\n    var vMax = Math.max(R, G, B); // Max. value of RGB\n    var delta = vMax - vMin; // Delta RGB value\n\n    var L = (vMax + vMin) / 2;\n    var H;\n    var S;\n    // HSL results from 0 to 1\n    if (delta === 0) {\n        H = 0;\n        S = 0;\n    }\n    else {\n        if (L < 0.5) {\n            S = delta / (vMax + vMin);\n        }\n        else {\n            S = delta / (2 - vMax - vMin);\n        }\n\n        var deltaR = (((vMax - R) / 6) + (delta / 2)) / delta;\n        var deltaG = (((vMax - G) / 6) + (delta / 2)) / delta;\n        var deltaB = (((vMax - B) / 6) + (delta / 2)) / delta;\n\n        if (R === vMax) {\n            H = deltaB - deltaG;\n        }\n        else if (G === vMax) {\n            H = (1 / 3) + deltaR - deltaB;\n        }\n        else if (B === vMax) {\n            H = (2 / 3) + deltaG - deltaR;\n        }\n\n        if (H < 0) {\n            H += 1;\n        }\n\n        if (H > 1) {\n            H -= 1;\n        }\n    }\n\n    var hsla = [H * 360, S, L];\n\n    if (rgba[3] != null) {\n        hsla.push(rgba[3]);\n    }\n\n    return hsla;\n}\n\n/**\n * @name clay.core.color.lift\n * @param {string} color\n * @param {number} level\n * @return {string}\n */\ncolorUtil.lift = function (color, level) {\n    var colorArr = colorUtil.parse(color);\n    if (colorArr) {\n        for (var i = 0; i < 3; i++) {\n            if (level < 0) {\n                colorArr[i] = colorArr[i] * (1 - level) | 0;\n            }\n            else {\n                colorArr[i] = ((255 - colorArr[i]) * level + colorArr[i]) | 0;\n            }\n        }\n        return colorUtil.stringify(colorArr, colorArr.length === 4 ? 'rgba' : 'rgb');\n    }\n}\n\n/**\n * @name clay.core.color.toHex\n * @param {string} color\n * @return {string}\n */\ncolorUtil.toHex = function (color) {\n    var colorArr = colorUtil.parse(color);\n    if (colorArr) {\n        return ((1 << 24) + (colorArr[0] << 16) + (colorArr[1] << 8) + (+colorArr[2])).toString(16).slice(1);\n    }\n};\n\n/**\n * Map value to color. Faster than lerp methods because color is represented by rgba array.\n * @name clay.core.color\n * @param {number} normalizedValue A float between 0 and 1.\n * @param {Array.<Array.<number>>} colors List of rgba color array\n * @param {Array.<number>} [out] Mapped gba color array\n * @return {Array.<number>} will be null/undefined if input illegal.\n */\ncolorUtil.fastLerp = function (normalizedValue, colors, out) {\n    if (!(colors && colors.length)\n        || !(normalizedValue >= 0 && normalizedValue <= 1)\n    ) {\n        return;\n    }\n\n    out = out || [];\n\n    var value = normalizedValue * (colors.length - 1);\n    var leftIndex = Math.floor(value);\n    var rightIndex = Math.ceil(value);\n    var leftColor = colors[leftIndex];\n    var rightColor = colors[rightIndex];\n    var dv = value - leftIndex;\n    out[0] = clampCssByte(lerpNumber(leftColor[0], rightColor[0], dv));\n    out[1] = clampCssByte(lerpNumber(leftColor[1], rightColor[1], dv));\n    out[2] = clampCssByte(lerpNumber(leftColor[2], rightColor[2], dv));\n    out[3] = clampCssFloat(lerpNumber(leftColor[3], rightColor[3], dv));\n\n    return out;\n}\n\ncolorUtil.fastMapToColor = colorUtil.fastLerp;\n\n/**\n * @param {number} normalizedValue A float between 0 and 1.\n * @param {Array.<string>} colors Color list.\n * @param {boolean=} fullOutput Default false.\n * @return {(string|Object)} Result color. If fullOutput,\n *                           return {color: ..., leftIndex: ..., rightIndex: ..., value: ...},\n */\ncolorUtil.lerp = function (normalizedValue, colors, fullOutput) {\n    if (!(colors && colors.length)\n        || !(normalizedValue >= 0 && normalizedValue <= 1)\n    ) {\n        return;\n    }\n\n    var value = normalizedValue * (colors.length - 1);\n    var leftIndex = Math.floor(value);\n    var rightIndex = Math.ceil(value);\n    var leftColor = colorUtil.parse(colors[leftIndex]);\n    var rightColor = colorUtil.parse(colors[rightIndex]);\n    var dv = value - leftIndex;\n\n    var color = colorUtil.stringify(\n        [\n            clampCssByte(lerpNumber(leftColor[0], rightColor[0], dv)),\n            clampCssByte(lerpNumber(leftColor[1], rightColor[1], dv)),\n            clampCssByte(lerpNumber(leftColor[2], rightColor[2], dv)),\n            clampCssFloat(lerpNumber(leftColor[3], rightColor[3], dv))\n        ],\n        'rgba'\n    );\n\n    return fullOutput\n        ? {\n            color: color,\n            leftIndex: leftIndex,\n            rightIndex: rightIndex,\n            value: value\n        }\n        : color;\n}\n\n/**\n * @deprecated\n */\ncolorUtil.mapToColor = colorUtil.lerp;\n\n/**\n * @name clay.core.color\n * @param {string} color\n * @param {number=} h 0 ~ 360, ignore when null.\n * @param {number=} s 0 ~ 1, ignore when null.\n * @param {number=} l 0 ~ 1, ignore when null.\n * @return {string} Color string in rgba format.\n */\ncolorUtil.modifyHSL = function (color, h, s, l) {\n    color = colorUtil.parse(color);\n\n    if (color) {\n        color = rgba2hsla(color);\n        h != null && (color[0] = clampCssAngle(h));\n        s != null && (color[1] = parseCssFloat(s));\n        l != null && (color[2] = parseCssFloat(l));\n\n        return colorUtil.stringify(hsla2rgba(color), 'rgba');\n    }\n}\n\n/**\n * @param {string} color\n * @param {number=} alpha 0 ~ 1\n * @return {string} Color string in rgba format.\n */\ncolorUtil.modifyAlpha = function (color, alpha) {\n    color = colorUtil.parse(color);\n\n    if (color && alpha != null) {\n        color[3] = clampCssFloat(alpha);\n        return colorUtil.stringify(color, 'rgba');\n    }\n}\n\n/**\n * @param {Array.<number>} arrColor like [12,33,44,0.4]\n * @param {string} type 'rgba', 'hsva', ...\n * @return {string} Result color. (If input illegal, return undefined).\n */\ncolorUtil.stringify = function (arrColor, type) {\n    if (!arrColor || !arrColor.length) {\n        return;\n    }\n    var colorStr = arrColor[0] + ',' + arrColor[1] + ',' + arrColor[2];\n    if (type === 'rgba' || type === 'hsva' || type === 'hsla') {\n        colorStr += ',' + arrColor[3];\n    }\n    return type + '(' + colorStr + ')';\n};\n\n\n\nexport default colorUtil;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}