{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport Base from '../core/Base';\nimport GraphNode from './CompositorNode';\n\n/**\n * @constructor clay.compositor.Graph\n * @extends clay.core.Base\n */\nvar Graph = Base.extend(function () {\n  return /** @lends clay.compositor.Graph# */{\n    /**\n     * @type {Array.<clay.compositor.CompositorNode>}\n     */\n    nodes: []\n  };\n}, /** @lends clay.compositor.Graph.prototype */\n{\n  /**\n   * Mark to update\n   */\n  dirty: function () {\n    this._dirty = true;\n  },\n  /**\n   * @param {clay.compositor.CompositorNode} node\n   */\n  addNode: function (node) {\n    if (this.nodes.indexOf(node) >= 0) {\n      return;\n    }\n    this.nodes.push(node);\n    this._dirty = true;\n  },\n  /**\n   * @param  {clay.compositor.CompositorNode|string} node\n   */\n  removeNode: function (node) {\n    if (typeof node === 'string') {\n      node = this.getNodeByName(node);\n    }\n    var idx = this.nodes.indexOf(node);\n    if (idx >= 0) {\n      this.nodes.splice(idx, 1);\n      this._dirty = true;\n    }\n  },\n  /**\n   * @param {string} name\n   * @return {clay.compositor.CompositorNode}\n   */\n  getNodeByName: function (name) {\n    for (var i = 0; i < this.nodes.length; i++) {\n      if (this.nodes[i].name === name) {\n        return this.nodes[i];\n      }\n    }\n  },\n  /**\n   * Update links of graph\n   */\n  update: function () {\n    for (var i = 0; i < this.nodes.length; i++) {\n      this.nodes[i].clear();\n    }\n    // Traverse all the nodes and build the graph\n    for (var i = 0; i < this.nodes.length; i++) {\n      var node = this.nodes[i];\n      if (!node.inputs) {\n        continue;\n      }\n      for (var inputName in node.inputs) {\n        if (!node.inputs[inputName]) {\n          continue;\n        }\n        if (node.pass && !node.pass.material.isUniformEnabled(inputName)) {\n          console.warn('Pin ' + node.name + '.' + inputName + ' not used.');\n          continue;\n        }\n        var fromPinInfo = node.inputs[inputName];\n        var fromPin = this.findPin(fromPinInfo);\n        if (fromPin) {\n          node.link(inputName, fromPin.node, fromPin.pin);\n        } else {\n          if (typeof fromPinInfo === 'string') {\n            console.warn('Node ' + fromPinInfo + ' not exist');\n          } else {\n            console.warn('Pin of ' + fromPinInfo.node + '.' + fromPinInfo.pin + ' not exist');\n          }\n        }\n      }\n    }\n  },\n  findPin: function (input) {\n    var node;\n    // Try to take input as a directly a node\n    if (typeof input === 'string' || input instanceof GraphNode) {\n      input = {\n        node: input\n      };\n    }\n    if (typeof input.node === 'string') {\n      for (var i = 0; i < this.nodes.length; i++) {\n        var tmp = this.nodes[i];\n        if (tmp.name === input.node) {\n          node = tmp;\n        }\n      }\n    } else {\n      node = input.node;\n    }\n    if (node) {\n      var inputPin = input.pin;\n      if (!inputPin) {\n        // Use first pin defaultly\n        if (node.outputs) {\n          inputPin = Object.keys(node.outputs)[0];\n        }\n      }\n      if (node.outputs[inputPin]) {\n        return {\n          node: node,\n          pin: inputPin\n        };\n      }\n    }\n  }\n});\nexport default Graph;","map":{"version":3,"names":["Base","GraphNode","Graph","extend","nodes","dirty","_dirty","addNode","node","indexOf","push","removeNode","getNodeByName","idx","splice","name","i","length","update","clear","inputs","inputName","pass","material","isUniformEnabled","console","warn","fromPinInfo","fromPin","findPin","link","pin","input","tmp","inputPin","outputs","Object","keys"],"sources":["E:/QuestionairePlanet_Fronted/mytest/node_modules/claygl/src/compositor/Graph.js"],"sourcesContent":["import Base from '../core/Base';\nimport GraphNode from './CompositorNode';\n\n/**\n * @constructor clay.compositor.Graph\n * @extends clay.core.Base\n */\nvar Graph = Base.extend(function () {\n    return /** @lends clay.compositor.Graph# */ {\n        /**\n         * @type {Array.<clay.compositor.CompositorNode>}\n         */\n        nodes: []\n    };\n},\n/** @lends clay.compositor.Graph.prototype */\n{\n\n    /**\n     * Mark to update\n     */\n    dirty: function () {\n        this._dirty = true;\n    },\n    /**\n     * @param {clay.compositor.CompositorNode} node\n     */\n    addNode: function (node) {\n\n        if (this.nodes.indexOf(node) >= 0) {\n            return;\n        }\n\n        this.nodes.push(node);\n\n        this._dirty = true;\n    },\n    /**\n     * @param  {clay.compositor.CompositorNode|string} node\n     */\n    removeNode: function (node) {\n        if (typeof node === 'string') {\n            node = this.getNodeByName(node);\n        }\n        var idx = this.nodes.indexOf(node);\n        if (idx >= 0) {\n            this.nodes.splice(idx, 1);\n            this._dirty = true;\n        }\n    },\n    /**\n     * @param {string} name\n     * @return {clay.compositor.CompositorNode}\n     */\n    getNodeByName: function (name) {\n        for (var i = 0; i < this.nodes.length; i++) {\n            if (this.nodes[i].name === name) {\n                return this.nodes[i];\n            }\n        }\n    },\n    /**\n     * Update links of graph\n     */\n    update: function () {\n        for (var i = 0; i < this.nodes.length; i++) {\n            this.nodes[i].clear();\n        }\n        // Traverse all the nodes and build the graph\n        for (var i = 0; i < this.nodes.length; i++) {\n            var node = this.nodes[i];\n\n            if (!node.inputs) {\n                continue;\n            }\n            for (var inputName in node.inputs) {\n                if (!node.inputs[inputName]) {\n                    continue;\n                }\n                if (node.pass && !node.pass.material.isUniformEnabled(inputName)) {\n                    console.warn('Pin '  + node.name + '.' + inputName + ' not used.');\n                    continue;\n                }\n                var fromPinInfo = node.inputs[inputName];\n\n                var fromPin = this.findPin(fromPinInfo);\n                if (fromPin) {\n                    node.link(inputName, fromPin.node, fromPin.pin);\n                }\n                else {\n                    if (typeof fromPinInfo === 'string') {\n                        console.warn('Node ' + fromPinInfo + ' not exist');\n                    }\n                    else {\n                        console.warn('Pin of ' + fromPinInfo.node + '.' + fromPinInfo.pin + ' not exist');\n                    }\n                }\n            }\n        }\n    },\n\n    findPin: function (input) {\n        var node;\n        // Try to take input as a directly a node\n        if (typeof input === 'string' || input instanceof GraphNode) {\n            input = {\n                node: input\n            };\n        }\n\n        if (typeof input.node === 'string') {\n            for (var i = 0; i < this.nodes.length; i++) {\n                var tmp = this.nodes[i];\n                if (tmp.name === input.node) {\n                    node = tmp;\n                }\n            }\n        }\n        else {\n            node = input.node;\n        }\n        if (node) {\n            var inputPin = input.pin;\n            if (!inputPin) {\n                // Use first pin defaultly\n                if (node.outputs) {\n                    inputPin = Object.keys(node.outputs)[0];\n                }\n            }\n            if (node.outputs[inputPin]) {\n                return {\n                    node: node,\n                    pin: inputPin\n                };\n            }\n        }\n    }\n});\n\nexport default Graph;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}