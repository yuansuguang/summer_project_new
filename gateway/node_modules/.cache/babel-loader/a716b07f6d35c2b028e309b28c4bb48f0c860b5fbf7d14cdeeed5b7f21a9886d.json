{"ast":null,"code":"import Vector3 from './Vector3';\nimport vec3 from '../glmatrix/vec3';\nvar EPSILON = 1e-5;\n\n/**\n * @constructor\n * @alias clay.Ray\n * @param {clay.Vector3} [origin]\n * @param {clay.Vector3} [direction]\n */\nvar Ray = function (origin, direction) {\n  /**\n   * @type {clay.Vector3}\n   */\n  this.origin = origin || new Vector3();\n  /**\n   * @type {clay.Vector3}\n   */\n  this.direction = direction || new Vector3();\n};\nRay.prototype = {\n  constructor: Ray,\n  // http://www.siggraph.org/education/materials/HyperGraph/raytrace/rayplane_intersection.htm\n  /**\n   * Calculate intersection point between ray and a give plane\n   * @param  {clay.Plane} plane\n   * @param  {clay.Vector3} [out]\n   * @return {clay.Vector3}\n   */\n  intersectPlane: function (plane, out) {\n    var pn = plane.normal.array;\n    var d = plane.distance;\n    var ro = this.origin.array;\n    var rd = this.direction.array;\n    var divider = vec3.dot(pn, rd);\n    // ray is parallel to the plane\n    if (divider === 0) {\n      return null;\n    }\n    if (!out) {\n      out = new Vector3();\n    }\n    var t = (vec3.dot(pn, ro) - d) / divider;\n    vec3.scaleAndAdd(out.array, ro, rd, -t);\n    out._dirty = true;\n    return out;\n  },\n  /**\n   * Mirror the ray against plane\n   * @param  {clay.Plane} plane\n   */\n  mirrorAgainstPlane: function (plane) {\n    // Distance to plane\n    var d = vec3.dot(plane.normal.array, this.direction.array);\n    vec3.scaleAndAdd(this.direction.array, this.direction.array, plane.normal.array, -d * 2);\n    this.direction._dirty = true;\n  },\n  distanceToPoint: function () {\n    var v = vec3.create();\n    return function (point) {\n      vec3.sub(v, point, this.origin.array);\n      // Distance from projection point to origin\n      var b = vec3.dot(v, this.direction.array);\n      if (b < 0) {\n        return vec3.distance(this.origin.array, point);\n      }\n      // Squared distance from center to origin\n      var c2 = vec3.lenSquared(v);\n      // Squared distance from center to projection point\n      return Math.sqrt(c2 - b * b);\n    };\n  }(),\n  /**\n   * Calculate intersection point between ray and sphere\n   * @param  {clay.Vector3} center\n   * @param  {number} radius\n   * @param  {clay.Vector3} out\n   * @return {clay.Vector3}\n   */\n  intersectSphere: function () {\n    var v = vec3.create();\n    return function (center, radius, out) {\n      var origin = this.origin.array;\n      var direction = this.direction.array;\n      center = center.array;\n      vec3.sub(v, center, origin);\n      // Distance from projection point to origin\n      var b = vec3.dot(v, direction);\n      // Squared distance from center to origin\n      var c2 = vec3.squaredLength(v);\n      // Squared distance from center to projection point\n      var d2 = c2 - b * b;\n      var r2 = radius * radius;\n      // No intersection\n      if (d2 > r2) {\n        return;\n      }\n      var a = Math.sqrt(r2 - d2);\n      // First intersect point\n      var t0 = b - a;\n      // Second intersect point\n      var t1 = b + a;\n      if (!out) {\n        out = new Vector3();\n      }\n      if (t0 < 0) {\n        if (t1 < 0) {\n          return null;\n        } else {\n          vec3.scaleAndAdd(out.array, origin, direction, t1);\n          return out;\n        }\n      } else {\n        vec3.scaleAndAdd(out.array, origin, direction, t0);\n        return out;\n      }\n    };\n  }(),\n  // http://www.scratchapixel.com/lessons/3d-basic-lessons/lesson-7-intersecting-simple-shapes/ray-box-intersection/\n  /**\n   * Calculate intersection point between ray and bounding box\n   * @param {clay.BoundingBox} bbox\n   * @param {clay.Vector3}\n   * @return {clay.Vector3}\n   */\n  intersectBoundingBox: function (bbox, out) {\n    var dir = this.direction.array;\n    var origin = this.origin.array;\n    var min = bbox.min.array;\n    var max = bbox.max.array;\n    var invdirx = 1 / dir[0];\n    var invdiry = 1 / dir[1];\n    var invdirz = 1 / dir[2];\n    var tmin, tmax, tymin, tymax, tzmin, tzmax;\n    if (invdirx >= 0) {\n      tmin = (min[0] - origin[0]) * invdirx;\n      tmax = (max[0] - origin[0]) * invdirx;\n    } else {\n      tmax = (min[0] - origin[0]) * invdirx;\n      tmin = (max[0] - origin[0]) * invdirx;\n    }\n    if (invdiry >= 0) {\n      tymin = (min[1] - origin[1]) * invdiry;\n      tymax = (max[1] - origin[1]) * invdiry;\n    } else {\n      tymax = (min[1] - origin[1]) * invdiry;\n      tymin = (max[1] - origin[1]) * invdiry;\n    }\n    if (tmin > tymax || tymin > tmax) {\n      return null;\n    }\n    if (tymin > tmin || tmin !== tmin) {\n      tmin = tymin;\n    }\n    if (tymax < tmax || tmax !== tmax) {\n      tmax = tymax;\n    }\n    if (invdirz >= 0) {\n      tzmin = (min[2] - origin[2]) * invdirz;\n      tzmax = (max[2] - origin[2]) * invdirz;\n    } else {\n      tzmax = (min[2] - origin[2]) * invdirz;\n      tzmin = (max[2] - origin[2]) * invdirz;\n    }\n    if (tmin > tzmax || tzmin > tmax) {\n      return null;\n    }\n    if (tzmin > tmin || tmin !== tmin) {\n      tmin = tzmin;\n    }\n    if (tzmax < tmax || tmax !== tmax) {\n      tmax = tzmax;\n    }\n    if (tmax < 0) {\n      return null;\n    }\n    var t = tmin >= 0 ? tmin : tmax;\n    if (!out) {\n      out = new Vector3();\n    }\n    vec3.scaleAndAdd(out.array, origin, dir, t);\n    return out;\n  },\n  // http://en.wikipedia.org/wiki/M%C3%B6ller%E2%80%93Trumbore_intersection_algorithm\n  /**\n   * Calculate intersection point between ray and three triangle vertices\n   * @param {clay.Vector3} a\n   * @param {clay.Vector3} b\n   * @param {clay.Vector3} c\n   * @param {boolean}           singleSided, CW triangle will be ignored\n   * @param {clay.Vector3} [out]\n   * @param {clay.Vector3} [barycenteric] barycentric coords\n   * @return {clay.Vector3}\n   */\n  intersectTriangle: function () {\n    var eBA = vec3.create();\n    var eCA = vec3.create();\n    var AO = vec3.create();\n    var vCross = vec3.create();\n    return function (a, b, c, singleSided, out, barycenteric) {\n      var dir = this.direction.array;\n      var origin = this.origin.array;\n      a = a.array;\n      b = b.array;\n      c = c.array;\n      vec3.sub(eBA, b, a);\n      vec3.sub(eCA, c, a);\n      vec3.cross(vCross, eCA, dir);\n      var det = vec3.dot(eBA, vCross);\n      if (singleSided) {\n        if (det > -EPSILON) {\n          return null;\n        }\n      } else {\n        if (det > -EPSILON && det < EPSILON) {\n          return null;\n        }\n      }\n      vec3.sub(AO, origin, a);\n      var u = vec3.dot(vCross, AO) / det;\n      if (u < 0 || u > 1) {\n        return null;\n      }\n      vec3.cross(vCross, eBA, AO);\n      var v = vec3.dot(dir, vCross) / det;\n      if (v < 0 || v > 1 || u + v > 1) {\n        return null;\n      }\n      vec3.cross(vCross, eBA, eCA);\n      var t = -vec3.dot(AO, vCross) / det;\n      if (t < 0) {\n        return null;\n      }\n      if (!out) {\n        out = new Vector3();\n      }\n      if (barycenteric) {\n        Vector3.set(barycenteric, 1 - u - v, u, v);\n      }\n      vec3.scaleAndAdd(out.array, origin, dir, t);\n      return out;\n    };\n  }(),\n  /**\n   * Apply an affine transform matrix to the ray\n   * @return {clay.Matrix4} matrix\n   */\n  applyTransform: function (matrix) {\n    Vector3.add(this.direction, this.direction, this.origin);\n    Vector3.transformMat4(this.origin, this.origin, matrix);\n    Vector3.transformMat4(this.direction, this.direction, matrix);\n    Vector3.sub(this.direction, this.direction, this.origin);\n    Vector3.normalize(this.direction, this.direction);\n  },\n  /**\n   * Copy values from another ray\n   * @param {clay.Ray} ray\n   */\n  copy: function (ray) {\n    Vector3.copy(this.origin, ray.origin);\n    Vector3.copy(this.direction, ray.direction);\n  },\n  /**\n   * Clone a new ray\n   * @return {clay.Ray}\n   */\n  clone: function () {\n    var ray = new Ray();\n    ray.copy(this);\n    return ray;\n  }\n};\nexport default Ray;","map":{"version":3,"names":["Vector3","vec3","EPSILON","Ray","origin","direction","prototype","constructor","intersectPlane","plane","out","pn","normal","array","d","distance","ro","rd","divider","dot","t","scaleAndAdd","_dirty","mirrorAgainstPlane","distanceToPoint","v","create","point","sub","b","c2","lenSquared","Math","sqrt","intersectSphere","center","radius","squaredLength","d2","r2","a","t0","t1","intersectBoundingBox","bbox","dir","min","max","invdirx","invdiry","invdirz","tmin","tmax","tymin","tymax","tzmin","tzmax","intersectTriangle","eBA","eCA","AO","vCross","c","singleSided","barycenteric","cross","det","u","set","applyTransform","matrix","add","transformMat4","normalize","copy","ray","clone"],"sources":["E:/QuestionairePlanet_Fronted/mytest/node_modules/claygl/src/math/Ray.js"],"sourcesContent":["import Vector3 from './Vector3';\nimport vec3 from '../glmatrix/vec3';\n\nvar EPSILON = 1e-5;\n\n/**\n * @constructor\n * @alias clay.Ray\n * @param {clay.Vector3} [origin]\n * @param {clay.Vector3} [direction]\n */\nvar Ray = function (origin, direction) {\n    /**\n     * @type {clay.Vector3}\n     */\n    this.origin = origin || new Vector3();\n    /**\n     * @type {clay.Vector3}\n     */\n    this.direction = direction || new Vector3();\n};\n\nRay.prototype = {\n\n    constructor: Ray,\n\n    // http://www.siggraph.org/education/materials/HyperGraph/raytrace/rayplane_intersection.htm\n    /**\n     * Calculate intersection point between ray and a give plane\n     * @param  {clay.Plane} plane\n     * @param  {clay.Vector3} [out]\n     * @return {clay.Vector3}\n     */\n    intersectPlane: function (plane, out) {\n        var pn = plane.normal.array;\n        var d = plane.distance;\n        var ro = this.origin.array;\n        var rd = this.direction.array;\n\n        var divider = vec3.dot(pn, rd);\n        // ray is parallel to the plane\n        if (divider === 0) {\n            return null;\n        }\n        if (!out) {\n            out = new Vector3();\n        }\n        var t = (vec3.dot(pn, ro) - d) / divider;\n        vec3.scaleAndAdd(out.array, ro, rd, -t);\n        out._dirty = true;\n        return out;\n    },\n\n    /**\n     * Mirror the ray against plane\n     * @param  {clay.Plane} plane\n     */\n    mirrorAgainstPlane: function (plane) {\n        // Distance to plane\n        var d = vec3.dot(plane.normal.array, this.direction.array);\n        vec3.scaleAndAdd(this.direction.array, this.direction.array, plane.normal.array, -d * 2);\n        this.direction._dirty = true;\n    },\n\n    distanceToPoint: (function () {\n        var v = vec3.create();\n        return function (point) {\n            vec3.sub(v, point, this.origin.array);\n            // Distance from projection point to origin\n            var b = vec3.dot(v, this.direction.array);\n            if (b < 0) {\n                return vec3.distance(this.origin.array, point);\n            }\n            // Squared distance from center to origin\n            var c2 = vec3.lenSquared(v);\n            // Squared distance from center to projection point\n            return Math.sqrt(c2 - b * b);\n        };\n    })(),\n\n    /**\n     * Calculate intersection point between ray and sphere\n     * @param  {clay.Vector3} center\n     * @param  {number} radius\n     * @param  {clay.Vector3} out\n     * @return {clay.Vector3}\n     */\n    intersectSphere: (function () {\n        var v = vec3.create();\n        return function (center, radius, out) {\n            var origin = this.origin.array;\n            var direction = this.direction.array;\n            center = center.array;\n            vec3.sub(v, center, origin);\n            // Distance from projection point to origin\n            var b = vec3.dot(v, direction);\n            // Squared distance from center to origin\n            var c2 = vec3.squaredLength(v);\n            // Squared distance from center to projection point\n            var d2 = c2 - b * b;\n\n            var r2 = radius * radius;\n            // No intersection\n            if (d2 > r2) {\n                return;\n            }\n\n            var a = Math.sqrt(r2 - d2);\n            // First intersect point\n            var t0 = b - a;\n            // Second intersect point\n            var t1 = b + a;\n\n            if (!out) {\n                out = new Vector3();\n            }\n            if (t0 < 0) {\n                if (t1 < 0) {\n                    return null;\n                }\n                else {\n                    vec3.scaleAndAdd(out.array, origin, direction, t1);\n                    return out;\n                }\n            }\n            else {\n                vec3.scaleAndAdd(out.array, origin, direction, t0);\n                return out;\n            }\n        };\n    })(),\n\n    // http://www.scratchapixel.com/lessons/3d-basic-lessons/lesson-7-intersecting-simple-shapes/ray-box-intersection/\n    /**\n     * Calculate intersection point between ray and bounding box\n     * @param {clay.BoundingBox} bbox\n     * @param {clay.Vector3}\n     * @return {clay.Vector3}\n     */\n    intersectBoundingBox: function (bbox, out) {\n        var dir = this.direction.array;\n        var origin = this.origin.array;\n        var min = bbox.min.array;\n        var max = bbox.max.array;\n\n        var invdirx = 1 / dir[0];\n        var invdiry = 1 / dir[1];\n        var invdirz = 1 / dir[2];\n\n        var tmin, tmax, tymin, tymax, tzmin, tzmax;\n        if (invdirx >= 0) {\n            tmin = (min[0] - origin[0]) * invdirx;\n            tmax = (max[0] - origin[0]) * invdirx;\n        }\n        else {\n            tmax = (min[0] - origin[0]) * invdirx;\n            tmin = (max[0] - origin[0]) * invdirx;\n        }\n        if (invdiry >= 0) {\n            tymin = (min[1] - origin[1]) * invdiry;\n            tymax = (max[1] - origin[1]) * invdiry;\n        }\n        else {\n            tymax = (min[1] - origin[1]) * invdiry;\n            tymin = (max[1] - origin[1]) * invdiry;\n        }\n\n        if ((tmin > tymax) || (tymin > tmax)) {\n            return null;\n        }\n\n        if (tymin > tmin || tmin !== tmin) {\n            tmin = tymin;\n        }\n        if (tymax < tmax || tmax !== tmax) {\n            tmax = tymax;\n        }\n\n        if (invdirz >= 0) {\n            tzmin = (min[2] - origin[2]) * invdirz;\n            tzmax = (max[2] - origin[2]) * invdirz;\n        }\n        else {\n            tzmax = (min[2] - origin[2]) * invdirz;\n            tzmin = (max[2] - origin[2]) * invdirz;\n        }\n\n        if ((tmin > tzmax) || (tzmin > tmax)) {\n            return null;\n        }\n\n        if (tzmin > tmin || tmin !== tmin) {\n            tmin = tzmin;\n        }\n        if (tzmax < tmax || tmax !== tmax) {\n            tmax = tzmax;\n        }\n        if (tmax < 0) {\n            return null;\n        }\n\n        var t = tmin >= 0 ? tmin : tmax;\n\n        if (!out) {\n            out = new Vector3();\n        }\n        vec3.scaleAndAdd(out.array, origin, dir, t);\n        return out;\n    },\n\n    // http://en.wikipedia.org/wiki/M%C3%B6ller%E2%80%93Trumbore_intersection_algorithm\n    /**\n     * Calculate intersection point between ray and three triangle vertices\n     * @param {clay.Vector3} a\n     * @param {clay.Vector3} b\n     * @param {clay.Vector3} c\n     * @param {boolean}           singleSided, CW triangle will be ignored\n     * @param {clay.Vector3} [out]\n     * @param {clay.Vector3} [barycenteric] barycentric coords\n     * @return {clay.Vector3}\n     */\n    intersectTriangle: (function () {\n\n        var eBA = vec3.create();\n        var eCA = vec3.create();\n        var AO = vec3.create();\n        var vCross = vec3.create();\n\n        return function (a, b, c, singleSided, out, barycenteric) {\n            var dir = this.direction.array;\n            var origin = this.origin.array;\n            a = a.array;\n            b = b.array;\n            c = c.array;\n\n            vec3.sub(eBA, b, a);\n            vec3.sub(eCA, c, a);\n\n            vec3.cross(vCross, eCA, dir);\n\n            var det = vec3.dot(eBA, vCross);\n\n            if (singleSided) {\n                if (det > -EPSILON) {\n                    return null;\n                }\n            }\n            else {\n                if (det > -EPSILON && det < EPSILON) {\n                    return null;\n                }\n            }\n\n            vec3.sub(AO, origin, a);\n            var u = vec3.dot(vCross, AO) / det;\n            if (u < 0 || u > 1) {\n                return null;\n            }\n\n            vec3.cross(vCross, eBA, AO);\n            var v = vec3.dot(dir, vCross) / det;\n\n            if (v < 0 || v > 1 || (u + v > 1)) {\n                return null;\n            }\n\n            vec3.cross(vCross, eBA, eCA);\n            var t = -vec3.dot(AO, vCross) / det;\n\n            if (t < 0) {\n                return null;\n            }\n\n            if (!out) {\n                out = new Vector3();\n            }\n            if (barycenteric) {\n                Vector3.set(barycenteric, (1 - u - v), u, v);\n            }\n            vec3.scaleAndAdd(out.array, origin, dir, t);\n\n            return out;\n        };\n    })(),\n\n    /**\n     * Apply an affine transform matrix to the ray\n     * @return {clay.Matrix4} matrix\n     */\n    applyTransform: function (matrix) {\n        Vector3.add(this.direction, this.direction, this.origin);\n        Vector3.transformMat4(this.origin, this.origin, matrix);\n        Vector3.transformMat4(this.direction, this.direction, matrix);\n\n        Vector3.sub(this.direction, this.direction, this.origin);\n        Vector3.normalize(this.direction, this.direction);\n    },\n\n    /**\n     * Copy values from another ray\n     * @param {clay.Ray} ray\n     */\n    copy: function (ray) {\n        Vector3.copy(this.origin, ray.origin);\n        Vector3.copy(this.direction, ray.direction);\n    },\n\n    /**\n     * Clone a new ray\n     * @return {clay.Ray}\n     */\n    clone: function () {\n        var ray = new Ray();\n        ray.copy(this);\n        return ray;\n    }\n};\n\nexport default Ray;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}