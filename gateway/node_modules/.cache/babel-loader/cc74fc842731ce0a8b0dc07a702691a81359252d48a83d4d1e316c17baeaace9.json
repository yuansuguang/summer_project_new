{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport Graph from './Graph';\nimport TexturePool from './TexturePool';\nimport FrameBuffer from '../FrameBuffer';\n\n/**\n * Compositor provide graph based post processing\n *\n * @constructor clay.compositor.Compositor\n * @extends clay.compositor.Graph\n *\n */\nvar Compositor = Graph.extend(function () {\n  return {\n    // Output node\n    _outputs: [],\n    _texturePool: new TexturePool(),\n    _frameBuffer: new FrameBuffer({\n      depthBuffer: false\n    })\n  };\n}, /** @lends clay.compositor.Compositor.prototype */\n{\n  addNode: function (node) {\n    Graph.prototype.addNode.call(this, node);\n    node._compositor = this;\n  },\n  /**\n   * @param  {clay.Renderer} renderer\n   */\n  render: function (renderer, frameBuffer) {\n    if (this._dirty) {\n      this.update();\n      this._dirty = false;\n      this._outputs.length = 0;\n      for (var i = 0; i < this.nodes.length; i++) {\n        if (!this.nodes[i].outputs) {\n          this._outputs.push(this.nodes[i]);\n        }\n      }\n    }\n    for (var i = 0; i < this.nodes.length; i++) {\n      // Update the reference number of each output texture\n      this.nodes[i].beforeFrame();\n    }\n    for (var i = 0; i < this._outputs.length; i++) {\n      this._outputs[i].updateReference();\n    }\n    for (var i = 0; i < this._outputs.length; i++) {\n      this._outputs[i].render(renderer, frameBuffer);\n    }\n    for (var i = 0; i < this.nodes.length; i++) {\n      // Clear up\n      this.nodes[i].afterFrame();\n    }\n  },\n  allocateTexture: function (parameters) {\n    return this._texturePool.get(parameters);\n  },\n  releaseTexture: function (parameters) {\n    this._texturePool.put(parameters);\n  },\n  getFrameBuffer: function () {\n    return this._frameBuffer;\n  },\n  /**\n   * Dispose compositor\n   * @param {clay.Renderer} renderer\n   */\n  dispose: function (renderer) {\n    this._texturePool.clear(renderer);\n  }\n});\nexport default Compositor;","map":{"version":3,"names":["Graph","TexturePool","FrameBuffer","Compositor","extend","_outputs","_texturePool","_frameBuffer","depthBuffer","addNode","node","prototype","call","_compositor","render","renderer","frameBuffer","_dirty","update","length","i","nodes","outputs","push","beforeFrame","updateReference","afterFrame","allocateTexture","parameters","get","releaseTexture","put","getFrameBuffer","dispose","clear"],"sources":["E:/mytest/node_modules/claygl/src/compositor/Compositor.js"],"sourcesContent":["import Graph from './Graph';\nimport TexturePool from './TexturePool';\nimport FrameBuffer from '../FrameBuffer';\n\n/**\n * Compositor provide graph based post processing\n *\n * @constructor clay.compositor.Compositor\n * @extends clay.compositor.Graph\n *\n */\nvar Compositor = Graph.extend(function() {\n    return {\n        // Output node\n        _outputs: [],\n\n        _texturePool: new TexturePool(),\n\n        _frameBuffer: new FrameBuffer({\n            depthBuffer: false\n        })\n    };\n},\n/** @lends clay.compositor.Compositor.prototype */\n{\n    addNode: function(node) {\n        Graph.prototype.addNode.call(this, node);\n        node._compositor = this;\n    },\n    /**\n     * @param  {clay.Renderer} renderer\n     */\n    render: function(renderer, frameBuffer) {\n        if (this._dirty) {\n            this.update();\n            this._dirty = false;\n\n            this._outputs.length = 0;\n            for (var i = 0; i < this.nodes.length; i++) {\n                if (!this.nodes[i].outputs) {\n                    this._outputs.push(this.nodes[i]);\n                }\n            }\n        }\n\n        for (var i = 0; i < this.nodes.length; i++) {\n            // Update the reference number of each output texture\n            this.nodes[i].beforeFrame();\n        }\n\n        for (var i = 0; i < this._outputs.length; i++) {\n            this._outputs[i].updateReference();\n        }\n\n        for (var i = 0; i < this._outputs.length; i++) {\n            this._outputs[i].render(renderer, frameBuffer);\n        }\n\n        for (var i = 0; i < this.nodes.length; i++) {\n            // Clear up\n            this.nodes[i].afterFrame();\n        }\n    },\n\n    allocateTexture: function (parameters) {\n        return this._texturePool.get(parameters);\n    },\n\n    releaseTexture: function (parameters) {\n        this._texturePool.put(parameters);\n    },\n\n    getFrameBuffer: function () {\n        return this._frameBuffer;\n    },\n\n    /**\n     * Dispose compositor\n     * @param {clay.Renderer} renderer\n     */\n    dispose: function (renderer) {\n        this._texturePool.clear(renderer);\n    }\n});\n\nexport default Compositor;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}