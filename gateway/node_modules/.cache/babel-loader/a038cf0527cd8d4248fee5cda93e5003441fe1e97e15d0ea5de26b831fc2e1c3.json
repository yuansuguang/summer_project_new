{"ast":null,"code":"import graphicGL from '../../util/graphicGL';\nimport Skybox from 'claygl/src/plugin/Skybox';\nimport * as echarts from 'echarts/lib/echarts';\nfunction SceneHelper() {}\nSceneHelper.prototype = {\n  constructor: SceneHelper,\n  setScene: function (scene) {\n    this._scene = scene;\n    if (this._skybox) {\n      this._skybox.attachScene(this._scene);\n    }\n  },\n  initLight: function (rootNode) {\n    this._lightRoot = rootNode;\n    /**\n     * @type {clay.light.Directional}\n     */\n\n    this.mainLight = new graphicGL.DirectionalLight({\n      shadowBias: 0.005\n    });\n    /**\n     * @type {clay.light.Ambient}\n     */\n\n    this.ambientLight = new graphicGL.AmbientLight();\n    rootNode.add(this.mainLight);\n    rootNode.add(this.ambientLight);\n  },\n  dispose: function () {\n    if (this._lightRoot) {\n      this._lightRoot.remove(this.mainLight);\n      this._lightRoot.remove(this.ambientLight);\n    }\n  },\n  updateLight: function (componentModel) {\n    var mainLight = this.mainLight;\n    var ambientLight = this.ambientLight;\n    var lightModel = componentModel.getModel('light');\n    var mainLightModel = lightModel.getModel('main');\n    var ambientLightModel = lightModel.getModel('ambient');\n    mainLight.intensity = mainLightModel.get('intensity');\n    ambientLight.intensity = ambientLightModel.get('intensity');\n    mainLight.color = graphicGL.parseColor(mainLightModel.get('color')).slice(0, 3);\n    ambientLight.color = graphicGL.parseColor(ambientLightModel.get('color')).slice(0, 3);\n    var alpha = mainLightModel.get('alpha') || 0;\n    var beta = mainLightModel.get('beta') || 0;\n    mainLight.position.setArray(graphicGL.directionFromAlphaBeta(alpha, beta));\n    mainLight.lookAt(graphicGL.Vector3.ZERO);\n    mainLight.castShadow = mainLightModel.get('shadow');\n    mainLight.shadowResolution = graphicGL.getShadowResolution(mainLightModel.get('shadowQuality'));\n  },\n  updateAmbientCubemap: function (renderer, componentModel, api) {\n    var ambientCubemapModel = componentModel.getModel('light.ambientCubemap');\n    var textureUrl = ambientCubemapModel.get('texture');\n    if (textureUrl) {\n      this._cubemapLightsCache = this._cubemapLightsCache || {};\n      var lights = this._cubemapLightsCache[textureUrl];\n      if (!lights) {\n        var self = this;\n        lights = this._cubemapLightsCache[textureUrl] = graphicGL.createAmbientCubemap(ambientCubemapModel.option, renderer, api, function () {\n          // Use prefitered cubemap\n          if (self._isSkyboxFromAmbientCubemap) {\n            self._skybox.setEnvironmentMap(lights.specular.cubemap);\n          }\n          api.getZr().refresh();\n        });\n      }\n      this._lightRoot.add(lights.diffuse);\n      this._lightRoot.add(lights.specular);\n      this._currentCubemapLights = lights;\n    } else if (this._currentCubemapLights) {\n      this._lightRoot.remove(this._currentCubemapLights.diffuse);\n      this._lightRoot.remove(this._currentCubemapLights.specular);\n      this._currentCubemapLights = null;\n    }\n  },\n  updateSkybox: function (renderer, componentModel, api) {\n    var environmentUrl = componentModel.get('environment');\n    var self = this;\n    function getSkybox() {\n      self._skybox = self._skybox || new Skybox();\n      return self._skybox;\n    }\n    var skybox = getSkybox();\n    if (environmentUrl && environmentUrl !== 'none') {\n      if (environmentUrl === 'auto') {\n        this._isSkyboxFromAmbientCubemap = true; // Use environment in ambient cubemap\n\n        if (this._currentCubemapLights) {\n          var cubemap = this._currentCubemapLights.specular.cubemap;\n          skybox.setEnvironmentMap(cubemap);\n          if (this._scene) {\n            skybox.attachScene(this._scene);\n          }\n          skybox.material.set('lod', 3);\n        } else if (this._skybox) {\n          this._skybox.detachScene();\n        }\n      } // Is gradient or color string\n      else if (typeof environmentUrl === 'object' && environmentUrl.colorStops || typeof environmentUrl === 'string' && echarts.color.parse(environmentUrl)) {\n        this._isSkyboxFromAmbientCubemap = false;\n        var texture = new graphicGL.Texture2D({\n          anisotropic: 8,\n          flipY: false\n        });\n        skybox.setEnvironmentMap(texture);\n        var canvas = texture.image = document.createElement('canvas');\n        canvas.width = canvas.height = 16;\n        var ctx = canvas.getContext('2d');\n        var rect = new echarts.graphic.Rect({\n          shape: {\n            x: 0,\n            y: 0,\n            width: 16,\n            height: 16\n          },\n          style: {\n            fill: environmentUrl\n          }\n        });\n        echarts.innerDrawElementOnCanvas(ctx, rect);\n        skybox.attachScene(this._scene);\n      } else {\n        this._isSkyboxFromAmbientCubemap = false; // Panorama\n\n        var texture = graphicGL.loadTexture(environmentUrl, api, {\n          anisotropic: 8,\n          flipY: false\n        });\n        skybox.setEnvironmentMap(texture);\n        skybox.attachScene(this._scene);\n      }\n    } else {\n      if (this._skybox) {\n        this._skybox.detachScene(this._scene);\n      }\n      this._skybox = null;\n    }\n    var coordSys = componentModel.coordinateSystem;\n    if (this._skybox) {\n      if (coordSys && coordSys.viewGL && environmentUrl !== 'auto' && !(environmentUrl.match && environmentUrl.match(/.hdr$/))) {\n        var srgbDefineMethod = coordSys.viewGL.isLinearSpace() ? 'define' : 'undefine';\n        this._skybox.material[srgbDefineMethod]('fragment', 'SRGB_DECODE');\n      } else {\n        this._skybox.material.undefine('fragment', 'SRGB_DECODE');\n      } // var ambientCubemapUrl = environmentUrl === 'auto'\n      //     ? componentModel.get('light.ambientCubemap.texture')\n      //     : environmentUrl;\n    }\n  }\n};\nexport default SceneHelper;","map":{"version":3,"names":["graphicGL","Skybox","echarts","SceneHelper","prototype","constructor","setScene","scene","_scene","_skybox","attachScene","initLight","rootNode","_lightRoot","mainLight","DirectionalLight","shadowBias","ambientLight","AmbientLight","add","dispose","remove","updateLight","componentModel","lightModel","getModel","mainLightModel","ambientLightModel","intensity","get","color","parseColor","slice","alpha","beta","position","setArray","directionFromAlphaBeta","lookAt","Vector3","ZERO","castShadow","shadowResolution","getShadowResolution","updateAmbientCubemap","renderer","api","ambientCubemapModel","textureUrl","_cubemapLightsCache","lights","self","createAmbientCubemap","option","_isSkyboxFromAmbientCubemap","setEnvironmentMap","specular","cubemap","getZr","refresh","diffuse","_currentCubemapLights","updateSkybox","environmentUrl","getSkybox","skybox","material","set","detachScene","colorStops","parse","texture","Texture2D","anisotropic","flipY","canvas","image","document","createElement","width","height","ctx","getContext","rect","graphic","Rect","shape","x","y","style","fill","innerDrawElementOnCanvas","loadTexture","coordSys","coordinateSystem","viewGL","match","srgbDefineMethod","isLinearSpace","undefine"],"sources":["E:/mytest/node_modules/echarts-gl/lib/component/common/SceneHelper.js"],"sourcesContent":["import graphicGL from '../../util/graphicGL';\nimport Skybox from 'claygl/src/plugin/Skybox';\nimport * as echarts from 'echarts/lib/echarts';\n\nfunction SceneHelper() {}\n\nSceneHelper.prototype = {\n  constructor: SceneHelper,\n  setScene: function (scene) {\n    this._scene = scene;\n\n    if (this._skybox) {\n      this._skybox.attachScene(this._scene);\n    }\n  },\n  initLight: function (rootNode) {\n    this._lightRoot = rootNode;\n    /**\n     * @type {clay.light.Directional}\n     */\n\n    this.mainLight = new graphicGL.DirectionalLight({\n      shadowBias: 0.005\n    });\n    /**\n     * @type {clay.light.Ambient}\n     */\n\n    this.ambientLight = new graphicGL.AmbientLight();\n    rootNode.add(this.mainLight);\n    rootNode.add(this.ambientLight);\n  },\n  dispose: function () {\n    if (this._lightRoot) {\n      this._lightRoot.remove(this.mainLight);\n\n      this._lightRoot.remove(this.ambientLight);\n    }\n  },\n  updateLight: function (componentModel) {\n    var mainLight = this.mainLight;\n    var ambientLight = this.ambientLight;\n    var lightModel = componentModel.getModel('light');\n    var mainLightModel = lightModel.getModel('main');\n    var ambientLightModel = lightModel.getModel('ambient');\n    mainLight.intensity = mainLightModel.get('intensity');\n    ambientLight.intensity = ambientLightModel.get('intensity');\n    mainLight.color = graphicGL.parseColor(mainLightModel.get('color')).slice(0, 3);\n    ambientLight.color = graphicGL.parseColor(ambientLightModel.get('color')).slice(0, 3);\n    var alpha = mainLightModel.get('alpha') || 0;\n    var beta = mainLightModel.get('beta') || 0;\n    mainLight.position.setArray(graphicGL.directionFromAlphaBeta(alpha, beta));\n    mainLight.lookAt(graphicGL.Vector3.ZERO);\n    mainLight.castShadow = mainLightModel.get('shadow');\n    mainLight.shadowResolution = graphicGL.getShadowResolution(mainLightModel.get('shadowQuality'));\n  },\n  updateAmbientCubemap: function (renderer, componentModel, api) {\n    var ambientCubemapModel = componentModel.getModel('light.ambientCubemap');\n    var textureUrl = ambientCubemapModel.get('texture');\n\n    if (textureUrl) {\n      this._cubemapLightsCache = this._cubemapLightsCache || {};\n      var lights = this._cubemapLightsCache[textureUrl];\n\n      if (!lights) {\n        var self = this;\n        lights = this._cubemapLightsCache[textureUrl] = graphicGL.createAmbientCubemap(ambientCubemapModel.option, renderer, api, function () {\n          // Use prefitered cubemap\n          if (self._isSkyboxFromAmbientCubemap) {\n            self._skybox.setEnvironmentMap(lights.specular.cubemap);\n          }\n\n          api.getZr().refresh();\n        });\n      }\n\n      this._lightRoot.add(lights.diffuse);\n\n      this._lightRoot.add(lights.specular);\n\n      this._currentCubemapLights = lights;\n    } else if (this._currentCubemapLights) {\n      this._lightRoot.remove(this._currentCubemapLights.diffuse);\n\n      this._lightRoot.remove(this._currentCubemapLights.specular);\n\n      this._currentCubemapLights = null;\n    }\n  },\n  updateSkybox: function (renderer, componentModel, api) {\n    var environmentUrl = componentModel.get('environment');\n    var self = this;\n\n    function getSkybox() {\n      self._skybox = self._skybox || new Skybox();\n      return self._skybox;\n    }\n\n    var skybox = getSkybox();\n\n    if (environmentUrl && environmentUrl !== 'none') {\n      if (environmentUrl === 'auto') {\n        this._isSkyboxFromAmbientCubemap = true; // Use environment in ambient cubemap\n\n        if (this._currentCubemapLights) {\n          var cubemap = this._currentCubemapLights.specular.cubemap;\n          skybox.setEnvironmentMap(cubemap);\n\n          if (this._scene) {\n            skybox.attachScene(this._scene);\n          }\n\n          skybox.material.set('lod', 3);\n        } else if (this._skybox) {\n          this._skybox.detachScene();\n        }\n      } // Is gradient or color string\n      else if (typeof environmentUrl === 'object' && environmentUrl.colorStops || typeof environmentUrl === 'string' && echarts.color.parse(environmentUrl)) {\n          this._isSkyboxFromAmbientCubemap = false;\n          var texture = new graphicGL.Texture2D({\n            anisotropic: 8,\n            flipY: false\n          });\n          skybox.setEnvironmentMap(texture);\n          var canvas = texture.image = document.createElement('canvas');\n          canvas.width = canvas.height = 16;\n          var ctx = canvas.getContext('2d');\n          var rect = new echarts.graphic.Rect({\n            shape: {\n              x: 0,\n              y: 0,\n              width: 16,\n              height: 16\n            },\n            style: {\n              fill: environmentUrl\n            }\n          });\n          echarts.innerDrawElementOnCanvas(ctx, rect);\n          skybox.attachScene(this._scene);\n        } else {\n          this._isSkyboxFromAmbientCubemap = false; // Panorama\n\n          var texture = graphicGL.loadTexture(environmentUrl, api, {\n            anisotropic: 8,\n            flipY: false\n          });\n          skybox.setEnvironmentMap(texture);\n          skybox.attachScene(this._scene);\n        }\n    } else {\n      if (this._skybox) {\n        this._skybox.detachScene(this._scene);\n      }\n\n      this._skybox = null;\n    }\n\n    var coordSys = componentModel.coordinateSystem;\n\n    if (this._skybox) {\n      if (coordSys && coordSys.viewGL && environmentUrl !== 'auto' && !(environmentUrl.match && environmentUrl.match(/.hdr$/))) {\n        var srgbDefineMethod = coordSys.viewGL.isLinearSpace() ? 'define' : 'undefine';\n\n        this._skybox.material[srgbDefineMethod]('fragment', 'SRGB_DECODE');\n      } else {\n        this._skybox.material.undefine('fragment', 'SRGB_DECODE');\n      } // var ambientCubemapUrl = environmentUrl === 'auto'\n      //     ? componentModel.get('light.ambientCubemap.texture')\n      //     : environmentUrl;\n\n    }\n  }\n};\nexport default SceneHelper;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}