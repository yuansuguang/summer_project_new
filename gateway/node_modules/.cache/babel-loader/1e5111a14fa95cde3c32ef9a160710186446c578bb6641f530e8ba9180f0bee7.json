{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport * as echarts from 'echarts/lib/echarts';\nimport createGraphFromNodeEdge from './createGraphFromNodeEdge';\nimport formatUtil from '../../util/format';\nvar GraphSeries = echarts.SeriesModel.extend({\n  type: 'series.graphGL',\n  visualStyleAccessPath: 'itemStyle',\n  hasSymbolVisual: true,\n  init: function (option) {\n    GraphSeries.superApply(this, 'init', arguments); // Provide data for legend select\n\n    this.legendDataProvider = function () {\n      return this._categoriesData;\n    };\n    this._updateCategoriesData();\n  },\n  mergeOption: function (option) {\n    GraphSeries.superApply(this, 'mergeOption', arguments);\n    this._updateCategoriesData();\n  },\n  getFormattedLabel: function (dataIndex, status, dataType, dimIndex) {\n    var text = formatUtil.getFormattedLabel(this, dataIndex, status, dataType, dimIndex);\n    if (text == null) {\n      var data = this.getData();\n      var lastDim = data.dimensions[data.dimensions.length - 1];\n      text = data.get(lastDim, dataIndex);\n    }\n    return text;\n  },\n  getInitialData: function (option, ecModel) {\n    var edges = option.edges || option.links || [];\n    var nodes = option.data || option.nodes || [];\n    var self = this;\n    if (nodes && edges) {\n      return createGraphFromNodeEdge(nodes, edges, this, true, beforeLink).data;\n    }\n    function beforeLink(nodeData, edgeData) {\n      // Overwrite nodeData.getItemModel to\n      nodeData.wrapMethod('getItemModel', function (model) {\n        const categoriesModels = self._categoriesModels;\n        const categoryIdx = model.getShallow('category');\n        const categoryModel = categoriesModels[categoryIdx];\n        if (categoryModel) {\n          categoryModel.parentModel = model.parentModel;\n          model.parentModel = categoryModel;\n        }\n        return model;\n      }); // TODO Inherit resolveParentPath by default in Model#getModel?\n\n      const oldGetModel = ecModel.getModel([]).getModel;\n      function newGetModel(path, parentModel) {\n        const model = oldGetModel.call(this, path, parentModel);\n        model.resolveParentPath = resolveParentPath;\n        return model;\n      }\n      edgeData.wrapMethod('getItemModel', function (model) {\n        model.resolveParentPath = resolveParentPath;\n        model.getModel = newGetModel;\n        return model;\n      });\n      function resolveParentPath(pathArr) {\n        if (pathArr && (pathArr[0] === 'label' || pathArr[1] === 'label')) {\n          const newPathArr = pathArr.slice();\n          if (pathArr[0] === 'label') {\n            newPathArr[0] = 'edgeLabel';\n          } else if (pathArr[1] === 'label') {\n            newPathArr[1] = 'edgeLabel';\n          }\n          return newPathArr;\n        }\n        return pathArr;\n      }\n    }\n  },\n  /**\n   * @return {module:echarts/data/Graph}\n   */\n  getGraph: function () {\n    return this.getData().graph;\n  },\n  /**\n   * @return {module:echarts/data/List}\n   */\n  getEdgeData: function () {\n    return this.getGraph().edgeData;\n  },\n  /**\n   * @return {module:echarts/data/List}\n   */\n  getCategoriesData: function () {\n    return this._categoriesData;\n  },\n  /**\n   * @override\n   */\n  formatTooltip: function (dataIndex, multipleSeries, dataType) {\n    if (dataType === 'edge') {\n      var nodeData = this.getData();\n      var params = this.getDataParams(dataIndex, dataType);\n      var edge = nodeData.graph.getEdgeByIndex(dataIndex);\n      var sourceName = nodeData.getName(edge.node1.dataIndex);\n      var targetName = nodeData.getName(edge.node2.dataIndex);\n      var html = [];\n      sourceName != null && html.push(sourceName);\n      targetName != null && html.push(targetName);\n      html = echarts.format.encodeHTML(html.join(' > '));\n      if (params.value) {\n        html += ' : ' + echarts.format.encodeHTML(params.value);\n      }\n      return html;\n    } else {\n      // dataType === 'node' or empty\n      return GraphSeries.superApply(this, 'formatTooltip', arguments);\n    }\n  },\n  _updateCategoriesData: function () {\n    var categories = (this.option.categories || []).map(function (category) {\n      // Data must has value\n      return category.value != null ? category : Object.assign({\n        value: 0\n      }, category);\n    });\n    var categoriesData = new echarts.List(['value'], this);\n    categoriesData.initData(categories);\n    this._categoriesData = categoriesData;\n    this._categoriesModels = categoriesData.mapArray(function (idx) {\n      return categoriesData.getItemModel(idx, true);\n    });\n  },\n  setView: function (payload) {\n    if (payload.zoom != null) {\n      this.option.zoom = payload.zoom;\n    }\n    if (payload.offset != null) {\n      this.option.offset = payload.offset;\n    }\n  },\n  setNodePosition: function (points) {\n    for (var i = 0; i < points.length / 2; i++) {\n      var x = points[i * 2];\n      var y = points[i * 2 + 1];\n      var opt = this.getData().getRawDataItem(i);\n      opt.x = x;\n      opt.y = y;\n    }\n  },\n  isAnimationEnabled: function () {\n    return GraphSeries.superCall(this, 'isAnimationEnabled') // Not enable animation when do force layout\n    && !(this.get('layout') === 'force' && this.get('force.layoutAnimation'));\n  },\n  defaultOption: {\n    zlevel: 10,\n    z: 2,\n    legendHoverLink: true,\n    // Only support forceAtlas2\n    layout: 'forceAtlas2',\n    // Configuration of force directed layout\n    forceAtlas2: {\n      initLayout: null,\n      GPU: true,\n      steps: 1,\n      // barnesHutOptimize\n      // Maxp layout steps.\n      maxSteps: 1000,\n      repulsionByDegree: true,\n      linLogMode: false,\n      strongGravityMode: false,\n      gravity: 1.0,\n      // scaling: 1.0,\n      edgeWeightInfluence: 1.0,\n      // Edge weight range.\n      edgeWeight: [1, 4],\n      // Node weight range.\n      nodeWeight: [1, 4],\n      // jitterTolerence: 0.1,\n      preventOverlap: false,\n      gravityCenter: null\n    },\n    focusNodeAdjacency: true,\n    focusNodeAdjacencyOn: 'mouseover',\n    left: 'center',\n    top: 'center',\n    // right: null,\n    // bottom: null,\n    // width: '80%',\n    // height: '80%',\n    symbol: 'circle',\n    symbolSize: 5,\n    roam: false,\n    // Default on center of graph\n    center: null,\n    zoom: 1,\n    // categories: [],\n    // data: []\n    // Or\n    // nodes: []\n    //\n    // links: []\n    // Or\n    // edges: []\n    label: {\n      show: false,\n      formatter: '{b}',\n      position: 'right',\n      distance: 5,\n      textStyle: {\n        fontSize: 14\n      }\n    },\n    itemStyle: {},\n    lineStyle: {\n      color: '#aaa',\n      width: 1,\n      opacity: 0.5\n    },\n    emphasis: {\n      label: {\n        show: true\n      }\n    },\n    animation: false\n  }\n});\nexport default GraphSeries;","map":{"version":3,"names":["echarts","createGraphFromNodeEdge","formatUtil","GraphSeries","SeriesModel","extend","type","visualStyleAccessPath","hasSymbolVisual","init","option","superApply","arguments","legendDataProvider","_categoriesData","_updateCategoriesData","mergeOption","getFormattedLabel","dataIndex","status","dataType","dimIndex","text","data","getData","lastDim","dimensions","length","get","getInitialData","ecModel","edges","links","nodes","self","beforeLink","nodeData","edgeData","wrapMethod","model","categoriesModels","_categoriesModels","categoryIdx","getShallow","categoryModel","parentModel","oldGetModel","getModel","newGetModel","path","call","resolveParentPath","pathArr","newPathArr","slice","getGraph","graph","getEdgeData","getCategoriesData","formatTooltip","multipleSeries","params","getDataParams","edge","getEdgeByIndex","sourceName","getName","node1","targetName","node2","html","push","format","encodeHTML","join","value","categories","map","category","Object","assign","categoriesData","List","initData","mapArray","idx","getItemModel","setView","payload","zoom","offset","setNodePosition","points","i","x","y","opt","getRawDataItem","isAnimationEnabled","superCall","defaultOption","zlevel","z","legendHoverLink","layout","forceAtlas2","initLayout","GPU","steps","maxSteps","repulsionByDegree","linLogMode","strongGravityMode","gravity","edgeWeightInfluence","edgeWeight","nodeWeight","preventOverlap","gravityCenter","focusNodeAdjacency","focusNodeAdjacencyOn","left","top","symbol","symbolSize","roam","center","label","show","formatter","position","distance","textStyle","fontSize","itemStyle","lineStyle","color","width","opacity","emphasis","animation"],"sources":["E:/mytest/node_modules/echarts-gl/lib/chart/graphGL/GraphGLSeries.js"],"sourcesContent":["import * as echarts from 'echarts/lib/echarts';\nimport createGraphFromNodeEdge from './createGraphFromNodeEdge';\nimport formatUtil from '../../util/format';\nvar GraphSeries = echarts.SeriesModel.extend({\n  type: 'series.graphGL',\n  visualStyleAccessPath: 'itemStyle',\n  hasSymbolVisual: true,\n  init: function (option) {\n    GraphSeries.superApply(this, 'init', arguments); // Provide data for legend select\n\n    this.legendDataProvider = function () {\n      return this._categoriesData;\n    };\n\n    this._updateCategoriesData();\n  },\n  mergeOption: function (option) {\n    GraphSeries.superApply(this, 'mergeOption', arguments);\n\n    this._updateCategoriesData();\n  },\n  getFormattedLabel: function (dataIndex, status, dataType, dimIndex) {\n    var text = formatUtil.getFormattedLabel(this, dataIndex, status, dataType, dimIndex);\n\n    if (text == null) {\n      var data = this.getData();\n      var lastDim = data.dimensions[data.dimensions.length - 1];\n      text = data.get(lastDim, dataIndex);\n    }\n\n    return text;\n  },\n  getInitialData: function (option, ecModel) {\n    var edges = option.edges || option.links || [];\n    var nodes = option.data || option.nodes || [];\n    var self = this;\n\n    if (nodes && edges) {\n      return createGraphFromNodeEdge(nodes, edges, this, true, beforeLink).data;\n    }\n\n    function beforeLink(nodeData, edgeData) {\n      // Overwrite nodeData.getItemModel to\n      nodeData.wrapMethod('getItemModel', function (model) {\n        const categoriesModels = self._categoriesModels;\n        const categoryIdx = model.getShallow('category');\n        const categoryModel = categoriesModels[categoryIdx];\n\n        if (categoryModel) {\n          categoryModel.parentModel = model.parentModel;\n          model.parentModel = categoryModel;\n        }\n\n        return model;\n      }); // TODO Inherit resolveParentPath by default in Model#getModel?\n\n      const oldGetModel = ecModel.getModel([]).getModel;\n\n      function newGetModel(path, parentModel) {\n        const model = oldGetModel.call(this, path, parentModel);\n        model.resolveParentPath = resolveParentPath;\n        return model;\n      }\n\n      edgeData.wrapMethod('getItemModel', function (model) {\n        model.resolveParentPath = resolveParentPath;\n        model.getModel = newGetModel;\n        return model;\n      });\n\n      function resolveParentPath(pathArr) {\n        if (pathArr && (pathArr[0] === 'label' || pathArr[1] === 'label')) {\n          const newPathArr = pathArr.slice();\n\n          if (pathArr[0] === 'label') {\n            newPathArr[0] = 'edgeLabel';\n          } else if (pathArr[1] === 'label') {\n            newPathArr[1] = 'edgeLabel';\n          }\n\n          return newPathArr;\n        }\n\n        return pathArr;\n      }\n    }\n  },\n\n  /**\n   * @return {module:echarts/data/Graph}\n   */\n  getGraph: function () {\n    return this.getData().graph;\n  },\n\n  /**\n   * @return {module:echarts/data/List}\n   */\n  getEdgeData: function () {\n    return this.getGraph().edgeData;\n  },\n\n  /**\n   * @return {module:echarts/data/List}\n   */\n  getCategoriesData: function () {\n    return this._categoriesData;\n  },\n\n  /**\n   * @override\n   */\n  formatTooltip: function (dataIndex, multipleSeries, dataType) {\n    if (dataType === 'edge') {\n      var nodeData = this.getData();\n      var params = this.getDataParams(dataIndex, dataType);\n      var edge = nodeData.graph.getEdgeByIndex(dataIndex);\n      var sourceName = nodeData.getName(edge.node1.dataIndex);\n      var targetName = nodeData.getName(edge.node2.dataIndex);\n      var html = [];\n      sourceName != null && html.push(sourceName);\n      targetName != null && html.push(targetName);\n      html = echarts.format.encodeHTML(html.join(' > '));\n\n      if (params.value) {\n        html += ' : ' + echarts.format.encodeHTML(params.value);\n      }\n\n      return html;\n    } else {\n      // dataType === 'node' or empty\n      return GraphSeries.superApply(this, 'formatTooltip', arguments);\n    }\n  },\n  _updateCategoriesData: function () {\n    var categories = (this.option.categories || []).map(function (category) {\n      // Data must has value\n      return category.value != null ? category : Object.assign({\n        value: 0\n      }, category);\n    });\n    var categoriesData = new echarts.List(['value'], this);\n    categoriesData.initData(categories);\n    this._categoriesData = categoriesData;\n    this._categoriesModels = categoriesData.mapArray(function (idx) {\n      return categoriesData.getItemModel(idx, true);\n    });\n  },\n  setView: function (payload) {\n    if (payload.zoom != null) {\n      this.option.zoom = payload.zoom;\n    }\n\n    if (payload.offset != null) {\n      this.option.offset = payload.offset;\n    }\n  },\n  setNodePosition: function (points) {\n    for (var i = 0; i < points.length / 2; i++) {\n      var x = points[i * 2];\n      var y = points[i * 2 + 1];\n      var opt = this.getData().getRawDataItem(i);\n      opt.x = x;\n      opt.y = y;\n    }\n  },\n  isAnimationEnabled: function () {\n    return GraphSeries.superCall(this, 'isAnimationEnabled') // Not enable animation when do force layout\n    && !(this.get('layout') === 'force' && this.get('force.layoutAnimation'));\n  },\n  defaultOption: {\n    zlevel: 10,\n    z: 2,\n    legendHoverLink: true,\n    // Only support forceAtlas2\n    layout: 'forceAtlas2',\n    // Configuration of force directed layout\n    forceAtlas2: {\n      initLayout: null,\n      GPU: true,\n      steps: 1,\n      // barnesHutOptimize\n      // Maxp layout steps.\n      maxSteps: 1000,\n      repulsionByDegree: true,\n      linLogMode: false,\n      strongGravityMode: false,\n      gravity: 1.0,\n      // scaling: 1.0,\n      edgeWeightInfluence: 1.0,\n      // Edge weight range.\n      edgeWeight: [1, 4],\n      // Node weight range.\n      nodeWeight: [1, 4],\n      // jitterTolerence: 0.1,\n      preventOverlap: false,\n      gravityCenter: null\n    },\n    focusNodeAdjacency: true,\n    focusNodeAdjacencyOn: 'mouseover',\n    left: 'center',\n    top: 'center',\n    // right: null,\n    // bottom: null,\n    // width: '80%',\n    // height: '80%',\n    symbol: 'circle',\n    symbolSize: 5,\n    roam: false,\n    // Default on center of graph\n    center: null,\n    zoom: 1,\n    // categories: [],\n    // data: []\n    // Or\n    // nodes: []\n    //\n    // links: []\n    // Or\n    // edges: []\n    label: {\n      show: false,\n      formatter: '{b}',\n      position: 'right',\n      distance: 5,\n      textStyle: {\n        fontSize: 14\n      }\n    },\n    itemStyle: {},\n    lineStyle: {\n      color: '#aaa',\n      width: 1,\n      opacity: 0.5\n    },\n    emphasis: {\n      label: {\n        show: true\n      }\n    },\n    animation: false\n  }\n});\nexport default GraphSeries;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}