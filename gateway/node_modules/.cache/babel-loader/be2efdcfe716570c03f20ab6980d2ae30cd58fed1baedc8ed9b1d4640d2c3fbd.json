{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.array-buffer.detached.js\";\nimport \"core-js/modules/es.array-buffer.transfer.js\";\nimport \"core-js/modules/es.array-buffer.transfer-to-fixed-length.js\";\nimport \"core-js/modules/es.typed-array.to-reversed.js\";\nimport \"core-js/modules/es.typed-array.to-sorted.js\";\nimport \"core-js/modules/es.typed-array.with.js\";\nimport * as echarts from 'echarts/lib/echarts';\nimport graphicGL from '../../util/graphicGL';\nimport earcut from '../../util/earcut';\nimport LinesGeo from '../../util/geometry/Lines3D';\nimport retrieve from '../../util/retrieve';\nimport glmatrix from 'claygl/src/dep/glmatrix';\nimport trianglesSortMixin from '../../util/geometry/trianglesSortMixin';\nimport LabelsBuilder from './LabelsBuilder';\nimport lines3DGLSL from '../../util/shader/lines3D.glsl.js';\nimport { getItemVisualColor, getItemVisualOpacity } from '../../util/visual';\nvar vec3 = glmatrix.vec3;\ngraphicGL.Shader.import(lines3DGLSL);\nfunction Geo3DBuilder(api) {\n  this.rootNode = new graphicGL.Node(); // Cache triangulation result\n\n  this._triangulationResults = {};\n  this._shadersMap = graphicGL.COMMON_SHADERS.filter(function (shaderName) {\n    return shaderName !== 'shadow';\n  }).reduce(function (obj, shaderName) {\n    obj[shaderName] = graphicGL.createShader('ecgl.' + shaderName);\n    return obj;\n  }, {});\n  this._linesShader = graphicGL.createShader('ecgl.meshLines3D');\n  var groundMaterials = {};\n  graphicGL.COMMON_SHADERS.forEach(function (shading) {\n    groundMaterials[shading] = new graphicGL.Material({\n      shader: graphicGL.createShader('ecgl.' + shading)\n    });\n  });\n  this._groundMaterials = groundMaterials;\n  this._groundMesh = new graphicGL.Mesh({\n    geometry: new graphicGL.PlaneGeometry({\n      dynamic: true\n    }),\n    castShadow: false,\n    renderNormal: true,\n    $ignorePicking: true\n  });\n  this._groundMesh.rotation.rotateX(-Math.PI / 2);\n  this._labelsBuilder = new LabelsBuilder(512, 512, api); // Give a large render order.\n\n  this._labelsBuilder.getMesh().renderOrder = 100;\n  this._labelsBuilder.getMesh().material.depthTest = false;\n  this.rootNode.add(this._labelsBuilder.getMesh());\n  this._initMeshes();\n  this._api = api;\n}\nGeo3DBuilder.prototype = {\n  constructor: Geo3DBuilder,\n  // Which dimension to extrude. Y or Z\n  extrudeY: true,\n  update: function (componentModel, ecModel, api, start, end) {\n    var data = componentModel.getData();\n    if (start == null) {\n      start = 0;\n    }\n    if (end == null) {\n      end = data.count();\n    }\n    this._startIndex = start;\n    this._endIndex = end - 1;\n    this._triangulation(componentModel, start, end);\n    var shader = this._getShader(componentModel.get('shading'));\n    this._prepareMesh(componentModel, shader, api, start, end);\n    this.rootNode.updateWorldTransform();\n    this._updateRegionMesh(componentModel, api, start, end);\n    var coordSys = componentModel.coordinateSystem; // PENDING\n\n    if (coordSys.type === 'geo3D') {\n      this._updateGroundPlane(componentModel, coordSys, api);\n    }\n    var self = this;\n    this._labelsBuilder.updateData(data, start, end);\n    this._labelsBuilder.getLabelPosition = function (dataIndex, positionDesc, distance) {\n      var name = data.getName(dataIndex);\n      var center;\n      var height = distance;\n      if (coordSys.type === 'geo3D') {\n        var region = coordSys.getRegion(name);\n        if (!region) {\n          return [NaN, NaN, NaN];\n        }\n        center = region.getCenter();\n        var pos = coordSys.dataToPoint([center[0], center[1], height]);\n        return pos;\n      } else {\n        var tmp = self._triangulationResults[dataIndex - self._startIndex];\n        var center = self.extrudeY ? [(tmp.max[0] + tmp.min[0]) / 2, tmp.max[1] + height, (tmp.max[2] + tmp.min[2]) / 2] : [(tmp.max[0] + tmp.min[0]) / 2, (tmp.max[1] + tmp.min[1]) / 2, tmp.max[2] + height];\n      }\n    };\n    this._data = data;\n    this._labelsBuilder.updateLabels();\n    this._updateDebugWireframe(componentModel); // Reset some state.\n\n    this._lastHoverDataIndex = 0;\n  },\n  _initMeshes: function () {\n    var self = this;\n    function createPolygonMesh() {\n      var mesh = new graphicGL.Mesh({\n        name: 'Polygon',\n        material: new graphicGL.Material({\n          shader: self._shadersMap.lambert\n        }),\n        geometry: new graphicGL.Geometry({\n          sortTriangles: true,\n          dynamic: true\n        }),\n        // TODO Disable culling\n        culling: false,\n        ignorePicking: true,\n        // Render normal in normal pass\n        renderNormal: true\n      });\n      Object.assign(mesh.geometry, trianglesSortMixin);\n      return mesh;\n    }\n    var polygonMesh = createPolygonMesh();\n    var linesMesh = new graphicGL.Mesh({\n      material: new graphicGL.Material({\n        shader: this._linesShader\n      }),\n      castShadow: false,\n      ignorePicking: true,\n      $ignorePicking: true,\n      geometry: new LinesGeo({\n        useNativeLine: false\n      })\n    });\n    this.rootNode.add(polygonMesh);\n    this.rootNode.add(linesMesh);\n    polygonMesh.material.define('both', 'VERTEX_COLOR');\n    polygonMesh.material.define('fragment', 'DOUBLE_SIDED');\n    this._polygonMesh = polygonMesh;\n    this._linesMesh = linesMesh;\n    this.rootNode.add(this._groundMesh);\n  },\n  _getShader: function (shading) {\n    var shader = this._shadersMap[shading];\n    if (!shader) {\n      if (process.env.NODE_ENV !== 'production') {\n        console.warn('Unkown shading ' + shading);\n      } // Default use lambert shader.\n\n      shader = this._shadersMap.lambert;\n    }\n    shader.__shading = shading;\n    return shader;\n  },\n  _prepareMesh: function (componentModel, shader, api, start, end) {\n    var polygonVertexCount = 0;\n    var polygonTriangleCount = 0;\n    var linesVertexCount = 0;\n    var linesTriangleCount = 0; // TODO Lines\n\n    for (var idx = start; idx < end; idx++) {\n      var polyInfo = this._getRegionPolygonInfo(idx);\n      var lineInfo = this._getRegionLinesInfo(idx, componentModel, this._linesMesh.geometry);\n      polygonVertexCount += polyInfo.vertexCount;\n      polygonTriangleCount += polyInfo.triangleCount;\n      linesVertexCount += lineInfo.vertexCount;\n      linesTriangleCount += lineInfo.triangleCount;\n    }\n    var polygonMesh = this._polygonMesh;\n    var polygonGeo = polygonMesh.geometry;\n    ['position', 'normal', 'texcoord0', 'color'].forEach(function (attrName) {\n      polygonGeo.attributes[attrName].init(polygonVertexCount);\n    });\n    polygonGeo.indices = polygonVertexCount > 0xffff ? new Uint32Array(polygonTriangleCount * 3) : new Uint16Array(polygonTriangleCount * 3);\n    if (polygonMesh.material.shader !== shader) {\n      polygonMesh.material.attachShader(shader, true);\n    }\n    graphicGL.setMaterialFromModel(shader.__shading, polygonMesh.material, componentModel, api);\n    if (linesVertexCount > 0) {\n      this._linesMesh.geometry.resetOffset();\n      this._linesMesh.geometry.setVertexCount(linesVertexCount);\n      this._linesMesh.geometry.setTriangleCount(linesTriangleCount);\n    } // Indexing data index from vertex index.\n\n    this._dataIndexOfVertex = new Uint32Array(polygonVertexCount); // Indexing vertex index range from data index\n\n    this._vertexRangeOfDataIndex = new Uint32Array((end - start) * 2);\n  },\n  _updateRegionMesh: function (componentModel, api, start, end) {\n    var data = componentModel.getData();\n    var vertexOffset = 0;\n    var triangleOffset = 0; // Materials configurations.\n\n    var hasTranparentRegion = false;\n    var polygonMesh = this._polygonMesh;\n    var linesMesh = this._linesMesh;\n    for (var dataIndex = start; dataIndex < end; dataIndex++) {\n      // Get bunch of visual properties.\n      var regionModel = componentModel.getRegionModel(dataIndex);\n      var itemStyleModel = regionModel.getModel('itemStyle');\n      var color = retrieve.firstNotNull(getItemVisualColor(data, dataIndex), itemStyleModel.get('color'), '#fff');\n      var opacity = retrieve.firstNotNull(getItemVisualOpacity(data, dataIndex), itemStyleModel.get('opacity'), 1);\n      var colorArr = graphicGL.parseColor(color);\n      var borderColorArr = graphicGL.parseColor(itemStyleModel.get('borderColor'));\n      colorArr[3] *= opacity;\n      borderColorArr[3] *= opacity;\n      var isTransparent = colorArr[3] < 0.99;\n      polygonMesh.material.set('color', [1, 1, 1, 1]);\n      hasTranparentRegion = hasTranparentRegion || isTransparent;\n      var regionHeight = retrieve.firstNotNull(regionModel.get('height', true), componentModel.get('regionHeight'));\n      var newOffsets = this._updatePolygonGeometry(componentModel, polygonMesh.geometry, dataIndex, regionHeight, vertexOffset, triangleOffset, colorArr);\n      for (var i = vertexOffset; i < newOffsets.vertexOffset; i++) {\n        this._dataIndexOfVertex[i] = dataIndex;\n      }\n      this._vertexRangeOfDataIndex[(dataIndex - start) * 2] = vertexOffset;\n      this._vertexRangeOfDataIndex[(dataIndex - start) * 2 + 1] = newOffsets.vertexOffset;\n      vertexOffset = newOffsets.vertexOffset;\n      triangleOffset = newOffsets.triangleOffset; // Update lines.\n\n      var lineWidth = itemStyleModel.get('borderWidth');\n      var hasLine = lineWidth > 0;\n      if (hasLine) {\n        lineWidth *= api.getDevicePixelRatio();\n        this._updateLinesGeometry(linesMesh.geometry, componentModel, dataIndex, regionHeight, lineWidth, componentModel.coordinateSystem.transform);\n      }\n      linesMesh.invisible = !hasLine;\n      linesMesh.material.set({\n        color: borderColorArr\n      });\n    }\n    var polygonMesh = this._polygonMesh;\n    polygonMesh.material.transparent = hasTranparentRegion;\n    polygonMesh.material.depthMask = !hasTranparentRegion;\n    polygonMesh.geometry.updateBoundingBox();\n    polygonMesh.frontFace = this.extrudeY ? graphicGL.Mesh.CCW : graphicGL.Mesh.CW; // Update tangents\n\n    if (polygonMesh.material.get('normalMap')) {\n      polygonMesh.geometry.generateTangents();\n    }\n    polygonMesh.seriesIndex = componentModel.seriesIndex;\n    polygonMesh.on('mousemove', this._onmousemove, this);\n    polygonMesh.on('mouseout', this._onmouseout, this);\n  },\n  _updateDebugWireframe: function (componentModel) {\n    var debugWireframeModel = componentModel.getModel('debug.wireframe'); // TODO Unshow\n\n    if (debugWireframeModel.get('show')) {\n      var color = graphicGL.parseColor(debugWireframeModel.get('lineStyle.color') || 'rgba(0,0,0,0.5)');\n      var width = retrieve.firstNotNull(debugWireframeModel.get('lineStyle.width'), 1); // TODO  Will cause highlight wrong\n\n      var mesh = this._polygonMesh;\n      mesh.geometry.generateBarycentric();\n      mesh.material.define('both', 'WIREFRAME_TRIANGLE');\n      mesh.material.set('wireframeLineColor', color);\n      mesh.material.set('wireframeLineWidth', width);\n    }\n  },\n  _onmousemove: function (e) {\n    var dataIndex = this._dataIndexOfVertex[e.triangle[0]];\n    if (dataIndex == null) {\n      dataIndex = -1;\n    }\n    if (dataIndex !== this._lastHoverDataIndex) {\n      this.downplay(this._lastHoverDataIndex);\n      this.highlight(dataIndex);\n      this._labelsBuilder.updateLabels([dataIndex]);\n    }\n    this._lastHoverDataIndex = dataIndex;\n    this._polygonMesh.dataIndex = dataIndex;\n  },\n  _onmouseout: function (e) {\n    if (e.target) {\n      this.downplay(this._lastHoverDataIndex);\n      this._lastHoverDataIndex = -1;\n      this._polygonMesh.dataIndex = -1;\n    }\n    this._labelsBuilder.updateLabels([]);\n  },\n  _updateGroundPlane: function (componentModel, geo3D, api) {\n    var groundModel = componentModel.getModel('groundPlane', componentModel);\n    this._groundMesh.invisible = !groundModel.get('show', true);\n    if (this._groundMesh.invisible) {\n      return;\n    }\n    var shading = componentModel.get('shading');\n    var material = this._groundMaterials[shading];\n    if (!material) {\n      if (process.env.NODE_ENV !== 'production') {\n        console.warn('Unkown shading ' + shading);\n      }\n      material = this._groundMaterials.lambert;\n    }\n    graphicGL.setMaterialFromModel(shading, material, groundModel, api);\n    if (material.get('normalMap')) {\n      this._groundMesh.geometry.generateTangents();\n    }\n    this._groundMesh.material = material;\n    this._groundMesh.material.set('color', graphicGL.parseColor(groundModel.get('color')));\n    this._groundMesh.scale.set(geo3D.size[0], geo3D.size[2], 1);\n  },\n  _triangulation: function (componentModel, start, end) {\n    this._triangulationResults = [];\n    var minAll = [Infinity, Infinity, Infinity];\n    var maxAll = [-Infinity, -Infinity, -Infinity];\n    var coordSys = componentModel.coordinateSystem;\n    for (var idx = start; idx < end; idx++) {\n      var polygons = [];\n      var polygonCoords = componentModel.getRegionPolygonCoords(idx);\n      for (var i = 0; i < polygonCoords.length; i++) {\n        var exterior = polygonCoords[i].exterior;\n        var interiors = polygonCoords[i].interiors;\n        var points = [];\n        var holes = [];\n        if (exterior.length < 3) {\n          continue;\n        }\n        var offset = 0;\n        for (var j = 0; j < exterior.length; j++) {\n          var p = exterior[j];\n          points[offset++] = p[0];\n          points[offset++] = p[1];\n        }\n        for (var j = 0; j < interiors.length; j++) {\n          if (interiors[j].length < 3) {\n            continue;\n          }\n          var startIdx = points.length / 2;\n          for (var k = 0; k < interiors[j].length; k++) {\n            var p = interiors[j][k];\n            points.push(p[0]);\n            points.push(p[1]);\n          }\n          holes.push(startIdx);\n        }\n        var triangles = earcut(points, holes);\n        var points3 = new Float64Array(points.length / 2 * 3);\n        var pos = [];\n        var min = [Infinity, Infinity, Infinity];\n        var max = [-Infinity, -Infinity, -Infinity];\n        var off3 = 0;\n        for (var j = 0; j < points.length;) {\n          vec3.set(pos, points[j++], 0, points[j++]);\n          if (coordSys && coordSys.transform) {\n            vec3.transformMat4(pos, pos, coordSys.transform);\n          }\n          vec3.min(min, min, pos);\n          vec3.max(max, max, pos);\n          points3[off3++] = pos[0];\n          points3[off3++] = pos[1];\n          points3[off3++] = pos[2];\n        }\n        vec3.min(minAll, minAll, min);\n        vec3.max(maxAll, maxAll, max);\n        polygons.push({\n          points: points3,\n          indices: triangles,\n          min: min,\n          max: max\n        });\n      }\n      this._triangulationResults.push(polygons);\n    }\n    this._geoBoundingBox = [minAll, maxAll];\n  },\n  /**\n   * Get region vertex and triangle count\n   */\n  _getRegionPolygonInfo: function (idx) {\n    var polygons = this._triangulationResults[idx - this._startIndex];\n    var sideVertexCount = 0;\n    var sideTriangleCount = 0;\n    for (var i = 0; i < polygons.length; i++) {\n      sideVertexCount += polygons[i].points.length / 3;\n      sideTriangleCount += polygons[i].indices.length / 3;\n    }\n    var vertexCount = sideVertexCount * 2 + sideVertexCount * 4;\n    var triangleCount = sideTriangleCount * 2 + sideVertexCount * 2;\n    return {\n      vertexCount: vertexCount,\n      triangleCount: triangleCount\n    };\n  },\n  _updatePolygonGeometry: function (componentModel, geometry, dataIndex, regionHeight, vertexOffset, triangleOffset, color) {\n    // FIXME\n    var projectUVOnGround = componentModel.get('projectUVOnGround');\n    var positionAttr = geometry.attributes.position;\n    var normalAttr = geometry.attributes.normal;\n    var texcoordAttr = geometry.attributes.texcoord0;\n    var colorAttr = geometry.attributes.color;\n    var polygons = this._triangulationResults[dataIndex - this._startIndex];\n    var hasColor = colorAttr.value && color;\n    var indices = geometry.indices;\n    var extrudeCoordIndex = this.extrudeY ? 1 : 2;\n    var sideCoordIndex = this.extrudeY ? 2 : 1;\n    var scale = [this.rootNode.worldTransform.x.len(), this.rootNode.worldTransform.y.len(), this.rootNode.worldTransform.z.len()];\n    var min = vec3.mul([], this._geoBoundingBox[0], scale);\n    var max = vec3.mul([], this._geoBoundingBox[1], scale);\n    var maxDimSize = Math.max(max[0] - min[0], max[2] - min[2]);\n    function addVertices(polygon, y, insideOffset) {\n      var points = polygon.points;\n      var pointsLen = points.length;\n      var currentPosition = [];\n      var uv = [];\n      for (var k = 0; k < pointsLen; k += 3) {\n        currentPosition[0] = points[k];\n        currentPosition[extrudeCoordIndex] = y;\n        currentPosition[sideCoordIndex] = points[k + 2];\n        uv[0] = (points[k] * scale[0] - min[0]) / maxDimSize;\n        uv[1] = (points[k + 2] * scale[sideCoordIndex] - min[2]) / maxDimSize;\n        positionAttr.set(vertexOffset, currentPosition);\n        if (hasColor) {\n          colorAttr.set(vertexOffset, color);\n        }\n        texcoordAttr.set(vertexOffset++, uv);\n      }\n    }\n    function buildTopBottom(polygon, y, insideOffset) {\n      var startVertexOffset = vertexOffset;\n      addVertices(polygon, y, insideOffset);\n      var len = polygon.indices.length;\n      for (var k = 0; k < len; k++) {\n        indices[triangleOffset * 3 + k] = polygon.indices[k] + startVertexOffset;\n      }\n      triangleOffset += polygon.indices.length / 3;\n    }\n    var normalTop = this.extrudeY ? [0, 1, 0] : [0, 0, 1];\n    var normalBottom = vec3.negate([], normalTop);\n    for (var p = 0; p < polygons.length; p++) {\n      var startVertexOffset = vertexOffset;\n      var polygon = polygons[p]; // BOTTOM\n\n      buildTopBottom(polygon, 0, 0); // TOP\n\n      buildTopBottom(polygon, regionHeight, 0);\n      var ringVertexCount = polygon.points.length / 3;\n      for (var v = 0; v < ringVertexCount; v++) {\n        normalAttr.set(startVertexOffset + v, normalBottom);\n        normalAttr.set(startVertexOffset + v + ringVertexCount, normalTop);\n      }\n      var quadToTriangle = [0, 3, 1, 1, 3, 2];\n      var quadPos = [[], [], [], []];\n      var a = [];\n      var b = [];\n      var normal = [];\n      var uv = [];\n      var len = 0;\n      for (var v = 0; v < ringVertexCount; v++) {\n        var next = (v + 1) % ringVertexCount;\n        var dx = (polygon.points[next * 3] - polygon.points[v * 3]) * scale[0];\n        var dy = (polygon.points[next * 3 + 2] - polygon.points[v * 3 + 2]) * scale[sideCoordIndex];\n        var sideLen = Math.sqrt(dx * dx + dy * dy); // 0----1\n        // 3----2\n\n        for (var k = 0; k < 4; k++) {\n          var isCurrent = k === 0 || k === 3;\n          var idx3 = (isCurrent ? v : next) * 3;\n          quadPos[k][0] = polygon.points[idx3];\n          quadPos[k][extrudeCoordIndex] = k > 1 ? regionHeight : 0;\n          quadPos[k][sideCoordIndex] = polygon.points[idx3 + 2];\n          positionAttr.set(vertexOffset + k, quadPos[k]);\n          if (projectUVOnGround) {\n            uv[0] = (polygon.points[idx3] * scale[0] - min[0]) / maxDimSize;\n            uv[1] = (polygon.points[idx3 + 2] * scale[sideCoordIndex] - min[sideCoordIndex]) / maxDimSize;\n          } else {\n            uv[0] = (isCurrent ? len : len + sideLen) / maxDimSize;\n            uv[1] = (quadPos[k][extrudeCoordIndex] * scale[extrudeCoordIndex] - min[extrudeCoordIndex]) / maxDimSize;\n          }\n          texcoordAttr.set(vertexOffset + k, uv);\n        }\n        vec3.sub(a, quadPos[1], quadPos[0]);\n        vec3.sub(b, quadPos[3], quadPos[0]);\n        vec3.cross(normal, a, b);\n        vec3.normalize(normal, normal);\n        for (var k = 0; k < 4; k++) {\n          normalAttr.set(vertexOffset + k, normal);\n          if (hasColor) {\n            colorAttr.set(vertexOffset + k, color);\n          }\n        }\n        for (var k = 0; k < 6; k++) {\n          indices[triangleOffset * 3 + k] = quadToTriangle[k] + vertexOffset;\n        }\n        vertexOffset += 4;\n        triangleOffset += 2;\n        len += sideLen;\n      }\n    }\n    geometry.dirty();\n    return {\n      vertexOffset: vertexOffset,\n      triangleOffset: triangleOffset\n    };\n  },\n  _getRegionLinesInfo: function (idx, componentModel, geometry) {\n    var vertexCount = 0;\n    var triangleCount = 0;\n    var regionModel = componentModel.getRegionModel(idx);\n    var itemStyleModel = regionModel.getModel('itemStyle');\n    var lineWidth = itemStyleModel.get('borderWidth');\n    if (lineWidth > 0) {\n      var polygonCoords = componentModel.getRegionPolygonCoords(idx);\n      polygonCoords.forEach(function (coords) {\n        var exterior = coords.exterior;\n        var interiors = coords.interiors;\n        vertexCount += geometry.getPolylineVertexCount(exterior);\n        triangleCount += geometry.getPolylineTriangleCount(exterior);\n        for (var i = 0; i < interiors.length; i++) {\n          vertexCount += geometry.getPolylineVertexCount(interiors[i]);\n          triangleCount += geometry.getPolylineTriangleCount(interiors[i]);\n        }\n      }, this);\n    }\n    return {\n      vertexCount: vertexCount,\n      triangleCount: triangleCount\n    };\n  },\n  _updateLinesGeometry: function (geometry, componentModel, dataIndex, regionHeight, lineWidth, transform) {\n    function convertToPoints3(polygon) {\n      var points = new Float64Array(polygon.length * 3);\n      var offset = 0;\n      var pos = [];\n      for (var i = 0; i < polygon.length; i++) {\n        pos[0] = polygon[i][0]; // Add a offset to avoid z-fighting\n\n        pos[1] = regionHeight + 0.1;\n        pos[2] = polygon[i][1];\n        if (transform) {\n          vec3.transformMat4(pos, pos, transform);\n        }\n        points[offset++] = pos[0];\n        points[offset++] = pos[1];\n        points[offset++] = pos[2];\n      }\n      return points;\n    }\n    var whiteColor = [1, 1, 1, 1];\n    var coords = componentModel.getRegionPolygonCoords(dataIndex);\n    coords.forEach(function (geo) {\n      var exterior = geo.exterior;\n      var interiors = geo.interiors;\n      geometry.addPolyline(convertToPoints3(exterior), whiteColor, lineWidth);\n      for (var i = 0; i < interiors.length; i++) {\n        geometry.addPolyline(convertToPoints3(interiors[i]), whiteColor, lineWidth);\n      }\n    });\n  },\n  highlight: function (dataIndex) {\n    var data = this._data;\n    if (!data) {\n      return;\n    }\n    var itemModel = data.getItemModel(dataIndex);\n    var emphasisItemStyleModel = itemModel.getModel(['emphasis', 'itemStyle']);\n    var emphasisColor = emphasisItemStyleModel.get('color');\n    var emphasisOpacity = retrieve.firstNotNull(emphasisItemStyleModel.get('opacity'), getItemVisualOpacity(data, dataIndex), 1);\n    if (emphasisColor == null) {\n      var color = getItemVisualColor(data, dataIndex);\n      emphasisColor = echarts.color.lift(color, -0.4);\n    }\n    if (emphasisOpacity == null) {\n      emphasisOpacity = getItemVisualOpacity(data, dataIndex);\n    }\n    var colorArr = graphicGL.parseColor(emphasisColor);\n    colorArr[3] *= emphasisOpacity;\n    this._setColorOfDataIndex(data, dataIndex, colorArr);\n  },\n  downplay: function (dataIndex) {\n    var data = this._data;\n    if (!data) {\n      return;\n    }\n    var itemStyleModel = data.getItemModel(dataIndex);\n    var color = retrieve.firstNotNull(getItemVisualColor(data, dataIndex), itemStyleModel.get(['itemStyle', 'color']), '#fff');\n    var opacity = retrieve.firstNotNull(getItemVisualOpacity(data, dataIndex), itemStyleModel.get(['itemStyle', 'opacity']), 1);\n    var colorArr = graphicGL.parseColor(color);\n    colorArr[3] *= opacity;\n    this._setColorOfDataIndex(data, dataIndex, colorArr);\n  },\n  dispose: function () {\n    this._labelsBuilder.dispose();\n  },\n  _setColorOfDataIndex: function (data, dataIndex, colorArr) {\n    if (dataIndex < this._startIndex && dataIndex > this._endIndex) {\n      return;\n    }\n    dataIndex -= this._startIndex;\n    for (var i = this._vertexRangeOfDataIndex[dataIndex * 2]; i < this._vertexRangeOfDataIndex[dataIndex * 2 + 1]; i++) {\n      this._polygonMesh.geometry.attributes.color.set(i, colorArr);\n    }\n    this._polygonMesh.geometry.dirty();\n    this._api.getZr().refresh();\n  }\n};\nexport default Geo3DBuilder;","map":{"version":3,"names":["echarts","graphicGL","earcut","LinesGeo","retrieve","glmatrix","trianglesSortMixin","LabelsBuilder","lines3DGLSL","getItemVisualColor","getItemVisualOpacity","vec3","Shader","import","Geo3DBuilder","api","rootNode","Node","_triangulationResults","_shadersMap","COMMON_SHADERS","filter","shaderName","reduce","obj","createShader","_linesShader","groundMaterials","forEach","shading","Material","shader","_groundMaterials","_groundMesh","Mesh","geometry","PlaneGeometry","dynamic","castShadow","renderNormal","$ignorePicking","rotation","rotateX","Math","PI","_labelsBuilder","getMesh","renderOrder","material","depthTest","add","_initMeshes","_api","prototype","constructor","extrudeY","update","componentModel","ecModel","start","end","data","getData","count","_startIndex","_endIndex","_triangulation","_getShader","get","_prepareMesh","updateWorldTransform","_updateRegionMesh","coordSys","coordinateSystem","type","_updateGroundPlane","self","updateData","getLabelPosition","dataIndex","positionDesc","distance","name","getName","center","height","region","getRegion","NaN","getCenter","pos","dataToPoint","tmp","max","min","_data","updateLabels","_updateDebugWireframe","_lastHoverDataIndex","createPolygonMesh","mesh","lambert","Geometry","sortTriangles","culling","ignorePicking","Object","assign","polygonMesh","linesMesh","useNativeLine","define","_polygonMesh","_linesMesh","process","env","NODE_ENV","console","warn","__shading","polygonVertexCount","polygonTriangleCount","linesVertexCount","linesTriangleCount","idx","polyInfo","_getRegionPolygonInfo","lineInfo","_getRegionLinesInfo","vertexCount","triangleCount","polygonGeo","attrName","attributes","init","indices","Uint32Array","Uint16Array","attachShader","setMaterialFromModel","resetOffset","setVertexCount","setTriangleCount","_dataIndexOfVertex","_vertexRangeOfDataIndex","vertexOffset","triangleOffset","hasTranparentRegion","regionModel","getRegionModel","itemStyleModel","getModel","color","firstNotNull","opacity","colorArr","parseColor","borderColorArr","isTransparent","set","regionHeight","newOffsets","_updatePolygonGeometry","i","lineWidth","hasLine","getDevicePixelRatio","_updateLinesGeometry","transform","invisible","transparent","depthMask","updateBoundingBox","frontFace","CCW","CW","generateTangents","seriesIndex","on","_onmousemove","_onmouseout","debugWireframeModel","width","generateBarycentric","e","triangle","downplay","highlight","target","geo3D","groundModel","scale","size","minAll","Infinity","maxAll","polygons","polygonCoords","getRegionPolygonCoords","length","exterior","interiors","points","holes","offset","j","p","startIdx","k","push","triangles","points3","Float64Array","off3","transformMat4","_geoBoundingBox","sideVertexCount","sideTriangleCount","projectUVOnGround","positionAttr","position","normalAttr","normal","texcoordAttr","texcoord0","colorAttr","hasColor","value","extrudeCoordIndex","sideCoordIndex","worldTransform","x","len","y","z","mul","maxDimSize","addVertices","polygon","insideOffset","pointsLen","currentPosition","uv","buildTopBottom","startVertexOffset","normalTop","normalBottom","negate","ringVertexCount","v","quadToTriangle","quadPos","a","b","next","dx","dy","sideLen","sqrt","isCurrent","idx3","sub","cross","normalize","dirty","coords","getPolylineVertexCount","getPolylineTriangleCount","convertToPoints3","whiteColor","geo","addPolyline","itemModel","getItemModel","emphasisItemStyleModel","emphasisColor","emphasisOpacity","lift","_setColorOfDataIndex","dispose","getZr","refresh"],"sources":["E:/QuestionairePlanet_Fronted/mytest/node_modules/echarts-gl/lib/component/common/Geo3DBuilder.js"],"sourcesContent":["import * as echarts from 'echarts/lib/echarts';\nimport graphicGL from '../../util/graphicGL';\nimport earcut from '../../util/earcut';\nimport LinesGeo from '../../util/geometry/Lines3D';\nimport retrieve from '../../util/retrieve';\nimport glmatrix from 'claygl/src/dep/glmatrix';\nimport trianglesSortMixin from '../../util/geometry/trianglesSortMixin';\nimport LabelsBuilder from './LabelsBuilder';\nimport lines3DGLSL from '../../util/shader/lines3D.glsl.js';\nimport { getItemVisualColor, getItemVisualOpacity } from '../../util/visual';\nvar vec3 = glmatrix.vec3;\ngraphicGL.Shader.import(lines3DGLSL);\n\nfunction Geo3DBuilder(api) {\n  this.rootNode = new graphicGL.Node(); // Cache triangulation result\n\n  this._triangulationResults = {};\n  this._shadersMap = graphicGL.COMMON_SHADERS.filter(function (shaderName) {\n    return shaderName !== 'shadow';\n  }).reduce(function (obj, shaderName) {\n    obj[shaderName] = graphicGL.createShader('ecgl.' + shaderName);\n    return obj;\n  }, {});\n  this._linesShader = graphicGL.createShader('ecgl.meshLines3D');\n  var groundMaterials = {};\n  graphicGL.COMMON_SHADERS.forEach(function (shading) {\n    groundMaterials[shading] = new graphicGL.Material({\n      shader: graphicGL.createShader('ecgl.' + shading)\n    });\n  });\n  this._groundMaterials = groundMaterials;\n  this._groundMesh = new graphicGL.Mesh({\n    geometry: new graphicGL.PlaneGeometry({\n      dynamic: true\n    }),\n    castShadow: false,\n    renderNormal: true,\n    $ignorePicking: true\n  });\n\n  this._groundMesh.rotation.rotateX(-Math.PI / 2);\n\n  this._labelsBuilder = new LabelsBuilder(512, 512, api); // Give a large render order.\n\n  this._labelsBuilder.getMesh().renderOrder = 100;\n  this._labelsBuilder.getMesh().material.depthTest = false;\n  this.rootNode.add(this._labelsBuilder.getMesh());\n\n  this._initMeshes();\n\n  this._api = api;\n}\n\nGeo3DBuilder.prototype = {\n  constructor: Geo3DBuilder,\n  // Which dimension to extrude. Y or Z\n  extrudeY: true,\n  update: function (componentModel, ecModel, api, start, end) {\n    var data = componentModel.getData();\n\n    if (start == null) {\n      start = 0;\n    }\n\n    if (end == null) {\n      end = data.count();\n    }\n\n    this._startIndex = start;\n    this._endIndex = end - 1;\n\n    this._triangulation(componentModel, start, end);\n\n    var shader = this._getShader(componentModel.get('shading'));\n\n    this._prepareMesh(componentModel, shader, api, start, end);\n\n    this.rootNode.updateWorldTransform();\n\n    this._updateRegionMesh(componentModel, api, start, end);\n\n    var coordSys = componentModel.coordinateSystem; // PENDING\n\n    if (coordSys.type === 'geo3D') {\n      this._updateGroundPlane(componentModel, coordSys, api);\n    }\n\n    var self = this;\n\n    this._labelsBuilder.updateData(data, start, end);\n\n    this._labelsBuilder.getLabelPosition = function (dataIndex, positionDesc, distance) {\n      var name = data.getName(dataIndex);\n      var center;\n      var height = distance;\n\n      if (coordSys.type === 'geo3D') {\n        var region = coordSys.getRegion(name);\n\n        if (!region) {\n          return [NaN, NaN, NaN];\n        }\n\n        center = region.getCenter();\n        var pos = coordSys.dataToPoint([center[0], center[1], height]);\n        return pos;\n      } else {\n        var tmp = self._triangulationResults[dataIndex - self._startIndex];\n        var center = self.extrudeY ? [(tmp.max[0] + tmp.min[0]) / 2, tmp.max[1] + height, (tmp.max[2] + tmp.min[2]) / 2] : [(tmp.max[0] + tmp.min[0]) / 2, (tmp.max[1] + tmp.min[1]) / 2, tmp.max[2] + height];\n      }\n    };\n\n    this._data = data;\n\n    this._labelsBuilder.updateLabels();\n\n    this._updateDebugWireframe(componentModel); // Reset some state.\n\n\n    this._lastHoverDataIndex = 0;\n  },\n  _initMeshes: function () {\n    var self = this;\n\n    function createPolygonMesh() {\n      var mesh = new graphicGL.Mesh({\n        name: 'Polygon',\n        material: new graphicGL.Material({\n          shader: self._shadersMap.lambert\n        }),\n        geometry: new graphicGL.Geometry({\n          sortTriangles: true,\n          dynamic: true\n        }),\n        // TODO Disable culling\n        culling: false,\n        ignorePicking: true,\n        // Render normal in normal pass\n        renderNormal: true\n      });\n      Object.assign(mesh.geometry, trianglesSortMixin);\n      return mesh;\n    }\n\n    var polygonMesh = createPolygonMesh();\n    var linesMesh = new graphicGL.Mesh({\n      material: new graphicGL.Material({\n        shader: this._linesShader\n      }),\n      castShadow: false,\n      ignorePicking: true,\n      $ignorePicking: true,\n      geometry: new LinesGeo({\n        useNativeLine: false\n      })\n    });\n    this.rootNode.add(polygonMesh);\n    this.rootNode.add(linesMesh);\n    polygonMesh.material.define('both', 'VERTEX_COLOR');\n    polygonMesh.material.define('fragment', 'DOUBLE_SIDED');\n    this._polygonMesh = polygonMesh;\n    this._linesMesh = linesMesh;\n    this.rootNode.add(this._groundMesh);\n  },\n  _getShader: function (shading) {\n    var shader = this._shadersMap[shading];\n\n    if (!shader) {\n      if (process.env.NODE_ENV !== 'production') {\n        console.warn('Unkown shading ' + shading);\n      } // Default use lambert shader.\n\n\n      shader = this._shadersMap.lambert;\n    }\n\n    shader.__shading = shading;\n    return shader;\n  },\n  _prepareMesh: function (componentModel, shader, api, start, end) {\n    var polygonVertexCount = 0;\n    var polygonTriangleCount = 0;\n    var linesVertexCount = 0;\n    var linesTriangleCount = 0; // TODO Lines\n\n    for (var idx = start; idx < end; idx++) {\n      var polyInfo = this._getRegionPolygonInfo(idx);\n\n      var lineInfo = this._getRegionLinesInfo(idx, componentModel, this._linesMesh.geometry);\n\n      polygonVertexCount += polyInfo.vertexCount;\n      polygonTriangleCount += polyInfo.triangleCount;\n      linesVertexCount += lineInfo.vertexCount;\n      linesTriangleCount += lineInfo.triangleCount;\n    }\n\n    var polygonMesh = this._polygonMesh;\n    var polygonGeo = polygonMesh.geometry;\n    ['position', 'normal', 'texcoord0', 'color'].forEach(function (attrName) {\n      polygonGeo.attributes[attrName].init(polygonVertexCount);\n    });\n    polygonGeo.indices = polygonVertexCount > 0xffff ? new Uint32Array(polygonTriangleCount * 3) : new Uint16Array(polygonTriangleCount * 3);\n\n    if (polygonMesh.material.shader !== shader) {\n      polygonMesh.material.attachShader(shader, true);\n    }\n\n    graphicGL.setMaterialFromModel(shader.__shading, polygonMesh.material, componentModel, api);\n\n    if (linesVertexCount > 0) {\n      this._linesMesh.geometry.resetOffset();\n\n      this._linesMesh.geometry.setVertexCount(linesVertexCount);\n\n      this._linesMesh.geometry.setTriangleCount(linesTriangleCount);\n    } // Indexing data index from vertex index.\n\n\n    this._dataIndexOfVertex = new Uint32Array(polygonVertexCount); // Indexing vertex index range from data index\n\n    this._vertexRangeOfDataIndex = new Uint32Array((end - start) * 2);\n  },\n  _updateRegionMesh: function (componentModel, api, start, end) {\n    var data = componentModel.getData();\n    var vertexOffset = 0;\n    var triangleOffset = 0; // Materials configurations.\n\n    var hasTranparentRegion = false;\n    var polygonMesh = this._polygonMesh;\n    var linesMesh = this._linesMesh;\n\n    for (var dataIndex = start; dataIndex < end; dataIndex++) {\n      // Get bunch of visual properties.\n      var regionModel = componentModel.getRegionModel(dataIndex);\n      var itemStyleModel = regionModel.getModel('itemStyle');\n      var color = retrieve.firstNotNull(getItemVisualColor(data, dataIndex), itemStyleModel.get('color'), '#fff');\n      var opacity = retrieve.firstNotNull(getItemVisualOpacity(data, dataIndex), itemStyleModel.get('opacity'), 1);\n      var colorArr = graphicGL.parseColor(color);\n      var borderColorArr = graphicGL.parseColor(itemStyleModel.get('borderColor'));\n      colorArr[3] *= opacity;\n      borderColorArr[3] *= opacity;\n      var isTransparent = colorArr[3] < 0.99;\n      polygonMesh.material.set('color', [1, 1, 1, 1]);\n      hasTranparentRegion = hasTranparentRegion || isTransparent;\n      var regionHeight = retrieve.firstNotNull(regionModel.get('height', true), componentModel.get('regionHeight'));\n\n      var newOffsets = this._updatePolygonGeometry(componentModel, polygonMesh.geometry, dataIndex, regionHeight, vertexOffset, triangleOffset, colorArr);\n\n      for (var i = vertexOffset; i < newOffsets.vertexOffset; i++) {\n        this._dataIndexOfVertex[i] = dataIndex;\n      }\n\n      this._vertexRangeOfDataIndex[(dataIndex - start) * 2] = vertexOffset;\n      this._vertexRangeOfDataIndex[(dataIndex - start) * 2 + 1] = newOffsets.vertexOffset;\n      vertexOffset = newOffsets.vertexOffset;\n      triangleOffset = newOffsets.triangleOffset; // Update lines.\n\n      var lineWidth = itemStyleModel.get('borderWidth');\n      var hasLine = lineWidth > 0;\n\n      if (hasLine) {\n        lineWidth *= api.getDevicePixelRatio();\n\n        this._updateLinesGeometry(linesMesh.geometry, componentModel, dataIndex, regionHeight, lineWidth, componentModel.coordinateSystem.transform);\n      }\n\n      linesMesh.invisible = !hasLine;\n      linesMesh.material.set({\n        color: borderColorArr\n      });\n    }\n\n    var polygonMesh = this._polygonMesh;\n    polygonMesh.material.transparent = hasTranparentRegion;\n    polygonMesh.material.depthMask = !hasTranparentRegion;\n    polygonMesh.geometry.updateBoundingBox();\n    polygonMesh.frontFace = this.extrudeY ? graphicGL.Mesh.CCW : graphicGL.Mesh.CW; // Update tangents\n\n    if (polygonMesh.material.get('normalMap')) {\n      polygonMesh.geometry.generateTangents();\n    }\n\n    polygonMesh.seriesIndex = componentModel.seriesIndex;\n    polygonMesh.on('mousemove', this._onmousemove, this);\n    polygonMesh.on('mouseout', this._onmouseout, this);\n  },\n  _updateDebugWireframe: function (componentModel) {\n    var debugWireframeModel = componentModel.getModel('debug.wireframe'); // TODO Unshow\n\n    if (debugWireframeModel.get('show')) {\n      var color = graphicGL.parseColor(debugWireframeModel.get('lineStyle.color') || 'rgba(0,0,0,0.5)');\n      var width = retrieve.firstNotNull(debugWireframeModel.get('lineStyle.width'), 1); // TODO  Will cause highlight wrong\n\n      var mesh = this._polygonMesh;\n      mesh.geometry.generateBarycentric();\n      mesh.material.define('both', 'WIREFRAME_TRIANGLE');\n      mesh.material.set('wireframeLineColor', color);\n      mesh.material.set('wireframeLineWidth', width);\n    }\n  },\n  _onmousemove: function (e) {\n    var dataIndex = this._dataIndexOfVertex[e.triangle[0]];\n\n    if (dataIndex == null) {\n      dataIndex = -1;\n    }\n\n    if (dataIndex !== this._lastHoverDataIndex) {\n      this.downplay(this._lastHoverDataIndex);\n      this.highlight(dataIndex);\n\n      this._labelsBuilder.updateLabels([dataIndex]);\n    }\n\n    this._lastHoverDataIndex = dataIndex;\n    this._polygonMesh.dataIndex = dataIndex;\n  },\n  _onmouseout: function (e) {\n    if (e.target) {\n      this.downplay(this._lastHoverDataIndex);\n      this._lastHoverDataIndex = -1;\n      this._polygonMesh.dataIndex = -1;\n    }\n\n    this._labelsBuilder.updateLabels([]);\n  },\n  _updateGroundPlane: function (componentModel, geo3D, api) {\n    var groundModel = componentModel.getModel('groundPlane', componentModel);\n    this._groundMesh.invisible = !groundModel.get('show', true);\n\n    if (this._groundMesh.invisible) {\n      return;\n    }\n\n    var shading = componentModel.get('shading');\n    var material = this._groundMaterials[shading];\n\n    if (!material) {\n      if (process.env.NODE_ENV !== 'production') {\n        console.warn('Unkown shading ' + shading);\n      }\n\n      material = this._groundMaterials.lambert;\n    }\n\n    graphicGL.setMaterialFromModel(shading, material, groundModel, api);\n\n    if (material.get('normalMap')) {\n      this._groundMesh.geometry.generateTangents();\n    }\n\n    this._groundMesh.material = material;\n\n    this._groundMesh.material.set('color', graphicGL.parseColor(groundModel.get('color')));\n\n    this._groundMesh.scale.set(geo3D.size[0], geo3D.size[2], 1);\n  },\n  _triangulation: function (componentModel, start, end) {\n    this._triangulationResults = [];\n    var minAll = [Infinity, Infinity, Infinity];\n    var maxAll = [-Infinity, -Infinity, -Infinity];\n    var coordSys = componentModel.coordinateSystem;\n\n    for (var idx = start; idx < end; idx++) {\n      var polygons = [];\n      var polygonCoords = componentModel.getRegionPolygonCoords(idx);\n\n      for (var i = 0; i < polygonCoords.length; i++) {\n        var exterior = polygonCoords[i].exterior;\n        var interiors = polygonCoords[i].interiors;\n        var points = [];\n        var holes = [];\n\n        if (exterior.length < 3) {\n          continue;\n        }\n\n        var offset = 0;\n\n        for (var j = 0; j < exterior.length; j++) {\n          var p = exterior[j];\n          points[offset++] = p[0];\n          points[offset++] = p[1];\n        }\n\n        for (var j = 0; j < interiors.length; j++) {\n          if (interiors[j].length < 3) {\n            continue;\n          }\n\n          var startIdx = points.length / 2;\n\n          for (var k = 0; k < interiors[j].length; k++) {\n            var p = interiors[j][k];\n            points.push(p[0]);\n            points.push(p[1]);\n          }\n\n          holes.push(startIdx);\n        }\n\n        var triangles = earcut(points, holes);\n        var points3 = new Float64Array(points.length / 2 * 3);\n        var pos = [];\n        var min = [Infinity, Infinity, Infinity];\n        var max = [-Infinity, -Infinity, -Infinity];\n        var off3 = 0;\n\n        for (var j = 0; j < points.length;) {\n          vec3.set(pos, points[j++], 0, points[j++]);\n\n          if (coordSys && coordSys.transform) {\n            vec3.transformMat4(pos, pos, coordSys.transform);\n          }\n\n          vec3.min(min, min, pos);\n          vec3.max(max, max, pos);\n          points3[off3++] = pos[0];\n          points3[off3++] = pos[1];\n          points3[off3++] = pos[2];\n        }\n\n        vec3.min(minAll, minAll, min);\n        vec3.max(maxAll, maxAll, max);\n        polygons.push({\n          points: points3,\n          indices: triangles,\n          min: min,\n          max: max\n        });\n      }\n\n      this._triangulationResults.push(polygons);\n    }\n\n    this._geoBoundingBox = [minAll, maxAll];\n  },\n\n  /**\n   * Get region vertex and triangle count\n   */\n  _getRegionPolygonInfo: function (idx) {\n    var polygons = this._triangulationResults[idx - this._startIndex];\n    var sideVertexCount = 0;\n    var sideTriangleCount = 0;\n\n    for (var i = 0; i < polygons.length; i++) {\n      sideVertexCount += polygons[i].points.length / 3;\n      sideTriangleCount += polygons[i].indices.length / 3;\n    }\n\n    var vertexCount = sideVertexCount * 2 + sideVertexCount * 4;\n    var triangleCount = sideTriangleCount * 2 + sideVertexCount * 2;\n    return {\n      vertexCount: vertexCount,\n      triangleCount: triangleCount\n    };\n  },\n  _updatePolygonGeometry: function (componentModel, geometry, dataIndex, regionHeight, vertexOffset, triangleOffset, color) {\n    // FIXME\n    var projectUVOnGround = componentModel.get('projectUVOnGround');\n    var positionAttr = geometry.attributes.position;\n    var normalAttr = geometry.attributes.normal;\n    var texcoordAttr = geometry.attributes.texcoord0;\n    var colorAttr = geometry.attributes.color;\n    var polygons = this._triangulationResults[dataIndex - this._startIndex];\n    var hasColor = colorAttr.value && color;\n    var indices = geometry.indices;\n    var extrudeCoordIndex = this.extrudeY ? 1 : 2;\n    var sideCoordIndex = this.extrudeY ? 2 : 1;\n    var scale = [this.rootNode.worldTransform.x.len(), this.rootNode.worldTransform.y.len(), this.rootNode.worldTransform.z.len()];\n    var min = vec3.mul([], this._geoBoundingBox[0], scale);\n    var max = vec3.mul([], this._geoBoundingBox[1], scale);\n    var maxDimSize = Math.max(max[0] - min[0], max[2] - min[2]);\n\n    function addVertices(polygon, y, insideOffset) {\n      var points = polygon.points;\n      var pointsLen = points.length;\n      var currentPosition = [];\n      var uv = [];\n\n      for (var k = 0; k < pointsLen; k += 3) {\n        currentPosition[0] = points[k];\n        currentPosition[extrudeCoordIndex] = y;\n        currentPosition[sideCoordIndex] = points[k + 2];\n        uv[0] = (points[k] * scale[0] - min[0]) / maxDimSize;\n        uv[1] = (points[k + 2] * scale[sideCoordIndex] - min[2]) / maxDimSize;\n        positionAttr.set(vertexOffset, currentPosition);\n\n        if (hasColor) {\n          colorAttr.set(vertexOffset, color);\n        }\n\n        texcoordAttr.set(vertexOffset++, uv);\n      }\n    }\n\n    function buildTopBottom(polygon, y, insideOffset) {\n      var startVertexOffset = vertexOffset;\n      addVertices(polygon, y, insideOffset);\n      var len = polygon.indices.length;\n\n      for (var k = 0; k < len; k++) {\n        indices[triangleOffset * 3 + k] = polygon.indices[k] + startVertexOffset;\n      }\n\n      triangleOffset += polygon.indices.length / 3;\n    }\n\n    var normalTop = this.extrudeY ? [0, 1, 0] : [0, 0, 1];\n    var normalBottom = vec3.negate([], normalTop);\n\n    for (var p = 0; p < polygons.length; p++) {\n      var startVertexOffset = vertexOffset;\n      var polygon = polygons[p]; // BOTTOM\n\n      buildTopBottom(polygon, 0, 0); // TOP\n\n      buildTopBottom(polygon, regionHeight, 0);\n      var ringVertexCount = polygon.points.length / 3;\n\n      for (var v = 0; v < ringVertexCount; v++) {\n        normalAttr.set(startVertexOffset + v, normalBottom);\n        normalAttr.set(startVertexOffset + v + ringVertexCount, normalTop);\n      }\n\n      var quadToTriangle = [0, 3, 1, 1, 3, 2];\n      var quadPos = [[], [], [], []];\n      var a = [];\n      var b = [];\n      var normal = [];\n      var uv = [];\n      var len = 0;\n\n      for (var v = 0; v < ringVertexCount; v++) {\n        var next = (v + 1) % ringVertexCount;\n        var dx = (polygon.points[next * 3] - polygon.points[v * 3]) * scale[0];\n        var dy = (polygon.points[next * 3 + 2] - polygon.points[v * 3 + 2]) * scale[sideCoordIndex];\n        var sideLen = Math.sqrt(dx * dx + dy * dy); // 0----1\n        // 3----2\n\n        for (var k = 0; k < 4; k++) {\n          var isCurrent = k === 0 || k === 3;\n          var idx3 = (isCurrent ? v : next) * 3;\n          quadPos[k][0] = polygon.points[idx3];\n          quadPos[k][extrudeCoordIndex] = k > 1 ? regionHeight : 0;\n          quadPos[k][sideCoordIndex] = polygon.points[idx3 + 2];\n          positionAttr.set(vertexOffset + k, quadPos[k]);\n\n          if (projectUVOnGround) {\n            uv[0] = (polygon.points[idx3] * scale[0] - min[0]) / maxDimSize;\n            uv[1] = (polygon.points[idx3 + 2] * scale[sideCoordIndex] - min[sideCoordIndex]) / maxDimSize;\n          } else {\n            uv[0] = (isCurrent ? len : len + sideLen) / maxDimSize;\n            uv[1] = (quadPos[k][extrudeCoordIndex] * scale[extrudeCoordIndex] - min[extrudeCoordIndex]) / maxDimSize;\n          }\n\n          texcoordAttr.set(vertexOffset + k, uv);\n        }\n\n        vec3.sub(a, quadPos[1], quadPos[0]);\n        vec3.sub(b, quadPos[3], quadPos[0]);\n        vec3.cross(normal, a, b);\n        vec3.normalize(normal, normal);\n\n        for (var k = 0; k < 4; k++) {\n          normalAttr.set(vertexOffset + k, normal);\n\n          if (hasColor) {\n            colorAttr.set(vertexOffset + k, color);\n          }\n        }\n\n        for (var k = 0; k < 6; k++) {\n          indices[triangleOffset * 3 + k] = quadToTriangle[k] + vertexOffset;\n        }\n\n        vertexOffset += 4;\n        triangleOffset += 2;\n        len += sideLen;\n      }\n    }\n\n    geometry.dirty();\n    return {\n      vertexOffset: vertexOffset,\n      triangleOffset: triangleOffset\n    };\n  },\n  _getRegionLinesInfo: function (idx, componentModel, geometry) {\n    var vertexCount = 0;\n    var triangleCount = 0;\n    var regionModel = componentModel.getRegionModel(idx);\n    var itemStyleModel = regionModel.getModel('itemStyle');\n    var lineWidth = itemStyleModel.get('borderWidth');\n\n    if (lineWidth > 0) {\n      var polygonCoords = componentModel.getRegionPolygonCoords(idx);\n      polygonCoords.forEach(function (coords) {\n        var exterior = coords.exterior;\n        var interiors = coords.interiors;\n        vertexCount += geometry.getPolylineVertexCount(exterior);\n        triangleCount += geometry.getPolylineTriangleCount(exterior);\n\n        for (var i = 0; i < interiors.length; i++) {\n          vertexCount += geometry.getPolylineVertexCount(interiors[i]);\n          triangleCount += geometry.getPolylineTriangleCount(interiors[i]);\n        }\n      }, this);\n    }\n\n    return {\n      vertexCount: vertexCount,\n      triangleCount: triangleCount\n    };\n  },\n  _updateLinesGeometry: function (geometry, componentModel, dataIndex, regionHeight, lineWidth, transform) {\n    function convertToPoints3(polygon) {\n      var points = new Float64Array(polygon.length * 3);\n      var offset = 0;\n      var pos = [];\n\n      for (var i = 0; i < polygon.length; i++) {\n        pos[0] = polygon[i][0]; // Add a offset to avoid z-fighting\n\n        pos[1] = regionHeight + 0.1;\n        pos[2] = polygon[i][1];\n\n        if (transform) {\n          vec3.transformMat4(pos, pos, transform);\n        }\n\n        points[offset++] = pos[0];\n        points[offset++] = pos[1];\n        points[offset++] = pos[2];\n      }\n\n      return points;\n    }\n\n    var whiteColor = [1, 1, 1, 1];\n    var coords = componentModel.getRegionPolygonCoords(dataIndex);\n    coords.forEach(function (geo) {\n      var exterior = geo.exterior;\n      var interiors = geo.interiors;\n      geometry.addPolyline(convertToPoints3(exterior), whiteColor, lineWidth);\n\n      for (var i = 0; i < interiors.length; i++) {\n        geometry.addPolyline(convertToPoints3(interiors[i]), whiteColor, lineWidth);\n      }\n    });\n  },\n  highlight: function (dataIndex) {\n    var data = this._data;\n\n    if (!data) {\n      return;\n    }\n\n    var itemModel = data.getItemModel(dataIndex);\n    var emphasisItemStyleModel = itemModel.getModel(['emphasis', 'itemStyle']);\n    var emphasisColor = emphasisItemStyleModel.get('color');\n    var emphasisOpacity = retrieve.firstNotNull(emphasisItemStyleModel.get('opacity'), getItemVisualOpacity(data, dataIndex), 1);\n\n    if (emphasisColor == null) {\n      var color = getItemVisualColor(data, dataIndex);\n      emphasisColor = echarts.color.lift(color, -0.4);\n    }\n\n    if (emphasisOpacity == null) {\n      emphasisOpacity = getItemVisualOpacity(data, dataIndex);\n    }\n\n    var colorArr = graphicGL.parseColor(emphasisColor);\n    colorArr[3] *= emphasisOpacity;\n\n    this._setColorOfDataIndex(data, dataIndex, colorArr);\n  },\n  downplay: function (dataIndex) {\n    var data = this._data;\n\n    if (!data) {\n      return;\n    }\n\n    var itemStyleModel = data.getItemModel(dataIndex);\n    var color = retrieve.firstNotNull(getItemVisualColor(data, dataIndex), itemStyleModel.get(['itemStyle', 'color']), '#fff');\n    var opacity = retrieve.firstNotNull(getItemVisualOpacity(data, dataIndex), itemStyleModel.get(['itemStyle', 'opacity']), 1);\n    var colorArr = graphicGL.parseColor(color);\n    colorArr[3] *= opacity;\n\n    this._setColorOfDataIndex(data, dataIndex, colorArr);\n  },\n  dispose: function () {\n    this._labelsBuilder.dispose();\n  },\n  _setColorOfDataIndex: function (data, dataIndex, colorArr) {\n    if (dataIndex < this._startIndex && dataIndex > this._endIndex) {\n      return;\n    }\n\n    dataIndex -= this._startIndex;\n\n    for (var i = this._vertexRangeOfDataIndex[dataIndex * 2]; i < this._vertexRangeOfDataIndex[dataIndex * 2 + 1]; i++) {\n      this._polygonMesh.geometry.attributes.color.set(i, colorArr);\n    }\n\n    this._polygonMesh.geometry.dirty();\n\n    this._api.getZr().refresh();\n  }\n};\nexport default Geo3DBuilder;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}