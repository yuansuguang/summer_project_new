{"ast":null,"code":"import { resolveComponent as _resolveComponent, openBlock as _openBlock, createBlock as _createBlock } from \"vue\";\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_v_chart = _resolveComponent(\"v-chart\");\n  return _openBlock(), _createBlock(_component_v_chart, {\n    ref: \"mychart1\",\n    class: \"chart\",\n    option: $setup.optionBar\n  }, null, 8 /* PROPS */, [\"option\"]);\n}","map":{"version":3,"names":["_createBlock","_component_v_chart","ref","class","option","$setup","optionBar"],"sources":["E:\\mytest\\src\\views\\qn-data\\qnExport.vue"],"sourcesContent":["<template>\r\n    <v-chart ref=\"mychart1\" class=\"chart\" :option=\"optionBar\"></v-chart>\r\n</template>\r\n \r\n<script setup>\r\n    import { ref } from 'vue'\r\n \r\n    // 渲染数\r\n    mychart1.value.setOption(renderLineOptions())\r\n \r\n    // 定义属性\r\n    const mychart1 = ref(null)\r\n    const optionBar = ref(null)\r\n \r\n    // 坐标轴及其属性定义\r\n    const renderLineOptions = () => {\r\n        return {\r\n            grid: {\r\n                left: '3%',\r\n                right: '4%',\r\n                bottom: '8%',\r\n                containLabel: true\r\n            },\r\n            xAxis: {\r\n                data: mychart1.value.chartName, // x轴的标题（定义的变量），可以是直接的数组[\"衬衫\", \"羊毛衫\", \"雪纺衫\", \"裤子\", \"高跟鞋\", \"袜子\"]\r\n                axisLabel: {\r\n                    show: true,\r\n                    textStyle: {\r\n                        fontSize: 15// 字体大小\r\n                    }\r\n                },\r\n                // axisLabel2: {\r\n                //     show: true,\r\n                // rotate: 30    // 设置x轴标签旋转角度\r\n                // }\r\n            },\r\n            yAxis: {\r\n                name: '工时/h',\r\n                nameTextStyle: {\r\n                    nameLocation: 'start'\r\n                },\r\n                axisLabel: {\r\n                    show: true,\r\n                    fontSize: 16\r\n                },\r\n                axisLine: {\r\n                    show: true, // 是否显示Y轴线\r\n                    lineStyle: {\r\n                        width: 1, // 线的大小\r\n                        type: 'solid' // Y轴线的类型\r\n                    }\r\n                }\r\n            },\r\n            series: [\r\n                {\r\n                    // 渲染的数据，可以使用 [5, 20, 36, 10, 10, 20]，也可以是定义的变量（记得赋值）\r\n                    data: mychart1.value.chartRows, \r\n                    type: 'bar',\r\n                    barWidth: '20%',\r\n                    itemStyle: {\r\n                        // 通常情况下：\r\n                        color: function (params) {\r\n                            // 每根柱子的颜色\r\n                            return mychart1.value.colorList[params.dataIndex];\r\n                        },\r\n                        offset: 6 // 偏移量\r\n                    },\r\n                    label: {\r\n                        show: true,\r\n                        position: 'top',\r\n                        fontSize: 14,\r\n                        formatter: (params) => {\r\n                            const reData = (params.data || 0).toString().replace(/(\\d)(?=(?:\\d{3}) + $)/g, '$1,')\r\n                            return reData\r\n                        }\r\n                    }\r\n                }\r\n            ]\r\n        }\r\n    }\r\n \r\n</script>"],"mappings":";;;uBACIA,YAAA,CAAoEC,kBAAA;IAA3DC,GAAG,EAAC,UAAU;IAACC,KAAK,EAAC,OAAO;IAAEC,MAAM,EAAEC,MAAA,CAAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}