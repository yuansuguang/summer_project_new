{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport Geo3D from './geo3D/Geo3D';\nimport * as echarts from 'echarts/lib/echarts';\nimport { getLayoutRect } from 'echarts/lib/util/layout';\nimport ViewGL from '../core/ViewGL';\nimport retrieve from '../util/retrieve';\nfunction resizeGeo3D(geo3DModel, api) {\n  // Use left/top/width/height\n  var boxLayoutOption = geo3DModel.getBoxLayoutParams();\n  var viewport = getLayoutRect(boxLayoutOption, {\n    width: api.getWidth(),\n    height: api.getHeight()\n  }); // Flip Y\n\n  viewport.y = api.getHeight() - viewport.y - viewport.height;\n  this.viewGL.setViewport(viewport.x, viewport.y, viewport.width, viewport.height, api.getDevicePixelRatio());\n  var geoRect = this.getGeoBoundingRect();\n  var aspect = geoRect.width / geoRect.height * (geo3DModel.get('aspectScale') || 0.75);\n  var width = geo3DModel.get('boxWidth');\n  var depth = geo3DModel.get('boxDepth');\n  var height = geo3DModel.get('boxHeight');\n  if (height == null) {\n    height = 5;\n  }\n  if (isNaN(width) && isNaN(depth)) {\n    // Default to have 100 width\n    width = 100;\n  }\n  if (isNaN(depth)) {\n    depth = width / aspect;\n  } else if (isNaN(width)) {\n    width = depth / aspect;\n  }\n  this.setSize(width, height, depth);\n  this.regionHeight = geo3DModel.get('regionHeight');\n  if (this.altitudeAxis) {\n    this.altitudeAxis.setExtent(0, Math.max(height - this.regionHeight, 0));\n  }\n}\nfunction updateGeo3D(ecModel, api) {\n  var altitudeDataExtent = [Infinity, -Infinity];\n  ecModel.eachSeries(function (seriesModel) {\n    if (seriesModel.coordinateSystem !== this) {\n      return;\n    }\n    if (seriesModel.type === 'series.map3D') {\n      return;\n    } // Get altitude data extent.\n\n    var data = seriesModel.getData();\n    var altDims = seriesModel.coordDimToDataDim('alt');\n    var altDim = altDims && altDims[0];\n    if (altDim) {\n      // TODO altitiude is in coords of lines.\n      var dataExtent = data.getDataExtent(altDim, true);\n      altitudeDataExtent[0] = Math.min(altitudeDataExtent[0], dataExtent[0]);\n      altitudeDataExtent[1] = Math.max(altitudeDataExtent[1], dataExtent[1]);\n    }\n  }, this); // Create altitude axis\n\n  if (altitudeDataExtent && isFinite(altitudeDataExtent[1] - altitudeDataExtent[0])) {\n    var scale = echarts.helper.createScale(altitudeDataExtent, {\n      type: 'value',\n      // PENDING\n      min: 'dataMin',\n      max: 'dataMax'\n    });\n    this.altitudeAxis = new echarts.Axis('altitude', scale); // Resize again\n\n    this.resize(this.model, api);\n  }\n}\nif (process.env.NODE_ENV !== 'production') {\n  var mapNotExistsError = function (name) {\n    console.error('Map ' + name + ' not exists. You can download map file on http://echarts.baidu.com/download-map.html');\n  };\n}\nvar idStart = 0;\nvar geo3DCreator = {\n  dimensions: Geo3D.prototype.dimensions,\n  create: function (ecModel, api) {\n    var geo3DList = [];\n    if (!echarts.getMap) {\n      throw new Error('geo3D component depends on geo component');\n    }\n    function createGeo3D(componentModel, idx) {\n      var geo3D = geo3DCreator.createGeo3D(componentModel); // FIXME\n\n      componentModel.__viewGL = componentModel.__viewGL || new ViewGL();\n      geo3D.viewGL = componentModel.__viewGL;\n      componentModel.coordinateSystem = geo3D;\n      geo3D.model = componentModel;\n      geo3DList.push(geo3D); // Inject resize\n\n      geo3D.resize = resizeGeo3D;\n      geo3D.resize(componentModel, api);\n      geo3D.update = updateGeo3D;\n    }\n    ecModel.eachComponent('geo3D', function (geo3DModel, idx) {\n      createGeo3D(geo3DModel, idx);\n    });\n    ecModel.eachSeriesByType('map3D', function (map3DModel, idx) {\n      var coordSys = map3DModel.get('coordinateSystem');\n      if (coordSys == null) {\n        coordSys = 'geo3D';\n      }\n      if (coordSys === 'geo3D') {\n        createGeo3D(map3DModel, idx);\n      }\n    });\n    ecModel.eachSeries(function (seriesModel) {\n      if (seriesModel.get('coordinateSystem') === 'geo3D') {\n        if (seriesModel.type === 'series.map3D') {\n          return;\n        }\n        var geo3DModel = seriesModel.getReferringComponents('geo3D').models[0];\n        if (!geo3DModel) {\n          geo3DModel = ecModel.getComponent('geo3D');\n        }\n        if (!geo3DModel) {\n          throw new Error('geo \"' + retrieve.firstNotNull(seriesModel.get('geo3DIndex'), seriesModel.get('geo3DId'), 0) + '\" not found');\n        }\n        seriesModel.coordinateSystem = geo3DModel.coordinateSystem;\n      }\n    });\n    return geo3DList;\n  },\n  createGeo3D: function (componentModel) {\n    var mapData = componentModel.get('map');\n    var name;\n    if (typeof mapData === 'string') {\n      name = mapData;\n      mapData = echarts.getMap(mapData);\n    } else {\n      if (mapData && mapData.features) {\n        mapData = {\n          geoJson: mapData\n        };\n      }\n    }\n    if (process.env.NODE_ENV !== 'production') {\n      if (!mapData) {\n        mapNotExistsError(mapData);\n      }\n      if (!mapData.geoJson.features) {\n        throw new Error('Invalid GeoJSON for map3D');\n      }\n    }\n    if (name == null) {\n      name = 'GEO_ANONYMOUS_' + idStart++;\n    }\n    return new Geo3D(name + idStart++, name, mapData && mapData.geoJson, mapData && mapData.specialAreas, componentModel.get('nameMap'));\n  }\n};\nexport default geo3DCreator;","map":{"version":3,"names":["Geo3D","echarts","getLayoutRect","ViewGL","retrieve","resizeGeo3D","geo3DModel","api","boxLayoutOption","getBoxLayoutParams","viewport","width","getWidth","height","getHeight","y","viewGL","setViewport","x","getDevicePixelRatio","geoRect","getGeoBoundingRect","aspect","get","depth","isNaN","setSize","regionHeight","altitudeAxis","setExtent","Math","max","updateGeo3D","ecModel","altitudeDataExtent","Infinity","eachSeries","seriesModel","coordinateSystem","type","data","getData","altDims","coordDimToDataDim","altDim","dataExtent","getDataExtent","min","isFinite","scale","helper","createScale","Axis","resize","model","process","env","NODE_ENV","mapNotExistsError","name","console","error","idStart","geo3DCreator","dimensions","prototype","create","geo3DList","getMap","Error","createGeo3D","componentModel","idx","geo3D","__viewGL","push","update","eachComponent","eachSeriesByType","map3DModel","coordSys","getReferringComponents","models","getComponent","firstNotNull","mapData","features","geoJson","specialAreas"],"sources":["E:/QuestionairePlanet_Fronted/mytest/node_modules/echarts-gl/lib/coord/geo3DCreator.js"],"sourcesContent":["import Geo3D from './geo3D/Geo3D';\nimport * as echarts from 'echarts/lib/echarts';\nimport { getLayoutRect } from 'echarts/lib/util/layout';\nimport ViewGL from '../core/ViewGL';\nimport retrieve from '../util/retrieve';\n\nfunction resizeGeo3D(geo3DModel, api) {\n  // Use left/top/width/height\n  var boxLayoutOption = geo3DModel.getBoxLayoutParams();\n  var viewport = getLayoutRect(boxLayoutOption, {\n    width: api.getWidth(),\n    height: api.getHeight()\n  }); // Flip Y\n\n  viewport.y = api.getHeight() - viewport.y - viewport.height;\n  this.viewGL.setViewport(viewport.x, viewport.y, viewport.width, viewport.height, api.getDevicePixelRatio());\n  var geoRect = this.getGeoBoundingRect();\n  var aspect = geoRect.width / geoRect.height * (geo3DModel.get('aspectScale') || 0.75);\n  var width = geo3DModel.get('boxWidth');\n  var depth = geo3DModel.get('boxDepth');\n  var height = geo3DModel.get('boxHeight');\n\n  if (height == null) {\n    height = 5;\n  }\n\n  if (isNaN(width) && isNaN(depth)) {\n    // Default to have 100 width\n    width = 100;\n  }\n\n  if (isNaN(depth)) {\n    depth = width / aspect;\n  } else if (isNaN(width)) {\n    width = depth / aspect;\n  }\n\n  this.setSize(width, height, depth);\n  this.regionHeight = geo3DModel.get('regionHeight');\n\n  if (this.altitudeAxis) {\n    this.altitudeAxis.setExtent(0, Math.max(height - this.regionHeight, 0));\n  }\n}\n\nfunction updateGeo3D(ecModel, api) {\n  var altitudeDataExtent = [Infinity, -Infinity];\n  ecModel.eachSeries(function (seriesModel) {\n    if (seriesModel.coordinateSystem !== this) {\n      return;\n    }\n\n    if (seriesModel.type === 'series.map3D') {\n      return;\n    } // Get altitude data extent.\n\n\n    var data = seriesModel.getData();\n    var altDims = seriesModel.coordDimToDataDim('alt');\n    var altDim = altDims && altDims[0];\n\n    if (altDim) {\n      // TODO altitiude is in coords of lines.\n      var dataExtent = data.getDataExtent(altDim, true);\n      altitudeDataExtent[0] = Math.min(altitudeDataExtent[0], dataExtent[0]);\n      altitudeDataExtent[1] = Math.max(altitudeDataExtent[1], dataExtent[1]);\n    }\n  }, this); // Create altitude axis\n\n  if (altitudeDataExtent && isFinite(altitudeDataExtent[1] - altitudeDataExtent[0])) {\n    var scale = echarts.helper.createScale(altitudeDataExtent, {\n      type: 'value',\n      // PENDING\n      min: 'dataMin',\n      max: 'dataMax'\n    });\n    this.altitudeAxis = new echarts.Axis('altitude', scale); // Resize again\n\n    this.resize(this.model, api);\n  }\n}\n\nif (process.env.NODE_ENV !== 'production') {\n  var mapNotExistsError = function (name) {\n    console.error('Map ' + name + ' not exists. You can download map file on http://echarts.baidu.com/download-map.html');\n  };\n}\n\nvar idStart = 0;\nvar geo3DCreator = {\n  dimensions: Geo3D.prototype.dimensions,\n  create: function (ecModel, api) {\n    var geo3DList = [];\n\n    if (!echarts.getMap) {\n      throw new Error('geo3D component depends on geo component');\n    }\n\n    function createGeo3D(componentModel, idx) {\n      var geo3D = geo3DCreator.createGeo3D(componentModel); // FIXME\n\n      componentModel.__viewGL = componentModel.__viewGL || new ViewGL();\n      geo3D.viewGL = componentModel.__viewGL;\n      componentModel.coordinateSystem = geo3D;\n      geo3D.model = componentModel;\n      geo3DList.push(geo3D); // Inject resize\n\n      geo3D.resize = resizeGeo3D;\n      geo3D.resize(componentModel, api);\n      geo3D.update = updateGeo3D;\n    }\n\n    ecModel.eachComponent('geo3D', function (geo3DModel, idx) {\n      createGeo3D(geo3DModel, idx);\n    });\n    ecModel.eachSeriesByType('map3D', function (map3DModel, idx) {\n      var coordSys = map3DModel.get('coordinateSystem');\n\n      if (coordSys == null) {\n        coordSys = 'geo3D';\n      }\n\n      if (coordSys === 'geo3D') {\n        createGeo3D(map3DModel, idx);\n      }\n    });\n    ecModel.eachSeries(function (seriesModel) {\n      if (seriesModel.get('coordinateSystem') === 'geo3D') {\n        if (seriesModel.type === 'series.map3D') {\n          return;\n        }\n\n        var geo3DModel = seriesModel.getReferringComponents('geo3D').models[0];\n\n        if (!geo3DModel) {\n          geo3DModel = ecModel.getComponent('geo3D');\n        }\n\n        if (!geo3DModel) {\n          throw new Error('geo \"' + retrieve.firstNotNull(seriesModel.get('geo3DIndex'), seriesModel.get('geo3DId'), 0) + '\" not found');\n        }\n\n        seriesModel.coordinateSystem = geo3DModel.coordinateSystem;\n      }\n    });\n    return geo3DList;\n  },\n  createGeo3D: function (componentModel) {\n    var mapData = componentModel.get('map');\n    var name;\n\n    if (typeof mapData === 'string') {\n      name = mapData;\n      mapData = echarts.getMap(mapData);\n    } else {\n      if (mapData && mapData.features) {\n        mapData = {\n          geoJson: mapData\n        };\n      }\n    }\n\n    if (process.env.NODE_ENV !== 'production') {\n      if (!mapData) {\n        mapNotExistsError(mapData);\n      }\n\n      if (!mapData.geoJson.features) {\n        throw new Error('Invalid GeoJSON for map3D');\n      }\n    }\n\n    if (name == null) {\n      name = 'GEO_ANONYMOUS_' + idStart++;\n    }\n\n    return new Geo3D(name + idStart++, name, mapData && mapData.geoJson, mapData && mapData.specialAreas, componentModel.get('nameMap'));\n  }\n};\nexport default geo3DCreator;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}