{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.array-buffer.detached.js\";\nimport \"core-js/modules/es.array-buffer.transfer.js\";\nimport \"core-js/modules/es.array-buffer.transfer-to-fixed-length.js\";\nimport \"core-js/modules/es.typed-array.to-reversed.js\";\nimport \"core-js/modules/es.typed-array.to-sorted.js\";\nimport \"core-js/modules/es.typed-array.with.js\";\n/****************************\n * Vector2 math functions\n ***************************/\nfunction forceAtlas2Worker() {\n  var vec2 = {\n    create: function () {\n      return new Float32Array(2);\n    },\n    dist: function (a, b) {\n      var x = b[0] - a[0];\n      var y = b[1] - a[1];\n      return Math.sqrt(x * x + y * y);\n    },\n    len: function (a) {\n      var x = a[0];\n      var y = a[1];\n      return Math.sqrt(x * x + y * y);\n    },\n    scaleAndAdd: function (out, a, b, scale) {\n      out[0] = a[0] + b[0] * scale;\n      out[1] = a[1] + b[1] * scale;\n      return out;\n    },\n    scale: function (out, a, b) {\n      out[0] = a[0] * b;\n      out[1] = a[1] * b;\n      return out;\n    },\n    add: function (out, a, b) {\n      out[0] = a[0] + b[0];\n      out[1] = a[1] + b[1];\n      return out;\n    },\n    sub: function (out, a, b) {\n      out[0] = a[0] - b[0];\n      out[1] = a[1] - b[1];\n      return out;\n    },\n    normalize: function (out, a) {\n      var x = a[0];\n      var y = a[1];\n      var len = x * x + y * y;\n      if (len > 0) {\n        //TODO: evaluate use of glm_invsqrt here?\n        len = 1 / Math.sqrt(len);\n        out[0] = a[0] * len;\n        out[1] = a[1] * len;\n      }\n      return out;\n    },\n    negate: function (out, a) {\n      out[0] = -a[0];\n      out[1] = -a[1];\n      return out;\n    },\n    copy: function (out, a) {\n      out[0] = a[0];\n      out[1] = a[1];\n      return out;\n    },\n    set: function (out, x, y) {\n      out[0] = x;\n      out[1] = y;\n      return out;\n    }\n  };\n  /****************************\n   * Class: Region\n   ***************************/\n\n  function Region() {\n    this.subRegions = [];\n    this.nSubRegions = 0;\n    this.node = null;\n    this.mass = 0;\n    this.centerOfMass = null;\n    this.bbox = new Float32Array(4);\n    this.size = 0;\n  }\n  var regionProto = Region.prototype; // Reset before update\n\n  regionProto.beforeUpdate = function () {\n    for (var i = 0; i < this.nSubRegions; i++) {\n      this.subRegions[i].beforeUpdate();\n    }\n    this.mass = 0;\n    if (this.centerOfMass) {\n      this.centerOfMass[0] = 0;\n      this.centerOfMass[1] = 0;\n    }\n    this.nSubRegions = 0;\n    this.node = null;\n  }; // Clear after update\n\n  regionProto.afterUpdate = function () {\n    this.subRegions.length = this.nSubRegions;\n    for (var i = 0; i < this.nSubRegions; i++) {\n      this.subRegions[i].afterUpdate();\n    }\n  };\n  regionProto.addNode = function (node) {\n    if (this.nSubRegions === 0) {\n      if (this.node == null) {\n        this.node = node;\n        return;\n      } // Already have node, subdivide self.\n      else {\n        this._addNodeToSubRegion(this.node);\n        this.node = null;\n      }\n    }\n    this._addNodeToSubRegion(node);\n    this._updateCenterOfMass(node);\n  };\n  regionProto.findSubRegion = function (x, y) {\n    for (var i = 0; i < this.nSubRegions; i++) {\n      var region = this.subRegions[i];\n      if (region.contain(x, y)) {\n        return region;\n      }\n    }\n  };\n  regionProto.contain = function (x, y) {\n    return this.bbox[0] <= x && this.bbox[2] >= x && this.bbox[1] <= y && this.bbox[3] >= y;\n  };\n  regionProto.setBBox = function (minX, minY, maxX, maxY) {\n    // Min\n    this.bbox[0] = minX;\n    this.bbox[1] = minY; // Max\n\n    this.bbox[2] = maxX;\n    this.bbox[3] = maxY;\n    this.size = (maxX - minX + maxY - minY) / 2;\n  };\n  regionProto._newSubRegion = function () {\n    var subRegion = this.subRegions[this.nSubRegions];\n    if (!subRegion) {\n      subRegion = new Region();\n      this.subRegions[this.nSubRegions] = subRegion;\n    }\n    this.nSubRegions++;\n    return subRegion;\n  };\n  regionProto._addNodeToSubRegion = function (node) {\n    var subRegion = this.findSubRegion(node.position[0], node.position[1]);\n    var bbox = this.bbox;\n    if (!subRegion) {\n      var cx = (bbox[0] + bbox[2]) / 2;\n      var cy = (bbox[1] + bbox[3]) / 2;\n      var w = (bbox[2] - bbox[0]) / 2;\n      var h = (bbox[3] - bbox[1]) / 2;\n      var xi = node.position[0] >= cx ? 1 : 0;\n      var yi = node.position[1] >= cy ? 1 : 0;\n      var subRegion = this._newSubRegion(); // Min\n\n      subRegion.setBBox(\n      // Min\n      xi * w + bbox[0], yi * h + bbox[1],\n      // Max\n      (xi + 1) * w + bbox[0], (yi + 1) * h + bbox[1]);\n    }\n    subRegion.addNode(node);\n  };\n  regionProto._updateCenterOfMass = function (node) {\n    // Incrementally update\n    if (this.centerOfMass == null) {\n      this.centerOfMass = new Float32Array(2);\n    }\n    var x = this.centerOfMass[0] * this.mass;\n    var y = this.centerOfMass[1] * this.mass;\n    x += node.position[0] * node.mass;\n    y += node.position[1] * node.mass;\n    this.mass += node.mass;\n    this.centerOfMass[0] = x / this.mass;\n    this.centerOfMass[1] = y / this.mass;\n  };\n  /****************************\n   * Class: Graph Node\n   ***************************/\n\n  function GraphNode() {\n    this.position = new Float32Array(2);\n    this.force = vec2.create();\n    this.forcePrev = vec2.create(); // If repulsionByDegree is true\n    //  mass = inDegree + outDegree + 1\n    // Else\n    //  mass is manually set\n\n    this.mass = 1;\n    this.inDegree = 0;\n    this.outDegree = 0; // Optional\n    // this.size = 1;\n  }\n  /****************************\n   * Class: Graph Edge\n   ***************************/\n\n  function GraphEdge(source, target) {\n    this.source = source;\n    this.target = target;\n    this.weight = 1;\n  }\n  /****************************\n   * Class: ForceStlas2\n   ***************************/\n\n  function ForceAtlas2() {\n    //-------------\n    // Configs\n    // If auto settings is true\n    //  barnesHutOptimize,\n    //  barnesHutTheta,\n    //  scaling,\n    //  jitterTolerence\n    // Will be set by the system automatically\n    //  preventOverlap will be set false\n    //  if node size is not given\n    this.autoSettings = true; // Barnes Hut\n    // http://arborjs.org/docs/barnes-hut\n\n    this.barnesHutOptimize = true;\n    this.barnesHutTheta = 1.5; // Force Atlas2 Configs\n\n    this.repulsionByDegree = true;\n    this.linLogMode = false;\n    this.strongGravityMode = false;\n    this.gravity = 1.0;\n    this.scaling = 1.0;\n    this.edgeWeightInfluence = 1.0;\n    this.jitterTolerence = 0.1; // TODO\n\n    this.preventOverlap = false;\n    this.dissuadeHubs = false; //\n\n    this.rootRegion = new Region();\n    this.rootRegion.centerOfMass = vec2.create();\n    this.nodes = [];\n    this.edges = [];\n    this.bbox = new Float32Array(4);\n    this.gravityCenter = null;\n    this._massArr = null;\n    this._swingingArr = null;\n    this._sizeArr = null;\n    this._globalSpeed = 0;\n  }\n  var forceAtlas2Proto = ForceAtlas2.prototype;\n  forceAtlas2Proto.initNodes = function (positionArr, massArr, sizeArr) {\n    var nNodes = massArr.length;\n    this.nodes.length = 0;\n    var haveSize = typeof sizeArr != 'undefined';\n    for (var i = 0; i < nNodes; i++) {\n      var node = new GraphNode();\n      node.position[0] = positionArr[i * 2];\n      node.position[1] = positionArr[i * 2 + 1];\n      node.mass = massArr[i];\n      if (haveSize) {\n        node.size = sizeArr[i];\n      }\n      this.nodes.push(node);\n    }\n    this._massArr = massArr;\n    this._swingingArr = new Float32Array(nNodes);\n    if (haveSize) {\n      this._sizeArr = sizeArr;\n    }\n  };\n  forceAtlas2Proto.initEdges = function (edgeArr, edgeWeightArr) {\n    var nEdges = edgeArr.length / 2;\n    this.edges.length = 0;\n    for (var i = 0; i < nEdges; i++) {\n      var sIdx = edgeArr[i * 2];\n      var tIdx = edgeArr[i * 2 + 1];\n      var sNode = this.nodes[sIdx];\n      var tNode = this.nodes[tIdx];\n      if (!sNode || !tNode) {\n        console.error('Node not exists, try initNodes before initEdges');\n        return;\n      }\n      sNode.outDegree++;\n      tNode.inDegree++;\n      var edge = new GraphEdge(sNode, tNode);\n      if (edgeWeightArr) {\n        edge.weight = edgeWeightArr[i];\n      }\n      this.edges.push(edge);\n    }\n  };\n  forceAtlas2Proto.updateSettings = function () {\n    if (this.repulsionByDegree) {\n      for (var i = 0; i < this.nodes.length; i++) {\n        var node = this.nodes[i];\n        node.mass = node.inDegree + node.outDegree + 1;\n      }\n    } else {\n      for (var i = 0; i < this.nodes.length; i++) {\n        var node = this.nodes[i];\n        node.mass = this._massArr[i];\n      }\n    }\n  };\n  forceAtlas2Proto.update = function () {\n    var nNodes = this.nodes.length;\n    this.updateSettings();\n    this.updateBBox(); // Update region\n\n    if (this.barnesHutOptimize) {\n      this.rootRegion.setBBox(this.bbox[0], this.bbox[1], this.bbox[2], this.bbox[3]);\n      this.rootRegion.beforeUpdate();\n      for (var i = 0; i < nNodes; i++) {\n        this.rootRegion.addNode(this.nodes[i]);\n      }\n      this.rootRegion.afterUpdate();\n    } // Reset forces\n\n    for (var i = 0; i < nNodes; i++) {\n      var node = this.nodes[i];\n      vec2.copy(node.forcePrev, node.force);\n      vec2.set(node.force, 0, 0);\n    } // Compute forces\n    // Repulsion\n\n    for (var i = 0; i < nNodes; i++) {\n      var na = this.nodes[i];\n      if (this.barnesHutOptimize) {\n        this.applyRegionToNodeRepulsion(this.rootRegion, na);\n      } else {\n        for (var j = i + 1; j < nNodes; j++) {\n          var nb = this.nodes[j];\n          this.applyNodeToNodeRepulsion(na, nb, false);\n        }\n      } // Gravity\n\n      if (this.gravity > 0) {\n        if (this.strongGravityMode) {\n          this.applyNodeStrongGravity(na);\n        } else {\n          this.applyNodeGravity(na);\n        }\n      }\n    } // Attraction\n\n    for (var i = 0; i < this.edges.length; i++) {\n      this.applyEdgeAttraction(this.edges[i]);\n    } // Handle swinging\n\n    var swingWeightedSum = 0;\n    var tractionWeightedSum = 0;\n    var tmp = vec2.create();\n    for (var i = 0; i < nNodes; i++) {\n      var node = this.nodes[i];\n      var swing = vec2.dist(node.force, node.forcePrev);\n      swingWeightedSum += swing * node.mass;\n      vec2.add(tmp, node.force, node.forcePrev);\n      var traction = vec2.len(tmp) * 0.5;\n      tractionWeightedSum += traction * node.mass; // Save the value for using later\n\n      this._swingingArr[i] = swing;\n    }\n    var globalSpeed = this.jitterTolerence * this.jitterTolerence * tractionWeightedSum / swingWeightedSum; // NB: During our tests we observed that an excessive rise of the global speed could have a negative impact.\n    // That’s why we limited the increase of global speed s(t)(G) to 50% of the previous step s(t−1)(G).\n\n    if (this._globalSpeed > 0) {\n      globalSpeed = Math.min(globalSpeed / this._globalSpeed, 1.5) * this._globalSpeed;\n    }\n    this._globalSpeed = globalSpeed; // Apply forces\n\n    for (var i = 0; i < nNodes; i++) {\n      var node = this.nodes[i];\n      var swing = this._swingingArr[i];\n      var speed = 0.1 * globalSpeed / (1 + globalSpeed * Math.sqrt(swing)); // Additional constraint to prevent local speed gets too high\n\n      var df = vec2.len(node.force);\n      if (df > 0) {\n        speed = Math.min(df * speed, 10) / df;\n        vec2.scaleAndAdd(node.position, node.position, node.force, speed);\n      }\n    }\n  };\n  forceAtlas2Proto.applyRegionToNodeRepulsion = function () {\n    var v = vec2.create();\n    return function applyRegionToNodeRepulsion(region, node) {\n      if (region.node) {\n        // Region is a leaf\n        this.applyNodeToNodeRepulsion(region.node, node, true);\n      } else {\n        vec2.sub(v, node.position, region.centerOfMass);\n        var d2 = v[0] * v[0] + v[1] * v[1];\n        if (d2 > this.barnesHutTheta * region.size * region.size) {\n          var factor = this.scaling * node.mass * region.mass / d2;\n          vec2.scaleAndAdd(node.force, node.force, v, factor);\n        } else {\n          for (var i = 0; i < region.nSubRegions; i++) {\n            this.applyRegionToNodeRepulsion(region.subRegions[i], node);\n          }\n        }\n      }\n    };\n  }();\n  forceAtlas2Proto.applyNodeToNodeRepulsion = function () {\n    var v = vec2.create();\n    return function applyNodeToNodeRepulsion(na, nb, oneWay) {\n      if (na == nb) {\n        return;\n      }\n      vec2.sub(v, na.position, nb.position);\n      var d2 = v[0] * v[0] + v[1] * v[1]; // PENDING\n\n      if (d2 === 0) {\n        return;\n      }\n      var factor;\n      if (this.preventOverlap) {\n        var d = Math.sqrt(d2);\n        d = d - na.size - nb.size;\n        if (d > 0) {\n          factor = this.scaling * na.mass * nb.mass / (d * d);\n        } else if (d < 0) {\n          // A stronger repulsion if overlap\n          factor = this.scaling * 100 * na.mass * nb.mass;\n        } else {\n          // No repulsion\n          return;\n        }\n      } else {\n        // Divide factor by an extra `d` to normalize the `v`\n        factor = this.scaling * na.mass * nb.mass / d2;\n      }\n      vec2.scaleAndAdd(na.force, na.force, v, factor);\n      vec2.scaleAndAdd(nb.force, nb.force, v, -factor);\n    };\n  }();\n  forceAtlas2Proto.applyEdgeAttraction = function () {\n    var v = vec2.create();\n    return function applyEdgeAttraction(edge) {\n      var na = edge.source;\n      var nb = edge.target;\n      vec2.sub(v, na.position, nb.position);\n      var d = vec2.len(v);\n      var w;\n      if (this.edgeWeightInfluence === 0) {\n        w = 1;\n      } else if (this.edgeWeightInfluence === 1) {\n        w = edge.weight;\n      } else {\n        w = Math.pow(edge.weight, this.edgeWeightInfluence);\n      }\n      var factor;\n      if (this.preventOverlap) {\n        d = d - na.size - nb.size;\n        if (d <= 0) {\n          // No attraction\n          return;\n        }\n      }\n      if (this.linLogMode) {\n        // Divide factor by an extra `d` to normalize the `v`\n        factor = -w * Math.log(d + 1) / (d + 1);\n      } else {\n        factor = -w;\n      }\n      vec2.scaleAndAdd(na.force, na.force, v, factor);\n      vec2.scaleAndAdd(nb.force, nb.force, v, -factor);\n    };\n  }();\n  forceAtlas2Proto.applyNodeGravity = function () {\n    var v = vec2.create();\n    return function (node) {\n      vec2.sub(v, this.gravityCenter, node.position);\n      var d = vec2.len(v);\n      vec2.scaleAndAdd(node.force, node.force, v, this.gravity * node.mass / (d + 1));\n    };\n  }();\n  forceAtlas2Proto.applyNodeStrongGravity = function () {\n    var v = vec2.create();\n    return function (node) {\n      vec2.sub(v, this.gravityCenter, node.position);\n      vec2.scaleAndAdd(node.force, node.force, v, this.gravity * node.mass);\n    };\n  }();\n  forceAtlas2Proto.updateBBox = function () {\n    var minX = Infinity;\n    var minY = Infinity;\n    var maxX = -Infinity;\n    var maxY = -Infinity;\n    for (var i = 0; i < this.nodes.length; i++) {\n      var pos = this.nodes[i].position;\n      minX = Math.min(minX, pos[0]);\n      minY = Math.min(minY, pos[1]);\n      maxX = Math.max(maxX, pos[0]);\n      maxY = Math.max(maxY, pos[1]);\n    }\n    this.bbox[0] = minX;\n    this.bbox[1] = minY;\n    this.bbox[2] = maxX;\n    this.bbox[3] = maxY;\n  };\n  forceAtlas2Proto.getGlobalSpeed = function () {\n    return this._globalSpeed;\n  };\n  /****************************\n   * Main process\n   ***************************/\n\n  var forceAtlas2 = null;\n  self.onmessage = function (e) {\n    switch (e.data.cmd) {\n      case 'init':\n        forceAtlas2 = new ForceAtlas2();\n        forceAtlas2.initNodes(e.data.nodesPosition, e.data.nodesMass, e.data.nodesSize);\n        forceAtlas2.initEdges(e.data.edges, e.data.edgesWeight);\n        break;\n      case 'updateConfig':\n        if (forceAtlas2) {\n          for (var name in e.data.config) {\n            forceAtlas2[name] = e.data.config[name];\n          }\n        }\n        break;\n      case 'update':\n        var steps = e.data.steps;\n        if (forceAtlas2) {\n          for (var i = 0; i < steps; i++) {\n            forceAtlas2.update();\n          }\n          var nNodes = forceAtlas2.nodes.length;\n          var positionArr = new Float32Array(nNodes * 2); // Callback\n\n          for (var i = 0; i < nNodes; i++) {\n            var node = forceAtlas2.nodes[i];\n            positionArr[i * 2] = node.position[0];\n            positionArr[i * 2 + 1] = node.position[1];\n          }\n          self.postMessage({\n            buffer: positionArr.buffer,\n            globalSpeed: forceAtlas2.getGlobalSpeed()\n          }, [positionArr.buffer]);\n        } else {\n          // Not initialzied yet\n          var emptyArr = new Float32Array(); // Post transfer object\n\n          self.postMessage({\n            buffer: emptyArr.buffer,\n            globalSpeed: forceAtlas2.getGlobalSpeed()\n          }, [emptyArr.buffer]);\n        }\n        break;\n    }\n  };\n}\nexport default forceAtlas2Worker;","map":{"version":3,"names":["forceAtlas2Worker","vec2","create","Float32Array","dist","a","b","x","y","Math","sqrt","len","scaleAndAdd","out","scale","add","sub","normalize","negate","copy","set","Region","subRegions","nSubRegions","node","mass","centerOfMass","bbox","size","regionProto","prototype","beforeUpdate","i","afterUpdate","length","addNode","_addNodeToSubRegion","_updateCenterOfMass","findSubRegion","region","contain","setBBox","minX","minY","maxX","maxY","_newSubRegion","subRegion","position","cx","cy","w","h","xi","yi","GraphNode","force","forcePrev","inDegree","outDegree","GraphEdge","source","target","weight","ForceAtlas2","autoSettings","barnesHutOptimize","barnesHutTheta","repulsionByDegree","linLogMode","strongGravityMode","gravity","scaling","edgeWeightInfluence","jitterTolerence","preventOverlap","dissuadeHubs","rootRegion","nodes","edges","gravityCenter","_massArr","_swingingArr","_sizeArr","_globalSpeed","forceAtlas2Proto","initNodes","positionArr","massArr","sizeArr","nNodes","haveSize","push","initEdges","edgeArr","edgeWeightArr","nEdges","sIdx","tIdx","sNode","tNode","console","error","edge","updateSettings","update","updateBBox","na","applyRegionToNodeRepulsion","j","nb","applyNodeToNodeRepulsion","applyNodeStrongGravity","applyNodeGravity","applyEdgeAttraction","swingWeightedSum","tractionWeightedSum","tmp","swing","traction","globalSpeed","min","speed","df","v","d2","factor","oneWay","d","pow","log","Infinity","pos","max","getGlobalSpeed","forceAtlas2","self","onmessage","e","data","cmd","nodesPosition","nodesMass","nodesSize","edgesWeight","name","config","steps","postMessage","buffer","emptyArr"],"sources":["E:/mytest/node_modules/echarts-gl/lib/chart/graphGL/forceAtlas2Worker.js"],"sourcesContent":["/****************************\n * Vector2 math functions\n ***************************/\nfunction forceAtlas2Worker() {\n  var vec2 = {\n    create: function () {\n      return new Float32Array(2);\n    },\n    dist: function (a, b) {\n      var x = b[0] - a[0];\n      var y = b[1] - a[1];\n      return Math.sqrt(x * x + y * y);\n    },\n    len: function (a) {\n      var x = a[0];\n      var y = a[1];\n      return Math.sqrt(x * x + y * y);\n    },\n    scaleAndAdd: function (out, a, b, scale) {\n      out[0] = a[0] + b[0] * scale;\n      out[1] = a[1] + b[1] * scale;\n      return out;\n    },\n    scale: function (out, a, b) {\n      out[0] = a[0] * b;\n      out[1] = a[1] * b;\n      return out;\n    },\n    add: function (out, a, b) {\n      out[0] = a[0] + b[0];\n      out[1] = a[1] + b[1];\n      return out;\n    },\n    sub: function (out, a, b) {\n      out[0] = a[0] - b[0];\n      out[1] = a[1] - b[1];\n      return out;\n    },\n    normalize: function (out, a) {\n      var x = a[0];\n      var y = a[1];\n      var len = x * x + y * y;\n\n      if (len > 0) {\n        //TODO: evaluate use of glm_invsqrt here?\n        len = 1 / Math.sqrt(len);\n        out[0] = a[0] * len;\n        out[1] = a[1] * len;\n      }\n\n      return out;\n    },\n    negate: function (out, a) {\n      out[0] = -a[0];\n      out[1] = -a[1];\n      return out;\n    },\n    copy: function (out, a) {\n      out[0] = a[0];\n      out[1] = a[1];\n      return out;\n    },\n    set: function (out, x, y) {\n      out[0] = x;\n      out[1] = y;\n      return out;\n    }\n  };\n  /****************************\n   * Class: Region\n   ***************************/\n\n  function Region() {\n    this.subRegions = [];\n    this.nSubRegions = 0;\n    this.node = null;\n    this.mass = 0;\n    this.centerOfMass = null;\n    this.bbox = new Float32Array(4);\n    this.size = 0;\n  }\n\n  var regionProto = Region.prototype; // Reset before update\n\n  regionProto.beforeUpdate = function () {\n    for (var i = 0; i < this.nSubRegions; i++) {\n      this.subRegions[i].beforeUpdate();\n    }\n\n    this.mass = 0;\n\n    if (this.centerOfMass) {\n      this.centerOfMass[0] = 0;\n      this.centerOfMass[1] = 0;\n    }\n\n    this.nSubRegions = 0;\n    this.node = null;\n  }; // Clear after update\n\n\n  regionProto.afterUpdate = function () {\n    this.subRegions.length = this.nSubRegions;\n\n    for (var i = 0; i < this.nSubRegions; i++) {\n      this.subRegions[i].afterUpdate();\n    }\n  };\n\n  regionProto.addNode = function (node) {\n    if (this.nSubRegions === 0) {\n      if (this.node == null) {\n        this.node = node;\n        return;\n      } // Already have node, subdivide self.\n      else {\n          this._addNodeToSubRegion(this.node);\n\n          this.node = null;\n        }\n    }\n\n    this._addNodeToSubRegion(node);\n\n    this._updateCenterOfMass(node);\n  };\n\n  regionProto.findSubRegion = function (x, y) {\n    for (var i = 0; i < this.nSubRegions; i++) {\n      var region = this.subRegions[i];\n\n      if (region.contain(x, y)) {\n        return region;\n      }\n    }\n  };\n\n  regionProto.contain = function (x, y) {\n    return this.bbox[0] <= x && this.bbox[2] >= x && this.bbox[1] <= y && this.bbox[3] >= y;\n  };\n\n  regionProto.setBBox = function (minX, minY, maxX, maxY) {\n    // Min\n    this.bbox[0] = minX;\n    this.bbox[1] = minY; // Max\n\n    this.bbox[2] = maxX;\n    this.bbox[3] = maxY;\n    this.size = (maxX - minX + maxY - minY) / 2;\n  };\n\n  regionProto._newSubRegion = function () {\n    var subRegion = this.subRegions[this.nSubRegions];\n\n    if (!subRegion) {\n      subRegion = new Region();\n      this.subRegions[this.nSubRegions] = subRegion;\n    }\n\n    this.nSubRegions++;\n    return subRegion;\n  };\n\n  regionProto._addNodeToSubRegion = function (node) {\n    var subRegion = this.findSubRegion(node.position[0], node.position[1]);\n    var bbox = this.bbox;\n\n    if (!subRegion) {\n      var cx = (bbox[0] + bbox[2]) / 2;\n      var cy = (bbox[1] + bbox[3]) / 2;\n      var w = (bbox[2] - bbox[0]) / 2;\n      var h = (bbox[3] - bbox[1]) / 2;\n      var xi = node.position[0] >= cx ? 1 : 0;\n      var yi = node.position[1] >= cy ? 1 : 0;\n\n      var subRegion = this._newSubRegion(); // Min\n\n\n      subRegion.setBBox( // Min\n      xi * w + bbox[0], yi * h + bbox[1], // Max\n      (xi + 1) * w + bbox[0], (yi + 1) * h + bbox[1]);\n    }\n\n    subRegion.addNode(node);\n  };\n\n  regionProto._updateCenterOfMass = function (node) {\n    // Incrementally update\n    if (this.centerOfMass == null) {\n      this.centerOfMass = new Float32Array(2);\n    }\n\n    var x = this.centerOfMass[0] * this.mass;\n    var y = this.centerOfMass[1] * this.mass;\n    x += node.position[0] * node.mass;\n    y += node.position[1] * node.mass;\n    this.mass += node.mass;\n    this.centerOfMass[0] = x / this.mass;\n    this.centerOfMass[1] = y / this.mass;\n  };\n  /****************************\n   * Class: Graph Node\n   ***************************/\n\n\n  function GraphNode() {\n    this.position = new Float32Array(2);\n    this.force = vec2.create();\n    this.forcePrev = vec2.create(); // If repulsionByDegree is true\n    //  mass = inDegree + outDegree + 1\n    // Else\n    //  mass is manually set\n\n    this.mass = 1;\n    this.inDegree = 0;\n    this.outDegree = 0; // Optional\n    // this.size = 1;\n  }\n  /****************************\n   * Class: Graph Edge\n   ***************************/\n\n\n  function GraphEdge(source, target) {\n    this.source = source;\n    this.target = target;\n    this.weight = 1;\n  }\n  /****************************\n   * Class: ForceStlas2\n   ***************************/\n\n\n  function ForceAtlas2() {\n    //-------------\n    // Configs\n    // If auto settings is true\n    //  barnesHutOptimize,\n    //  barnesHutTheta,\n    //  scaling,\n    //  jitterTolerence\n    // Will be set by the system automatically\n    //  preventOverlap will be set false\n    //  if node size is not given\n    this.autoSettings = true; // Barnes Hut\n    // http://arborjs.org/docs/barnes-hut\n\n    this.barnesHutOptimize = true;\n    this.barnesHutTheta = 1.5; // Force Atlas2 Configs\n\n    this.repulsionByDegree = true;\n    this.linLogMode = false;\n    this.strongGravityMode = false;\n    this.gravity = 1.0;\n    this.scaling = 1.0;\n    this.edgeWeightInfluence = 1.0;\n    this.jitterTolerence = 0.1; // TODO\n\n    this.preventOverlap = false;\n    this.dissuadeHubs = false; //\n\n    this.rootRegion = new Region();\n    this.rootRegion.centerOfMass = vec2.create();\n    this.nodes = [];\n    this.edges = [];\n    this.bbox = new Float32Array(4);\n    this.gravityCenter = null;\n    this._massArr = null;\n    this._swingingArr = null;\n    this._sizeArr = null;\n    this._globalSpeed = 0;\n  }\n\n  var forceAtlas2Proto = ForceAtlas2.prototype;\n\n  forceAtlas2Proto.initNodes = function (positionArr, massArr, sizeArr) {\n    var nNodes = massArr.length;\n    this.nodes.length = 0;\n    var haveSize = typeof sizeArr != 'undefined';\n\n    for (var i = 0; i < nNodes; i++) {\n      var node = new GraphNode();\n      node.position[0] = positionArr[i * 2];\n      node.position[1] = positionArr[i * 2 + 1];\n      node.mass = massArr[i];\n\n      if (haveSize) {\n        node.size = sizeArr[i];\n      }\n\n      this.nodes.push(node);\n    }\n\n    this._massArr = massArr;\n    this._swingingArr = new Float32Array(nNodes);\n\n    if (haveSize) {\n      this._sizeArr = sizeArr;\n    }\n  };\n\n  forceAtlas2Proto.initEdges = function (edgeArr, edgeWeightArr) {\n    var nEdges = edgeArr.length / 2;\n    this.edges.length = 0;\n\n    for (var i = 0; i < nEdges; i++) {\n      var sIdx = edgeArr[i * 2];\n      var tIdx = edgeArr[i * 2 + 1];\n      var sNode = this.nodes[sIdx];\n      var tNode = this.nodes[tIdx];\n\n      if (!sNode || !tNode) {\n        console.error('Node not exists, try initNodes before initEdges');\n        return;\n      }\n\n      sNode.outDegree++;\n      tNode.inDegree++;\n      var edge = new GraphEdge(sNode, tNode);\n\n      if (edgeWeightArr) {\n        edge.weight = edgeWeightArr[i];\n      }\n\n      this.edges.push(edge);\n    }\n  };\n\n  forceAtlas2Proto.updateSettings = function () {\n    if (this.repulsionByDegree) {\n      for (var i = 0; i < this.nodes.length; i++) {\n        var node = this.nodes[i];\n        node.mass = node.inDegree + node.outDegree + 1;\n      }\n    } else {\n      for (var i = 0; i < this.nodes.length; i++) {\n        var node = this.nodes[i];\n        node.mass = this._massArr[i];\n      }\n    }\n  };\n\n  forceAtlas2Proto.update = function () {\n    var nNodes = this.nodes.length;\n    this.updateSettings();\n    this.updateBBox(); // Update region\n\n    if (this.barnesHutOptimize) {\n      this.rootRegion.setBBox(this.bbox[0], this.bbox[1], this.bbox[2], this.bbox[3]);\n      this.rootRegion.beforeUpdate();\n\n      for (var i = 0; i < nNodes; i++) {\n        this.rootRegion.addNode(this.nodes[i]);\n      }\n\n      this.rootRegion.afterUpdate();\n    } // Reset forces\n\n\n    for (var i = 0; i < nNodes; i++) {\n      var node = this.nodes[i];\n      vec2.copy(node.forcePrev, node.force);\n      vec2.set(node.force, 0, 0);\n    } // Compute forces\n    // Repulsion\n\n\n    for (var i = 0; i < nNodes; i++) {\n      var na = this.nodes[i];\n\n      if (this.barnesHutOptimize) {\n        this.applyRegionToNodeRepulsion(this.rootRegion, na);\n      } else {\n        for (var j = i + 1; j < nNodes; j++) {\n          var nb = this.nodes[j];\n          this.applyNodeToNodeRepulsion(na, nb, false);\n        }\n      } // Gravity\n\n\n      if (this.gravity > 0) {\n        if (this.strongGravityMode) {\n          this.applyNodeStrongGravity(na);\n        } else {\n          this.applyNodeGravity(na);\n        }\n      }\n    } // Attraction\n\n\n    for (var i = 0; i < this.edges.length; i++) {\n      this.applyEdgeAttraction(this.edges[i]);\n    } // Handle swinging\n\n\n    var swingWeightedSum = 0;\n    var tractionWeightedSum = 0;\n    var tmp = vec2.create();\n\n    for (var i = 0; i < nNodes; i++) {\n      var node = this.nodes[i];\n      var swing = vec2.dist(node.force, node.forcePrev);\n      swingWeightedSum += swing * node.mass;\n      vec2.add(tmp, node.force, node.forcePrev);\n      var traction = vec2.len(tmp) * 0.5;\n      tractionWeightedSum += traction * node.mass; // Save the value for using later\n\n      this._swingingArr[i] = swing;\n    }\n\n    var globalSpeed = this.jitterTolerence * this.jitterTolerence * tractionWeightedSum / swingWeightedSum; // NB: During our tests we observed that an excessive rise of the global speed could have a negative impact.\n    // That’s why we limited the increase of global speed s(t)(G) to 50% of the previous step s(t−1)(G).\n\n    if (this._globalSpeed > 0) {\n      globalSpeed = Math.min(globalSpeed / this._globalSpeed, 1.5) * this._globalSpeed;\n    }\n\n    this._globalSpeed = globalSpeed; // Apply forces\n\n    for (var i = 0; i < nNodes; i++) {\n      var node = this.nodes[i];\n      var swing = this._swingingArr[i];\n      var speed = 0.1 * globalSpeed / (1 + globalSpeed * Math.sqrt(swing)); // Additional constraint to prevent local speed gets too high\n\n      var df = vec2.len(node.force);\n\n      if (df > 0) {\n        speed = Math.min(df * speed, 10) / df;\n        vec2.scaleAndAdd(node.position, node.position, node.force, speed);\n      }\n    }\n  };\n\n  forceAtlas2Proto.applyRegionToNodeRepulsion = function () {\n    var v = vec2.create();\n    return function applyRegionToNodeRepulsion(region, node) {\n      if (region.node) {\n        // Region is a leaf\n        this.applyNodeToNodeRepulsion(region.node, node, true);\n      } else {\n        vec2.sub(v, node.position, region.centerOfMass);\n        var d2 = v[0] * v[0] + v[1] * v[1];\n\n        if (d2 > this.barnesHutTheta * region.size * region.size) {\n          var factor = this.scaling * node.mass * region.mass / d2;\n          vec2.scaleAndAdd(node.force, node.force, v, factor);\n        } else {\n          for (var i = 0; i < region.nSubRegions; i++) {\n            this.applyRegionToNodeRepulsion(region.subRegions[i], node);\n          }\n        }\n      }\n    };\n  }();\n\n  forceAtlas2Proto.applyNodeToNodeRepulsion = function () {\n    var v = vec2.create();\n    return function applyNodeToNodeRepulsion(na, nb, oneWay) {\n      if (na == nb) {\n        return;\n      }\n\n      vec2.sub(v, na.position, nb.position);\n      var d2 = v[0] * v[0] + v[1] * v[1]; // PENDING\n\n      if (d2 === 0) {\n        return;\n      }\n\n      var factor;\n\n      if (this.preventOverlap) {\n        var d = Math.sqrt(d2);\n        d = d - na.size - nb.size;\n\n        if (d > 0) {\n          factor = this.scaling * na.mass * nb.mass / (d * d);\n        } else if (d < 0) {\n          // A stronger repulsion if overlap\n          factor = this.scaling * 100 * na.mass * nb.mass;\n        } else {\n          // No repulsion\n          return;\n        }\n      } else {\n        // Divide factor by an extra `d` to normalize the `v`\n        factor = this.scaling * na.mass * nb.mass / d2;\n      }\n\n      vec2.scaleAndAdd(na.force, na.force, v, factor);\n      vec2.scaleAndAdd(nb.force, nb.force, v, -factor);\n    };\n  }();\n\n  forceAtlas2Proto.applyEdgeAttraction = function () {\n    var v = vec2.create();\n    return function applyEdgeAttraction(edge) {\n      var na = edge.source;\n      var nb = edge.target;\n      vec2.sub(v, na.position, nb.position);\n      var d = vec2.len(v);\n      var w;\n\n      if (this.edgeWeightInfluence === 0) {\n        w = 1;\n      } else if (this.edgeWeightInfluence === 1) {\n        w = edge.weight;\n      } else {\n        w = Math.pow(edge.weight, this.edgeWeightInfluence);\n      }\n\n      var factor;\n\n      if (this.preventOverlap) {\n        d = d - na.size - nb.size;\n\n        if (d <= 0) {\n          // No attraction\n          return;\n        }\n      }\n\n      if (this.linLogMode) {\n        // Divide factor by an extra `d` to normalize the `v`\n        factor = -w * Math.log(d + 1) / (d + 1);\n      } else {\n        factor = -w;\n      }\n\n      vec2.scaleAndAdd(na.force, na.force, v, factor);\n      vec2.scaleAndAdd(nb.force, nb.force, v, -factor);\n    };\n  }();\n\n  forceAtlas2Proto.applyNodeGravity = function () {\n    var v = vec2.create();\n    return function (node) {\n      vec2.sub(v, this.gravityCenter, node.position);\n      var d = vec2.len(v);\n      vec2.scaleAndAdd(node.force, node.force, v, this.gravity * node.mass / (d + 1));\n    };\n  }();\n\n  forceAtlas2Proto.applyNodeStrongGravity = function () {\n    var v = vec2.create();\n    return function (node) {\n      vec2.sub(v, this.gravityCenter, node.position);\n      vec2.scaleAndAdd(node.force, node.force, v, this.gravity * node.mass);\n    };\n  }();\n\n  forceAtlas2Proto.updateBBox = function () {\n    var minX = Infinity;\n    var minY = Infinity;\n    var maxX = -Infinity;\n    var maxY = -Infinity;\n\n    for (var i = 0; i < this.nodes.length; i++) {\n      var pos = this.nodes[i].position;\n      minX = Math.min(minX, pos[0]);\n      minY = Math.min(minY, pos[1]);\n      maxX = Math.max(maxX, pos[0]);\n      maxY = Math.max(maxY, pos[1]);\n    }\n\n    this.bbox[0] = minX;\n    this.bbox[1] = minY;\n    this.bbox[2] = maxX;\n    this.bbox[3] = maxY;\n  };\n\n  forceAtlas2Proto.getGlobalSpeed = function () {\n    return this._globalSpeed;\n  };\n  /****************************\n   * Main process\n   ***************************/\n\n\n  var forceAtlas2 = null;\n\n  self.onmessage = function (e) {\n    switch (e.data.cmd) {\n      case 'init':\n        forceAtlas2 = new ForceAtlas2();\n        forceAtlas2.initNodes(e.data.nodesPosition, e.data.nodesMass, e.data.nodesSize);\n        forceAtlas2.initEdges(e.data.edges, e.data.edgesWeight);\n        break;\n\n      case 'updateConfig':\n        if (forceAtlas2) {\n          for (var name in e.data.config) {\n            forceAtlas2[name] = e.data.config[name];\n          }\n        }\n\n        break;\n\n      case 'update':\n        var steps = e.data.steps;\n\n        if (forceAtlas2) {\n          for (var i = 0; i < steps; i++) {\n            forceAtlas2.update();\n          }\n\n          var nNodes = forceAtlas2.nodes.length;\n          var positionArr = new Float32Array(nNodes * 2); // Callback\n\n          for (var i = 0; i < nNodes; i++) {\n            var node = forceAtlas2.nodes[i];\n            positionArr[i * 2] = node.position[0];\n            positionArr[i * 2 + 1] = node.position[1];\n          }\n\n          self.postMessage({\n            buffer: positionArr.buffer,\n            globalSpeed: forceAtlas2.getGlobalSpeed()\n          }, [positionArr.buffer]);\n        } else {\n          // Not initialzied yet\n          var emptyArr = new Float32Array(); // Post transfer object\n\n          self.postMessage({\n            buffer: emptyArr.buffer,\n            globalSpeed: forceAtlas2.getGlobalSpeed()\n          }, [emptyArr.buffer]);\n        }\n\n        break;\n    }\n  };\n}\n\nexport default forceAtlas2Worker;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}