{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport BoundingBox from './BoundingBox';\nimport Plane from './Plane';\nimport vec3 from '../glmatrix/vec3';\nvar vec3Set = vec3.set;\nvar vec3Copy = vec3.copy;\nvar vec3TranformMat4 = vec3.transformMat4;\nvar mathMin = Math.min;\nvar mathMax = Math.max;\n/**\n * @constructor\n * @alias clay.Frustum\n */\nvar Frustum = function () {\n  /**\n   * Eight planes to enclose the frustum\n   * @type {clay.Plane[]}\n   */\n  this.planes = [];\n  for (var i = 0; i < 6; i++) {\n    this.planes.push(new Plane());\n  }\n\n  /**\n   * Bounding box of frustum\n   * @type {clay.BoundingBox}\n   */\n  this.boundingBox = new BoundingBox();\n\n  /**\n   * Eight vertices of frustum\n   * @type {Float32Array[]}\n   */\n  this.vertices = [];\n  for (var i = 0; i < 8; i++) {\n    this.vertices[i] = vec3.fromValues(0, 0, 0);\n  }\n};\nFrustum.prototype = {\n  // http://web.archive.org/web/20120531231005/http://crazyjoke.free.fr/doc/3D/plane%20extraction.pdf\n  /**\n   * Set frustum from a projection matrix\n   * @param {clay.Matrix4} projectionMatrix\n   */\n  setFromProjection: function (projectionMatrix) {\n    var planes = this.planes;\n    var m = projectionMatrix.array;\n    var m0 = m[0],\n      m1 = m[1],\n      m2 = m[2],\n      m3 = m[3];\n    var m4 = m[4],\n      m5 = m[5],\n      m6 = m[6],\n      m7 = m[7];\n    var m8 = m[8],\n      m9 = m[9],\n      m10 = m[10],\n      m11 = m[11];\n    var m12 = m[12],\n      m13 = m[13],\n      m14 = m[14],\n      m15 = m[15];\n\n    // Update planes\n    vec3Set(planes[0].normal.array, m3 - m0, m7 - m4, m11 - m8);\n    planes[0].distance = -(m15 - m12);\n    planes[0].normalize();\n    vec3Set(planes[1].normal.array, m3 + m0, m7 + m4, m11 + m8);\n    planes[1].distance = -(m15 + m12);\n    planes[1].normalize();\n    vec3Set(planes[2].normal.array, m3 + m1, m7 + m5, m11 + m9);\n    planes[2].distance = -(m15 + m13);\n    planes[2].normalize();\n    vec3Set(planes[3].normal.array, m3 - m1, m7 - m5, m11 - m9);\n    planes[3].distance = -(m15 - m13);\n    planes[3].normalize();\n    vec3Set(planes[4].normal.array, m3 - m2, m7 - m6, m11 - m10);\n    planes[4].distance = -(m15 - m14);\n    planes[4].normalize();\n    vec3Set(planes[5].normal.array, m3 + m2, m7 + m6, m11 + m10);\n    planes[5].distance = -(m15 + m14);\n    planes[5].normalize();\n\n    // Perspective projection\n    var boundingBox = this.boundingBox;\n    var vertices = this.vertices;\n    if (m15 === 0) {\n      var aspect = m5 / m0;\n      var zNear = -m14 / (m10 - 1);\n      var zFar = -m14 / (m10 + 1);\n      var farY = -zFar / m5;\n      var nearY = -zNear / m5;\n      // Update bounding box\n      boundingBox.min.set(-farY * aspect, -farY, zFar);\n      boundingBox.max.set(farY * aspect, farY, zNear);\n      // update vertices\n      //--- min z\n      // min x\n      vec3Set(vertices[0], -farY * aspect, -farY, zFar);\n      vec3Set(vertices[1], -farY * aspect, farY, zFar);\n      // max x\n      vec3Set(vertices[2], farY * aspect, -farY, zFar);\n      vec3Set(vertices[3], farY * aspect, farY, zFar);\n      //-- max z\n      vec3Set(vertices[4], -nearY * aspect, -nearY, zNear);\n      vec3Set(vertices[5], -nearY * aspect, nearY, zNear);\n      vec3Set(vertices[6], nearY * aspect, -nearY, zNear);\n      vec3Set(vertices[7], nearY * aspect, nearY, zNear);\n    } else {\n      // Orthographic projection\n      var left = (-1 - m12) / m0;\n      var right = (1 - m12) / m0;\n      var top = (1 - m13) / m5;\n      var bottom = (-1 - m13) / m5;\n      var near = (-1 - m14) / m10;\n      var far = (1 - m14) / m10;\n      boundingBox.min.set(Math.min(left, right), Math.min(bottom, top), Math.min(far, near));\n      boundingBox.max.set(Math.max(right, left), Math.max(top, bottom), Math.max(near, far));\n      var min = boundingBox.min.array;\n      var max = boundingBox.max.array;\n      //--- min z\n      // min x\n      vec3Set(vertices[0], min[0], min[1], min[2]);\n      vec3Set(vertices[1], min[0], max[1], min[2]);\n      // max x\n      vec3Set(vertices[2], max[0], min[1], min[2]);\n      vec3Set(vertices[3], max[0], max[1], min[2]);\n      //-- max z\n      vec3Set(vertices[4], min[0], min[1], max[2]);\n      vec3Set(vertices[5], min[0], max[1], max[2]);\n      vec3Set(vertices[6], max[0], min[1], max[2]);\n      vec3Set(vertices[7], max[0], max[1], max[2]);\n    }\n  },\n  /**\n   * Apply a affine transform matrix and set to the given bounding box\n   * @function\n   * @param {clay.BoundingBox}\n   * @param {clay.Matrix4}\n   * @return {clay.BoundingBox}\n   */\n  getTransformedBoundingBox: function () {\n    var tmpVec3 = vec3.create();\n    return function (bbox, matrix) {\n      var vertices = this.vertices;\n      var m4 = matrix.array;\n      var min = bbox.min;\n      var max = bbox.max;\n      var minArr = min.array;\n      var maxArr = max.array;\n      var v = vertices[0];\n      vec3TranformMat4(tmpVec3, v, m4);\n      vec3Copy(minArr, tmpVec3);\n      vec3Copy(maxArr, tmpVec3);\n      for (var i = 1; i < 8; i++) {\n        v = vertices[i];\n        vec3TranformMat4(tmpVec3, v, m4);\n        minArr[0] = mathMin(tmpVec3[0], minArr[0]);\n        minArr[1] = mathMin(tmpVec3[1], minArr[1]);\n        minArr[2] = mathMin(tmpVec3[2], minArr[2]);\n        maxArr[0] = mathMax(tmpVec3[0], maxArr[0]);\n        maxArr[1] = mathMax(tmpVec3[1], maxArr[1]);\n        maxArr[2] = mathMax(tmpVec3[2], maxArr[2]);\n      }\n      min._dirty = true;\n      max._dirty = true;\n      return bbox;\n    };\n  }()\n};\nexport default Frustum;","map":{"version":3,"names":["BoundingBox","Plane","vec3","vec3Set","set","vec3Copy","copy","vec3TranformMat4","transformMat4","mathMin","Math","min","mathMax","max","Frustum","planes","i","push","boundingBox","vertices","fromValues","prototype","setFromProjection","projectionMatrix","m","array","m0","m1","m2","m3","m4","m5","m6","m7","m8","m9","m10","m11","m12","m13","m14","m15","normal","distance","normalize","aspect","zNear","zFar","farY","nearY","left","right","top","bottom","near","far","getTransformedBoundingBox","tmpVec3","create","bbox","matrix","minArr","maxArr","v","_dirty"],"sources":["E:/mytest/node_modules/claygl/src/math/Frustum.js"],"sourcesContent":["import BoundingBox from './BoundingBox';\nimport Plane from './Plane';\n\nimport vec3 from '../glmatrix/vec3';\n\nvar vec3Set = vec3.set;\nvar vec3Copy = vec3.copy;\nvar vec3TranformMat4 = vec3.transformMat4;\nvar mathMin = Math.min;\nvar mathMax = Math.max;\n/**\n * @constructor\n * @alias clay.Frustum\n */\nvar Frustum = function() {\n\n    /**\n     * Eight planes to enclose the frustum\n     * @type {clay.Plane[]}\n     */\n    this.planes = [];\n\n    for (var i = 0; i < 6; i++) {\n        this.planes.push(new Plane());\n    }\n\n    /**\n     * Bounding box of frustum\n     * @type {clay.BoundingBox}\n     */\n    this.boundingBox = new BoundingBox();\n\n    /**\n     * Eight vertices of frustum\n     * @type {Float32Array[]}\n     */\n    this.vertices = [];\n    for (var i = 0; i < 8; i++) {\n        this.vertices[i] = vec3.fromValues(0, 0, 0);\n    }\n};\n\nFrustum.prototype = {\n\n    // http://web.archive.org/web/20120531231005/http://crazyjoke.free.fr/doc/3D/plane%20extraction.pdf\n    /**\n     * Set frustum from a projection matrix\n     * @param {clay.Matrix4} projectionMatrix\n     */\n    setFromProjection: function(projectionMatrix) {\n\n        var planes = this.planes;\n        var m = projectionMatrix.array;\n        var m0 = m[0], m1 = m[1], m2 = m[2], m3 = m[3];\n        var m4 = m[4], m5 = m[5], m6 = m[6], m7 = m[7];\n        var m8 = m[8], m9 = m[9], m10 = m[10], m11 = m[11];\n        var m12 = m[12], m13 = m[13], m14 = m[14], m15 = m[15];\n\n        // Update planes\n        vec3Set(planes[0].normal.array, m3 - m0, m7 - m4, m11 - m8);\n        planes[0].distance = -(m15 - m12);\n        planes[0].normalize();\n\n        vec3Set(planes[1].normal.array, m3 + m0, m7 + m4, m11 + m8);\n        planes[1].distance = -(m15 + m12);\n        planes[1].normalize();\n\n        vec3Set(planes[2].normal.array, m3 + m1, m7 + m5, m11 + m9);\n        planes[2].distance = -(m15 + m13);\n        planes[2].normalize();\n\n        vec3Set(planes[3].normal.array, m3 - m1, m7 - m5, m11 - m9);\n        planes[3].distance = -(m15 - m13);\n        planes[3].normalize();\n\n        vec3Set(planes[4].normal.array, m3 - m2, m7 - m6, m11 - m10);\n        planes[4].distance = -(m15 - m14);\n        planes[4].normalize();\n\n        vec3Set(planes[5].normal.array, m3 + m2, m7 + m6, m11 + m10);\n        planes[5].distance = -(m15 + m14);\n        planes[5].normalize();\n\n        // Perspective projection\n        var boundingBox = this.boundingBox;\n        var vertices = this.vertices;\n        if (m15 === 0)  {\n            var aspect = m5 / m0;\n            var zNear = -m14 / (m10 - 1);\n            var zFar = -m14 / (m10 + 1);\n            var farY = -zFar / m5;\n            var nearY = -zNear / m5;\n            // Update bounding box\n            boundingBox.min.set(-farY * aspect, -farY, zFar);\n            boundingBox.max.set(farY * aspect, farY, zNear);\n            // update vertices\n            //--- min z\n            // min x\n            vec3Set(vertices[0], -farY * aspect, -farY, zFar);\n            vec3Set(vertices[1], -farY * aspect, farY, zFar);\n            // max x\n            vec3Set(vertices[2], farY * aspect, -farY, zFar);\n            vec3Set(vertices[3], farY * aspect, farY, zFar);\n            //-- max z\n            vec3Set(vertices[4], -nearY * aspect, -nearY, zNear);\n            vec3Set(vertices[5], -nearY * aspect, nearY, zNear);\n            vec3Set(vertices[6], nearY * aspect, -nearY, zNear);\n            vec3Set(vertices[7], nearY * aspect, nearY, zNear);\n        }\n        else { // Orthographic projection\n            var left = (-1 - m12) / m0;\n            var right = (1 - m12) / m0;\n            var top = (1 - m13) / m5;\n            var bottom = (-1 - m13) / m5;\n            var near = (-1 - m14) / m10;\n            var far = (1 - m14) / m10;\n\n\n            boundingBox.min.set(Math.min(left, right), Math.min(bottom, top), Math.min(far, near));\n            boundingBox.max.set(Math.max(right, left), Math.max(top, bottom), Math.max(near, far));\n\n            var min = boundingBox.min.array;\n            var max = boundingBox.max.array;\n            //--- min z\n            // min x\n            vec3Set(vertices[0], min[0], min[1], min[2]);\n            vec3Set(vertices[1], min[0], max[1], min[2]);\n            // max x\n            vec3Set(vertices[2], max[0], min[1], min[2]);\n            vec3Set(vertices[3], max[0], max[1], min[2]);\n            //-- max z\n            vec3Set(vertices[4], min[0], min[1], max[2]);\n            vec3Set(vertices[5], min[0], max[1], max[2]);\n            vec3Set(vertices[6], max[0], min[1], max[2]);\n            vec3Set(vertices[7], max[0], max[1], max[2]);\n        }\n    },\n\n    /**\n     * Apply a affine transform matrix and set to the given bounding box\n     * @function\n     * @param {clay.BoundingBox}\n     * @param {clay.Matrix4}\n     * @return {clay.BoundingBox}\n     */\n    getTransformedBoundingBox: (function() {\n\n        var tmpVec3 = vec3.create();\n\n        return function(bbox, matrix) {\n            var vertices = this.vertices;\n\n            var m4 = matrix.array;\n            var min = bbox.min;\n            var max = bbox.max;\n            var minArr = min.array;\n            var maxArr = max.array;\n            var v = vertices[0];\n            vec3TranformMat4(tmpVec3, v, m4);\n            vec3Copy(minArr, tmpVec3);\n            vec3Copy(maxArr, tmpVec3);\n\n            for (var i = 1; i < 8; i++) {\n                v = vertices[i];\n                vec3TranformMat4(tmpVec3, v, m4);\n\n                minArr[0] = mathMin(tmpVec3[0], minArr[0]);\n                minArr[1] = mathMin(tmpVec3[1], minArr[1]);\n                minArr[2] = mathMin(tmpVec3[2], minArr[2]);\n\n                maxArr[0] = mathMax(tmpVec3[0], maxArr[0]);\n                maxArr[1] = mathMax(tmpVec3[1], maxArr[1]);\n                maxArr[2] = mathMax(tmpVec3[2], maxArr[2]);\n            }\n\n            min._dirty = true;\n            max._dirty = true;\n\n            return bbox;\n        };\n    }) ()\n};\nexport default Frustum;\n"],"mappings":";AAAA,OAAOA,WAAW,MAAM,eAAe;AACvC,OAAOC,KAAK,MAAM,SAAS;AAE3B,OAAOC,IAAI,MAAM,kBAAkB;AAEnC,IAAIC,OAAO,GAAGD,IAAI,CAACE,GAAG;AACtB,IAAIC,QAAQ,GAAGH,IAAI,CAACI,IAAI;AACxB,IAAIC,gBAAgB,GAAGL,IAAI,CAACM,aAAa;AACzC,IAAIC,OAAO,GAAGC,IAAI,CAACC,GAAG;AACtB,IAAIC,OAAO,GAAGF,IAAI,CAACG,GAAG;AACtB;AACA;AACA;AACA;AACA,IAAIC,OAAO,GAAG,SAAAA,CAAA,EAAW;EAErB;AACJ;AACA;AACA;EACI,IAAI,CAACC,MAAM,GAAG,EAAE;EAEhB,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,CAAC,EAAEA,CAAC,EAAE,EAAE;IACxB,IAAI,CAACD,MAAM,CAACE,IAAI,CAAC,IAAIhB,KAAK,CAAC,CAAC,CAAC;EACjC;;EAEA;AACJ;AACA;AACA;EACI,IAAI,CAACiB,WAAW,GAAG,IAAIlB,WAAW,CAAC,CAAC;;EAEpC;AACJ;AACA;AACA;EACI,IAAI,CAACmB,QAAQ,GAAG,EAAE;EAClB,KAAK,IAAIH,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,CAAC,EAAEA,CAAC,EAAE,EAAE;IACxB,IAAI,CAACG,QAAQ,CAACH,CAAC,CAAC,GAAGd,IAAI,CAACkB,UAAU,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;EAC/C;AACJ,CAAC;AAEDN,OAAO,CAACO,SAAS,GAAG;EAEhB;EACA;AACJ;AACA;AACA;EACIC,iBAAiB,EAAE,SAAAA,CAASC,gBAAgB,EAAE;IAE1C,IAAIR,MAAM,GAAG,IAAI,CAACA,MAAM;IACxB,IAAIS,CAAC,GAAGD,gBAAgB,CAACE,KAAK;IAC9B,IAAIC,EAAE,GAAGF,CAAC,CAAC,CAAC,CAAC;MAAEG,EAAE,GAAGH,CAAC,CAAC,CAAC,CAAC;MAAEI,EAAE,GAAGJ,CAAC,CAAC,CAAC,CAAC;MAAEK,EAAE,GAAGL,CAAC,CAAC,CAAC,CAAC;IAC9C,IAAIM,EAAE,GAAGN,CAAC,CAAC,CAAC,CAAC;MAAEO,EAAE,GAAGP,CAAC,CAAC,CAAC,CAAC;MAAEQ,EAAE,GAAGR,CAAC,CAAC,CAAC,CAAC;MAAES,EAAE,GAAGT,CAAC,CAAC,CAAC,CAAC;IAC9C,IAAIU,EAAE,GAAGV,CAAC,CAAC,CAAC,CAAC;MAAEW,EAAE,GAAGX,CAAC,CAAC,CAAC,CAAC;MAAEY,GAAG,GAAGZ,CAAC,CAAC,EAAE,CAAC;MAAEa,GAAG,GAAGb,CAAC,CAAC,EAAE,CAAC;IAClD,IAAIc,GAAG,GAAGd,CAAC,CAAC,EAAE,CAAC;MAAEe,GAAG,GAAGf,CAAC,CAAC,EAAE,CAAC;MAAEgB,GAAG,GAAGhB,CAAC,CAAC,EAAE,CAAC;MAAEiB,GAAG,GAAGjB,CAAC,CAAC,EAAE,CAAC;;IAEtD;IACArB,OAAO,CAACY,MAAM,CAAC,CAAC,CAAC,CAAC2B,MAAM,CAACjB,KAAK,EAAEI,EAAE,GAAGH,EAAE,EAAEO,EAAE,GAAGH,EAAE,EAAEO,GAAG,GAAGH,EAAE,CAAC;IAC3DnB,MAAM,CAAC,CAAC,CAAC,CAAC4B,QAAQ,GAAG,EAAEF,GAAG,GAAGH,GAAG,CAAC;IACjCvB,MAAM,CAAC,CAAC,CAAC,CAAC6B,SAAS,CAAC,CAAC;IAErBzC,OAAO,CAACY,MAAM,CAAC,CAAC,CAAC,CAAC2B,MAAM,CAACjB,KAAK,EAAEI,EAAE,GAAGH,EAAE,EAAEO,EAAE,GAAGH,EAAE,EAAEO,GAAG,GAAGH,EAAE,CAAC;IAC3DnB,MAAM,CAAC,CAAC,CAAC,CAAC4B,QAAQ,GAAG,EAAEF,GAAG,GAAGH,GAAG,CAAC;IACjCvB,MAAM,CAAC,CAAC,CAAC,CAAC6B,SAAS,CAAC,CAAC;IAErBzC,OAAO,CAACY,MAAM,CAAC,CAAC,CAAC,CAAC2B,MAAM,CAACjB,KAAK,EAAEI,EAAE,GAAGF,EAAE,EAAEM,EAAE,GAAGF,EAAE,EAAEM,GAAG,GAAGF,EAAE,CAAC;IAC3DpB,MAAM,CAAC,CAAC,CAAC,CAAC4B,QAAQ,GAAG,EAAEF,GAAG,GAAGF,GAAG,CAAC;IACjCxB,MAAM,CAAC,CAAC,CAAC,CAAC6B,SAAS,CAAC,CAAC;IAErBzC,OAAO,CAACY,MAAM,CAAC,CAAC,CAAC,CAAC2B,MAAM,CAACjB,KAAK,EAAEI,EAAE,GAAGF,EAAE,EAAEM,EAAE,GAAGF,EAAE,EAAEM,GAAG,GAAGF,EAAE,CAAC;IAC3DpB,MAAM,CAAC,CAAC,CAAC,CAAC4B,QAAQ,GAAG,EAAEF,GAAG,GAAGF,GAAG,CAAC;IACjCxB,MAAM,CAAC,CAAC,CAAC,CAAC6B,SAAS,CAAC,CAAC;IAErBzC,OAAO,CAACY,MAAM,CAAC,CAAC,CAAC,CAAC2B,MAAM,CAACjB,KAAK,EAAEI,EAAE,GAAGD,EAAE,EAAEK,EAAE,GAAGD,EAAE,EAAEK,GAAG,GAAGD,GAAG,CAAC;IAC5DrB,MAAM,CAAC,CAAC,CAAC,CAAC4B,QAAQ,GAAG,EAAEF,GAAG,GAAGD,GAAG,CAAC;IACjCzB,MAAM,CAAC,CAAC,CAAC,CAAC6B,SAAS,CAAC,CAAC;IAErBzC,OAAO,CAACY,MAAM,CAAC,CAAC,CAAC,CAAC2B,MAAM,CAACjB,KAAK,EAAEI,EAAE,GAAGD,EAAE,EAAEK,EAAE,GAAGD,EAAE,EAAEK,GAAG,GAAGD,GAAG,CAAC;IAC5DrB,MAAM,CAAC,CAAC,CAAC,CAAC4B,QAAQ,GAAG,EAAEF,GAAG,GAAGD,GAAG,CAAC;IACjCzB,MAAM,CAAC,CAAC,CAAC,CAAC6B,SAAS,CAAC,CAAC;;IAErB;IACA,IAAI1B,WAAW,GAAG,IAAI,CAACA,WAAW;IAClC,IAAIC,QAAQ,GAAG,IAAI,CAACA,QAAQ;IAC5B,IAAIsB,GAAG,KAAK,CAAC,EAAG;MACZ,IAAII,MAAM,GAAGd,EAAE,GAAGL,EAAE;MACpB,IAAIoB,KAAK,GAAG,CAACN,GAAG,IAAIJ,GAAG,GAAG,CAAC,CAAC;MAC5B,IAAIW,IAAI,GAAG,CAACP,GAAG,IAAIJ,GAAG,GAAG,CAAC,CAAC;MAC3B,IAAIY,IAAI,GAAG,CAACD,IAAI,GAAGhB,EAAE;MACrB,IAAIkB,KAAK,GAAG,CAACH,KAAK,GAAGf,EAAE;MACvB;MACAb,WAAW,CAACP,GAAG,CAACP,GAAG,CAAC,CAAC4C,IAAI,GAAGH,MAAM,EAAE,CAACG,IAAI,EAAED,IAAI,CAAC;MAChD7B,WAAW,CAACL,GAAG,CAACT,GAAG,CAAC4C,IAAI,GAAGH,MAAM,EAAEG,IAAI,EAAEF,KAAK,CAAC;MAC/C;MACA;MACA;MACA3C,OAAO,CAACgB,QAAQ,CAAC,CAAC,CAAC,EAAE,CAAC6B,IAAI,GAAGH,MAAM,EAAE,CAACG,IAAI,EAAED,IAAI,CAAC;MACjD5C,OAAO,CAACgB,QAAQ,CAAC,CAAC,CAAC,EAAE,CAAC6B,IAAI,GAAGH,MAAM,EAAEG,IAAI,EAAED,IAAI,CAAC;MAChD;MACA5C,OAAO,CAACgB,QAAQ,CAAC,CAAC,CAAC,EAAE6B,IAAI,GAAGH,MAAM,EAAE,CAACG,IAAI,EAAED,IAAI,CAAC;MAChD5C,OAAO,CAACgB,QAAQ,CAAC,CAAC,CAAC,EAAE6B,IAAI,GAAGH,MAAM,EAAEG,IAAI,EAAED,IAAI,CAAC;MAC/C;MACA5C,OAAO,CAACgB,QAAQ,CAAC,CAAC,CAAC,EAAE,CAAC8B,KAAK,GAAGJ,MAAM,EAAE,CAACI,KAAK,EAAEH,KAAK,CAAC;MACpD3C,OAAO,CAACgB,QAAQ,CAAC,CAAC,CAAC,EAAE,CAAC8B,KAAK,GAAGJ,MAAM,EAAEI,KAAK,EAAEH,KAAK,CAAC;MACnD3C,OAAO,CAACgB,QAAQ,CAAC,CAAC,CAAC,EAAE8B,KAAK,GAAGJ,MAAM,EAAE,CAACI,KAAK,EAAEH,KAAK,CAAC;MACnD3C,OAAO,CAACgB,QAAQ,CAAC,CAAC,CAAC,EAAE8B,KAAK,GAAGJ,MAAM,EAAEI,KAAK,EAAEH,KAAK,CAAC;IACtD,CAAC,MACI;MAAE;MACH,IAAII,IAAI,GAAG,CAAC,CAAC,CAAC,GAAGZ,GAAG,IAAIZ,EAAE;MAC1B,IAAIyB,KAAK,GAAG,CAAC,CAAC,GAAGb,GAAG,IAAIZ,EAAE;MAC1B,IAAI0B,GAAG,GAAG,CAAC,CAAC,GAAGb,GAAG,IAAIR,EAAE;MACxB,IAAIsB,MAAM,GAAG,CAAC,CAAC,CAAC,GAAGd,GAAG,IAAIR,EAAE;MAC5B,IAAIuB,IAAI,GAAG,CAAC,CAAC,CAAC,GAAGd,GAAG,IAAIJ,GAAG;MAC3B,IAAImB,GAAG,GAAG,CAAC,CAAC,GAAGf,GAAG,IAAIJ,GAAG;MAGzBlB,WAAW,CAACP,GAAG,CAACP,GAAG,CAACM,IAAI,CAACC,GAAG,CAACuC,IAAI,EAAEC,KAAK,CAAC,EAAEzC,IAAI,CAACC,GAAG,CAAC0C,MAAM,EAAED,GAAG,CAAC,EAAE1C,IAAI,CAACC,GAAG,CAAC4C,GAAG,EAAED,IAAI,CAAC,CAAC;MACtFpC,WAAW,CAACL,GAAG,CAACT,GAAG,CAACM,IAAI,CAACG,GAAG,CAACsC,KAAK,EAAED,IAAI,CAAC,EAAExC,IAAI,CAACG,GAAG,CAACuC,GAAG,EAAEC,MAAM,CAAC,EAAE3C,IAAI,CAACG,GAAG,CAACyC,IAAI,EAAEC,GAAG,CAAC,CAAC;MAEtF,IAAI5C,GAAG,GAAGO,WAAW,CAACP,GAAG,CAACc,KAAK;MAC/B,IAAIZ,GAAG,GAAGK,WAAW,CAACL,GAAG,CAACY,KAAK;MAC/B;MACA;MACAtB,OAAO,CAACgB,QAAQ,CAAC,CAAC,CAAC,EAAER,GAAG,CAAC,CAAC,CAAC,EAAEA,GAAG,CAAC,CAAC,CAAC,EAAEA,GAAG,CAAC,CAAC,CAAC,CAAC;MAC5CR,OAAO,CAACgB,QAAQ,CAAC,CAAC,CAAC,EAAER,GAAG,CAAC,CAAC,CAAC,EAAEE,GAAG,CAAC,CAAC,CAAC,EAAEF,GAAG,CAAC,CAAC,CAAC,CAAC;MAC5C;MACAR,OAAO,CAACgB,QAAQ,CAAC,CAAC,CAAC,EAAEN,GAAG,CAAC,CAAC,CAAC,EAAEF,GAAG,CAAC,CAAC,CAAC,EAAEA,GAAG,CAAC,CAAC,CAAC,CAAC;MAC5CR,OAAO,CAACgB,QAAQ,CAAC,CAAC,CAAC,EAAEN,GAAG,CAAC,CAAC,CAAC,EAAEA,GAAG,CAAC,CAAC,CAAC,EAAEF,GAAG,CAAC,CAAC,CAAC,CAAC;MAC5C;MACAR,OAAO,CAACgB,QAAQ,CAAC,CAAC,CAAC,EAAER,GAAG,CAAC,CAAC,CAAC,EAAEA,GAAG,CAAC,CAAC,CAAC,EAAEE,GAAG,CAAC,CAAC,CAAC,CAAC;MAC5CV,OAAO,CAACgB,QAAQ,CAAC,CAAC,CAAC,EAAER,GAAG,CAAC,CAAC,CAAC,EAAEE,GAAG,CAAC,CAAC,CAAC,EAAEA,GAAG,CAAC,CAAC,CAAC,CAAC;MAC5CV,OAAO,CAACgB,QAAQ,CAAC,CAAC,CAAC,EAAEN,GAAG,CAAC,CAAC,CAAC,EAAEF,GAAG,CAAC,CAAC,CAAC,EAAEE,GAAG,CAAC,CAAC,CAAC,CAAC;MAC5CV,OAAO,CAACgB,QAAQ,CAAC,CAAC,CAAC,EAAEN,GAAG,CAAC,CAAC,CAAC,EAAEA,GAAG,CAAC,CAAC,CAAC,EAAEA,GAAG,CAAC,CAAC,CAAC,CAAC;IAChD;EACJ,CAAC;EAED;AACJ;AACA;AACA;AACA;AACA;AACA;EACI2C,yBAAyB,EAAG,YAAW;IAEnC,IAAIC,OAAO,GAAGvD,IAAI,CAACwD,MAAM,CAAC,CAAC;IAE3B,OAAO,UAASC,IAAI,EAAEC,MAAM,EAAE;MAC1B,IAAIzC,QAAQ,GAAG,IAAI,CAACA,QAAQ;MAE5B,IAAIW,EAAE,GAAG8B,MAAM,CAACnC,KAAK;MACrB,IAAId,GAAG,GAAGgD,IAAI,CAAChD,GAAG;MAClB,IAAIE,GAAG,GAAG8C,IAAI,CAAC9C,GAAG;MAClB,IAAIgD,MAAM,GAAGlD,GAAG,CAACc,KAAK;MACtB,IAAIqC,MAAM,GAAGjD,GAAG,CAACY,KAAK;MACtB,IAAIsC,CAAC,GAAG5C,QAAQ,CAAC,CAAC,CAAC;MACnBZ,gBAAgB,CAACkD,OAAO,EAAEM,CAAC,EAAEjC,EAAE,CAAC;MAChCzB,QAAQ,CAACwD,MAAM,EAAEJ,OAAO,CAAC;MACzBpD,QAAQ,CAACyD,MAAM,EAAEL,OAAO,CAAC;MAEzB,KAAK,IAAIzC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,CAAC,EAAEA,CAAC,EAAE,EAAE;QACxB+C,CAAC,GAAG5C,QAAQ,CAACH,CAAC,CAAC;QACfT,gBAAgB,CAACkD,OAAO,EAAEM,CAAC,EAAEjC,EAAE,CAAC;QAEhC+B,MAAM,CAAC,CAAC,CAAC,GAAGpD,OAAO,CAACgD,OAAO,CAAC,CAAC,CAAC,EAAEI,MAAM,CAAC,CAAC,CAAC,CAAC;QAC1CA,MAAM,CAAC,CAAC,CAAC,GAAGpD,OAAO,CAACgD,OAAO,CAAC,CAAC,CAAC,EAAEI,MAAM,CAAC,CAAC,CAAC,CAAC;QAC1CA,MAAM,CAAC,CAAC,CAAC,GAAGpD,OAAO,CAACgD,OAAO,CAAC,CAAC,CAAC,EAAEI,MAAM,CAAC,CAAC,CAAC,CAAC;QAE1CC,MAAM,CAAC,CAAC,CAAC,GAAGlD,OAAO,CAAC6C,OAAO,CAAC,CAAC,CAAC,EAAEK,MAAM,CAAC,CAAC,CAAC,CAAC;QAC1CA,MAAM,CAAC,CAAC,CAAC,GAAGlD,OAAO,CAAC6C,OAAO,CAAC,CAAC,CAAC,EAAEK,MAAM,CAAC,CAAC,CAAC,CAAC;QAC1CA,MAAM,CAAC,CAAC,CAAC,GAAGlD,OAAO,CAAC6C,OAAO,CAAC,CAAC,CAAC,EAAEK,MAAM,CAAC,CAAC,CAAC,CAAC;MAC9C;MAEAnD,GAAG,CAACqD,MAAM,GAAG,IAAI;MACjBnD,GAAG,CAACmD,MAAM,GAAG,IAAI;MAEjB,OAAOL,IAAI;IACf,CAAC;EACL,CAAC,CAAG;AACR,CAAC;AACD,eAAe7C,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}