{"ast":null,"code":"import \"core-js/modules/es.array-buffer.detached.js\";\nimport \"core-js/modules/es.array-buffer.transfer.js\";\nimport \"core-js/modules/es.array-buffer.transfer-to-fixed-length.js\";\nimport \"core-js/modules/es.typed-array.to-reversed.js\";\nimport \"core-js/modules/es.typed-array.to-sorted.js\";\nimport \"core-js/modules/es.typed-array.with.js\";\nimport Texture from '../Texture';\nimport Texture2D from '../Texture2D';\nimport TextureCube from '../TextureCube';\n\n// http://msdn.microsoft.com/en-us/library/windows/desktop/bb943991(v=vs.85).aspx\n// https://github.com/toji/webgl-texture-utils/blob/master/texture-util/dds.js\nvar DDS_MAGIC = 0x20534444;\nvar DDSD_CAPS = 0x1;\nvar DDSD_HEIGHT = 0x2;\nvar DDSD_WIDTH = 0x4;\nvar DDSD_PITCH = 0x8;\nvar DDSD_PIXELFORMAT = 0x1000;\nvar DDSD_MIPMAPCOUNT = 0x20000;\nvar DDSD_LINEARSIZE = 0x80000;\nvar DDSD_DEPTH = 0x800000;\nvar DDSCAPS_COMPLEX = 0x8;\nvar DDSCAPS_MIPMAP = 0x400000;\nvar DDSCAPS_TEXTURE = 0x1000;\nvar DDSCAPS2_CUBEMAP = 0x200;\nvar DDSCAPS2_CUBEMAP_POSITIVEX = 0x400;\nvar DDSCAPS2_CUBEMAP_NEGATIVEX = 0x800;\nvar DDSCAPS2_CUBEMAP_POSITIVEY = 0x1000;\nvar DDSCAPS2_CUBEMAP_NEGATIVEY = 0x2000;\nvar DDSCAPS2_CUBEMAP_POSITIVEZ = 0x4000;\nvar DDSCAPS2_CUBEMAP_NEGATIVEZ = 0x8000;\nvar DDSCAPS2_VOLUME = 0x200000;\nvar DDPF_ALPHAPIXELS = 0x1;\nvar DDPF_ALPHA = 0x2;\nvar DDPF_FOURCC = 0x4;\nvar DDPF_RGB = 0x40;\nvar DDPF_YUV = 0x200;\nvar DDPF_LUMINANCE = 0x20000;\nfunction fourCCToInt32(value) {\n  return value.charCodeAt(0) + (value.charCodeAt(1) << 8) + (value.charCodeAt(2) << 16) + (value.charCodeAt(3) << 24);\n}\nfunction int32ToFourCC(value) {\n  return String.fromCharCode(value & 0xff, value >> 8 & 0xff, value >> 16 & 0xff, value >> 24 & 0xff);\n}\nvar headerLengthInt = 31; // The header length in 32 bit ints\n\nvar FOURCC_DXT1 = fourCCToInt32('DXT1');\nvar FOURCC_DXT3 = fourCCToInt32('DXT3');\nvar FOURCC_DXT5 = fourCCToInt32('DXT5');\n// Offsets into the header array\nvar off_magic = 0;\nvar off_size = 1;\nvar off_flags = 2;\nvar off_height = 3;\nvar off_width = 4;\nvar off_mipmapCount = 7;\nvar off_pfFlags = 20;\nvar off_pfFourCC = 21;\nvar off_caps = 27;\nvar off_caps2 = 28;\nvar off_caps3 = 29;\nvar off_caps4 = 30;\nvar ret = {\n  parse: function (arrayBuffer, out) {\n    var header = new Int32Array(arrayBuffer, 0, headerLengthInt);\n    if (header[off_magic] !== DDS_MAGIC) {\n      return null;\n    }\n    if (!header(off_pfFlags) & DDPF_FOURCC) {\n      return null;\n    }\n    var fourCC = header(off_pfFourCC);\n    var width = header[off_width];\n    var height = header[off_height];\n    var isCubeMap = header[off_caps2] & DDSCAPS2_CUBEMAP;\n    var hasMipmap = header[off_flags] & DDSD_MIPMAPCOUNT;\n    var blockBytes, internalFormat;\n    switch (fourCC) {\n      case FOURCC_DXT1:\n        blockBytes = 8;\n        internalFormat = Texture.COMPRESSED_RGB_S3TC_DXT1_EXT;\n        break;\n      case FOURCC_DXT3:\n        blockBytes = 16;\n        internalFormat = Texture.COMPRESSED_RGBA_S3TC_DXT3_EXT;\n        break;\n      case FOURCC_DXT5:\n        blockBytes = 16;\n        internalFormat = Texture.COMPRESSED_RGBA_S3TC_DXT5_EXT;\n        break;\n      default:\n        return null;\n    }\n    var dataOffset = header[off_size] + 4;\n    // TODO: Suppose all face are existed\n    var faceNumber = isCubeMap ? 6 : 1;\n    var mipmapCount = 1;\n    if (hasMipmap) {\n      mipmapCount = Math.max(1, header[off_mipmapCount]);\n    }\n    var textures = [];\n    for (var f = 0; f < faceNumber; f++) {\n      var _width = width;\n      var _height = height;\n      textures[f] = new Texture2D({\n        width: _width,\n        height: _height,\n        format: internalFormat\n      });\n      var mipmaps = [];\n      for (var i = 0; i < mipmapCount; i++) {\n        var dataLength = Math.max(4, _width) / 4 * Math.max(4, _height) / 4 * blockBytes;\n        var byteArray = new Uint8Array(arrayBuffer, dataOffset, dataLength);\n        dataOffset += dataLength;\n        _width *= 0.5;\n        _height *= 0.5;\n        mipmaps[i] = byteArray;\n      }\n      textures[f].pixels = mipmaps[0];\n      if (hasMipmap) {\n        textures[f].mipmaps = mipmaps;\n      }\n    }\n    // TODO\n    // return isCubeMap ? textures : textures[0];\n    if (out) {\n      out.width = textures[0].width;\n      out.height = textures[0].height;\n      out.format = textures[0].format;\n      out.pixels = textures[0].pixels;\n      out.mipmaps = textures[0].mipmaps;\n    } else {\n      return textures[0];\n    }\n  }\n};\nexport default ret;","map":{"version":3,"names":["Texture","Texture2D","TextureCube","DDS_MAGIC","DDSD_CAPS","DDSD_HEIGHT","DDSD_WIDTH","DDSD_PITCH","DDSD_PIXELFORMAT","DDSD_MIPMAPCOUNT","DDSD_LINEARSIZE","DDSD_DEPTH","DDSCAPS_COMPLEX","DDSCAPS_MIPMAP","DDSCAPS_TEXTURE","DDSCAPS2_CUBEMAP","DDSCAPS2_CUBEMAP_POSITIVEX","DDSCAPS2_CUBEMAP_NEGATIVEX","DDSCAPS2_CUBEMAP_POSITIVEY","DDSCAPS2_CUBEMAP_NEGATIVEY","DDSCAPS2_CUBEMAP_POSITIVEZ","DDSCAPS2_CUBEMAP_NEGATIVEZ","DDSCAPS2_VOLUME","DDPF_ALPHAPIXELS","DDPF_ALPHA","DDPF_FOURCC","DDPF_RGB","DDPF_YUV","DDPF_LUMINANCE","fourCCToInt32","value","charCodeAt","int32ToFourCC","String","fromCharCode","headerLengthInt","FOURCC_DXT1","FOURCC_DXT3","FOURCC_DXT5","off_magic","off_size","off_flags","off_height","off_width","off_mipmapCount","off_pfFlags","off_pfFourCC","off_caps","off_caps2","off_caps3","off_caps4","ret","parse","arrayBuffer","out","header","Int32Array","fourCC","width","height","isCubeMap","hasMipmap","blockBytes","internalFormat","COMPRESSED_RGB_S3TC_DXT1_EXT","COMPRESSED_RGBA_S3TC_DXT3_EXT","COMPRESSED_RGBA_S3TC_DXT5_EXT","dataOffset","faceNumber","mipmapCount","Math","max","textures","f","_width","_height","format","mipmaps","i","dataLength","byteArray","Uint8Array","pixels"],"sources":["E:/QuestionairePlanet_Fronted/mytest/node_modules/claygl/src/util/dds.js"],"sourcesContent":["import Texture from '../Texture';\nimport Texture2D from '../Texture2D';\nimport TextureCube from '../TextureCube';\n\n// http://msdn.microsoft.com/en-us/library/windows/desktop/bb943991(v=vs.85).aspx\n// https://github.com/toji/webgl-texture-utils/blob/master/texture-util/dds.js\nvar DDS_MAGIC = 0x20534444;\n\nvar DDSD_CAPS = 0x1;\nvar DDSD_HEIGHT = 0x2;\nvar DDSD_WIDTH = 0x4;\nvar DDSD_PITCH = 0x8;\nvar DDSD_PIXELFORMAT = 0x1000;\nvar DDSD_MIPMAPCOUNT = 0x20000;\nvar DDSD_LINEARSIZE = 0x80000;\nvar DDSD_DEPTH = 0x800000;\n\nvar DDSCAPS_COMPLEX = 0x8;\nvar DDSCAPS_MIPMAP = 0x400000;\nvar DDSCAPS_TEXTURE = 0x1000;\n\nvar DDSCAPS2_CUBEMAP = 0x200;\nvar DDSCAPS2_CUBEMAP_POSITIVEX = 0x400;\nvar DDSCAPS2_CUBEMAP_NEGATIVEX = 0x800;\nvar DDSCAPS2_CUBEMAP_POSITIVEY = 0x1000;\nvar DDSCAPS2_CUBEMAP_NEGATIVEY = 0x2000;\nvar DDSCAPS2_CUBEMAP_POSITIVEZ = 0x4000;\nvar DDSCAPS2_CUBEMAP_NEGATIVEZ = 0x8000;\nvar DDSCAPS2_VOLUME = 0x200000;\n\nvar DDPF_ALPHAPIXELS = 0x1;\nvar DDPF_ALPHA = 0x2;\nvar DDPF_FOURCC = 0x4;\nvar DDPF_RGB = 0x40;\nvar DDPF_YUV = 0x200;\nvar DDPF_LUMINANCE = 0x20000;\n\nfunction fourCCToInt32(value) {\n    return value.charCodeAt(0) +\n        (value.charCodeAt(1) << 8) +\n        (value.charCodeAt(2) << 16) +\n        (value.charCodeAt(3) << 24);\n}\n\nfunction int32ToFourCC(value) {\n    return String.fromCharCode(\n        value & 0xff,\n        (value >> 8) & 0xff,\n        (value >> 16) & 0xff,\n        (value >> 24) & 0xff\n    );\n}\n\nvar headerLengthInt = 31; // The header length in 32 bit ints\n\nvar FOURCC_DXT1 = fourCCToInt32('DXT1');\nvar FOURCC_DXT3 = fourCCToInt32('DXT3');\nvar FOURCC_DXT5 = fourCCToInt32('DXT5');\n// Offsets into the header array\nvar off_magic = 0;\n\nvar off_size = 1;\nvar off_flags = 2;\nvar off_height = 3;\nvar off_width = 4;\n\nvar off_mipmapCount = 7;\n\nvar off_pfFlags = 20;\nvar off_pfFourCC = 21;\n\nvar off_caps = 27;\nvar off_caps2 = 28;\nvar off_caps3 = 29;\nvar off_caps4 = 30;\n\nvar ret = {\n    parse: function(arrayBuffer, out) {\n        var header = new Int32Array(arrayBuffer, 0, headerLengthInt);\n        if (header[off_magic] !== DDS_MAGIC) {\n            return null;\n        }\n        if (!header(off_pfFlags) & DDPF_FOURCC) {\n            return null;\n        }\n\n        var fourCC = header(off_pfFourCC);\n        var width = header[off_width];\n        var height = header[off_height];\n        var isCubeMap = header[off_caps2] & DDSCAPS2_CUBEMAP;\n        var hasMipmap = header[off_flags] & DDSD_MIPMAPCOUNT;\n        var blockBytes, internalFormat;\n        switch(fourCC) {\n            case FOURCC_DXT1:\n                blockBytes = 8;\n                internalFormat = Texture.COMPRESSED_RGB_S3TC_DXT1_EXT;\n                break;\n            case FOURCC_DXT3:\n                blockBytes = 16;\n                internalFormat = Texture.COMPRESSED_RGBA_S3TC_DXT3_EXT;\n                break;\n            case FOURCC_DXT5:\n                blockBytes = 16;\n                internalFormat = Texture.COMPRESSED_RGBA_S3TC_DXT5_EXT;\n                break;\n            default:\n                return null;\n        }\n        var dataOffset = header[off_size] + 4;\n        // TODO: Suppose all face are existed\n        var faceNumber = isCubeMap ? 6 : 1;\n        var mipmapCount = 1;\n        if (hasMipmap) {\n            mipmapCount = Math.max(1, header[off_mipmapCount]);\n        }\n\n        var textures = [];\n        for (var f = 0; f < faceNumber; f++) {\n            var _width = width;\n            var _height = height;\n            textures[f] = new Texture2D({\n                width: _width,\n                height: _height,\n                format: internalFormat\n            });\n            var mipmaps = [];\n            for (var i = 0; i < mipmapCount; i++) {\n                var dataLength = Math.max(4, _width) / 4 * Math.max(4, _height) / 4 * blockBytes;\n                var byteArray = new Uint8Array(arrayBuffer, dataOffset, dataLength);\n\n                dataOffset += dataLength;\n                _width *= 0.5;\n                _height *= 0.5;\n                mipmaps[i] = byteArray;\n            }\n            textures[f].pixels = mipmaps[0];\n            if (hasMipmap) {\n                textures[f].mipmaps = mipmaps;\n            }\n        }\n        // TODO\n        // return isCubeMap ? textures : textures[0];\n        if (out) {\n            out.width = textures[0].width;\n            out.height = textures[0].height;\n            out.format = textures[0].format;\n            out.pixels = textures[0].pixels;\n            out.mipmaps = textures[0].mipmaps;\n        }\n        else {\n            return textures[0];\n        }\n    }\n};\n\nexport default ret;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}