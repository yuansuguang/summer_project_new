{"ast":null,"code":"import mat2d from '../glmatrix/mat2d';\n\n/**\n * @constructor\n * @alias clay.Matrix2d\n */\nvar Matrix2d = function () {\n  /**\n   * Storage of Matrix2d\n   * @name array\n   * @type {Float32Array}\n   * @memberOf clay.Matrix2d#\n   */\n  this.array = mat2d.create();\n\n  /**\n   * @name _dirty\n   * @type {boolean}\n   * @memberOf clay.Matrix2d#\n   */\n  this._dirty = true;\n};\nMatrix2d.prototype = {\n  constructor: Matrix2d,\n  /**\n   * Set components from array\n   * @param  {Float32Array|number[]} arr\n   */\n  setArray: function (arr) {\n    for (var i = 0; i < this.array.length; i++) {\n      this.array[i] = arr[i];\n    }\n    this._dirty = true;\n    return this;\n  },\n  /**\n   * Clone a new Matrix2d\n   * @return {clay.Matrix2d}\n   */\n  clone: function () {\n    return new Matrix2d().copy(this);\n  },\n  /**\n   * Copy from b\n   * @param  {clay.Matrix2d} b\n   * @return {clay.Matrix2d}\n   */\n  copy: function (b) {\n    mat2d.copy(this.array, b.array);\n    this._dirty = true;\n    return this;\n  },\n  /**\n   * Calculate matrix determinant\n   * @return {number}\n   */\n  determinant: function () {\n    return mat2d.determinant(this.array);\n  },\n  /**\n   * Set to a identity matrix\n   * @return {clay.Matrix2d}\n   */\n  identity: function () {\n    mat2d.identity(this.array);\n    this._dirty = true;\n    return this;\n  },\n  /**\n   * Invert self\n   * @return {clay.Matrix2d}\n   */\n  invert: function () {\n    mat2d.invert(this.array, this.array);\n    this._dirty = true;\n    return this;\n  },\n  /**\n   * Alias for mutiply\n   * @param  {clay.Matrix2d} b\n   * @return {clay.Matrix2d}\n   */\n  mul: function (b) {\n    mat2d.mul(this.array, this.array, b.array);\n    this._dirty = true;\n    return this;\n  },\n  /**\n   * Alias for multiplyLeft\n   * @param  {clay.Matrix2d} a\n   * @return {clay.Matrix2d}\n   */\n  mulLeft: function (b) {\n    mat2d.mul(this.array, b.array, this.array);\n    this._dirty = true;\n    return this;\n  },\n  /**\n   * Multiply self and b\n   * @param  {clay.Matrix2d} b\n   * @return {clay.Matrix2d}\n   */\n  multiply: function (b) {\n    mat2d.multiply(this.array, this.array, b.array);\n    this._dirty = true;\n    return this;\n  },\n  /**\n   * Multiply a and self, a is on the left\n   * @param  {clay.Matrix2d} a\n   * @return {clay.Matrix2d}\n   */\n  multiplyLeft: function (b) {\n    mat2d.multiply(this.array, b.array, this.array);\n    this._dirty = true;\n    return this;\n  },\n  /**\n   * Rotate self by a given radian\n   * @param  {number}   rad\n   * @return {clay.Matrix2d}\n   */\n  rotate: function (rad) {\n    mat2d.rotate(this.array, this.array, rad);\n    this._dirty = true;\n    return this;\n  },\n  /**\n   * Scale self by s\n   * @param  {clay.Vector2}  s\n   * @return {clay.Matrix2d}\n   */\n  scale: function (s) {\n    mat2d.scale(this.array, this.array, s.array);\n    this._dirty = true;\n    return this;\n  },\n  /**\n   * Translate self by v\n   * @param  {clay.Vector2}  v\n   * @return {clay.Matrix2d}\n   */\n  translate: function (v) {\n    mat2d.translate(this.array, this.array, v.array);\n    this._dirty = true;\n    return this;\n  },\n  toString: function () {\n    return '[' + Array.prototype.join.call(this.array, ',') + ']';\n  },\n  toArray: function () {\n    return Array.prototype.slice.call(this.array);\n  }\n};\n\n/**\n * @param  {clay.Matrix2d} out\n * @param  {clay.Matrix2d} a\n * @return {clay.Matrix2d}\n */\nMatrix2d.copy = function (out, a) {\n  mat2d.copy(out.array, a.array);\n  out._dirty = true;\n  return out;\n};\n\n/**\n * @param  {clay.Matrix2d} a\n * @return {number}\n */\nMatrix2d.determinant = function (a) {\n  return mat2d.determinant(a.array);\n};\n\n/**\n * @param  {clay.Matrix2d} out\n * @return {clay.Matrix2d}\n */\nMatrix2d.identity = function (out) {\n  mat2d.identity(out.array);\n  out._dirty = true;\n  return out;\n};\n\n/**\n * @param  {clay.Matrix2d} out\n * @param  {clay.Matrix2d} a\n * @return {clay.Matrix2d}\n */\nMatrix2d.invert = function (out, a) {\n  mat2d.invert(out.array, a.array);\n  out._dirty = true;\n  return out;\n};\n\n/**\n * @param  {clay.Matrix2d} out\n * @param  {clay.Matrix2d} a\n * @param  {clay.Matrix2d} b\n * @return {clay.Matrix2d}\n */\nMatrix2d.mul = function (out, a, b) {\n  mat2d.mul(out.array, a.array, b.array);\n  out._dirty = true;\n  return out;\n};\n\n/**\n * @function\n * @param  {clay.Matrix2d} out\n * @param  {clay.Matrix2d} a\n * @param  {clay.Matrix2d} b\n * @return {clay.Matrix2d}\n */\nMatrix2d.multiply = Matrix2d.mul;\n\n/**\n * @param  {clay.Matrix2d} out\n * @param  {clay.Matrix2d} a\n * @param  {number}   rad\n * @return {clay.Matrix2d}\n */\nMatrix2d.rotate = function (out, a, rad) {\n  mat2d.rotate(out.array, a.array, rad);\n  out._dirty = true;\n  return out;\n};\n\n/**\n * @param  {clay.Matrix2d} out\n * @param  {clay.Matrix2d} a\n * @param  {clay.Vector2}  v\n * @return {clay.Matrix2d}\n */\nMatrix2d.scale = function (out, a, v) {\n  mat2d.scale(out.array, a.array, v.array);\n  out._dirty = true;\n  return out;\n};\n\n/**\n * @param  {clay.Matrix2d} out\n * @param  {clay.Matrix2d} a\n * @param  {clay.Vector2}  v\n * @return {clay.Matrix2d}\n */\nMatrix2d.translate = function (out, a, v) {\n  mat2d.translate(out.array, a.array, v.array);\n  out._dirty = true;\n  return out;\n};\nexport default Matrix2d;","map":{"version":3,"names":["mat2d","Matrix2d","array","create","_dirty","prototype","constructor","setArray","arr","i","length","clone","copy","b","determinant","identity","invert","mul","mulLeft","multiply","multiplyLeft","rotate","rad","scale","s","translate","v","toString","Array","join","call","toArray","slice","out","a"],"sources":["E:/mytest/node_modules/claygl/src/math/Matrix2d.js"],"sourcesContent":["import mat2d from '../glmatrix/mat2d';\n\n/**\n * @constructor\n * @alias clay.Matrix2d\n */\nvar Matrix2d = function() {\n    /**\n     * Storage of Matrix2d\n     * @name array\n     * @type {Float32Array}\n     * @memberOf clay.Matrix2d#\n     */\n    this.array = mat2d.create();\n\n    /**\n     * @name _dirty\n     * @type {boolean}\n     * @memberOf clay.Matrix2d#\n     */\n    this._dirty = true;\n};\n\nMatrix2d.prototype = {\n\n    constructor: Matrix2d,\n\n    /**\n     * Set components from array\n     * @param  {Float32Array|number[]} arr\n     */\n    setArray: function (arr) {\n        for (var i = 0; i < this.array.length; i++) {\n            this.array[i] = arr[i];\n        }\n        this._dirty = true;\n        return this;\n    },\n    /**\n     * Clone a new Matrix2d\n     * @return {clay.Matrix2d}\n     */\n    clone: function() {\n        return (new Matrix2d()).copy(this);\n    },\n\n    /**\n     * Copy from b\n     * @param  {clay.Matrix2d} b\n     * @return {clay.Matrix2d}\n     */\n    copy: function(b) {\n        mat2d.copy(this.array, b.array);\n        this._dirty = true;\n        return this;\n    },\n\n    /**\n     * Calculate matrix determinant\n     * @return {number}\n     */\n    determinant: function() {\n        return mat2d.determinant(this.array);\n    },\n\n    /**\n     * Set to a identity matrix\n     * @return {clay.Matrix2d}\n     */\n    identity: function() {\n        mat2d.identity(this.array);\n        this._dirty = true;\n        return this;\n    },\n\n    /**\n     * Invert self\n     * @return {clay.Matrix2d}\n     */\n    invert: function() {\n        mat2d.invert(this.array, this.array);\n        this._dirty = true;\n        return this;\n    },\n\n    /**\n     * Alias for mutiply\n     * @param  {clay.Matrix2d} b\n     * @return {clay.Matrix2d}\n     */\n    mul: function(b) {\n        mat2d.mul(this.array, this.array, b.array);\n        this._dirty = true;\n        return this;\n    },\n\n    /**\n     * Alias for multiplyLeft\n     * @param  {clay.Matrix2d} a\n     * @return {clay.Matrix2d}\n     */\n    mulLeft: function(b) {\n        mat2d.mul(this.array, b.array, this.array);\n        this._dirty = true;\n        return this;\n    },\n\n    /**\n     * Multiply self and b\n     * @param  {clay.Matrix2d} b\n     * @return {clay.Matrix2d}\n     */\n    multiply: function(b) {\n        mat2d.multiply(this.array, this.array, b.array);\n        this._dirty = true;\n        return this;\n    },\n\n    /**\n     * Multiply a and self, a is on the left\n     * @param  {clay.Matrix2d} a\n     * @return {clay.Matrix2d}\n     */\n    multiplyLeft: function(b) {\n        mat2d.multiply(this.array, b.array, this.array);\n        this._dirty = true;\n        return this;\n    },\n\n    /**\n     * Rotate self by a given radian\n     * @param  {number}   rad\n     * @return {clay.Matrix2d}\n     */\n    rotate: function(rad) {\n        mat2d.rotate(this.array, this.array, rad);\n        this._dirty = true;\n        return this;\n    },\n\n    /**\n     * Scale self by s\n     * @param  {clay.Vector2}  s\n     * @return {clay.Matrix2d}\n     */\n    scale: function(s) {\n        mat2d.scale(this.array, this.array, s.array);\n        this._dirty = true;\n        return this;\n    },\n\n    /**\n     * Translate self by v\n     * @param  {clay.Vector2}  v\n     * @return {clay.Matrix2d}\n     */\n    translate: function(v) {\n        mat2d.translate(this.array, this.array, v.array);\n        this._dirty = true;\n        return this;\n    },\n\n    toString: function() {\n        return '[' + Array.prototype.join.call(this.array, ',') + ']';\n    },\n\n    toArray: function () {\n        return Array.prototype.slice.call(this.array);\n    }\n};\n\n/**\n * @param  {clay.Matrix2d} out\n * @param  {clay.Matrix2d} a\n * @return {clay.Matrix2d}\n */\nMatrix2d.copy = function(out, a) {\n    mat2d.copy(out.array, a.array);\n    out._dirty = true;\n    return out;\n};\n\n/**\n * @param  {clay.Matrix2d} a\n * @return {number}\n */\nMatrix2d.determinant = function(a) {\n    return mat2d.determinant(a.array);\n};\n\n/**\n * @param  {clay.Matrix2d} out\n * @return {clay.Matrix2d}\n */\nMatrix2d.identity = function(out) {\n    mat2d.identity(out.array);\n    out._dirty = true;\n    return out;\n};\n\n/**\n * @param  {clay.Matrix2d} out\n * @param  {clay.Matrix2d} a\n * @return {clay.Matrix2d}\n */\nMatrix2d.invert = function(out, a) {\n    mat2d.invert(out.array, a.array);\n    out._dirty = true;\n    return out;\n};\n\n/**\n * @param  {clay.Matrix2d} out\n * @param  {clay.Matrix2d} a\n * @param  {clay.Matrix2d} b\n * @return {clay.Matrix2d}\n */\nMatrix2d.mul = function(out, a, b) {\n    mat2d.mul(out.array, a.array, b.array);\n    out._dirty = true;\n    return out;\n};\n\n/**\n * @function\n * @param  {clay.Matrix2d} out\n * @param  {clay.Matrix2d} a\n * @param  {clay.Matrix2d} b\n * @return {clay.Matrix2d}\n */\nMatrix2d.multiply = Matrix2d.mul;\n\n/**\n * @param  {clay.Matrix2d} out\n * @param  {clay.Matrix2d} a\n * @param  {number}   rad\n * @return {clay.Matrix2d}\n */\nMatrix2d.rotate = function(out, a, rad) {\n    mat2d.rotate(out.array, a.array, rad);\n    out._dirty = true;\n    return out;\n};\n\n/**\n * @param  {clay.Matrix2d} out\n * @param  {clay.Matrix2d} a\n * @param  {clay.Vector2}  v\n * @return {clay.Matrix2d}\n */\nMatrix2d.scale = function(out, a, v) {\n    mat2d.scale(out.array, a.array, v.array);\n    out._dirty = true;\n    return out;\n};\n\n/**\n * @param  {clay.Matrix2d} out\n * @param  {clay.Matrix2d} a\n * @param  {clay.Vector2}  v\n * @return {clay.Matrix2d}\n */\nMatrix2d.translate = function(out, a, v) {\n    mat2d.translate(out.array, a.array, v.array);\n    out._dirty = true;\n    return out;\n};\n\nexport default Matrix2d;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}