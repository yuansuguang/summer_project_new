{"ast":null,"code":"import * as echarts from 'echarts/lib/echarts';\nimport componentViewControlMixin from '../common/componentViewControlMixin';\nimport componentPostEffectMixin from '../common/componentPostEffectMixin';\nimport componentLightMixin from '../common/componentLightMixin';\nimport componentShadingMixin from '../common/componentShadingMixin';\nimport geo3DModelMixin from '../../coord/geo3D/geo3DModelMixin';\nvar Geo3DModel = echarts.ComponentModel.extend({\n  type: 'geo3D',\n  layoutMode: 'box',\n  coordinateSystem: null,\n  optionUpdated: function () {\n    var option = this.option;\n    option.regions = this.getFilledRegions(option.regions, option.map);\n    var dimensions = echarts.helper.createDimensions(option.data || [], {\n      coordDimensions: ['value'],\n      encodeDefine: this.get('encode'),\n      dimensionsDefine: this.get('dimensions')\n    });\n    var list = new echarts.List(dimensions, this);\n    list.initData(option.regions);\n    var regionModelMap = {};\n    list.each(function (idx) {\n      var name = list.getName(idx);\n      var itemModel = list.getItemModel(idx);\n      regionModelMap[name] = itemModel;\n    });\n    this._regionModelMap = regionModelMap;\n    this._data = list;\n  },\n  getData: function () {\n    return this._data;\n  },\n  getRegionModel: function (idx) {\n    var name = this.getData().getName(idx);\n    return this._regionModelMap[name] || new echarts.Model(null, this);\n  },\n  getRegionPolygonCoords: function (idx) {\n    var name = this.getData().getName(idx);\n    var region = this.coordinateSystem.getRegion(name);\n    return region ? region.geometries : [];\n  },\n  /**\n   * Format label\n   * @param {string} name Region name\n   * @param {string} [status='normal'] 'normal' or 'emphasis'\n   * @return {string}\n   */\n  getFormattedLabel: function (dataIndex, status) {\n    var name = this._data.getName(dataIndex);\n    var regionModel = this.getRegionModel(dataIndex);\n    var formatter = regionModel.get(status === 'normal' ? ['label', 'formatter'] : ['emphasis', 'label', 'formatter']);\n    if (formatter == null) {\n      formatter = regionModel.get(['label', 'formatter']);\n    }\n    var params = {\n      name: name\n    };\n    if (typeof formatter === 'function') {\n      params.status = status;\n      return formatter(params);\n    } else if (typeof formatter === 'string') {\n      var serName = params.seriesName;\n      return formatter.replace('{a}', serName != null ? serName : '');\n    } else {\n      return name;\n    }\n  },\n  defaultOption: {\n    // itemStyle: {},\n    // height,\n    // label: {}\n    // realisticMaterial\n    regions: []\n  }\n});\necharts.util.merge(Geo3DModel.prototype, geo3DModelMixin);\necharts.util.merge(Geo3DModel.prototype, componentViewControlMixin);\necharts.util.merge(Geo3DModel.prototype, componentPostEffectMixin);\necharts.util.merge(Geo3DModel.prototype, componentLightMixin);\necharts.util.merge(Geo3DModel.prototype, componentShadingMixin);\nexport default Geo3DModel;","map":{"version":3,"names":["echarts","componentViewControlMixin","componentPostEffectMixin","componentLightMixin","componentShadingMixin","geo3DModelMixin","Geo3DModel","ComponentModel","extend","type","layoutMode","coordinateSystem","optionUpdated","option","regions","getFilledRegions","map","dimensions","helper","createDimensions","data","coordDimensions","encodeDefine","get","dimensionsDefine","list","List","initData","regionModelMap","each","idx","name","getName","itemModel","getItemModel","_regionModelMap","_data","getData","getRegionModel","Model","getRegionPolygonCoords","region","getRegion","geometries","getFormattedLabel","dataIndex","status","regionModel","formatter","params","serName","seriesName","replace","defaultOption","util","merge","prototype"],"sources":["E:/QuestionairePlanet_Fronted/mytest/node_modules/echarts-gl/lib/component/geo3D/Geo3DModel.js"],"sourcesContent":["import * as echarts from 'echarts/lib/echarts';\nimport componentViewControlMixin from '../common/componentViewControlMixin';\nimport componentPostEffectMixin from '../common/componentPostEffectMixin';\nimport componentLightMixin from '../common/componentLightMixin';\nimport componentShadingMixin from '../common/componentShadingMixin';\nimport geo3DModelMixin from '../../coord/geo3D/geo3DModelMixin';\nvar Geo3DModel = echarts.ComponentModel.extend({\n  type: 'geo3D',\n  layoutMode: 'box',\n  coordinateSystem: null,\n  optionUpdated: function () {\n    var option = this.option;\n    option.regions = this.getFilledRegions(option.regions, option.map);\n    var dimensions = echarts.helper.createDimensions(option.data || [], {\n      coordDimensions: ['value'],\n      encodeDefine: this.get('encode'),\n      dimensionsDefine: this.get('dimensions')\n    });\n    var list = new echarts.List(dimensions, this);\n    list.initData(option.regions);\n    var regionModelMap = {};\n    list.each(function (idx) {\n      var name = list.getName(idx);\n      var itemModel = list.getItemModel(idx);\n      regionModelMap[name] = itemModel;\n    });\n    this._regionModelMap = regionModelMap;\n    this._data = list;\n  },\n  getData: function () {\n    return this._data;\n  },\n  getRegionModel: function (idx) {\n    var name = this.getData().getName(idx);\n    return this._regionModelMap[name] || new echarts.Model(null, this);\n  },\n  getRegionPolygonCoords: function (idx) {\n    var name = this.getData().getName(idx);\n    var region = this.coordinateSystem.getRegion(name);\n    return region ? region.geometries : [];\n  },\n\n  /**\n   * Format label\n   * @param {string} name Region name\n   * @param {string} [status='normal'] 'normal' or 'emphasis'\n   * @return {string}\n   */\n  getFormattedLabel: function (dataIndex, status) {\n    var name = this._data.getName(dataIndex);\n\n    var regionModel = this.getRegionModel(dataIndex);\n    var formatter = regionModel.get(status === 'normal' ? ['label', 'formatter'] : ['emphasis', 'label', 'formatter']);\n\n    if (formatter == null) {\n      formatter = regionModel.get(['label', 'formatter']);\n    }\n\n    var params = {\n      name: name\n    };\n\n    if (typeof formatter === 'function') {\n      params.status = status;\n      return formatter(params);\n    } else if (typeof formatter === 'string') {\n      var serName = params.seriesName;\n      return formatter.replace('{a}', serName != null ? serName : '');\n    } else {\n      return name;\n    }\n  },\n  defaultOption: {\n    // itemStyle: {},\n    // height,\n    // label: {}\n    // realisticMaterial\n    regions: []\n  }\n});\necharts.util.merge(Geo3DModel.prototype, geo3DModelMixin);\necharts.util.merge(Geo3DModel.prototype, componentViewControlMixin);\necharts.util.merge(Geo3DModel.prototype, componentPostEffectMixin);\necharts.util.merge(Geo3DModel.prototype, componentLightMixin);\necharts.util.merge(Geo3DModel.prototype, componentShadingMixin);\nexport default Geo3DModel;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}