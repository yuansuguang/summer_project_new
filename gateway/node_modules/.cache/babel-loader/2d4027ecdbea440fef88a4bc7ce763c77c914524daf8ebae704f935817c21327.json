{"ast":null,"code":"import { resolveComponent as _resolveComponent, createVNode as _createVNode, createElementVNode as _createElementVNode, createCommentVNode as _createCommentVNode, withCtx as _withCtx, toDisplayString as _toDisplayString, createTextVNode as _createTextVNode, openBlock as _openBlock, createElementBlock as _createElementBlock, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\nconst _withScopeId = n => (_pushScopeId(\"data-v-316dfd7b\"), n = n(), _popScopeId(), n);\nconst _hoisted_1 = {\n  class: \"common-layout\"\n};\nconst _hoisted_2 = {\n  class: \"mytable\"\n};\nconst _hoisted_3 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"h2\", null, \"选项统计\", -1 /* HOISTED */));\nconst _hoisted_4 = {\n  style: {\n    \"margin-top\": \"0px\",\n    \"margin-bottom\": \"-30px\",\n    \"display\": \"flex\",\n    \"justify-content\": \"space-around\",\n    \"align-items\": \"center\",\n    \"width\": \"50%\"\n  }\n};\nconst _hoisted_5 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"div\", null, \"本题正确率:\", -1 /* HOISTED */));\nconst _hoisted_6 = {\n  style: {\n    \"flex-shrink\": \"0\",\n    \"margin-right\": \"10px\"\n  }\n};\nconst _hoisted_7 = {\n  class: \"chart-buttons\"\n};\nconst _hoisted_8 = {\n  key: 0,\n  id: \"export-content\",\n  class: \"chart-container\"\n};\nconst _hoisted_9 = {\n  ref: \"chartCanvas\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_el_header = _resolveComponent(\"el-header\");\n  const _component_el_table_column = _resolveComponent(\"el-table-column\");\n  const _component_el_progress = _resolveComponent(\"el-progress\");\n  const _component_el_table = _resolveComponent(\"el-table\");\n  const _component_el_button = _resolveComponent(\"el-button\");\n  const _component_el_main = _resolveComponent(\"el-main\");\n  const _component_el_container = _resolveComponent(\"el-container\");\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createVNode(_component_el_container, null, {\n    default: _withCtx(() => [_createVNode(_component_el_header), _createVNode(_component_el_main, null, {\n      default: _withCtx(() => [_createElementVNode(\"div\", _hoisted_2, [_hoisted_3, _createVNode(_component_el_table, {\n        data: $data.options,\n        style: {\n          \"width\": \"50%\"\n        },\n        height: \"250\",\n        stripe: \"\",\n        fit: \"\",\n        size: \"large\"\n      }, {\n        default: _withCtx(() => [_createVNode(_component_el_table_column, {\n          fixed: \"\",\n          prop: \"name\",\n          label: \"选项\"\n        }), _createVNode(_component_el_table_column, {\n          prop: \"count\",\n          label: \"选择人数\"\n        }), _createVNode(_component_el_table_column, {\n          label: \"占比\"\n        }, {\n          default: _withCtx(scope => [_createVNode(_component_el_progress, {\n            percentage: parseFloat(scope.row.percentage)\n          }, null, 8 /* PROPS */, [\"percentage\"]), _createCommentVNode(\" 注意：将占比转换成数值类型 \")]),\n          _: 1 /* STABLE */\n        })]),\n        _: 1 /* STABLE */\n      }, 8 /* PROPS */, [\"data\"]), _createElementVNode(\"div\", _hoisted_4, [_hoisted_5, _createElementVNode(\"div\", _hoisted_6, _toDisplayString(Math.round($data.correctRate)) + \" 人正确\", 1 /* TEXT */), _createVNode(_component_el_progress, {\n        percentage: $data.correctRate,\n        style: {\n          \"width\": \"100%\",\n          \"max-width\": \"300px\"\n        }\n      }, null, 8 /* PROPS */, [\"percentage\"])]), _createCommentVNode(\" 图表展示按钮 \"), _createElementVNode(\"div\", _hoisted_7, [_createVNode(_component_el_button, {\n        type: \"primary\",\n        onClick: _cache[0] || (_cache[0] = $event => $options.toggleChart('bar'))\n      }, {\n        default: _withCtx(() => [_createTextVNode(\"柱状图\")]),\n        _: 1 /* STABLE */\n      }), _createVNode(_component_el_button, {\n        type: \"primary\",\n        onClick: _cache[1] || (_cache[1] = $event => $options.toggleChart('line'))\n      }, {\n        default: _withCtx(() => [_createTextVNode(\"折线图\")]),\n        _: 1 /* STABLE */\n      }), _createVNode(_component_el_button, {\n        type: \"primary\",\n        onClick: _cache[2] || (_cache[2] = $event => $options.toggleChart('pie'))\n      }, {\n        default: _withCtx(() => [_createTextVNode(\"饼状图\")]),\n        _: 1 /* STABLE */\n      }), _createVNode(_component_el_button, {\n        type: \"primary\",\n        onClick: $options.exportToExcel\n      }, {\n        default: _withCtx(() => [_createTextVNode(\"导出为 Excel\")]),\n        _: 1 /* STABLE */\n      }, 8 /* PROPS */, [\"onClick\"]), _createVNode(_component_el_button, {\n        type: \"primary\",\n        onClick: $options.exportToWordAndPDF\n      }, {\n        default: _withCtx(() => [_createTextVNode(\"导出为 PDF\")]),\n        _: 1 /* STABLE */\n      }, 8 /* PROPS */, [\"onClick\"])]), _createCommentVNode(\" 图表展示区域 \"), $data.showChart ? (_openBlock(), _createElementBlock(\"div\", _hoisted_8, [_createElementVNode(\"canvas\", _hoisted_9, null, 512 /* NEED_PATCH */)])) : _createCommentVNode(\"v-if\", true)])]),\n      _: 1 /* STABLE */\n    })]),\n    _: 1 /* STABLE */\n  })]);\n}","map":{"version":3,"names":["class","_createElementVNode","style","key","id","ref","_createElementBlock","_hoisted_1","_createVNode","_component_el_container","default","_withCtx","_component_el_header","_component_el_main","_hoisted_2","_hoisted_3","_component_el_table","data","$data","options","height","stripe","fit","size","_component_el_table_column","fixed","prop","label","scope","_component_el_progress","percentage","parseFloat","row","_createCommentVNode","_","_hoisted_4","_hoisted_5","_hoisted_6","_toDisplayString","Math","round","correctRate","_hoisted_7","_component_el_button","type","onClick","_cache","$event","$options","toggleChart","_createTextVNode","exportToExcel","exportToWordAndPDF","showChart","_hoisted_8","_hoisted_9"],"sources":["E:\\mytest\\src\\views\\qn-data\\qnDataview.vue"],"sourcesContent":["<template>\r\n  <div class=\"common-layout\">\r\n    <el-container>\r\n      <el-header></el-header>\r\n      <el-main>\r\n        <div class=\"mytable\">\r\n          <h2>选项统计</h2>\r\n          <el-table :data=\"options\" style=\"width: 50%\" height=\"250\" stripe fit size=\"large\">\r\n            <el-table-column fixed prop=\"name\" label=\"选项\" />\r\n            <el-table-column prop=\"count\" label=\"选择人数\" />\r\n            <el-table-column label=\"占比\" >\r\n              <template #default=\"scope\">\r\n                <el-progress :percentage=\"parseFloat(scope.row.percentage)\" /> <!-- 注意：将占比转换成数值类型 -->\r\n              </template>              \r\n            </el-table-column>\r\n          </el-table>\r\n\r\n          <div style=\"margin-top: 0px; margin-bottom: -30px; display: flex; justify-content: space-around; align-items: center; width: 50%;\">\r\n            <div>本题正确率:</div>\r\n            <div style=\"flex-shrink: 0; margin-right: 10px;\">{{ Math.round(correctRate) }} 人正确</div>\r\n            <el-progress :percentage=\"correctRate\" style=\"width: 100%; max-width: 300px;\"></el-progress>\r\n          </div>\r\n\r\n          <!-- 图表展示按钮 -->\r\n          <div class=\"chart-buttons\">\r\n            <el-button type=\"primary\" @click=\"toggleChart('bar')\">柱状图</el-button>\r\n            <el-button type=\"primary\" @click=\"toggleChart('line')\">折线图</el-button>\r\n            <el-button type=\"primary\" @click=\"toggleChart('pie')\">饼状图</el-button>\r\n            <el-button type=\"primary\" @click=\"exportToExcel\">导出为 Excel</el-button>\r\n            <el-button type=\"primary\" @click=\"exportToWordAndPDF\">导出为 PDF</el-button>\r\n          </div>\r\n\r\n          <!-- 图表展示区域 -->\r\n          <div id=\"export-content\" v-if=\"showChart\" class=\"chart-container\">\r\n            <canvas ref=\"chartCanvas\"></canvas>\r\n          </div>\r\n\r\n        </div>\r\n      </el-main>\r\n    </el-container>\r\n  </div>\r\n  \r\n</template>\r\n\r\n<script >\r\nimport Chart from 'chart.js/auto';\r\nimport XLSX from 'xlsx';\r\nimport html2canvas from 'html2canvas';\r\nimport jsPDF from 'jspdf';\r\nimport 'element-plus/dist/index.css';\r\n\r\nexport default {\r\n  props: {\r\n    correctAnswer: { // 接收正确答案\r\n      type: String,\r\n      default: ''\r\n    }\r\n  },\r\n  data() {\r\n    return {\r\n      options: [], // 选项统计数据，包括名称、人数、占比\r\n      showChart: false, // 是否显示图表\r\n      chartType: '', // 图表类型\r\n      chartData: null, // 图表数据\r\n      chartLabels: [], // 图表标签\r\n      correctRate: 0 // 本题正确率\r\n    };\r\n  },\r\n  mounted() {\r\n    // 假设从后端获取的数据\r\n    this.options = this.calculatePercentage(this.getData());\r\n    this.calculateCorrectRate();\r\n    //this.generateChart();\r\n  },\r\n  methods: {\r\n    exportToExcel() {\r\n      const tableData = this.getTableData(); // 获取表格数据\r\n      const wb = XLSX.utils.book_new();\r\n      const ws = XLSX.utils.json_to_sheet(tableData);\r\n      XLSX.utils.book_append_sheet(wb, ws, 'Sheet1');\r\n      XLSX.writeFile(wb, 'table_data.xlsx');\r\n    },\r\n    getTableData() {\r\n      const tableData = this.options.map(option => ({\r\n        name: option.name,\r\n        count: option.count,\r\n        percentage: option.percentage,\r\n      }));\r\n      tableData.push({ name: '本题正确率', count: this.correctRate, percentage: this.correctRate });\r\n      return tableData;\r\n    },\r\n    exportToWordAndPDF() {\r\n      const exportContent = document.getElementById('export-content');\r\n      html2canvas(exportContent).then(canvas => {\r\n        const imgData = canvas.toDataURL('image/png');\r\n        const pdf = new jsPDF();\r\n        pdf.addImage(imgData, 'PNG', 10, 10, 180, 150);\r\n        pdf.save('table_and_chart.pdf');\r\n      });\r\n    },\r\n    getData() {\r\n      // 获取后端数据的方法\r\n      return [{ name: '选项1', count: 10 }, { name: '选项2', count: 15 }, { name: '选项3', count: 300 }, { name: '选项4', count: 8 }, { name: '选项5', count: 10 }];\r\n    },\r\n    calculatePercentage(data) {\r\n      // 计算占比\r\n      const total = data.reduce((sum, option) => sum + option.count, 0);\r\n      return data.map(option => ({\r\n        ...option,\r\n        percentage: ((option.count / total) * 100).toFixed(2)\r\n      }));\r\n    },\r\n    calculateCorrectRate() {\r\n      // 计算本题正确率\r\n      const totalResponses = this.options.reduce((sum, option) => sum + option.count, 0);\r\n      const correctResponses = this.options.find(option => option.name === this.correctAnswer)?.count || 0;\r\n      this.correctRate = ((correctResponses / totalResponses) * 100).toFixed(2);\r\n    },\r\n    toggleChart(type) {\r\n      if (this.chartType === type) {\r\n        // 如果当前已经显示该类型的图表，则收起图表\r\n        this.showChart = false;\r\n        this.chartType = '';\r\n        // 销毁当前的图表实例\r\n        if (this.chartData) {\r\n          this.chartData.destroy();\r\n          this.chartData = null;\r\n        }\r\n      } else {\r\n        // 否则，显示对应类型的图表\r\n        this.showChart = true;\r\n        this.chartType = type;\r\n        this.$nextTick(() => {\r\n          this.generateChart();\r\n        });\r\n      }\r\n    },\r\n    generateChart() {\r\n      // 生成图表\r\n      if (this.chartData) {\r\n        // 销毁当前图表实例\r\n        this.chartData.destroy();\r\n      }\r\n\r\n      const ctx = this.$refs.chartCanvas.getContext('2d');\r\n      const labels = this.options.map(option => option.name);\r\n      const percentages = this.options.map(option => parseFloat(option.percentage));\r\n\r\n      // 使用数据数量来确定背景色和边框色数组的大小\r\n      const colors = this.generateColors(labels.length);\r\n\r\n      const data = {\r\n        labels,\r\n        datasets: [{\r\n          label: '占比',\r\n          data: percentages,\r\n          backgroundColor: colors.background,\r\n          borderColor: colors.border,\r\n          borderWidth: 1\r\n        }]\r\n      };\r\n\r\n      const options = {\r\n        scales: {\r\n          y: {\r\n            beginAtZero: true\r\n          }\r\n        }\r\n      };\r\n\r\n      // 只有在确实需要时才创建新的图表实例\r\n      if (ctx && this.chartType) {\r\n        this.chartData = new Chart(ctx, {\r\n          type: this.chartType,\r\n          data,\r\n          options\r\n        });\r\n      }\r\n    },\r\n    \r\n// 添加新方法用于生成颜色数组\r\n    generateColors(numOptions) {\r\n      const baseColors = [\r\n        'rgba(255, 99, 132, 0.2)',\r\n        'rgba(54, 162, 235, 0.2)',\r\n        'rgba(255, 206, 86, 0.2)',\r\n        'rgba(255, 80, 192, 0.2)',\r\n        'rgba(75, 255, 192, 0.2)',\r\n        'rgba(130, 20, 255, 0.2)',\r\n      ];\r\n\r\n      // 循环生成颜色数组，如果选项数量超过预定义颜色数量，则循环使用这些颜色\r\n      const colors = {\r\n        background: [],\r\n        border: []\r\n      };\r\n      for (let i = 0; i < numOptions; i++) {\r\n        const index = i % baseColors.length;\r\n        colors.background.push(baseColors[index]);\r\n        colors.border.push(baseColors[index].replace('0.2)', '1)')); // 将透明度从0.2改为1\r\n      }\r\n      return colors;\r\n    },\r\n  }\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.common-layout {\r\n  display: flex;\r\n  flex-direction: column;\r\n  min-height: 100vh; /* 使得父容器至少有一个视窗的高度 */\r\n}\r\n\r\nel-header, el-main, el-container {\r\n  display: flex;\r\n  flex-direction: column;\r\n}\r\n\r\nel-main {\r\n  flex: 1;\r\n  display: flex;\r\n  justify-content: center; /* 在垂直方向上居中内容 */\r\n  align-items: center; /* 在水平方向上居中内容 */\r\n}\r\n\r\n.mytable {\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  padding: 20px;\r\n  background-color: #f9f9f9;\r\n  /* Added styles */\r\n  margin: 0 auto; /* 水平居中 */\r\n  max-width: 80%; /* 限制最大宽度，让内容不会过于分散 */\r\n  box-shadow: 0px 2px 15px rgba(0, 0, 0, 0.3);\r\n  border-radius: 5px;\r\n  overflow: hidden; /* 隐藏溢出的内容 */\r\n  border: 1px solid #d8d8d8;\r\n  border-bottom: 2px solid #d8d8d8;\r\n  border-radius: 5px;\r\n  background-color: #fff;\r\n  color: #565a5c;\r\n  font-family: \"Open Sans\", sans-serif;\r\n  font-weight: 400;\r\n  text-shadow: none;\r\n  box-sizing: border-box;\r\n  font-size: 12px;\r\n  line-height: 32px;\r\n  font-size: 1rem;\r\n  line-height: 6rem;\r\n  font-weight: 400;\r\n}\r\n.chart-container {\r\n  width: 600px; /* 调整为你希望的宽度 */\r\n  height: 400px; /* 调整为你希望的高度 */\r\n  margin: 0 auto; /* 水平居中 */\r\n  padding: 20px;\r\n  max-width: 80%; /* 限制最大宽度，让内容不会过于分散 */\r\n}\r\n</style>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}