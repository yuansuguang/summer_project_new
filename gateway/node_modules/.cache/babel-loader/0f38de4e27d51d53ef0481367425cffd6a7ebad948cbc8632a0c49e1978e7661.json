{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.array-buffer.detached.js\";\nimport \"core-js/modules/es.array-buffer.transfer.js\";\nimport \"core-js/modules/es.array-buffer.transfer-to-fixed-length.js\";\nimport \"core-js/modules/es.typed-array.to-reversed.js\";\nimport \"core-js/modules/es.typed-array.to-sorted.js\";\nimport \"core-js/modules/es.typed-array.with.js\";\nimport graphicGL from '../../util/graphicGL';\nimport verticesSortMixin from '../../util/geometry/verticesSortMixin';\nimport * as echarts from 'echarts/lib/echarts';\nimport glmatrix from 'claygl/src/dep/glmatrix';\nvar vec4 = glmatrix.vec4;\nimport sdfSpriteGLSL from './sdfSprite.glsl.js';\ngraphicGL.Shader.import(sdfSpriteGLSL);\nvar PointsMesh = graphicGL.Mesh.extend(function () {\n  var geometry = new graphicGL.Geometry({\n    dynamic: true,\n    attributes: {\n      color: new graphicGL.Geometry.Attribute('color', 'float', 4, 'COLOR'),\n      position: new graphicGL.Geometry.Attribute('position', 'float', 3, 'POSITION'),\n      size: new graphicGL.Geometry.Attribute('size', 'float', 1),\n      prevPosition: new graphicGL.Geometry.Attribute('prevPosition', 'float', 3),\n      prevSize: new graphicGL.Geometry.Attribute('prevSize', 'float', 1)\n    }\n  });\n  Object.assign(geometry, verticesSortMixin);\n  var material = new graphicGL.Material({\n    shader: graphicGL.createShader('ecgl.sdfSprite'),\n    transparent: true,\n    depthMask: false\n  });\n  material.enableTexture('sprite');\n  material.define('both', 'VERTEX_COLOR');\n  material.define('both', 'VERTEX_SIZE');\n  var sdfTexture = new graphicGL.Texture2D({\n    image: document.createElement('canvas'),\n    flipY: false\n  });\n  material.set('sprite', sdfTexture); // Custom pick methods.\n\n  geometry.pick = this._pick.bind(this);\n  return {\n    geometry: geometry,\n    material: material,\n    mode: graphicGL.Mesh.POINTS,\n    sizeScale: 1\n  };\n}, {\n  _pick: function (x, y, renderer, camera, renderable, out) {\n    var positionNDC = this._positionNDC;\n    if (!positionNDC) {\n      return;\n    }\n    var viewport = renderer.viewport;\n    var ndcScaleX = 2 / viewport.width;\n    var ndcScaleY = 2 / viewport.height; // From near to far. indices have been sorted.\n\n    for (var i = this.geometry.vertexCount - 1; i >= 0; i--) {\n      var idx;\n      if (!this.geometry.indices) {\n        idx = i;\n      } else {\n        idx = this.geometry.indices[i];\n      }\n      var cx = positionNDC[idx * 2];\n      var cy = positionNDC[idx * 2 + 1];\n      var size = this.geometry.attributes.size.get(idx) / this.sizeScale;\n      var halfSize = size / 2;\n      if (x > cx - halfSize * ndcScaleX && x < cx + halfSize * ndcScaleX && y > cy - halfSize * ndcScaleY && y < cy + halfSize * ndcScaleY) {\n        var point = new graphicGL.Vector3();\n        var pointWorld = new graphicGL.Vector3();\n        this.geometry.attributes.position.get(idx, point.array);\n        graphicGL.Vector3.transformMat4(pointWorld, point, this.worldTransform);\n        out.push({\n          vertexIndex: idx,\n          point: point,\n          pointWorld: pointWorld,\n          target: this,\n          distance: pointWorld.distance(camera.getWorldPosition())\n        });\n      }\n    }\n  },\n  updateNDCPosition: function (worldViewProjection, is2D, api) {\n    var positionNDC = this._positionNDC;\n    var geometry = this.geometry;\n    if (!positionNDC || positionNDC.length / 2 !== geometry.vertexCount) {\n      positionNDC = this._positionNDC = new Float32Array(geometry.vertexCount * 2);\n    }\n    var pos = vec4.create();\n    for (var i = 0; i < geometry.vertexCount; i++) {\n      geometry.attributes.position.get(i, pos);\n      pos[3] = 1;\n      vec4.transformMat4(pos, pos, worldViewProjection.array);\n      vec4.scale(pos, pos, 1 / pos[3]);\n      positionNDC[i * 2] = pos[0];\n      positionNDC[i * 2 + 1] = pos[1];\n    }\n  }\n});\nexport default PointsMesh;","map":{"version":3,"names":["graphicGL","verticesSortMixin","echarts","glmatrix","vec4","sdfSpriteGLSL","Shader","import","PointsMesh","Mesh","extend","geometry","Geometry","dynamic","attributes","color","Attribute","position","size","prevPosition","prevSize","Object","assign","material","Material","shader","createShader","transparent","depthMask","enableTexture","define","sdfTexture","Texture2D","image","document","createElement","flipY","set","pick","_pick","bind","mode","POINTS","sizeScale","x","y","renderer","camera","renderable","out","positionNDC","_positionNDC","viewport","ndcScaleX","width","ndcScaleY","height","i","vertexCount","idx","indices","cx","cy","get","halfSize","point","Vector3","pointWorld","array","transformMat4","worldTransform","push","vertexIndex","target","distance","getWorldPosition","updateNDCPosition","worldViewProjection","is2D","api","length","Float32Array","pos","create","scale"],"sources":["E:/QuestionairePlanet_Fronted/mytest/node_modules/echarts-gl/lib/chart/common/PointsMesh.js"],"sourcesContent":["import graphicGL from '../../util/graphicGL';\nimport verticesSortMixin from '../../util/geometry/verticesSortMixin';\nimport * as echarts from 'echarts/lib/echarts';\nimport glmatrix from 'claygl/src/dep/glmatrix';\nvar vec4 = glmatrix.vec4;\nimport sdfSpriteGLSL from './sdfSprite.glsl.js';\ngraphicGL.Shader.import(sdfSpriteGLSL);\nvar PointsMesh = graphicGL.Mesh.extend(function () {\n  var geometry = new graphicGL.Geometry({\n    dynamic: true,\n    attributes: {\n      color: new graphicGL.Geometry.Attribute('color', 'float', 4, 'COLOR'),\n      position: new graphicGL.Geometry.Attribute('position', 'float', 3, 'POSITION'),\n      size: new graphicGL.Geometry.Attribute('size', 'float', 1),\n      prevPosition: new graphicGL.Geometry.Attribute('prevPosition', 'float', 3),\n      prevSize: new graphicGL.Geometry.Attribute('prevSize', 'float', 1)\n    }\n  });\n  Object.assign(geometry, verticesSortMixin);\n  var material = new graphicGL.Material({\n    shader: graphicGL.createShader('ecgl.sdfSprite'),\n    transparent: true,\n    depthMask: false\n  });\n  material.enableTexture('sprite');\n  material.define('both', 'VERTEX_COLOR');\n  material.define('both', 'VERTEX_SIZE');\n  var sdfTexture = new graphicGL.Texture2D({\n    image: document.createElement('canvas'),\n    flipY: false\n  });\n  material.set('sprite', sdfTexture); // Custom pick methods.\n\n  geometry.pick = this._pick.bind(this);\n  return {\n    geometry: geometry,\n    material: material,\n    mode: graphicGL.Mesh.POINTS,\n    sizeScale: 1\n  };\n}, {\n  _pick: function (x, y, renderer, camera, renderable, out) {\n    var positionNDC = this._positionNDC;\n\n    if (!positionNDC) {\n      return;\n    }\n\n    var viewport = renderer.viewport;\n    var ndcScaleX = 2 / viewport.width;\n    var ndcScaleY = 2 / viewport.height; // From near to far. indices have been sorted.\n\n    for (var i = this.geometry.vertexCount - 1; i >= 0; i--) {\n      var idx;\n\n      if (!this.geometry.indices) {\n        idx = i;\n      } else {\n        idx = this.geometry.indices[i];\n      }\n\n      var cx = positionNDC[idx * 2];\n      var cy = positionNDC[idx * 2 + 1];\n      var size = this.geometry.attributes.size.get(idx) / this.sizeScale;\n      var halfSize = size / 2;\n\n      if (x > cx - halfSize * ndcScaleX && x < cx + halfSize * ndcScaleX && y > cy - halfSize * ndcScaleY && y < cy + halfSize * ndcScaleY) {\n        var point = new graphicGL.Vector3();\n        var pointWorld = new graphicGL.Vector3();\n        this.geometry.attributes.position.get(idx, point.array);\n        graphicGL.Vector3.transformMat4(pointWorld, point, this.worldTransform);\n        out.push({\n          vertexIndex: idx,\n          point: point,\n          pointWorld: pointWorld,\n          target: this,\n          distance: pointWorld.distance(camera.getWorldPosition())\n        });\n      }\n    }\n  },\n  updateNDCPosition: function (worldViewProjection, is2D, api) {\n    var positionNDC = this._positionNDC;\n    var geometry = this.geometry;\n\n    if (!positionNDC || positionNDC.length / 2 !== geometry.vertexCount) {\n      positionNDC = this._positionNDC = new Float32Array(geometry.vertexCount * 2);\n    }\n\n    var pos = vec4.create();\n\n    for (var i = 0; i < geometry.vertexCount; i++) {\n      geometry.attributes.position.get(i, pos);\n      pos[3] = 1;\n      vec4.transformMat4(pos, pos, worldViewProjection.array);\n      vec4.scale(pos, pos, 1 / pos[3]);\n      positionNDC[i * 2] = pos[0];\n      positionNDC[i * 2 + 1] = pos[1];\n    }\n  }\n});\nexport default PointsMesh;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}