{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\n// import * as THREE from \"three\";\n// import WAVES from \"vanta/src/vanta.waves\";\n// import { VANTA } from \"vanta\";\nexport default {\n  data() {\n    return {\n      loginForm: {\n        user: '',\n        pass: ''\n      }\n    };\n  },\n  // mounted() {\n  //   this.vantaEffect = WAVES({\n  //     el: this.$refs.vantaRef,\n  //     THREE: THREE,\n  //   });\n  //   VANTA.WAVES({\n  //     el: this.$refs.vantaRef,\n  //     /*以下为样式配置*/\n  //     mouseControls: true,\n  // touchControls: true,\n  // gyroControls: false,\n  // minHeight: 200.00,\n  // minWidth: 200.00,\n  // scale: 1.00,\n  // scaleMobile: 1.00,\n  // color: 0x17a4ae,\n  // waveSpeed: 0.95\n  //   });\n  // },\n  // beforeDestroy() {\n  //   if (this.vantaEffect) {\n  //     this.vantaEffect.destroy();\n  //   }\n  // },\n  methods: {\n    // login() {\n    //   // 在这里执行登录操作，可以发送请求到后端验证用户身份，可以留到后端实现的时候再弄\n    //   // 此处为示例，仅在控制台输出用户名和密码\n    //   const self = this;\n    //   const formData = new FormData();\n    //   formData.append(\"username\", self.username);\n    //   formData.append(\"password\", self.password);\n\n    //   self.$axios({\n    //     method: 'post',\n    //     url: '/user/api/login/',\n    //     data: formData,\n    //   }).then(res => {\n    //     switch (res.data.status_code) {\n    //       case 1:\n    //         this.$store.dispatch('saveUserInfo', {user: {\n    //             'username': this.form.username,\n    //             'confirmed': true,\n    //           }});\n    //         this.$message.success('登录成功！');\n    //         break;\n    //       case 2:\n    //         this.$message.success('already logged in');\n    //         break;\n    //       case 3:\n    //         this.$message.success('username not found');\n    //         break;\n    //       case 4:\n    //         this.$message.success('unverified account');\n    //         break;\n    //       case 5:\n    //         this.$message.success('wrong password');\n    //         break;\n    //       case -1:\n    //         this.$message.success('sys error');\n    //         break;\n    //     }\n    //   })\n    //   .catch(err => {\n    //       console.log(err);\n    //     })\n    //   console.log('用户名：', this.username);\n    //   console.log('密码：', this.password);\n    //   // 登录成功后可以进行页面跳转或其他操作\n    // }\n    login() {\n      // 此处修正为访问loginForm的属性\n      const formData = new FormData();\n      formData.append(\"username\", this.loginForm.user);\n      formData.append(\"password\", this.loginForm.pass);\n      this.$axios({\n        method: 'post',\n        url: '/user/api/login/',\n        data: formData\n      }).then(res => {\n        switch (res.data.status_code) {\n          case 1:\n            this.$store.dispatch('saveUserInfo', {\n              user: {\n                'username': this.loginForm.user,\n                'confirmed': true\n              }\n            });\n            this.$message.success('登录成功！');\n            this.$router.push('/');\n            break;\n          case 2:\n            break;\n          case 3:\n            break;\n          case 4:\n            break;\n          case 5:\n            break;\n          case -1:\n            break;\n        }\n      }).catch(err => {\n        console.log(err);\n      });\n      console.log('用户名：', this.loginForm.user); // 修改为loginForm.user\n      console.log('密码：', this.loginForm.pass); // 修改为loginForm.pass\n      // 登录成功后可以进行页面跳转或其他操作\n    }\n  }\n};","map":{"version":3,"names":["data","loginForm","user","pass","methods","login","formData","FormData","append","$axios","method","url","then","res","status_code","$store","dispatch","$message","success","$router","push","catch","err","console","log"],"sources":["E:\\mytest\\src\\views\\accountpane\\loginPane.vue"],"sourcesContent":["<template>\r\n  <div class=\"login\">\r\n    <!-- <div ref=\"vantaRef\" style=\"width: 100%; height: 100vh\"></div> -->\r\n    <div class=\"mainLogin\"\r\n      style=\"width: 800px; height: 500px; border-radius: 10px; background-color: transparent;display: flex;flex-direction: row; align-items: center;\"\r\n      :style=\"{\r\n        boxShadow: `var(--el-box-shadow-dark)`,\r\n        borderRadius: `var(--el-border-radius-round)`,\r\n      }\">\r\n      <span>&emsp;</span>\r\n      <span>&emsp;</span>\r\n      <img style=\"width: 400px; height: 400px\" src=\"@/assets/images/pic1.png\" />\r\n      <span>&emsp;</span>\r\n      <span>&emsp;</span>\r\n\r\n      <span>&emsp;</span>\r\n\r\n      <div style=\"display: flex; align-items: center; height: 500px; width: 400px; background-color: #ffffff; border-top-right-radius: 10px;border-bottom-right-radius: 10px;\" :style=\"{\r\n            boxShadow: `var(--el-box-shadow-dark)`,\r\n          }\">\r\n        <el-container>\r\n          <el-header style=\"font-family: 'JinBuTi'; color:#000000; font-size: 20px\">\r\n            <h1>登录</h1>\r\n          </el-header>\r\n          <el-main style=\"display: flex; justify-content: center;\" >\r\n            <el-form ref=\"loginForm\" style=\"max-width: 400px; \" :model=\"loginForm\" status-icon :rules=\"loginRules\"\r\n              size=\"default\" label-width=\"auto\" class=\"loginForm\">\r\n              <el-form-item label=\"用户名\" prop=\"user\">\r\n                <el-input v-model=\"loginForm.user\" autocomplete=\"off\" />\r\n              </el-form-item>\r\n              <el-form-item label=\"密码\" prop=\"pass\">\r\n                <el-input v-model=\"loginForm.pass\" type=\"password\" autocomplete=\"off\" />\r\n              </el-form-item>\r\n              <el-form-item>\r\n                <el-button type=\"primary\" @click=\"login()\">\r\n                  登录\r\n                </el-button>\r\n              </el-form-item>\r\n            </el-form>\r\n          </el-main>\r\n        </el-container>\r\n      </div>\r\n    </div>\r\n  </div>\r\n\r\n</template>\r\n\r\n<script>\r\n// import * as THREE from \"three\";\r\n// import WAVES from \"vanta/src/vanta.waves\";\r\n// import { VANTA } from \"vanta\";\r\nexport default {\r\n  data() {\r\n    return {\r\n      loginForm: {\r\n        user: '',\r\n        pass: '',\r\n      },\r\n\r\n    };\r\n  },\r\n  // mounted() {\r\n  //   this.vantaEffect = WAVES({\r\n  //     el: this.$refs.vantaRef,\r\n  //     THREE: THREE,\r\n  //   });\r\n  //   VANTA.WAVES({\r\n  //     el: this.$refs.vantaRef,\r\n  //     /*以下为样式配置*/\r\n  //     mouseControls: true,\r\n  // touchControls: true,\r\n  // gyroControls: false,\r\n  // minHeight: 200.00,\r\n  // minWidth: 200.00,\r\n  // scale: 1.00,\r\n  // scaleMobile: 1.00,\r\n  // color: 0x17a4ae,\r\n  // waveSpeed: 0.95\r\n  //   });\r\n  // },\r\n  // beforeDestroy() {\r\n  //   if (this.vantaEffect) {\r\n  //     this.vantaEffect.destroy();\r\n  //   }\r\n  // },\r\n  methods: {\r\n    // login() {\r\n    //   // 在这里执行登录操作，可以发送请求到后端验证用户身份，可以留到后端实现的时候再弄\r\n    //   // 此处为示例，仅在控制台输出用户名和密码\r\n    //   const self = this;\r\n    //   const formData = new FormData();\r\n    //   formData.append(\"username\", self.username);\r\n    //   formData.append(\"password\", self.password);\r\n\r\n    //   self.$axios({\r\n    //     method: 'post',\r\n    //     url: '/user/api/login/',\r\n    //     data: formData,\r\n    //   }).then(res => {\r\n    //     switch (res.data.status_code) {\r\n    //       case 1:\r\n    //         this.$store.dispatch('saveUserInfo', {user: {\r\n    //             'username': this.form.username,\r\n    //             'confirmed': true,\r\n    //           }});\r\n    //         this.$message.success('登录成功！');\r\n    //         break;\r\n    //       case 2:\r\n    //         this.$message.success('already logged in');\r\n    //         break;\r\n    //       case 3:\r\n    //         this.$message.success('username not found');\r\n    //         break;\r\n    //       case 4:\r\n    //         this.$message.success('unverified account');\r\n    //         break;\r\n    //       case 5:\r\n    //         this.$message.success('wrong password');\r\n    //         break;\r\n    //       case -1:\r\n    //         this.$message.success('sys error');\r\n    //         break;\r\n    //     }\r\n    //   })\r\n    //   .catch(err => {\r\n    //       console.log(err);\r\n    //     })\r\n    //   console.log('用户名：', this.username);\r\n    //   console.log('密码：', this.password);\r\n    //   // 登录成功后可以进行页面跳转或其他操作\r\n    // }\r\n    login() {\r\n      // 此处修正为访问loginForm的属性\r\n      const formData = new FormData();\r\n      formData.append(\"username\", this.loginForm.user);\r\n      formData.append(\"password\", this.loginForm.pass);\r\n\r\n      this.$axios({\r\n        method: 'post',\r\n        url: '/user/api/login/',\r\n        data: formData,\r\n      }).then(res => {\r\n        switch (res.data.status_code) {\r\n          case 1:\r\n            this.$store.dispatch('saveUserInfo', {\r\n              user: {\r\n                'username': this.loginForm.user,\r\n                'confirmed': true,\r\n              }\r\n            });\r\n            this.$message.success('登录成功！');\r\n            this.$router.push('/');\r\n            break;\r\n          case 2:\r\n            break;\r\n          case 3:\r\n            break;\r\n          case 4:\r\n            break;\r\n          case 5:\r\n            break;\r\n          case -1:\r\n            break;\r\n        }\r\n      }).catch(err => {\r\n        console.log(err);\r\n      });\r\n      console.log('用户名：', this.loginForm.user);  // 修改为loginForm.user\r\n      console.log('密码：', this.loginForm.pass);   // 修改为loginForm.pass\r\n      // 登录成功后可以进行页面跳转或其他操作\r\n    }\r\n  }\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.login {\r\n  background-image: url('@/assets/images/background1.png');\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  flex-direction: row;\r\n  height: 98vh;\r\n}\r\n\r\n.login-container {\r\n  max-width: 400px;\r\n  margin: 0 auto;\r\n  padding: 20px;\r\n  border: 1px solid #ccc;\r\n  border-radius: 5px;\r\n}\r\n\r\n.form-group {\r\n  margin-bottom: 15px;\r\n}\r\n\r\nlabel {\r\n  display: block;\r\n}\r\n\r\ninput[type=\"text\"],\r\ninput[type=\"password\"] {\r\n  width: 100%;\r\n  padding: 10px;\r\n  border: 1px solid #ccc;\r\n  border-radius: 3px;\r\n}\r\n\r\nbutton {\r\n  width: 100%;\r\n  padding: 10px;\r\n  background-color: #007bff;\r\n  color: #fff;\r\n  border: none;\r\n  border-radius: 3px;\r\n  cursor: pointer;\r\n}\r\n\r\nbutton:hover {\r\n  background-color: #0056b3;\r\n}\r\n</style>"],"mappings":";AAgDA;AACA;AACA;AACA,eAAe;EACbA,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,SAAS,EAAE;QACTC,IAAI,EAAE,EAAE;QACRC,IAAI,EAAE;MACR;IAEF,CAAC;EACH,CAAC;EACD;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACAC,OAAO,EAAE;IACP;IACA;IACA;IACA;IACA;IACA;IACA;;IAEA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACAC,KAAKA,CAAA,EAAG;MACN;MACA,MAAMC,QAAO,GAAI,IAAIC,QAAQ,CAAC,CAAC;MAC/BD,QAAQ,CAACE,MAAM,CAAC,UAAU,EAAE,IAAI,CAACP,SAAS,CAACC,IAAI,CAAC;MAChDI,QAAQ,CAACE,MAAM,CAAC,UAAU,EAAE,IAAI,CAACP,SAAS,CAACE,IAAI,CAAC;MAEhD,IAAI,CAACM,MAAM,CAAC;QACVC,MAAM,EAAE,MAAM;QACdC,GAAG,EAAE,kBAAkB;QACvBX,IAAI,EAAEM;MACR,CAAC,CAAC,CAACM,IAAI,CAACC,GAAE,IAAK;QACb,QAAQA,GAAG,CAACb,IAAI,CAACc,WAAW;UAC1B,KAAK,CAAC;YACJ,IAAI,CAACC,MAAM,CAACC,QAAQ,CAAC,cAAc,EAAE;cACnCd,IAAI,EAAE;gBACJ,UAAU,EAAE,IAAI,CAACD,SAAS,CAACC,IAAI;gBAC/B,WAAW,EAAE;cACf;YACF,CAAC,CAAC;YACF,IAAI,CAACe,QAAQ,CAACC,OAAO,CAAC,OAAO,CAAC;YAC9B,IAAI,CAACC,OAAO,CAACC,IAAI,CAAC,GAAG,CAAC;YACtB;UACF,KAAK,CAAC;YACJ;UACF,KAAK,CAAC;YACJ;UACF,KAAK,CAAC;YACJ;UACF,KAAK,CAAC;YACJ;UACF,KAAK,CAAC,CAAC;YACL;QACJ;MACF,CAAC,CAAC,CAACC,KAAK,CAACC,GAAE,IAAK;QACdC,OAAO,CAACC,GAAG,CAACF,GAAG,CAAC;MAClB,CAAC,CAAC;MACFC,OAAO,CAACC,GAAG,CAAC,MAAM,EAAE,IAAI,CAACvB,SAAS,CAACC,IAAI,CAAC,EAAG;MAC3CqB,OAAO,CAACC,GAAG,CAAC,KAAK,EAAE,IAAI,CAACvB,SAAS,CAACE,IAAI,CAAC,EAAI;MAC3C;IACF;EACF;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}