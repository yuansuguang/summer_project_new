{"ast":null,"code":"import Chart from 'chart.js/auto';\nexport default {\n  props: {\n    correctAnswer: {\n      type: String,\n      default: ''\n    }\n  },\n  data() {\n    return {\n      options: [],\n      showChart: false,\n      chartType: '',\n      chartData: null,\n      chartLabels: [],\n      correctRate: 0\n    };\n  },\n  mounted() {\n    this.options = this.calculatePercentage(this.getData());\n    this.calculateCorrectRate();\n    //this.animateData();\n  },\n  methods: {\n    getData() {\n      // 获取后端数据的方法\n      return [{\n        name: '选项1',\n        count: 10\n      }, {\n        name: '选项2',\n        count: 20\n      }, {\n        name: '选项3',\n        count: 200\n      }, {\n        name: '选项4',\n        count: 20\n      }];\n    },\n    calculatePercentage(data) {\n      const total = data.reduce((sum, option) => sum + option.count, 0);\n      return data.map(option => ({\n        ...option,\n        displayCount: 0,\n        displayPercentage: 0,\n        percentage: (option.count / total * 100).toFixed(2)\n      }));\n    },\n    calculateCorrectRate() {\n      const totalResponses = this.options.reduce((sum, option) => sum + option.count, 0);\n      const correctResponses = this.options.find(option => option.name === this.correctAnswer)?.count || 0;\n      this.correctRate = (correctResponses / totalResponses * 100).toFixed(2);\n    },\n    animateData() {\n      const totalOptions = this.options.length;\n      let counter = 0;\n      const interval = setInterval(() => {\n        if (counter < totalOptions) {\n          this.options[counter].displayCount = this.options[counter].count;\n          this.options[counter].displayPercentage = this.options[counter].percentage;\n          counter++;\n        } else {\n          clearInterval(interval);\n        }\n      }, 2000); // Adjust the interval duration as needed\n    },\n    toggleChart(type) {\n      if (this.chartType === type) {\n        this.showChart = false;\n        this.chartType = '';\n      } else {\n        this.showChart = true;\n        this.chartType = type;\n        this.generateChart();\n      }\n    },\n    generateChart() {\n      const ctx = this.$refs.chartCanvas.getContext('2d');\n      const data = {\n        labels: this.options.map(option => option.name),\n        datasets: [{\n          label: '占比',\n          data: this.options.map(option => parseFloat(option.percentage)),\n          backgroundColor: ['rgba(255, 99, 132, 0.2)', 'rgba(54, 162, 235, 0.2)', 'rgba(255, 206, 86, 0.2)', 'rgba(75, 192, 192, 0.2)'],\n          borderColor: ['rgba(255, 99, 132, 1)', 'rgba(54, 162, 235, 1)', 'rgba(255, 206, 86, 1)', 'rgba(75, 192, 192, 1)'],\n          borderWidth: 1\n        }]\n      };\n      const options = {\n        scales: {\n          y: {\n            beginAtZero: true\n          }\n        }\n      };\n      this.chartData = new Chart(ctx, {\n        type: this.chartType,\n        data: data,\n        options: options\n      });\n    }\n  }\n};","map":{"version":3,"names":["Chart","props","correctAnswer","type","String","default","data","options","showChart","chartType","chartData","chartLabels","correctRate","mounted","calculatePercentage","getData","calculateCorrectRate","methods","name","count","total","reduce","sum","option","map","displayCount","displayPercentage","percentage","toFixed","totalResponses","correctResponses","find","animateData","totalOptions","length","counter","interval","setInterval","clearInterval","toggleChart","generateChart","ctx","$refs","chartCanvas","getContext","labels","datasets","label","parseFloat","backgroundColor","borderColor","borderWidth","scales","y","beginAtZero"],"sources":["E:\\mytest\\src\\views\\qn-data\\qnDataview.vue"],"sourcesContent":["<template>\r\n  <div>\r\n    <h2>选项统计</h2>\r\n    <table>\r\n      <thead>\r\n        <tr>\r\n          <th>选项</th>\r\n          <th>选择人数</th>\r\n          <th>占比</th>\r\n        </tr>\r\n      </thead>\r\n      <tbody>\r\n        <tr v-for=\"(option, index) in options\" :key=\"index\">\r\n          <td>{{ option.name }}</td>\r\n          <td>\r\n            <span>{{ option.displayCount }}</span>\r\n            <transition name=\"count\">\r\n              <!-- <span v-if=\"option.count !== option.displayCount\" class=\"increment\">{{ option.count }}</span> -->\r\n              <span v-if=\"option.count !== option.displayCount\" class=\"increment\">{{ option.count }}</span>\r\n            </transition>\r\n          </td>\r\n          <td>\r\n            <div class=\"percentage-bar\">\r\n              <div class=\"percentage-fill\" :style=\"{ width: option.percentage + '%' }\">\r\n                <span>{{ option.displayPercentage }}%</span>\r\n              </div>\r\n            </div>\r\n          </td>\r\n        </tr>\r\n        <tr>\r\n          <td>本题正确率</td>\r\n          <td>{{ correctRate }}</td>\r\n          <td>\r\n            <div class=\"percentage-bar\">\r\n              <div class=\"percentage-fill\" :style=\"{ width: correctRate + '%' }\">\r\n                {{ correctRate }}%\r\n              </div>\r\n            </div>\r\n          </td>\r\n        </tr>\r\n      </tbody>\r\n    </table>\r\n\r\n    <!-- 图表展示按钮 -->\r\n    <div class=\"chart-buttons\">\r\n      <button @click=\"toggleChart('bar')\">条形图</button>\r\n      <button @click=\"toggleChart('column')\">柱状图</button>\r\n      <button @click=\"toggleChart('line')\">折线图</button>\r\n      <button @click=\"toggleChart('pie')\">饼状图</button>\r\n    </div>\r\n\r\n    <!-- 图表展示区域 -->\r\n    <div v-if=\"showChart\" class=\"chart-container\">\r\n      <canvas ref=\"chartCanvas\"></canvas>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport Chart from 'chart.js/auto';\r\n\r\nexport default {\r\n  props: {\r\n    correctAnswer: {\r\n      type: String,\r\n      default: ''\r\n    }\r\n  },\r\n  data() {\r\n    return {\r\n      options: [],\r\n      showChart: false,\r\n      chartType: '',\r\n      chartData: null,\r\n      chartLabels: [],\r\n      correctRate: 0\r\n    };\r\n  },\r\n  mounted() {\r\n    this.options = this.calculatePercentage(this.getData());\r\n    this.calculateCorrectRate();\r\n    //this.animateData();\r\n  },\r\n  methods: {\r\n    getData() {\r\n      // 获取后端数据的方法\r\n      return [{ name: '选项1', count: 10 }, { name: '选项2', count: 20 }, { name: '选项3', count: 200 }, { name: '选项4', count: 20 }];\r\n    },\r\n    calculatePercentage(data) {\r\n      const total = data.reduce((sum, option) => sum + option.count, 0);\r\n      return data.map(option => ({\r\n        ...option,\r\n        displayCount: 0,\r\n        displayPercentage: 0,\r\n        percentage: ((option.count / total) * 100).toFixed(2)\r\n      }));\r\n    },\r\n    calculateCorrectRate() {\r\n      const totalResponses = this.options.reduce((sum, option) => sum + option.count, 0);\r\n      const correctResponses = this.options.find(option => option.name === this.correctAnswer)?.count || 0;\r\n      this.correctRate = ((correctResponses / totalResponses) * 100).toFixed(2);\r\n    },\r\n    animateData() {\r\n      const totalOptions = this.options.length;\r\n      let counter = 0;\r\n      const interval = setInterval(() => {\r\n        if (counter < totalOptions) {\r\n          this.options[counter].displayCount = this.options[counter].count;\r\n          this.options[counter].displayPercentage = this.options[counter].percentage;\r\n          counter++;\r\n        } else {\r\n          clearInterval(interval);\r\n        }\r\n      }, 2000); // Adjust the interval duration as needed\r\n    },\r\n    toggleChart(type) {\r\n      if (this.chartType === type) {\r\n        this.showChart = false;\r\n        this.chartType = '';\r\n      } else {\r\n        this.showChart = true;\r\n        this.chartType = type;\r\n        this.generateChart();\r\n      }\r\n    },\r\n    generateChart() {\r\n      const ctx = this.$refs.chartCanvas.getContext('2d');\r\n      const data = {\r\n        labels: this.options.map(option => option.name),\r\n        datasets: [{\r\n          label: '占比',\r\n          data: this.options.map(option => parseFloat(option.percentage)),\r\n          backgroundColor: [\r\n            'rgba(255, 99, 132, 0.2)',\r\n            'rgba(54, 162, 235, 0.2)',\r\n            'rgba(255, 206, 86, 0.2)',\r\n            'rgba(75, 192, 192, 0.2)'\r\n          ],\r\n          borderColor: [\r\n            'rgba(255, 99, 132, 1)',\r\n            'rgba(54, 162, 235, 1)',\r\n            'rgba(255, 206, 86, 1)',\r\n            'rgba(75, 192, 192, 1)'\r\n          ],\r\n          borderWidth: 1\r\n        }]\r\n      };\r\n      const options = {\r\n        scales: {\r\n          y: {\r\n            beginAtZero: true\r\n          }\r\n        }\r\n      };\r\n      this.chartData = new Chart(ctx, {\r\n        type: this.chartType,\r\n        data: data,\r\n        options: options\r\n      });\r\n    }\r\n  }\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.percentage-bar {\r\n  width: 100%;\r\n  height: 20px;\r\n  background-color: #f0f0f0;\r\n}\r\n\r\n.percentage-fill {\r\n  height: 100%;\r\n  background-color: #007bff;\r\n  color: #fff;\r\n  text-align: center;\r\n  line-height: 20px;\r\n}\r\n\r\n.chart-buttons button {\r\n  margin-right: 10px;\r\n}\r\n\r\n.chart-container {\r\n  margin-top: 20px;\r\n}\r\n\r\n.increment {\r\n  color: green;\r\n  font-weight: bold;\r\n}\r\n\r\n.count-enter-active, .count-leave-active {\r\n  transition: opacity 0.5s;\r\n}\r\n.count-enter, .count-leave-to {\r\n  opacity: 0;\r\n}\r\n</style>\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}