{"ast":null,"code":"/*\n (c) 2011-2014, Vladimir Agafonkin\n SunCalc is a JavaScript library for calculating sun/mooon position and light phases.\n https://github.com/mourner/suncalc\n*/\n// shortcuts for easier to read formulas\nvar PI = Math.PI,\n  sin = Math.sin,\n  cos = Math.cos,\n  tan = Math.tan,\n  asin = Math.asin,\n  atan = Math.atan2,\n  rad = PI / 180; // sun calculations are based on http://aa.quae.nl/en/reken/zonpositie.html formulas\n// date/time constants and conversions\n\nvar dayMs = 1000 * 60 * 60 * 24,\n  J1970 = 2440588,\n  J2000 = 2451545;\nfunction toJulian(date) {\n  return date.valueOf() / dayMs - 0.5 + J1970;\n}\nfunction toDays(date) {\n  return toJulian(date) - J2000;\n} // general calculations for position\n\nvar e = rad * 23.4397; // obliquity of the Earth\n\nfunction rightAscension(l, b) {\n  return atan(sin(l) * cos(e) - tan(b) * sin(e), cos(l));\n}\nfunction declination(l, b) {\n  return asin(sin(b) * cos(e) + cos(b) * sin(e) * sin(l));\n}\nfunction azimuth(H, phi, dec) {\n  return atan(sin(H), cos(H) * sin(phi) - tan(dec) * cos(phi));\n}\nfunction altitude(H, phi, dec) {\n  return asin(sin(phi) * sin(dec) + cos(phi) * cos(dec) * cos(H));\n}\nfunction siderealTime(d, lw) {\n  return rad * (280.16 + 360.9856235 * d) - lw;\n} // general sun calculations\n\nfunction solarMeanAnomaly(d) {\n  return rad * (357.5291 + 0.98560028 * d);\n}\nfunction eclipticLongitude(M) {\n  var C = rad * (1.9148 * sin(M) + 0.02 * sin(2 * M) + 0.0003 * sin(3 * M)),\n    // equation of center\n    P = rad * 102.9372; // perihelion of the Earth\n\n  return M + C + P + PI;\n}\nfunction sunCoords(d) {\n  var M = solarMeanAnomaly(d),\n    L = eclipticLongitude(M);\n  return {\n    dec: declination(L, 0),\n    ra: rightAscension(L, 0)\n  };\n}\nvar SunCalc = {}; // calculates sun position for a given date and latitude/longitude\n\nSunCalc.getPosition = function (date, lat, lng) {\n  var lw = rad * -lng,\n    phi = rad * lat,\n    d = toDays(date),\n    c = sunCoords(d),\n    H = siderealTime(d, lw) - c.ra;\n  return {\n    azimuth: azimuth(H, phi, c.dec),\n    altitude: altitude(H, phi, c.dec)\n  };\n};\nexport default SunCalc;","map":{"version":3,"names":["PI","Math","sin","cos","tan","asin","atan","atan2","rad","dayMs","J1970","J2000","toJulian","date","valueOf","toDays","e","rightAscension","l","b","declination","azimuth","H","phi","dec","altitude","siderealTime","d","lw","solarMeanAnomaly","eclipticLongitude","M","C","P","sunCoords","L","ra","SunCalc","getPosition","lat","lng","c"],"sources":["E:/mytest/node_modules/echarts-gl/lib/util/sunCalc.js"],"sourcesContent":["/*\n (c) 2011-2014, Vladimir Agafonkin\n SunCalc is a JavaScript library for calculating sun/mooon position and light phases.\n https://github.com/mourner/suncalc\n*/\n// shortcuts for easier to read formulas\nvar PI = Math.PI,\n    sin = Math.sin,\n    cos = Math.cos,\n    tan = Math.tan,\n    asin = Math.asin,\n    atan = Math.atan2,\n    rad = PI / 180; // sun calculations are based on http://aa.quae.nl/en/reken/zonpositie.html formulas\n// date/time constants and conversions\n\nvar dayMs = 1000 * 60 * 60 * 24,\n    J1970 = 2440588,\n    J2000 = 2451545;\n\nfunction toJulian(date) {\n  return date.valueOf() / dayMs - 0.5 + J1970;\n}\n\nfunction toDays(date) {\n  return toJulian(date) - J2000;\n} // general calculations for position\n\n\nvar e = rad * 23.4397; // obliquity of the Earth\n\nfunction rightAscension(l, b) {\n  return atan(sin(l) * cos(e) - tan(b) * sin(e), cos(l));\n}\n\nfunction declination(l, b) {\n  return asin(sin(b) * cos(e) + cos(b) * sin(e) * sin(l));\n}\n\nfunction azimuth(H, phi, dec) {\n  return atan(sin(H), cos(H) * sin(phi) - tan(dec) * cos(phi));\n}\n\nfunction altitude(H, phi, dec) {\n  return asin(sin(phi) * sin(dec) + cos(phi) * cos(dec) * cos(H));\n}\n\nfunction siderealTime(d, lw) {\n  return rad * (280.16 + 360.9856235 * d) - lw;\n} // general sun calculations\n\n\nfunction solarMeanAnomaly(d) {\n  return rad * (357.5291 + 0.98560028 * d);\n}\n\nfunction eclipticLongitude(M) {\n  var C = rad * (1.9148 * sin(M) + 0.02 * sin(2 * M) + 0.0003 * sin(3 * M)),\n      // equation of center\n  P = rad * 102.9372; // perihelion of the Earth\n\n  return M + C + P + PI;\n}\n\nfunction sunCoords(d) {\n  var M = solarMeanAnomaly(d),\n      L = eclipticLongitude(M);\n  return {\n    dec: declination(L, 0),\n    ra: rightAscension(L, 0)\n  };\n}\n\nvar SunCalc = {}; // calculates sun position for a given date and latitude/longitude\n\nSunCalc.getPosition = function (date, lat, lng) {\n  var lw = rad * -lng,\n      phi = rad * lat,\n      d = toDays(date),\n      c = sunCoords(d),\n      H = siderealTime(d, lw) - c.ra;\n  return {\n    azimuth: azimuth(H, phi, c.dec),\n    altitude: altitude(H, phi, c.dec)\n  };\n};\n\nexport default SunCalc;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}