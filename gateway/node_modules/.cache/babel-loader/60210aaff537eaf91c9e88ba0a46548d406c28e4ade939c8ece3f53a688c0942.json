{"ast":null,"code":"import Node from './Node';\nimport Matrix4 from './math/Matrix4';\nimport Frustum from './math/Frustum';\nimport Ray from './math/Ray';\nimport vec4 from './glmatrix/vec4';\nimport vec3 from './glmatrix/vec3';\n\n/**\n * @constructor clay.Camera\n * @extends clay.Node\n */\nvar Camera = Node.extend(function () {\n  return /** @lends clay.Camera# */{\n    /**\n     * Camera projection matrix\n     * @type {clay.Matrix4}\n     */\n    projectionMatrix: new Matrix4(),\n    /**\n     * Inverse of camera projection matrix\n     * @type {clay.Matrix4}\n     */\n    invProjectionMatrix: new Matrix4(),\n    /**\n     * View matrix, equal to inverse of camera's world matrix\n     * @type {clay.Matrix4}\n     */\n    viewMatrix: new Matrix4(),\n    /**\n     * Camera frustum in view space\n     * @type {clay.Frustum}\n     */\n    frustum: new Frustum()\n  };\n}, function () {\n  this.update(true);\n}, /** @lends clay.Camera.prototype */\n{\n  update: function (force) {\n    Node.prototype.update.call(this, force);\n    Matrix4.invert(this.viewMatrix, this.worldTransform);\n    this.updateProjectionMatrix();\n    Matrix4.invert(this.invProjectionMatrix, this.projectionMatrix);\n    this.frustum.setFromProjection(this.projectionMatrix);\n  },\n  /**\n   * Set camera view matrix\n   */\n  setViewMatrix: function (viewMatrix) {\n    Matrix4.copy(this.viewMatrix, viewMatrix);\n    Matrix4.invert(this.worldTransform, viewMatrix);\n    this.decomposeWorldTransform();\n  },\n  /**\n   * Decompose camera projection matrix\n   */\n  decomposeProjectionMatrix: function () {},\n  /**\n   * Set camera projection matrix\n   * @param {clay.Matrix4} projectionMatrix\n   */\n  setProjectionMatrix: function (projectionMatrix) {\n    Matrix4.copy(this.projectionMatrix, projectionMatrix);\n    Matrix4.invert(this.invProjectionMatrix, projectionMatrix);\n    this.decomposeProjectionMatrix();\n  },\n  /**\n   * Update projection matrix, called after update\n   */\n  updateProjectionMatrix: function () {},\n  /**\n   * Cast a picking ray from camera near plane to far plane\n   * @function\n   * @param {clay.Vector2} ndc\n   * @param {clay.Ray} [out]\n   * @return {clay.Ray}\n   */\n  castRay: function () {\n    var v4 = vec4.create();\n    return function (ndc, out) {\n      var ray = out !== undefined ? out : new Ray();\n      var x = ndc.array[0];\n      var y = ndc.array[1];\n      vec4.set(v4, x, y, -1, 1);\n      vec4.transformMat4(v4, v4, this.invProjectionMatrix.array);\n      vec4.transformMat4(v4, v4, this.worldTransform.array);\n      vec3.scale(ray.origin.array, v4, 1 / v4[3]);\n      vec4.set(v4, x, y, 1, 1);\n      vec4.transformMat4(v4, v4, this.invProjectionMatrix.array);\n      vec4.transformMat4(v4, v4, this.worldTransform.array);\n      vec3.scale(v4, v4, 1 / v4[3]);\n      vec3.sub(ray.direction.array, v4, ray.origin.array);\n      vec3.normalize(ray.direction.array, ray.direction.array);\n      ray.direction._dirty = true;\n      ray.origin._dirty = true;\n      return ray;\n    };\n  }()\n\n  /**\n   * @function\n   * @name clone\n   * @return {clay.Camera}\n   * @memberOf clay.Camera.prototype\n   */\n});\nexport default Camera;","map":{"version":3,"names":["Node","Matrix4","Frustum","Ray","vec4","vec3","Camera","extend","projectionMatrix","invProjectionMatrix","viewMatrix","frustum","update","force","prototype","call","invert","worldTransform","updateProjectionMatrix","setFromProjection","setViewMatrix","copy","decomposeWorldTransform","decomposeProjectionMatrix","setProjectionMatrix","castRay","v4","create","ndc","out","ray","undefined","x","array","y","set","transformMat4","scale","origin","sub","direction","normalize","_dirty"],"sources":["E:/QuestionairePlanet_Fronted/mytest/node_modules/claygl/src/Camera.js"],"sourcesContent":["import Node from './Node';\nimport Matrix4 from './math/Matrix4';\nimport Frustum from './math/Frustum';\nimport Ray from './math/Ray';\n\nimport vec4 from './glmatrix/vec4';\nimport vec3 from './glmatrix/vec3';\n\n\n/**\n * @constructor clay.Camera\n * @extends clay.Node\n */\nvar Camera = Node.extend(function () {\n    return /** @lends clay.Camera# */ {\n        /**\n         * Camera projection matrix\n         * @type {clay.Matrix4}\n         */\n        projectionMatrix: new Matrix4(),\n\n        /**\n         * Inverse of camera projection matrix\n         * @type {clay.Matrix4}\n         */\n        invProjectionMatrix: new Matrix4(),\n\n        /**\n         * View matrix, equal to inverse of camera's world matrix\n         * @type {clay.Matrix4}\n         */\n        viewMatrix: new Matrix4(),\n\n        /**\n         * Camera frustum in view space\n         * @type {clay.Frustum}\n         */\n        frustum: new Frustum()\n    };\n}, function () {\n    this.update(true);\n},\n/** @lends clay.Camera.prototype */\n{\n\n    update: function (force) {\n        Node.prototype.update.call(this, force);\n        Matrix4.invert(this.viewMatrix, this.worldTransform);\n\n        this.updateProjectionMatrix();\n        Matrix4.invert(this.invProjectionMatrix, this.projectionMatrix);\n\n        this.frustum.setFromProjection(this.projectionMatrix);\n    },\n\n    /**\n     * Set camera view matrix\n     */\n    setViewMatrix: function (viewMatrix) {\n        Matrix4.copy(this.viewMatrix, viewMatrix);\n        Matrix4.invert(this.worldTransform, viewMatrix);\n        this.decomposeWorldTransform();\n    },\n\n    /**\n     * Decompose camera projection matrix\n     */\n    decomposeProjectionMatrix: function () {},\n\n    /**\n     * Set camera projection matrix\n     * @param {clay.Matrix4} projectionMatrix\n     */\n    setProjectionMatrix: function (projectionMatrix) {\n        Matrix4.copy(this.projectionMatrix, projectionMatrix);\n        Matrix4.invert(this.invProjectionMatrix, projectionMatrix);\n        this.decomposeProjectionMatrix();\n    },\n    /**\n     * Update projection matrix, called after update\n     */\n    updateProjectionMatrix: function () {},\n\n    /**\n     * Cast a picking ray from camera near plane to far plane\n     * @function\n     * @param {clay.Vector2} ndc\n     * @param {clay.Ray} [out]\n     * @return {clay.Ray}\n     */\n    castRay: (function () {\n        var v4 = vec4.create();\n        return function (ndc, out) {\n            var ray = out !== undefined ? out : new Ray();\n            var x = ndc.array[0];\n            var y = ndc.array[1];\n            vec4.set(v4, x, y, -1, 1);\n            vec4.transformMat4(v4, v4, this.invProjectionMatrix.array);\n            vec4.transformMat4(v4, v4, this.worldTransform.array);\n            vec3.scale(ray.origin.array, v4, 1 / v4[3]);\n\n            vec4.set(v4, x, y, 1, 1);\n            vec4.transformMat4(v4, v4, this.invProjectionMatrix.array);\n            vec4.transformMat4(v4, v4, this.worldTransform.array);\n            vec3.scale(v4, v4, 1 / v4[3]);\n            vec3.sub(ray.direction.array, v4, ray.origin.array);\n\n            vec3.normalize(ray.direction.array, ray.direction.array);\n            ray.direction._dirty = true;\n            ray.origin._dirty = true;\n\n            return ray;\n        };\n    })(),\n\n    /**\n     * @function\n     * @name clone\n     * @return {clay.Camera}\n     * @memberOf clay.Camera.prototype\n     */\n});\n\nexport default Camera;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}