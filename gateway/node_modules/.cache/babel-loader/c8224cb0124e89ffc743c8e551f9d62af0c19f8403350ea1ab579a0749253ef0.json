{"ast":null,"code":"import \"core-js/modules/es.array-buffer.detached.js\";\nimport \"core-js/modules/es.array-buffer.transfer.js\";\nimport \"core-js/modules/es.array-buffer.transfer-to-fixed-length.js\";\nimport \"core-js/modules/es.typed-array.to-reversed.js\";\nimport \"core-js/modules/es.typed-array.to-sorted.js\";\nimport \"core-js/modules/es.typed-array.with.js\";\n// TODO ECharts GL must be imported whatever component,charts is imported.\nimport '../../echarts-gl';\nimport ScatterGLSeries from './ScatterGLSeries';\nimport ScatterGLView from './ScatterGLView';\nexport function install(registers) {\n  registers.registerChartView(ScatterGLView);\n  registers.registerSeriesModel(ScatterGLSeries);\n  registers.registerLayout({\n    seriesType: 'scatterGL',\n    reset: function (seriesModel) {\n      var coordSys = seriesModel.coordinateSystem;\n      var data = seriesModel.getData();\n      var progress;\n      if (coordSys) {\n        var dims = coordSys.dimensions.map(function (dim) {\n          return data.mapDimension(dim);\n        }).slice(0, 2);\n        var pt = [];\n        if (dims.length === 1) {\n          progress = function (params) {\n            var points = new Float32Array((params.end - params.start) * 2);\n            for (var idx = params.start; idx < params.end; idx++) {\n              var offset = (idx - params.start) * 2;\n              var x = data.get(dims[0], idx);\n              var pt = coordSys.dataToPoint(x);\n              points[offset] = pt[0];\n              points[offset + 1] = pt[1];\n            }\n            data.setLayout('points', points);\n          };\n        } else if (dims.length === 2) {\n          progress = function (params) {\n            var points = new Float32Array((params.end - params.start) * 2);\n            for (var idx = params.start; idx < params.end; idx++) {\n              var offset = (idx - params.start) * 2;\n              var x = data.get(dims[0], idx);\n              var y = data.get(dims[1], idx);\n              pt[0] = x;\n              pt[1] = y;\n              pt = coordSys.dataToPoint(pt);\n              points[offset] = pt[0];\n              points[offset + 1] = pt[1];\n            }\n            data.setLayout('points', points);\n          };\n        }\n      }\n      return {\n        progress: progress\n      };\n    }\n  });\n}","map":{"version":3,"names":["ScatterGLSeries","ScatterGLView","install","registers","registerChartView","registerSeriesModel","registerLayout","seriesType","reset","seriesModel","coordSys","coordinateSystem","data","getData","progress","dims","dimensions","map","dim","mapDimension","slice","pt","length","params","points","Float32Array","end","start","idx","offset","x","get","dataToPoint","setLayout","y"],"sources":["E:/QuestionairePlanet_Fronted/mytest/node_modules/echarts-gl/lib/chart/scatterGL/install.js"],"sourcesContent":["// TODO ECharts GL must be imported whatever component,charts is imported.\nimport '../../echarts-gl';\nimport ScatterGLSeries from './ScatterGLSeries';\nimport ScatterGLView from './ScatterGLView';\nexport function install(registers) {\n  registers.registerChartView(ScatterGLView);\n  registers.registerSeriesModel(ScatterGLSeries);\n  registers.registerLayout({\n    seriesType: 'scatterGL',\n    reset: function (seriesModel) {\n      var coordSys = seriesModel.coordinateSystem;\n      var data = seriesModel.getData();\n      var progress;\n\n      if (coordSys) {\n        var dims = coordSys.dimensions.map(function (dim) {\n          return data.mapDimension(dim);\n        }).slice(0, 2);\n        var pt = [];\n\n        if (dims.length === 1) {\n          progress = function (params) {\n            var points = new Float32Array((params.end - params.start) * 2);\n\n            for (var idx = params.start; idx < params.end; idx++) {\n              var offset = (idx - params.start) * 2;\n              var x = data.get(dims[0], idx);\n              var pt = coordSys.dataToPoint(x);\n              points[offset] = pt[0];\n              points[offset + 1] = pt[1];\n            }\n\n            data.setLayout('points', points);\n          };\n        } else if (dims.length === 2) {\n          progress = function (params) {\n            var points = new Float32Array((params.end - params.start) * 2);\n\n            for (var idx = params.start; idx < params.end; idx++) {\n              var offset = (idx - params.start) * 2;\n              var x = data.get(dims[0], idx);\n              var y = data.get(dims[1], idx);\n              pt[0] = x;\n              pt[1] = y;\n              pt = coordSys.dataToPoint(pt);\n              points[offset] = pt[0];\n              points[offset + 1] = pt[1];\n            }\n\n            data.setLayout('points', points);\n          };\n        }\n      }\n\n      return {\n        progress: progress\n      };\n    }\n  });\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}