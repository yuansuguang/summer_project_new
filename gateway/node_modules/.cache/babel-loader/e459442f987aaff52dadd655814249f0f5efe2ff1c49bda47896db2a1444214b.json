{"ast":null,"code":"import { createElementVNode as _createElementVNode, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, toDisplayString as _toDisplayString, createCommentVNode as _createCommentVNode, normalizeStyle as _normalizeStyle, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\nconst _withScopeId = n => (_pushScopeId(\"data-v-316dfd7b\"), n = n(), _popScopeId(), n);\nconst _hoisted_1 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"h2\", null, \"选项统计\", -1 /* HOISTED */));\nconst _hoisted_2 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"thead\", null, [/*#__PURE__*/_createElementVNode(\"tr\", null, [/*#__PURE__*/_createElementVNode(\"th\", null, \"选项\"), /*#__PURE__*/_createElementVNode(\"th\", null, \"选择人数\"), /*#__PURE__*/_createElementVNode(\"th\", null, \"占比\")])], -1 /* HOISTED */));\nconst _hoisted_3 = {\n  class: \"percentage-bar\"\n};\nconst _hoisted_4 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"td\", null, \"本题正确率\", -1 /* HOISTED */));\nconst _hoisted_5 = {\n  class: \"percentage-bar\"\n};\nconst _hoisted_6 = {\n  class: \"chart-buttons\"\n};\nconst _hoisted_7 = {\n  key: 0,\n  class: \"chart-container\"\n};\nconst _hoisted_8 = {\n  ref: \"chartCanvas\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", null, [_hoisted_1, _createElementVNode(\"table\", null, [_hoisted_2, _createElementVNode(\"tbody\", null, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.options, (option, index) => {\n    return _openBlock(), _createElementBlock(\"tr\", {\n      key: index\n    }, [_createElementVNode(\"td\", null, _toDisplayString(option.name), 1 /* TEXT */), _createElementVNode(\"td\", null, [_createElementVNode(\"span\", null, _toDisplayString(option.displayCount), 1 /* TEXT */), _createCommentVNode(\" <transition name=\\\"count\\\">\\r\\n              <span v-if=\\\"option.count !== option.displayCount\\\" class=\\\"increment\\\">{{ option.count }}</span>\\r\\n            </transition> \")]), _createElementVNode(\"td\", null, [_createElementVNode(\"div\", _hoisted_3, [_createElementVNode(\"div\", {\n      class: \"percentage-fill\",\n      style: _normalizeStyle({\n        width: option.percentage + '%'\n      })\n    }, [_createElementVNode(\"span\", null, _toDisplayString(option.displayPercentage) + \"%\", 1 /* TEXT */)], 4 /* STYLE */)])])]);\n  }), 128 /* KEYED_FRAGMENT */)), _createElementVNode(\"tr\", null, [_hoisted_4, _createElementVNode(\"td\", null, _toDisplayString($data.correctRate), 1 /* TEXT */), _createElementVNode(\"td\", null, [_createElementVNode(\"div\", _hoisted_5, [_createElementVNode(\"div\", {\n    class: \"percentage-fill\",\n    style: _normalizeStyle({\n      width: $data.correctRate + '%'\n    })\n  }, _toDisplayString($data.correctRate) + \"% \", 5 /* TEXT, STYLE */)])])])])]), _createCommentVNode(\" 图表展示按钮 \"), _createElementVNode(\"div\", _hoisted_6, [_createElementVNode(\"button\", {\n    onClick: _cache[0] || (_cache[0] = $event => $options.toggleChart('bar'))\n  }, \"条形图\"), _createElementVNode(\"button\", {\n    onClick: _cache[1] || (_cache[1] = $event => $options.toggleChart('column'))\n  }, \"柱状图\"), _createElementVNode(\"button\", {\n    onClick: _cache[2] || (_cache[2] = $event => $options.toggleChart('line'))\n  }, \"折线图\"), _createElementVNode(\"button\", {\n    onClick: _cache[3] || (_cache[3] = $event => $options.toggleChart('pie'))\n  }, \"饼状图\")]), _createCommentVNode(\" 图表展示区域 \"), $data.showChart ? (_openBlock(), _createElementBlock(\"div\", _hoisted_7, [_createElementVNode(\"canvas\", _hoisted_8, null, 512 /* NEED_PATCH */)])) : _createCommentVNode(\"v-if\", true)]);\n}","map":{"version":3,"names":["_createElementVNode","class","key","ref","_createElementBlock","_hoisted_1","_hoisted_2","_Fragment","_renderList","$data","options","option","index","_toDisplayString","name","displayCount","_createCommentVNode","_hoisted_3","style","_normalizeStyle","width","percentage","displayPercentage","_hoisted_4","correctRate","_hoisted_5","_hoisted_6","onClick","_cache","$event","$options","toggleChart","showChart","_hoisted_7","_hoisted_8"],"sources":["E:\\mytest\\src\\views\\qn-data\\qnDataview.vue"],"sourcesContent":["<template>\r\n  <div>\r\n    <h2>选项统计</h2>\r\n    <table>\r\n      <thead>\r\n        <tr>\r\n          <th>选项</th>\r\n          <th>选择人数</th>\r\n          <th>占比</th>\r\n        </tr>\r\n      </thead>\r\n      <tbody>\r\n        <tr v-for=\"(option, index) in options\" :key=\"index\">\r\n          <td>{{ option.name }}</td>\r\n          <td>\r\n            <span>{{ option.displayCount }}</span>\r\n            <!-- <transition name=\"count\">\r\n              <span v-if=\"option.count !== option.displayCount\" class=\"increment\">{{ option.count }}</span>\r\n            </transition> -->\r\n          </td>\r\n          <td>\r\n            <div class=\"percentage-bar\">\r\n              <div class=\"percentage-fill\" :style=\"{ width: option.percentage + '%' }\">\r\n                <span>{{ option.displayPercentage }}%</span>\r\n              </div>\r\n            </div>\r\n          </td>\r\n        </tr>\r\n        <tr>\r\n          <td>本题正确率</td>\r\n          <td>{{ correctRate }}</td>\r\n          <td>\r\n            <div class=\"percentage-bar\">\r\n              <div class=\"percentage-fill\" :style=\"{ width: correctRate + '%' }\">\r\n                {{ correctRate }}%\r\n              </div>\r\n            </div>\r\n          </td>\r\n        </tr>\r\n      </tbody>\r\n    </table>\r\n\r\n    <!-- 图表展示按钮 -->\r\n    <div class=\"chart-buttons\">\r\n      <button @click=\"toggleChart('bar')\">条形图</button>\r\n      <button @click=\"toggleChart('column')\">柱状图</button>\r\n      <button @click=\"toggleChart('line')\">折线图</button>\r\n      <button @click=\"toggleChart('pie')\">饼状图</button>\r\n    </div>\r\n\r\n    <!-- 图表展示区域 -->\r\n    <div v-if=\"showChart\" class=\"chart-container\">\r\n      <canvas ref=\"chartCanvas\"></canvas>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport Chart from 'chart.js/auto';\r\n\r\nexport default {\r\n  props: {\r\n    correctAnswer: {\r\n      type: String,\r\n      default: ''\r\n    }\r\n  },\r\n  data() {\r\n    return {\r\n      options: [],\r\n      showChart: false,\r\n      chartType: '',\r\n      chartData: null,\r\n      chartLabels: [],\r\n      correctRate: 0\r\n    };\r\n  },\r\n  mounted() {\r\n    this.options = this.calculatePercentage(this.getData());\r\n    this.calculateCorrectRate();\r\n    //this.animateData();\r\n  },\r\n  methods: {\r\n    getData() {\r\n      // 获取后端数据的方法\r\n      return [{ name: '选项1', count: 10 }, { name: '选项2', count: 20 }, { name: '选项3', count: 200 }, { name: '选项4', count: 20 }];\r\n    },\r\n    calculatePercentage(data) {\r\n      const total = data.reduce((sum, option) => sum + option.count, 0);\r\n      return data.map(option => ({\r\n        ...option,\r\n        displayCount: 0,\r\n        displayPercentage: 0,\r\n        percentage: ((option.count / total) * 100).toFixed(2)\r\n      }));\r\n    },\r\n    calculateCorrectRate() {\r\n      const totalResponses = this.options.reduce((sum, option) => sum + option.count, 0);\r\n      const correctResponses = this.options.find(option => option.name === this.correctAnswer)?.count || 0;\r\n      this.correctRate = ((correctResponses / totalResponses) * 100).toFixed(2);\r\n    },\r\n    animateData() {\r\n      const totalOptions = this.options.length;\r\n      let counter = 0;\r\n      const interval = setInterval(() => {\r\n        if (counter < totalOptions) {\r\n          this.options[counter].displayCount = this.options[counter].count;\r\n          this.options[counter].displayPercentage = this.options[counter].percentage;\r\n          counter++;\r\n        } else {\r\n          clearInterval(interval);\r\n        }\r\n      }, 2000); // Adjust the interval duration as needed\r\n    },\r\n    toggleChart(type) {\r\n      if (this.chartType === type) {\r\n        this.showChart = false;\r\n        this.chartType = '';\r\n      } else {\r\n        this.showChart = true;\r\n        this.chartType = type;\r\n        this.generateChart();\r\n      }\r\n    },\r\n    generateChart() {\r\n      const ctx = this.$refs.chartCanvas.getContext('2d');\r\n      const data = {\r\n        labels: this.options.map(option => option.name),\r\n        datasets: [{\r\n          label: '占比',\r\n          data: this.options.map(option => parseFloat(option.percentage)),\r\n          backgroundColor: [\r\n            'rgba(255, 99, 132, 0.2)',\r\n            'rgba(54, 162, 235, 0.2)',\r\n            'rgba(255, 206, 86, 0.2)',\r\n            'rgba(75, 192, 192, 0.2)'\r\n          ],\r\n          borderColor: [\r\n            'rgba(255, 99, 132, 1)',\r\n            'rgba(54, 162, 235, 1)',\r\n            'rgba(255, 206, 86, 1)',\r\n            'rgba(75, 192, 192, 1)'\r\n          ],\r\n          borderWidth: 1\r\n        }]\r\n      };\r\n      const options = {\r\n        scales: {\r\n          y: {\r\n            beginAtZero: true\r\n          }\r\n        }\r\n      };\r\n      this.chartData = new Chart(ctx, {\r\n        type: this.chartType,\r\n        data: data,\r\n        options: options\r\n      });\r\n    }\r\n  }\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.percentage-bar {\r\n  width: 100%;\r\n  height: 20px;\r\n  background-color: #f0f0f0;\r\n}\r\n\r\n.percentage-fill {\r\n  height: 100%;\r\n  background-color: #007bff;\r\n  color: #fff;\r\n  text-align: center;\r\n  line-height: 20px;\r\n}\r\n\r\n.chart-buttons button {\r\n  margin-right: 10px;\r\n}\r\n\r\n.chart-container {\r\n  margin-top: 20px;\r\n}\r\n\r\n.increment {\r\n  color: green;\r\n  font-weight: bold;\r\n}\r\n\r\n.count-enter-active, .count-leave-active {\r\n  transition: opacity 0.5s;\r\n}\r\n.count-enter, .count-leave-to {\r\n  opacity: 0;\r\n}\r\n</style>\r\n"],"mappings":";;gEAEIA,mBAAA,CAAa,YAAT,MAAI;gEAENA,mBAAA,CAMQ,gB,aALNA,mBAAA,CAIK,a,aAHHA,mBAAA,CAAW,YAAP,IAAE,G,aACNA,mBAAA,CAAa,YAAT,MAAI,G,aACRA,mBAAA,CAAW,YAAP,IAAE,E;;EAaCC,KAAK,EAAC;AAAgB;gEAQ7BD,mBAAA,CAAc,YAAV,OAAK;;EAGFC,KAAK,EAAC;AAAgB;;EAW9BA,KAAK,EAAC;AAAe;;EA3C9BC,GAAA;EAmD0BD,KAAK,EAAC;;;EAClBE,GAAG,EAAC;AAAa;;uBAnD7BC,mBAAA,CAqDM,cApDJC,UAAa,EACbL,mBAAA,CAqCQ,gBApCNM,UAMQ,EACRN,mBAAA,CA4BQ,iB,kBA3BNI,mBAAA,CAeKG,SAAA,QA3BbC,WAAA,CAYsCC,KAAA,CAAAC,OAAO,EAZ7C,CAYoBC,MAAM,EAAEC,KAAK;yBAAzBR,mBAAA,CAeK;MAfmCF,GAAG,EAAEU;IAAK,IAChDZ,mBAAA,CAA0B,YAAAa,gBAAA,CAAnBF,MAAM,CAACG,IAAI,kBAClBd,mBAAA,CAKK,aAJHA,mBAAA,CAAsC,cAAAa,gBAAA,CAA7BF,MAAM,CAACI,YAAY,kBAC5BC,mBAAA,iLAEiB,C,GAEnBhB,mBAAA,CAMK,aALHA,mBAAA,CAIM,OAJNiB,UAIM,GAHJjB,mBAAA,CAEM;MAFDC,KAAK,EAAC,iBAAiB;MAAEiB,KAAK,EAtBjDC,eAAA;QAAAC,KAAA,EAsB4DT,MAAM,CAACU,UAAU;MAAA;QAC7DrB,mBAAA,CAA4C,cAAAa,gBAAA,CAAnCF,MAAM,CAACW,iBAAiB,IAAG,GAAC,gB;kCAK7CtB,mBAAA,CAUK,aATHuB,UAAc,EACdvB,mBAAA,CAA0B,YAAAa,gBAAA,CAAnBJ,KAAA,CAAAe,WAAW,kBAClBxB,mBAAA,CAMK,aALHA,mBAAA,CAIM,OAJNyB,UAIM,GAHJzB,mBAAA,CAEM;IAFDC,KAAK,EAAC,iBAAiB;IAAEiB,KAAK,EAjCjDC,eAAA;MAAAC,KAAA,EAiC4DX,KAAA,CAAAe,WAAW;IAAA;sBACpDf,KAAA,CAAAe,WAAW,IAAG,IACnB,uB,WAOVR,mBAAA,YAAe,EACfhB,mBAAA,CAKM,OALN0B,UAKM,GAJJ1B,mBAAA,CAAgD;IAAvC2B,OAAK,EAAAC,MAAA,QAAAA,MAAA,MAAAC,MAAA,IAAEC,QAAA,CAAAC,WAAW;KAAS,KAAG,GACvC/B,mBAAA,CAAmD;IAA1C2B,OAAK,EAAAC,MAAA,QAAAA,MAAA,MAAAC,MAAA,IAAEC,QAAA,CAAAC,WAAW;KAAY,KAAG,GAC1C/B,mBAAA,CAAiD;IAAxC2B,OAAK,EAAAC,MAAA,QAAAA,MAAA,MAAAC,MAAA,IAAEC,QAAA,CAAAC,WAAW;KAAU,KAAG,GACxC/B,mBAAA,CAAgD;IAAvC2B,OAAK,EAAAC,MAAA,QAAAA,MAAA,MAAAC,MAAA,IAAEC,QAAA,CAAAC,WAAW;KAAS,KAAG,E,GAGzCf,mBAAA,YAAe,EACJP,KAAA,CAAAuB,SAAS,I,cAApB5B,mBAAA,CAEM,OAFN6B,UAEM,GADJjC,mBAAA,CAAmC,UAAnCkC,UAAmC,8B,KApDzClB,mBAAA,e","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}