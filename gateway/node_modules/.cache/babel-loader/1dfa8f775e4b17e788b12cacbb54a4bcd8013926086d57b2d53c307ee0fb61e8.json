{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.array-buffer.detached.js\";\nimport \"core-js/modules/es.array-buffer.transfer.js\";\nimport \"core-js/modules/es.array-buffer.transfer-to-fixed-length.js\";\nimport \"core-js/modules/es.typed-array.to-reversed.js\";\nimport \"core-js/modules/es.typed-array.to-sorted.js\";\nimport \"core-js/modules/es.typed-array.with.js\";\n/**\n * Geometry collecting bars data\n *\n * @module echarts-gl/chart/bars/BarsGeometry\n * @author Yi Shen(http://github.com/pissang)\n */\nimport * as echarts from 'echarts/lib/echarts';\nimport dynamicConvertMixin from './dynamicConvertMixin';\nimport trianglesSortMixin from './trianglesSortMixin';\nimport Geometry from 'claygl/src/Geometry';\nimport glMatrix from 'claygl/src/dep/glmatrix';\nvar vec3 = glMatrix.vec3;\nvar mat3 = glMatrix.mat3;\n/**\n * @constructor\n * @alias module:echarts-gl/chart/bars/BarsGeometry\n * @extends clay.Geometry\n */\n\nvar BarsGeometry = Geometry.extend(function () {\n  return {\n    attributes: {\n      position: new Geometry.Attribute('position', 'float', 3, 'POSITION'),\n      normal: new Geometry.Attribute('normal', 'float', 3, 'NORMAL'),\n      color: new Geometry.Attribute('color', 'float', 4, 'COLOR'),\n      prevPosition: new Geometry.Attribute('prevPosition', 'float', 3),\n      prevNormal: new Geometry.Attribute('prevNormal', 'float', 3)\n    },\n    dynamic: true,\n    enableNormal: false,\n    bevelSize: 1,\n    bevelSegments: 0,\n    // Map from vertexIndex to dataIndex.\n    _dataIndices: null,\n    _vertexOffset: 0,\n    _triangleOffset: 0\n  };\n}, /** @lends module:echarts-gl/chart/bars/BarsGeometry.prototype */\n{\n  resetOffset: function () {\n    this._vertexOffset = 0;\n    this._triangleOffset = 0;\n  },\n  setBarCount: function (barCount) {\n    var enableNormal = this.enableNormal;\n    var vertexCount = this.getBarVertexCount() * barCount;\n    var triangleCount = this.getBarTriangleCount() * barCount;\n    if (this.vertexCount !== vertexCount) {\n      this.attributes.position.init(vertexCount);\n      if (enableNormal) {\n        this.attributes.normal.init(vertexCount);\n      } else {\n        this.attributes.normal.value = null;\n      }\n      this.attributes.color.init(vertexCount);\n    }\n    if (this.triangleCount !== triangleCount) {\n      this.indices = vertexCount > 0xffff ? new Uint32Array(triangleCount * 3) : new Uint16Array(triangleCount * 3);\n      this._dataIndices = new Uint32Array(vertexCount);\n    }\n  },\n  getBarVertexCount: function () {\n    var bevelSegments = this.bevelSize > 0 ? this.bevelSegments : 0;\n    return bevelSegments > 0 ? this._getBevelBarVertexCount(bevelSegments) : this.enableNormal ? 24 : 8;\n  },\n  getBarTriangleCount: function () {\n    var bevelSegments = this.bevelSize > 0 ? this.bevelSegments : 0;\n    return bevelSegments > 0 ? this._getBevelBarTriangleCount(bevelSegments) : 12;\n  },\n  _getBevelBarVertexCount: function (bevelSegments) {\n    return (bevelSegments + 1) * 4 * (bevelSegments + 1) * 2;\n  },\n  _getBevelBarTriangleCount: function (bevelSegments) {\n    var widthSegments = bevelSegments * 4 + 3;\n    var heightSegments = bevelSegments * 2 + 1;\n    return (widthSegments + 1) * heightSegments * 2 + 4;\n  },\n  setColor: function (idx, color) {\n    var vertexCount = this.getBarVertexCount();\n    var start = vertexCount * idx;\n    var end = vertexCount * (idx + 1);\n    for (var i = start; i < end; i++) {\n      this.attributes.color.set(i, color);\n    }\n    this.dirtyAttribute('color');\n  },\n  /**\n   * Get dataIndex of vertex.\n   * @param {number} vertexIndex\n   */\n  getDataIndexOfVertex: function (vertexIndex) {\n    return this._dataIndices ? this._dataIndices[vertexIndex] : null;\n  },\n  /**\n   * Add a bar\n   * @param {Array.<number>} start\n   * @param {Array.<number>} end\n   * @param {Array.<number>} orient  right direction\n   * @param {Array.<number>} size size on x and z\n   * @param {Array.<number>} color\n   */\n  addBar: function () {\n    var v3Create = vec3.create;\n    var v3ScaleAndAdd = vec3.scaleAndAdd;\n    var end = v3Create();\n    var px = v3Create();\n    var py = v3Create();\n    var pz = v3Create();\n    var nx = v3Create();\n    var ny = v3Create();\n    var nz = v3Create();\n    var pts = [];\n    var normals = [];\n    for (var i = 0; i < 8; i++) {\n      pts[i] = v3Create();\n    }\n    var cubeFaces4 = [\n    // PX\n    [0, 1, 5, 4],\n    // NX\n    [2, 3, 7, 6],\n    // PY\n    [4, 5, 6, 7],\n    // NY\n    [3, 2, 1, 0],\n    // PZ\n    [0, 4, 7, 3],\n    // NZ\n    [1, 2, 6, 5]];\n    var face4To3 = [0, 1, 2, 0, 2, 3];\n    var cubeFaces3 = [];\n    for (var i = 0; i < cubeFaces4.length; i++) {\n      var face4 = cubeFaces4[i];\n      for (var j = 0; j < 2; j++) {\n        var face = [];\n        for (var k = 0; k < 3; k++) {\n          face.push(face4[face4To3[j * 3 + k]]);\n        }\n        cubeFaces3.push(face);\n      }\n    }\n    return function (start, dir, leftDir, size, color, dataIndex) {\n      // Use vertex, triangle maybe sorted.\n      var startVertex = this._vertexOffset;\n      if (this.bevelSize > 0 && this.bevelSegments > 0) {\n        this._addBevelBar(start, dir, leftDir, size, this.bevelSize, this.bevelSegments, color);\n      } else {\n        vec3.copy(py, dir);\n        vec3.normalize(py, py); // x * y => z\n\n        vec3.cross(pz, leftDir, py);\n        vec3.normalize(pz, pz); // y * z => x\n\n        vec3.cross(px, py, pz);\n        vec3.normalize(pz, pz);\n        vec3.negate(nx, px);\n        vec3.negate(ny, py);\n        vec3.negate(nz, pz);\n        v3ScaleAndAdd(pts[0], start, px, size[0] / 2);\n        v3ScaleAndAdd(pts[0], pts[0], pz, size[2] / 2);\n        v3ScaleAndAdd(pts[1], start, px, size[0] / 2);\n        v3ScaleAndAdd(pts[1], pts[1], nz, size[2] / 2);\n        v3ScaleAndAdd(pts[2], start, nx, size[0] / 2);\n        v3ScaleAndAdd(pts[2], pts[2], nz, size[2] / 2);\n        v3ScaleAndAdd(pts[3], start, nx, size[0] / 2);\n        v3ScaleAndAdd(pts[3], pts[3], pz, size[2] / 2);\n        v3ScaleAndAdd(end, start, py, size[1]);\n        v3ScaleAndAdd(pts[4], end, px, size[0] / 2);\n        v3ScaleAndAdd(pts[4], pts[4], pz, size[2] / 2);\n        v3ScaleAndAdd(pts[5], end, px, size[0] / 2);\n        v3ScaleAndAdd(pts[5], pts[5], nz, size[2] / 2);\n        v3ScaleAndAdd(pts[6], end, nx, size[0] / 2);\n        v3ScaleAndAdd(pts[6], pts[6], nz, size[2] / 2);\n        v3ScaleAndAdd(pts[7], end, nx, size[0] / 2);\n        v3ScaleAndAdd(pts[7], pts[7], pz, size[2] / 2);\n        var attributes = this.attributes;\n        if (this.enableNormal) {\n          normals[0] = px;\n          normals[1] = nx;\n          normals[2] = py;\n          normals[3] = ny;\n          normals[4] = pz;\n          normals[5] = nz;\n          var vertexOffset = this._vertexOffset;\n          for (var i = 0; i < cubeFaces4.length; i++) {\n            var idx3 = this._triangleOffset * 3;\n            for (var k = 0; k < 6; k++) {\n              this.indices[idx3++] = vertexOffset + face4To3[k];\n            }\n            vertexOffset += 4;\n            this._triangleOffset += 2;\n          }\n          for (var i = 0; i < cubeFaces4.length; i++) {\n            var normal = normals[i];\n            for (var k = 0; k < 4; k++) {\n              var idx = cubeFaces4[i][k];\n              attributes.position.set(this._vertexOffset, pts[idx]);\n              attributes.normal.set(this._vertexOffset, normal);\n              attributes.color.set(this._vertexOffset++, color);\n            }\n          }\n        } else {\n          for (var i = 0; i < cubeFaces3.length; i++) {\n            var idx3 = this._triangleOffset * 3;\n            for (var k = 0; k < 3; k++) {\n              this.indices[idx3 + k] = cubeFaces3[i][k] + this._vertexOffset;\n            }\n            this._triangleOffset++;\n          }\n          for (var i = 0; i < pts.length; i++) {\n            attributes.position.set(this._vertexOffset, pts[i]);\n            attributes.color.set(this._vertexOffset++, color);\n          }\n        }\n      }\n      var endVerex = this._vertexOffset;\n      for (var i = startVertex; i < endVerex; i++) {\n        this._dataIndices[i] = dataIndex;\n      }\n    };\n  }(),\n  /**\n   * Add a bar with bevel\n   * @param {Array.<number>} start\n   * @param {Array.<number>} end\n   * @param {Array.<number>} orient  right direction\n   * @param {Array.<number>} size size on x and z\n   * @param {number} bevelSize\n   * @param {number} bevelSegments\n   * @param {Array.<number>} color\n   */\n  _addBevelBar: function () {\n    var px = vec3.create();\n    var py = vec3.create();\n    var pz = vec3.create();\n    var rotateMat = mat3.create();\n    var bevelStartSize = [];\n    var xOffsets = [1, -1, -1, 1];\n    var zOffsets = [1, 1, -1, -1];\n    var yOffsets = [2, 0];\n    return function (start, dir, leftDir, size, bevelSize, bevelSegments, color) {\n      vec3.copy(py, dir);\n      vec3.normalize(py, py); // x * y => z\n\n      vec3.cross(pz, leftDir, py);\n      vec3.normalize(pz, pz); // y * z => x\n\n      vec3.cross(px, py, pz);\n      vec3.normalize(pz, pz);\n      rotateMat[0] = px[0];\n      rotateMat[1] = px[1];\n      rotateMat[2] = px[2];\n      rotateMat[3] = py[0];\n      rotateMat[4] = py[1];\n      rotateMat[5] = py[2];\n      rotateMat[6] = pz[0];\n      rotateMat[7] = pz[1];\n      rotateMat[8] = pz[2];\n      bevelSize = Math.min(size[0], size[2]) / 2 * bevelSize;\n      for (var i = 0; i < 3; i++) {\n        bevelStartSize[i] = Math.max(size[i] - bevelSize * 2, 0);\n      }\n      var rx = (size[0] - bevelStartSize[0]) / 2;\n      var ry = (size[1] - bevelStartSize[1]) / 2;\n      var rz = (size[2] - bevelStartSize[2]) / 2;\n      var pos = [];\n      var normal = [];\n      var vertexOffset = this._vertexOffset;\n      var endIndices = [];\n      for (var i = 0; i < 2; i++) {\n        endIndices[i] = endIndices[i] = [];\n        for (var m = 0; m <= bevelSegments; m++) {\n          for (var j = 0; j < 4; j++) {\n            if (m === 0 && i === 0 || i === 1 && m === bevelSegments) {\n              endIndices[i].push(vertexOffset);\n            }\n            for (var n = 0; n <= bevelSegments; n++) {\n              var phi = n / bevelSegments * Math.PI / 2 + Math.PI / 2 * j;\n              var theta = m / bevelSegments * Math.PI / 2 + Math.PI / 2 * i; // var r = rx < ry ? (rz < rx ? rz : rx) : (rz < ry ? rz : ry);\n\n              normal[0] = rx * Math.cos(phi) * Math.sin(theta);\n              normal[1] = ry * Math.cos(theta);\n              normal[2] = rz * Math.sin(phi) * Math.sin(theta);\n              pos[0] = normal[0] + xOffsets[j] * bevelStartSize[0] / 2;\n              pos[1] = normal[1] + ry + yOffsets[i] * bevelStartSize[1] / 2;\n              pos[2] = normal[2] + zOffsets[j] * bevelStartSize[2] / 2; // Normal is not right if rx, ry, rz not equal.\n\n              if (!(Math.abs(rx - ry) < 1e-6 && Math.abs(ry - rz) < 1e-6)) {\n                normal[0] /= rx * rx;\n                normal[1] /= ry * ry;\n                normal[2] /= rz * rz;\n              }\n              vec3.normalize(normal, normal);\n              vec3.transformMat3(pos, pos, rotateMat);\n              vec3.transformMat3(normal, normal, rotateMat);\n              vec3.add(pos, pos, start);\n              this.attributes.position.set(vertexOffset, pos);\n              if (this.enableNormal) {\n                this.attributes.normal.set(vertexOffset, normal);\n              }\n              this.attributes.color.set(vertexOffset, color);\n              vertexOffset++;\n            }\n          }\n        }\n      }\n      var widthSegments = bevelSegments * 4 + 3;\n      var heightSegments = bevelSegments * 2 + 1;\n      var len = widthSegments + 1;\n      for (var j = 0; j < heightSegments; j++) {\n        for (var i = 0; i <= widthSegments; i++) {\n          var i2 = j * len + i + this._vertexOffset;\n          var i1 = j * len + (i + 1) % len + this._vertexOffset;\n          var i4 = (j + 1) * len + (i + 1) % len + this._vertexOffset;\n          var i3 = (j + 1) * len + i + this._vertexOffset;\n          this.setTriangleIndices(this._triangleOffset++, [i4, i2, i1]);\n          this.setTriangleIndices(this._triangleOffset++, [i4, i3, i2]);\n        }\n      } // Close top and bottom\n\n      this.setTriangleIndices(this._triangleOffset++, [endIndices[0][0], endIndices[0][2], endIndices[0][1]]);\n      this.setTriangleIndices(this._triangleOffset++, [endIndices[0][0], endIndices[0][3], endIndices[0][2]]);\n      this.setTriangleIndices(this._triangleOffset++, [endIndices[1][0], endIndices[1][1], endIndices[1][2]]);\n      this.setTriangleIndices(this._triangleOffset++, [endIndices[1][0], endIndices[1][2], endIndices[1][3]]);\n      this._vertexOffset = vertexOffset;\n    };\n  }()\n});\necharts.util.defaults(BarsGeometry.prototype, dynamicConvertMixin);\necharts.util.defaults(BarsGeometry.prototype, trianglesSortMixin);\nexport default BarsGeometry;","map":{"version":3,"names":["echarts","dynamicConvertMixin","trianglesSortMixin","Geometry","glMatrix","vec3","mat3","BarsGeometry","extend","attributes","position","Attribute","normal","color","prevPosition","prevNormal","dynamic","enableNormal","bevelSize","bevelSegments","_dataIndices","_vertexOffset","_triangleOffset","resetOffset","setBarCount","barCount","vertexCount","getBarVertexCount","triangleCount","getBarTriangleCount","init","value","indices","Uint32Array","Uint16Array","_getBevelBarVertexCount","_getBevelBarTriangleCount","widthSegments","heightSegments","setColor","idx","start","end","i","set","dirtyAttribute","getDataIndexOfVertex","vertexIndex","addBar","v3Create","create","v3ScaleAndAdd","scaleAndAdd","px","py","pz","nx","ny","nz","pts","normals","cubeFaces4","face4To3","cubeFaces3","length","face4","j","face","k","push","dir","leftDir","size","dataIndex","startVertex","_addBevelBar","copy","normalize","cross","negate","vertexOffset","idx3","endVerex","rotateMat","bevelStartSize","xOffsets","zOffsets","yOffsets","Math","min","max","rx","ry","rz","pos","endIndices","m","n","phi","PI","theta","cos","sin","abs","transformMat3","add","len","i2","i1","i4","i3","setTriangleIndices","util","defaults","prototype"],"sources":["E:/mytest/node_modules/echarts-gl/lib/util/geometry/Bars3DGeometry.js"],"sourcesContent":["/**\n * Geometry collecting bars data\n *\n * @module echarts-gl/chart/bars/BarsGeometry\n * @author Yi Shen(http://github.com/pissang)\n */\nimport * as echarts from 'echarts/lib/echarts';\nimport dynamicConvertMixin from './dynamicConvertMixin';\nimport trianglesSortMixin from './trianglesSortMixin';\nimport Geometry from 'claygl/src/Geometry';\nimport glMatrix from 'claygl/src/dep/glmatrix';\nvar vec3 = glMatrix.vec3;\nvar mat3 = glMatrix.mat3;\n/**\n * @constructor\n * @alias module:echarts-gl/chart/bars/BarsGeometry\n * @extends clay.Geometry\n */\n\nvar BarsGeometry = Geometry.extend(function () {\n  return {\n    attributes: {\n      position: new Geometry.Attribute('position', 'float', 3, 'POSITION'),\n      normal: new Geometry.Attribute('normal', 'float', 3, 'NORMAL'),\n      color: new Geometry.Attribute('color', 'float', 4, 'COLOR'),\n      prevPosition: new Geometry.Attribute('prevPosition', 'float', 3),\n      prevNormal: new Geometry.Attribute('prevNormal', 'float', 3)\n    },\n    dynamic: true,\n    enableNormal: false,\n    bevelSize: 1,\n    bevelSegments: 0,\n    // Map from vertexIndex to dataIndex.\n    _dataIndices: null,\n    _vertexOffset: 0,\n    _triangleOffset: 0\n  };\n},\n/** @lends module:echarts-gl/chart/bars/BarsGeometry.prototype */\n{\n  resetOffset: function () {\n    this._vertexOffset = 0;\n    this._triangleOffset = 0;\n  },\n  setBarCount: function (barCount) {\n    var enableNormal = this.enableNormal;\n    var vertexCount = this.getBarVertexCount() * barCount;\n    var triangleCount = this.getBarTriangleCount() * barCount;\n\n    if (this.vertexCount !== vertexCount) {\n      this.attributes.position.init(vertexCount);\n\n      if (enableNormal) {\n        this.attributes.normal.init(vertexCount);\n      } else {\n        this.attributes.normal.value = null;\n      }\n\n      this.attributes.color.init(vertexCount);\n    }\n\n    if (this.triangleCount !== triangleCount) {\n      this.indices = vertexCount > 0xffff ? new Uint32Array(triangleCount * 3) : new Uint16Array(triangleCount * 3);\n      this._dataIndices = new Uint32Array(vertexCount);\n    }\n  },\n  getBarVertexCount: function () {\n    var bevelSegments = this.bevelSize > 0 ? this.bevelSegments : 0;\n    return bevelSegments > 0 ? this._getBevelBarVertexCount(bevelSegments) : this.enableNormal ? 24 : 8;\n  },\n  getBarTriangleCount: function () {\n    var bevelSegments = this.bevelSize > 0 ? this.bevelSegments : 0;\n    return bevelSegments > 0 ? this._getBevelBarTriangleCount(bevelSegments) : 12;\n  },\n  _getBevelBarVertexCount: function (bevelSegments) {\n    return (bevelSegments + 1) * 4 * (bevelSegments + 1) * 2;\n  },\n  _getBevelBarTriangleCount: function (bevelSegments) {\n    var widthSegments = bevelSegments * 4 + 3;\n    var heightSegments = bevelSegments * 2 + 1;\n    return (widthSegments + 1) * heightSegments * 2 + 4;\n  },\n  setColor: function (idx, color) {\n    var vertexCount = this.getBarVertexCount();\n    var start = vertexCount * idx;\n    var end = vertexCount * (idx + 1);\n\n    for (var i = start; i < end; i++) {\n      this.attributes.color.set(i, color);\n    }\n\n    this.dirtyAttribute('color');\n  },\n\n  /**\n   * Get dataIndex of vertex.\n   * @param {number} vertexIndex\n   */\n  getDataIndexOfVertex: function (vertexIndex) {\n    return this._dataIndices ? this._dataIndices[vertexIndex] : null;\n  },\n\n  /**\n   * Add a bar\n   * @param {Array.<number>} start\n   * @param {Array.<number>} end\n   * @param {Array.<number>} orient  right direction\n   * @param {Array.<number>} size size on x and z\n   * @param {Array.<number>} color\n   */\n  addBar: function () {\n    var v3Create = vec3.create;\n    var v3ScaleAndAdd = vec3.scaleAndAdd;\n    var end = v3Create();\n    var px = v3Create();\n    var py = v3Create();\n    var pz = v3Create();\n    var nx = v3Create();\n    var ny = v3Create();\n    var nz = v3Create();\n    var pts = [];\n    var normals = [];\n\n    for (var i = 0; i < 8; i++) {\n      pts[i] = v3Create();\n    }\n\n    var cubeFaces4 = [// PX\n    [0, 1, 5, 4], // NX\n    [2, 3, 7, 6], // PY\n    [4, 5, 6, 7], // NY\n    [3, 2, 1, 0], // PZ\n    [0, 4, 7, 3], // NZ\n    [1, 2, 6, 5]];\n    var face4To3 = [0, 1, 2, 0, 2, 3];\n    var cubeFaces3 = [];\n\n    for (var i = 0; i < cubeFaces4.length; i++) {\n      var face4 = cubeFaces4[i];\n\n      for (var j = 0; j < 2; j++) {\n        var face = [];\n\n        for (var k = 0; k < 3; k++) {\n          face.push(face4[face4To3[j * 3 + k]]);\n        }\n\n        cubeFaces3.push(face);\n      }\n    }\n\n    return function (start, dir, leftDir, size, color, dataIndex) {\n      // Use vertex, triangle maybe sorted.\n      var startVertex = this._vertexOffset;\n\n      if (this.bevelSize > 0 && this.bevelSegments > 0) {\n        this._addBevelBar(start, dir, leftDir, size, this.bevelSize, this.bevelSegments, color);\n      } else {\n        vec3.copy(py, dir);\n        vec3.normalize(py, py); // x * y => z\n\n        vec3.cross(pz, leftDir, py);\n        vec3.normalize(pz, pz); // y * z => x\n\n        vec3.cross(px, py, pz);\n        vec3.normalize(pz, pz);\n        vec3.negate(nx, px);\n        vec3.negate(ny, py);\n        vec3.negate(nz, pz);\n        v3ScaleAndAdd(pts[0], start, px, size[0] / 2);\n        v3ScaleAndAdd(pts[0], pts[0], pz, size[2] / 2);\n        v3ScaleAndAdd(pts[1], start, px, size[0] / 2);\n        v3ScaleAndAdd(pts[1], pts[1], nz, size[2] / 2);\n        v3ScaleAndAdd(pts[2], start, nx, size[0] / 2);\n        v3ScaleAndAdd(pts[2], pts[2], nz, size[2] / 2);\n        v3ScaleAndAdd(pts[3], start, nx, size[0] / 2);\n        v3ScaleAndAdd(pts[3], pts[3], pz, size[2] / 2);\n        v3ScaleAndAdd(end, start, py, size[1]);\n        v3ScaleAndAdd(pts[4], end, px, size[0] / 2);\n        v3ScaleAndAdd(pts[4], pts[4], pz, size[2] / 2);\n        v3ScaleAndAdd(pts[5], end, px, size[0] / 2);\n        v3ScaleAndAdd(pts[5], pts[5], nz, size[2] / 2);\n        v3ScaleAndAdd(pts[6], end, nx, size[0] / 2);\n        v3ScaleAndAdd(pts[6], pts[6], nz, size[2] / 2);\n        v3ScaleAndAdd(pts[7], end, nx, size[0] / 2);\n        v3ScaleAndAdd(pts[7], pts[7], pz, size[2] / 2);\n        var attributes = this.attributes;\n\n        if (this.enableNormal) {\n          normals[0] = px;\n          normals[1] = nx;\n          normals[2] = py;\n          normals[3] = ny;\n          normals[4] = pz;\n          normals[5] = nz;\n          var vertexOffset = this._vertexOffset;\n\n          for (var i = 0; i < cubeFaces4.length; i++) {\n            var idx3 = this._triangleOffset * 3;\n\n            for (var k = 0; k < 6; k++) {\n              this.indices[idx3++] = vertexOffset + face4To3[k];\n            }\n\n            vertexOffset += 4;\n            this._triangleOffset += 2;\n          }\n\n          for (var i = 0; i < cubeFaces4.length; i++) {\n            var normal = normals[i];\n\n            for (var k = 0; k < 4; k++) {\n              var idx = cubeFaces4[i][k];\n              attributes.position.set(this._vertexOffset, pts[idx]);\n              attributes.normal.set(this._vertexOffset, normal);\n              attributes.color.set(this._vertexOffset++, color);\n            }\n          }\n        } else {\n          for (var i = 0; i < cubeFaces3.length; i++) {\n            var idx3 = this._triangleOffset * 3;\n\n            for (var k = 0; k < 3; k++) {\n              this.indices[idx3 + k] = cubeFaces3[i][k] + this._vertexOffset;\n            }\n\n            this._triangleOffset++;\n          }\n\n          for (var i = 0; i < pts.length; i++) {\n            attributes.position.set(this._vertexOffset, pts[i]);\n            attributes.color.set(this._vertexOffset++, color);\n          }\n        }\n      }\n\n      var endVerex = this._vertexOffset;\n\n      for (var i = startVertex; i < endVerex; i++) {\n        this._dataIndices[i] = dataIndex;\n      }\n    };\n  }(),\n\n  /**\n   * Add a bar with bevel\n   * @param {Array.<number>} start\n   * @param {Array.<number>} end\n   * @param {Array.<number>} orient  right direction\n   * @param {Array.<number>} size size on x and z\n   * @param {number} bevelSize\n   * @param {number} bevelSegments\n   * @param {Array.<number>} color\n   */\n  _addBevelBar: function () {\n    var px = vec3.create();\n    var py = vec3.create();\n    var pz = vec3.create();\n    var rotateMat = mat3.create();\n    var bevelStartSize = [];\n    var xOffsets = [1, -1, -1, 1];\n    var zOffsets = [1, 1, -1, -1];\n    var yOffsets = [2, 0];\n    return function (start, dir, leftDir, size, bevelSize, bevelSegments, color) {\n      vec3.copy(py, dir);\n      vec3.normalize(py, py); // x * y => z\n\n      vec3.cross(pz, leftDir, py);\n      vec3.normalize(pz, pz); // y * z => x\n\n      vec3.cross(px, py, pz);\n      vec3.normalize(pz, pz);\n      rotateMat[0] = px[0];\n      rotateMat[1] = px[1];\n      rotateMat[2] = px[2];\n      rotateMat[3] = py[0];\n      rotateMat[4] = py[1];\n      rotateMat[5] = py[2];\n      rotateMat[6] = pz[0];\n      rotateMat[7] = pz[1];\n      rotateMat[8] = pz[2];\n      bevelSize = Math.min(size[0], size[2]) / 2 * bevelSize;\n\n      for (var i = 0; i < 3; i++) {\n        bevelStartSize[i] = Math.max(size[i] - bevelSize * 2, 0);\n      }\n\n      var rx = (size[0] - bevelStartSize[0]) / 2;\n      var ry = (size[1] - bevelStartSize[1]) / 2;\n      var rz = (size[2] - bevelStartSize[2]) / 2;\n      var pos = [];\n      var normal = [];\n      var vertexOffset = this._vertexOffset;\n      var endIndices = [];\n\n      for (var i = 0; i < 2; i++) {\n        endIndices[i] = endIndices[i] = [];\n\n        for (var m = 0; m <= bevelSegments; m++) {\n          for (var j = 0; j < 4; j++) {\n            if (m === 0 && i === 0 || i === 1 && m === bevelSegments) {\n              endIndices[i].push(vertexOffset);\n            }\n\n            for (var n = 0; n <= bevelSegments; n++) {\n              var phi = n / bevelSegments * Math.PI / 2 + Math.PI / 2 * j;\n              var theta = m / bevelSegments * Math.PI / 2 + Math.PI / 2 * i; // var r = rx < ry ? (rz < rx ? rz : rx) : (rz < ry ? rz : ry);\n\n              normal[0] = rx * Math.cos(phi) * Math.sin(theta);\n              normal[1] = ry * Math.cos(theta);\n              normal[2] = rz * Math.sin(phi) * Math.sin(theta);\n              pos[0] = normal[0] + xOffsets[j] * bevelStartSize[0] / 2;\n              pos[1] = normal[1] + ry + yOffsets[i] * bevelStartSize[1] / 2;\n              pos[2] = normal[2] + zOffsets[j] * bevelStartSize[2] / 2; // Normal is not right if rx, ry, rz not equal.\n\n              if (!(Math.abs(rx - ry) < 1e-6 && Math.abs(ry - rz) < 1e-6)) {\n                normal[0] /= rx * rx;\n                normal[1] /= ry * ry;\n                normal[2] /= rz * rz;\n              }\n\n              vec3.normalize(normal, normal);\n              vec3.transformMat3(pos, pos, rotateMat);\n              vec3.transformMat3(normal, normal, rotateMat);\n              vec3.add(pos, pos, start);\n              this.attributes.position.set(vertexOffset, pos);\n\n              if (this.enableNormal) {\n                this.attributes.normal.set(vertexOffset, normal);\n              }\n\n              this.attributes.color.set(vertexOffset, color);\n              vertexOffset++;\n            }\n          }\n        }\n      }\n\n      var widthSegments = bevelSegments * 4 + 3;\n      var heightSegments = bevelSegments * 2 + 1;\n      var len = widthSegments + 1;\n\n      for (var j = 0; j < heightSegments; j++) {\n        for (var i = 0; i <= widthSegments; i++) {\n          var i2 = j * len + i + this._vertexOffset;\n          var i1 = j * len + (i + 1) % len + this._vertexOffset;\n          var i4 = (j + 1) * len + (i + 1) % len + this._vertexOffset;\n          var i3 = (j + 1) * len + i + this._vertexOffset;\n          this.setTriangleIndices(this._triangleOffset++, [i4, i2, i1]);\n          this.setTriangleIndices(this._triangleOffset++, [i4, i3, i2]);\n        }\n      } // Close top and bottom\n\n\n      this.setTriangleIndices(this._triangleOffset++, [endIndices[0][0], endIndices[0][2], endIndices[0][1]]);\n      this.setTriangleIndices(this._triangleOffset++, [endIndices[0][0], endIndices[0][3], endIndices[0][2]]);\n      this.setTriangleIndices(this._triangleOffset++, [endIndices[1][0], endIndices[1][1], endIndices[1][2]]);\n      this.setTriangleIndices(this._triangleOffset++, [endIndices[1][0], endIndices[1][2], endIndices[1][3]]);\n      this._vertexOffset = vertexOffset;\n    };\n  }()\n});\necharts.util.defaults(BarsGeometry.prototype, dynamicConvertMixin);\necharts.util.defaults(BarsGeometry.prototype, trianglesSortMixin);\nexport default BarsGeometry;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}