{"ast":null,"code":"import { createCommentVNode as _createCommentVNode, createElementVNode as _createElementVNode, vModelText as _vModelText, withDirectives as _withDirectives, openBlock as _openBlock, createElementBlock as _createElementBlock, toDisplayString as _toDisplayString, Fragment as _Fragment, renderList as _renderList, vModelRadio as _vModelRadio } from \"vue\";\nconst _hoisted_1 = {\n  key: 0\n};\nconst _hoisted_2 = /*#__PURE__*/_createElementVNode(\"label\", null, \"题目：\", -1 /* HOISTED */);\nconst _hoisted_3 = [\"onUpdate:modelValue\", \"placeholder\"];\nconst _hoisted_4 = [\"onClick\"];\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", null, [_createCommentVNode(\" 编辑模式下显示题目输入框 \"), $data.editMode ? (_openBlock(), _createElementBlock(\"div\", _hoisted_1, [_hoisted_2, _withDirectives(_createElementVNode(\"input\", {\n    type: \"text\",\n    \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => $data.editedQuestion.title = $event)\n  }, null, 512 /* NEED_PATCH */), [[_vModelText, $data.editedQuestion.title]])])) : (_openBlock(), _createElementBlock(_Fragment, {\n    key: 1\n  }, [_createCommentVNode(\" 预览模式下显示题目 \"), _createElementVNode(\"div\", null, [_createElementVNode(\"h2\", null, _toDisplayString($data.editedQuestion.title), 1 /* TEXT */)])], 2112 /* STABLE_FRAGMENT, DEV_ROOT_FRAGMENT */)), _createCommentVNode(\" 显示选项 \"), (_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.editedQuestion.options, (option, index) => {\n    return _openBlock(), _createElementBlock(\"div\", {\n      key: index\n    }, [_withDirectives(_createElementVNode(\"input\", {\n      type: \"radio\",\n      \"onUpdate:modelValue\": $event => $data.editedQuestion.options[index] = $event,\n      placeholder: 'Option ' + (index + 1)\n    }, null, 8 /* PROPS */, _hoisted_3), [[_vModelRadio, $data.editedQuestion.options[index]]]), _createCommentVNode(\" 编辑模式下显示删除选项按钮 \"), $data.editMode && $data.editedQuestion.options.length > 1 ? (_openBlock(), _createElementBlock(\"button\", {\n      key: 0,\n      onClick: $event => $options.removeOption(index)\n    }, \"删除该选项\", 8 /* PROPS */, _hoisted_4)) : _createCommentVNode(\"v-if\", true)]);\n  }), 128 /* KEYED_FRAGMENT */)), _createCommentVNode(\" 编辑模式下显示增加选项按钮 \"), $data.editMode ? (_openBlock(), _createElementBlock(\"button\", {\n    key: 2,\n    onClick: _cache[1] || (_cache[1] = (...args) => $options.addOption && $options.addOption(...args))\n  }, \"增加选项\")) : _createCommentVNode(\"v-if\", true), _createCommentVNode(\" 根据编辑权限显示编辑按钮或者保存按钮 \"), $data.isOwner && !$data.editMode ? (_openBlock(), _createElementBlock(\"button\", {\n    key: 3,\n    onClick: _cache[2] || (_cache[2] = (...args) => $options.toggleEditMode && $options.toggleEditMode(...args))\n  }, \"编辑题目\")) : $data.isOwner && $data.editMode ? (_openBlock(), _createElementBlock(\"button\", {\n    key: 4,\n    onClick: _cache[3] || (_cache[3] = (...args) => $options.saveQuestion && $options.saveQuestion(...args))\n  }, \"保存题目\")) : _createCommentVNode(\"v-if\", true)]);\n}","map":{"version":3,"names":["key","_createElementVNode","_createElementBlock","_createCommentVNode","$data","editMode","_hoisted_1","_hoisted_2","type","_cache","$event","editedQuestion","title","_Fragment","_toDisplayString","_renderList","options","option","index","placeholder","_hoisted_3","length","onClick","$options","removeOption","_hoisted_4","args","addOption","isOwner","toggleEditMode","saveQuestion"],"sources":["E:\\mytest\\src\\views\\qn-createpane\\qn-problemset\\SingleChoice.vue"],"sourcesContent":["<template>\r\n  <div>\r\n    <!-- 编辑模式下显示题目输入框 -->\r\n    <div v-if=\"editMode\">\r\n      <label>题目：</label>\r\n      <input type=\"text\" v-model=\"editedQuestion.title\">\r\n    </div>\r\n    <!-- 预览模式下显示题目 -->\r\n    <div v-else>\r\n      <h2>{{ editedQuestion.title }}</h2>\r\n    </div>\r\n    \r\n    <!-- 显示选项 -->\r\n    <div v-for=\"(option, index) in editedQuestion.options\" :key=\"index\">\r\n      <input type=\"radio\" v-model=\"editedQuestion.options[index]\" :placeholder=\"'Option ' + (index + 1)\">\r\n      \r\n      <!-- 编辑模式下显示删除选项按钮 -->\r\n      <button @click=\"removeOption(index)\" v-if=\"editMode && editedQuestion.options.length > 1\">删除该选项</button>\r\n    </div>\r\n    \r\n    <!-- 编辑模式下显示增加选项按钮 -->\r\n    <button @click=\"addOption\" v-if=\"editMode\">增加选项</button>\r\n    \r\n    <!-- 根据编辑权限显示编辑按钮或者保存按钮 -->\r\n    <button v-if=\"isOwner && !editMode\" @click=\"toggleEditMode\">编辑题目</button>\r\n    <button v-else-if=\"isOwner && editMode\" @click=\"saveQuestion\">保存题目</button>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  data() {\r\n    return {\r\n      originalQuestion: {\r\n        title: '这是一个单选题的题目',\r\n        options: ['选项1', '选项2', '选项3']\r\n      },\r\n      editedQuestion: {}, // 用于编辑的题目对象\r\n      isOwner: true, // 假设当前用户是发布者\r\n      editMode: false // 是否处于编辑模式\r\n    };\r\n  },\r\n  created() {\r\n    // 初始化编辑模式下的题目对象\r\n    this.editedQuestion = { ...this.originalQuestion };\r\n  },\r\n  methods: {\r\n    toggleEditMode() {\r\n      // 切换编辑模式\r\n      this.editMode = !this.editMode;\r\n      // 编辑模式下，将原始题目内容复制到编辑题目对象中\r\n      if (this.editMode) {\r\n        this.editedQuestion = { ...this.originalQuestion };\r\n      }\r\n    },\r\n    saveQuestion() {\r\n      // 保存编辑后的题目内容\r\n      this.originalQuestion = { ...this.editedQuestion };\r\n      this.editMode = false; // 退出编辑模式\r\n    },\r\n    addOption() {\r\n      // 在末尾增加一个空选项\r\n      this.editedQuestion.options.push('');\r\n    },\r\n    removeOption(index) {\r\n      // 删除指定位置的选项\r\n      this.editedQuestion.options.splice(index, 1);\r\n    }\r\n  }\r\n};\r\n</script>\r\n"],"mappings":";;EAAAA,GAAA;AAAA;gCAIMC,mBAAA,CAAkB,eAAX,KAAG;mBAJhB;mBAAA;;uBACEC,mBAAA,CAyBM,cAxBJC,mBAAA,kBAAqB,EACVC,KAAA,CAAAC,QAAQ,I,cAAnBH,mBAAA,CAGM,OANVI,UAAA,GAIMC,UAAkB,E,gBAClBN,mBAAA,CAAkD;IAA3CO,IAAI,EAAC,MAAM;IALxB,uBAAAC,MAAA,QAAAA,MAAA,MAAAC,MAAA,IAKkCN,KAAA,CAAAO,cAAc,CAACC,KAAK,GAAAF,MAAA;iDAApBN,KAAA,CAAAO,cAAc,CAACC,KAAK,E,sBAGlDV,mBAAA,CAEMW,SAAA;IAVVb,GAAA;EAAA,IAOIG,mBAAA,eAAkB,EAClBF,mBAAA,CAEM,cADJA,mBAAA,CAAmC,YAAAa,gBAAA,CAA5BV,KAAA,CAAAO,cAAc,CAACC,KAAK,iB,qDAG7BT,mBAAA,UAAa,G,kBACbD,mBAAA,CAKMW,SAAA,QAlBVE,WAAA,CAamCX,KAAA,CAAAO,cAAc,CAACK,OAAO,EAbzD,CAaiBC,MAAM,EAAEC,KAAK;yBAA1BhB,mBAAA,CAKM;MALkDF,GAAG,EAAEkB;IAAK,I,gBAChEjB,mBAAA,CAAmG;MAA5FO,IAAI,EAAC,OAAO;MAdzB,uBAAAE,MAAA,IAcmCN,KAAA,CAAAO,cAAc,CAACK,OAAO,CAACE,KAAK,IAAAR,MAAA;MAAIS,WAAW,eAAeD,KAAK;4BAdlGE,UAAA,I,eAcmChB,KAAA,CAAAO,cAAc,CAACK,OAAO,CAACE,KAAK,G,GAEzDf,mBAAA,mBAAsB,EACqBC,KAAA,CAAAC,QAAQ,IAAID,KAAA,CAAAO,cAAc,CAACK,OAAO,CAACK,MAAM,Q,cAApFnB,mBAAA,CAAwG;MAjB9GF,GAAA;MAiBesB,OAAK,EAAAZ,MAAA,IAAEa,QAAA,CAAAC,YAAY,CAACN,KAAK;OAAwD,OAAK,iBAjBrGO,UAAA,KAAAtB,mBAAA,e;kCAoBIA,mBAAA,mBAAsB,EACWC,KAAA,CAAAC,QAAQ,I,cAAzCH,mBAAA,CAAwD;IArB5DF,GAAA;IAqBasB,OAAK,EAAAb,MAAA,QAAAA,MAAA,UAAAiB,IAAA,KAAEH,QAAA,CAAAI,SAAA,IAAAJ,QAAA,CAAAI,SAAA,IAAAD,IAAA,CAAS;KAAkB,MAAI,KArBnDvB,mBAAA,gBAuBIA,mBAAA,wBAA2B,EACbC,KAAA,CAAAwB,OAAO,KAAKxB,KAAA,CAAAC,QAAQ,I,cAAlCH,mBAAA,CAAyE;IAxB7EF,GAAA;IAwByCsB,OAAK,EAAAb,MAAA,QAAAA,MAAA,UAAAiB,IAAA,KAAEH,QAAA,CAAAM,cAAA,IAAAN,QAAA,CAAAM,cAAA,IAAAH,IAAA,CAAc;KAAE,MAAI,KAC7CtB,KAAA,CAAAwB,OAAO,IAAIxB,KAAA,CAAAC,QAAQ,I,cAAtCH,mBAAA,CAA2E;IAzB/EF,GAAA;IAyB6CsB,OAAK,EAAAb,MAAA,QAAAA,MAAA,UAAAiB,IAAA,KAAEH,QAAA,CAAAO,YAAA,IAAAP,QAAA,CAAAO,YAAA,IAAAJ,IAAA,CAAY;KAAE,MAAI,KAzBtEvB,mBAAA,e","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}