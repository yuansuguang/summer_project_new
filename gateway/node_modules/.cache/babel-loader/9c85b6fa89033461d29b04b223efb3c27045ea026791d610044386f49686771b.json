{"ast":null,"code":"import vec2 from '../glmatrix/vec2';\n\n/**\n * @constructor\n * @alias clay.Vector2\n * @param {number} x\n * @param {number} y\n */\nvar Vector2 = function (x, y) {\n  x = x || 0;\n  y = y || 0;\n\n  /**\n   * Storage of Vector2, read and write of x, y will change the values in array\n   * All methods also operate on the array instead of x, y components\n   * @name array\n   * @type {Float32Array}\n   * @memberOf clay.Vector2#\n   */\n  this.array = vec2.fromValues(x, y);\n\n  /**\n   * Dirty flag is used by the Node to determine\n   * if the matrix is updated to latest\n   * @name _dirty\n   * @type {boolean}\n   * @memberOf clay.Vector2#\n   */\n  this._dirty = true;\n};\nVector2.prototype = {\n  constructor: Vector2,\n  /**\n   * Add b to self\n   * @param  {clay.Vector2} b\n   * @return {clay.Vector2}\n   */\n  add: function (b) {\n    vec2.add(this.array, this.array, b.array);\n    this._dirty = true;\n    return this;\n  },\n  /**\n   * Set x and y components\n   * @param  {number}  x\n   * @param  {number}  y\n   * @return {clay.Vector2}\n   */\n  set: function (x, y) {\n    this.array[0] = x;\n    this.array[1] = y;\n    this._dirty = true;\n    return this;\n  },\n  /**\n   * Set x and y components from array\n   * @param  {Float32Array|number[]} arr\n   * @return {clay.Vector2}\n   */\n  setArray: function (arr) {\n    this.array[0] = arr[0];\n    this.array[1] = arr[1];\n    this._dirty = true;\n    return this;\n  },\n  /**\n   * Clone a new Vector2\n   * @return {clay.Vector2}\n   */\n  clone: function () {\n    return new Vector2(this.x, this.y);\n  },\n  /**\n   * Copy x, y from b\n   * @param  {clay.Vector2} b\n   * @return {clay.Vector2}\n   */\n  copy: function (b) {\n    vec2.copy(this.array, b.array);\n    this._dirty = true;\n    return this;\n  },\n  /**\n   * Cross product of self and b, written to a Vector3 out\n   * @param  {clay.Vector3} out\n   * @param  {clay.Vector2} b\n   * @return {clay.Vector2}\n   */\n  cross: function (out, b) {\n    vec2.cross(out.array, this.array, b.array);\n    out._dirty = true;\n    return this;\n  },\n  /**\n   * Alias for distance\n   * @param  {clay.Vector2} b\n   * @return {number}\n   */\n  dist: function (b) {\n    return vec2.dist(this.array, b.array);\n  },\n  /**\n   * Distance between self and b\n   * @param  {clay.Vector2} b\n   * @return {number}\n   */\n  distance: function (b) {\n    return vec2.distance(this.array, b.array);\n  },\n  /**\n   * Alias for divide\n   * @param  {clay.Vector2} b\n   * @return {clay.Vector2}\n   */\n  div: function (b) {\n    vec2.div(this.array, this.array, b.array);\n    this._dirty = true;\n    return this;\n  },\n  /**\n   * Divide self by b\n   * @param  {clay.Vector2} b\n   * @return {clay.Vector2}\n   */\n  divide: function (b) {\n    vec2.divide(this.array, this.array, b.array);\n    this._dirty = true;\n    return this;\n  },\n  /**\n   * Dot product of self and b\n   * @param  {clay.Vector2} b\n   * @return {number}\n   */\n  dot: function (b) {\n    return vec2.dot(this.array, b.array);\n  },\n  /**\n   * Alias of length\n   * @return {number}\n   */\n  len: function () {\n    return vec2.len(this.array);\n  },\n  /**\n   * Calculate the length\n   * @return {number}\n   */\n  length: function () {\n    return vec2.length(this.array);\n  },\n  /**\n   * Linear interpolation between a and b\n   * @param  {clay.Vector2} a\n   * @param  {clay.Vector2} b\n   * @param  {number}  t\n   * @return {clay.Vector2}\n   */\n  lerp: function (a, b, t) {\n    vec2.lerp(this.array, a.array, b.array, t);\n    this._dirty = true;\n    return this;\n  },\n  /**\n   * Minimum of self and b\n   * @param  {clay.Vector2} b\n   * @return {clay.Vector2}\n   */\n  min: function (b) {\n    vec2.min(this.array, this.array, b.array);\n    this._dirty = true;\n    return this;\n  },\n  /**\n   * Maximum of self and b\n   * @param  {clay.Vector2} b\n   * @return {clay.Vector2}\n   */\n  max: function (b) {\n    vec2.max(this.array, this.array, b.array);\n    this._dirty = true;\n    return this;\n  },\n  /**\n   * Alias for multiply\n   * @param  {clay.Vector2} b\n   * @return {clay.Vector2}\n   */\n  mul: function (b) {\n    vec2.mul(this.array, this.array, b.array);\n    this._dirty = true;\n    return this;\n  },\n  /**\n   * Mutiply self and b\n   * @param  {clay.Vector2} b\n   * @return {clay.Vector2}\n   */\n  multiply: function (b) {\n    vec2.multiply(this.array, this.array, b.array);\n    this._dirty = true;\n    return this;\n  },\n  /**\n   * Negate self\n   * @return {clay.Vector2}\n   */\n  negate: function () {\n    vec2.negate(this.array, this.array);\n    this._dirty = true;\n    return this;\n  },\n  /**\n   * Normalize self\n   * @return {clay.Vector2}\n   */\n  normalize: function () {\n    vec2.normalize(this.array, this.array);\n    this._dirty = true;\n    return this;\n  },\n  /**\n   * Generate random x, y components with a given scale\n   * @param  {number} scale\n   * @return {clay.Vector2}\n   */\n  random: function (scale) {\n    vec2.random(this.array, scale);\n    this._dirty = true;\n    return this;\n  },\n  /**\n   * Scale self\n   * @param  {number}  scale\n   * @return {clay.Vector2}\n   */\n  scale: function (s) {\n    vec2.scale(this.array, this.array, s);\n    this._dirty = true;\n    return this;\n  },\n  /**\n   * Scale b and add to self\n   * @param  {clay.Vector2} b\n   * @param  {number}  scale\n   * @return {clay.Vector2}\n   */\n  scaleAndAdd: function (b, s) {\n    vec2.scaleAndAdd(this.array, this.array, b.array, s);\n    this._dirty = true;\n    return this;\n  },\n  /**\n   * Alias for squaredDistance\n   * @param  {clay.Vector2} b\n   * @return {number}\n   */\n  sqrDist: function (b) {\n    return vec2.sqrDist(this.array, b.array);\n  },\n  /**\n   * Squared distance between self and b\n   * @param  {clay.Vector2} b\n   * @return {number}\n   */\n  squaredDistance: function (b) {\n    return vec2.squaredDistance(this.array, b.array);\n  },\n  /**\n   * Alias for squaredLength\n   * @return {number}\n   */\n  sqrLen: function () {\n    return vec2.sqrLen(this.array);\n  },\n  /**\n   * Squared length of self\n   * @return {number}\n   */\n  squaredLength: function () {\n    return vec2.squaredLength(this.array);\n  },\n  /**\n   * Alias for subtract\n   * @param  {clay.Vector2} b\n   * @return {clay.Vector2}\n   */\n  sub: function (b) {\n    vec2.sub(this.array, this.array, b.array);\n    this._dirty = true;\n    return this;\n  },\n  /**\n   * Subtract b from self\n   * @param  {clay.Vector2} b\n   * @return {clay.Vector2}\n   */\n  subtract: function (b) {\n    vec2.subtract(this.array, this.array, b.array);\n    this._dirty = true;\n    return this;\n  },\n  /**\n   * Transform self with a Matrix2 m\n   * @param  {clay.Matrix2} m\n   * @return {clay.Vector2}\n   */\n  transformMat2: function (m) {\n    vec2.transformMat2(this.array, this.array, m.array);\n    this._dirty = true;\n    return this;\n  },\n  /**\n   * Transform self with a Matrix2d m\n   * @param  {clay.Matrix2d} m\n   * @return {clay.Vector2}\n   */\n  transformMat2d: function (m) {\n    vec2.transformMat2d(this.array, this.array, m.array);\n    this._dirty = true;\n    return this;\n  },\n  /**\n   * Transform self with a Matrix3 m\n   * @param  {clay.Matrix3} m\n   * @return {clay.Vector2}\n   */\n  transformMat3: function (m) {\n    vec2.transformMat3(this.array, this.array, m.array);\n    this._dirty = true;\n    return this;\n  },\n  /**\n   * Transform self with a Matrix4 m\n   * @param  {clay.Matrix4} m\n   * @return {clay.Vector2}\n   */\n  transformMat4: function (m) {\n    vec2.transformMat4(this.array, this.array, m.array);\n    this._dirty = true;\n    return this;\n  },\n  toString: function () {\n    return '[' + Array.prototype.join.call(this.array, ',') + ']';\n  },\n  toArray: function () {\n    return Array.prototype.slice.call(this.array);\n  }\n};\n\n// Getter and Setter\nif (Object.defineProperty) {\n  var proto = Vector2.prototype;\n  /**\n   * @name x\n   * @type {number}\n   * @memberOf clay.Vector2\n   * @instance\n   */\n  Object.defineProperty(proto, 'x', {\n    get: function () {\n      return this.array[0];\n    },\n    set: function (value) {\n      this.array[0] = value;\n      this._dirty = true;\n    }\n  });\n\n  /**\n   * @name y\n   * @type {number}\n   * @memberOf clay.Vector2\n   * @instance\n   */\n  Object.defineProperty(proto, 'y', {\n    get: function () {\n      return this.array[1];\n    },\n    set: function (value) {\n      this.array[1] = value;\n      this._dirty = true;\n    }\n  });\n}\n\n// Supply methods that are not in place\n\n/**\n * @param  {clay.Vector2} out\n * @param  {clay.Vector2} a\n * @param  {clay.Vector2} b\n * @return {clay.Vector2}\n */\nVector2.add = function (out, a, b) {\n  vec2.add(out.array, a.array, b.array);\n  out._dirty = true;\n  return out;\n};\n\n/**\n * @param  {clay.Vector2} out\n * @param  {number}  x\n * @param  {number}  y\n * @return {clay.Vector2}\n */\nVector2.set = function (out, x, y) {\n  vec2.set(out.array, x, y);\n  out._dirty = true;\n  return out;\n};\n\n/**\n * @param  {clay.Vector2} out\n * @param  {clay.Vector2} b\n * @return {clay.Vector2}\n */\nVector2.copy = function (out, b) {\n  vec2.copy(out.array, b.array);\n  out._dirty = true;\n  return out;\n};\n\n/**\n * @param  {clay.Vector3} out\n * @param  {clay.Vector2} a\n * @param  {clay.Vector2} b\n * @return {clay.Vector2}\n */\nVector2.cross = function (out, a, b) {\n  vec2.cross(out.array, a.array, b.array);\n  out._dirty = true;\n  return out;\n};\n/**\n * @param  {clay.Vector2} a\n * @param  {clay.Vector2} b\n * @return {number}\n */\nVector2.dist = function (a, b) {\n  return vec2.distance(a.array, b.array);\n};\n/**\n * @function\n * @param  {clay.Vector2} a\n * @param  {clay.Vector2} b\n * @return {number}\n */\nVector2.distance = Vector2.dist;\n/**\n * @param  {clay.Vector2} out\n * @param  {clay.Vector2} a\n * @param  {clay.Vector2} b\n * @return {clay.Vector2}\n */\nVector2.div = function (out, a, b) {\n  vec2.divide(out.array, a.array, b.array);\n  out._dirty = true;\n  return out;\n};\n/**\n * @function\n * @param  {clay.Vector2} out\n * @param  {clay.Vector2} a\n * @param  {clay.Vector2} b\n * @return {clay.Vector2}\n */\nVector2.divide = Vector2.div;\n/**\n * @param  {clay.Vector2} a\n * @param  {clay.Vector2} b\n * @return {number}\n */\nVector2.dot = function (a, b) {\n  return vec2.dot(a.array, b.array);\n};\n\n/**\n * @param  {clay.Vector2} a\n * @return {number}\n */\nVector2.len = function (b) {\n  return vec2.length(b.array);\n};\n\n// Vector2.length = Vector2.len;\n\n/**\n * @param  {clay.Vector2} out\n * @param  {clay.Vector2} a\n * @param  {clay.Vector2} b\n * @param  {number}  t\n * @return {clay.Vector2}\n */\nVector2.lerp = function (out, a, b, t) {\n  vec2.lerp(out.array, a.array, b.array, t);\n  out._dirty = true;\n  return out;\n};\n/**\n * @param  {clay.Vector2} out\n * @param  {clay.Vector2} a\n * @param  {clay.Vector2} b\n * @return {clay.Vector2}\n */\nVector2.min = function (out, a, b) {\n  vec2.min(out.array, a.array, b.array);\n  out._dirty = true;\n  return out;\n};\n\n/**\n * @param  {clay.Vector2} out\n * @param  {clay.Vector2} a\n * @param  {clay.Vector2} b\n * @return {clay.Vector2}\n */\nVector2.max = function (out, a, b) {\n  vec2.max(out.array, a.array, b.array);\n  out._dirty = true;\n  return out;\n};\n/**\n * @param  {clay.Vector2} out\n * @param  {clay.Vector2} a\n * @param  {clay.Vector2} b\n * @return {clay.Vector2}\n */\nVector2.mul = function (out, a, b) {\n  vec2.multiply(out.array, a.array, b.array);\n  out._dirty = true;\n  return out;\n};\n/**\n * @function\n * @param  {clay.Vector2} out\n * @param  {clay.Vector2} a\n * @param  {clay.Vector2} b\n * @return {clay.Vector2}\n */\nVector2.multiply = Vector2.mul;\n/**\n * @param  {clay.Vector2} out\n * @param  {clay.Vector2} a\n * @return {clay.Vector2}\n */\nVector2.negate = function (out, a) {\n  vec2.negate(out.array, a.array);\n  out._dirty = true;\n  return out;\n};\n/**\n * @param  {clay.Vector2} out\n * @param  {clay.Vector2} a\n * @return {clay.Vector2}\n */\nVector2.normalize = function (out, a) {\n  vec2.normalize(out.array, a.array);\n  out._dirty = true;\n  return out;\n};\n/**\n * @param  {clay.Vector2} out\n * @param  {number}  scale\n * @return {clay.Vector2}\n */\nVector2.random = function (out, scale) {\n  vec2.random(out.array, scale);\n  out._dirty = true;\n  return out;\n};\n/**\n * @param  {clay.Vector2} out\n * @param  {clay.Vector2} a\n * @param  {number}  scale\n * @return {clay.Vector2}\n */\nVector2.scale = function (out, a, scale) {\n  vec2.scale(out.array, a.array, scale);\n  out._dirty = true;\n  return out;\n};\n/**\n * @param  {clay.Vector2} out\n * @param  {clay.Vector2} a\n * @param  {clay.Vector2} b\n * @param  {number}  scale\n * @return {clay.Vector2}\n */\nVector2.scaleAndAdd = function (out, a, b, scale) {\n  vec2.scaleAndAdd(out.array, a.array, b.array, scale);\n  out._dirty = true;\n  return out;\n};\n/**\n * @param  {clay.Vector2} a\n * @param  {clay.Vector2} b\n * @return {number}\n */\nVector2.sqrDist = function (a, b) {\n  return vec2.sqrDist(a.array, b.array);\n};\n/**\n * @function\n * @param  {clay.Vector2} a\n * @param  {clay.Vector2} b\n * @return {number}\n */\nVector2.squaredDistance = Vector2.sqrDist;\n\n/**\n * @param  {clay.Vector2} a\n * @return {number}\n */\nVector2.sqrLen = function (a) {\n  return vec2.sqrLen(a.array);\n};\n/**\n * @function\n * @param  {clay.Vector2} a\n * @return {number}\n */\nVector2.squaredLength = Vector2.sqrLen;\n\n/**\n * @param  {clay.Vector2} out\n * @param  {clay.Vector2} a\n * @param  {clay.Vector2} b\n * @return {clay.Vector2}\n */\nVector2.sub = function (out, a, b) {\n  vec2.subtract(out.array, a.array, b.array);\n  out._dirty = true;\n  return out;\n};\n/**\n * @function\n * @param  {clay.Vector2} out\n * @param  {clay.Vector2} a\n * @param  {clay.Vector2} b\n * @return {clay.Vector2}\n */\nVector2.subtract = Vector2.sub;\n/**\n * @param  {clay.Vector2} out\n * @param  {clay.Vector2} a\n * @param  {clay.Matrix2} m\n * @return {clay.Vector2}\n */\nVector2.transformMat2 = function (out, a, m) {\n  vec2.transformMat2(out.array, a.array, m.array);\n  out._dirty = true;\n  return out;\n};\n/**\n * @param  {clay.Vector2}  out\n * @param  {clay.Vector2}  a\n * @param  {clay.Matrix2d} m\n * @return {clay.Vector2}\n */\nVector2.transformMat2d = function (out, a, m) {\n  vec2.transformMat2d(out.array, a.array, m.array);\n  out._dirty = true;\n  return out;\n};\n/**\n * @param  {clay.Vector2} out\n * @param  {clay.Vector2} a\n * @param  {Matrix3} m\n * @return {clay.Vector2}\n */\nVector2.transformMat3 = function (out, a, m) {\n  vec2.transformMat3(out.array, a.array, m.array);\n  out._dirty = true;\n  return out;\n};\n/**\n * @param  {clay.Vector2} out\n * @param  {clay.Vector2} a\n * @param  {clay.Matrix4} m\n * @return {clay.Vector2}\n */\nVector2.transformMat4 = function (out, a, m) {\n  vec2.transformMat4(out.array, a.array, m.array);\n  out._dirty = true;\n  return out;\n};\nexport default Vector2;","map":{"version":3,"names":["vec2","Vector2","x","y","array","fromValues","_dirty","prototype","constructor","add","b","set","setArray","arr","clone","copy","cross","out","dist","distance","div","divide","dot","len","length","lerp","a","t","min","max","mul","multiply","negate","normalize","random","scale","s","scaleAndAdd","sqrDist","squaredDistance","sqrLen","squaredLength","sub","subtract","transformMat2","m","transformMat2d","transformMat3","transformMat4","toString","Array","join","call","toArray","slice","Object","defineProperty","proto","get","value"],"sources":["E:/QuestionairePlanet_Fronted/mytest/node_modules/claygl/src/math/Vector2.js"],"sourcesContent":["import vec2 from '../glmatrix/vec2';\n\n/**\n * @constructor\n * @alias clay.Vector2\n * @param {number} x\n * @param {number} y\n */\nvar Vector2 = function(x, y) {\n\n    x = x || 0;\n    y = y || 0;\n\n    /**\n     * Storage of Vector2, read and write of x, y will change the values in array\n     * All methods also operate on the array instead of x, y components\n     * @name array\n     * @type {Float32Array}\n     * @memberOf clay.Vector2#\n     */\n    this.array = vec2.fromValues(x, y);\n\n    /**\n     * Dirty flag is used by the Node to determine\n     * if the matrix is updated to latest\n     * @name _dirty\n     * @type {boolean}\n     * @memberOf clay.Vector2#\n     */\n    this._dirty = true;\n};\n\nVector2.prototype = {\n\n    constructor: Vector2,\n\n    /**\n     * Add b to self\n     * @param  {clay.Vector2} b\n     * @return {clay.Vector2}\n     */\n    add: function(b) {\n        vec2.add(this.array, this.array, b.array);\n        this._dirty = true;\n        return this;\n    },\n\n    /**\n     * Set x and y components\n     * @param  {number}  x\n     * @param  {number}  y\n     * @return {clay.Vector2}\n     */\n    set: function(x, y) {\n        this.array[0] = x;\n        this.array[1] = y;\n        this._dirty = true;\n        return this;\n    },\n\n    /**\n     * Set x and y components from array\n     * @param  {Float32Array|number[]} arr\n     * @return {clay.Vector2}\n     */\n    setArray: function(arr) {\n        this.array[0] = arr[0];\n        this.array[1] = arr[1];\n\n        this._dirty = true;\n        return this;\n    },\n\n    /**\n     * Clone a new Vector2\n     * @return {clay.Vector2}\n     */\n    clone: function() {\n        return new Vector2(this.x, this.y);\n    },\n\n    /**\n     * Copy x, y from b\n     * @param  {clay.Vector2} b\n     * @return {clay.Vector2}\n     */\n    copy: function(b) {\n        vec2.copy(this.array, b.array);\n        this._dirty = true;\n        return this;\n    },\n\n    /**\n     * Cross product of self and b, written to a Vector3 out\n     * @param  {clay.Vector3} out\n     * @param  {clay.Vector2} b\n     * @return {clay.Vector2}\n     */\n    cross: function(out, b) {\n        vec2.cross(out.array, this.array, b.array);\n        out._dirty = true;\n        return this;\n    },\n\n    /**\n     * Alias for distance\n     * @param  {clay.Vector2} b\n     * @return {number}\n     */\n    dist: function(b) {\n        return vec2.dist(this.array, b.array);\n    },\n\n    /**\n     * Distance between self and b\n     * @param  {clay.Vector2} b\n     * @return {number}\n     */\n    distance: function(b) {\n        return vec2.distance(this.array, b.array);\n    },\n\n    /**\n     * Alias for divide\n     * @param  {clay.Vector2} b\n     * @return {clay.Vector2}\n     */\n    div: function(b) {\n        vec2.div(this.array, this.array, b.array);\n        this._dirty = true;\n        return this;\n    },\n\n    /**\n     * Divide self by b\n     * @param  {clay.Vector2} b\n     * @return {clay.Vector2}\n     */\n    divide: function(b) {\n        vec2.divide(this.array, this.array, b.array);\n        this._dirty = true;\n        return this;\n    },\n\n    /**\n     * Dot product of self and b\n     * @param  {clay.Vector2} b\n     * @return {number}\n     */\n    dot: function(b) {\n        return vec2.dot(this.array, b.array);\n    },\n\n    /**\n     * Alias of length\n     * @return {number}\n     */\n    len: function() {\n        return vec2.len(this.array);\n    },\n\n    /**\n     * Calculate the length\n     * @return {number}\n     */\n    length: function() {\n        return vec2.length(this.array);\n    },\n\n    /**\n     * Linear interpolation between a and b\n     * @param  {clay.Vector2} a\n     * @param  {clay.Vector2} b\n     * @param  {number}  t\n     * @return {clay.Vector2}\n     */\n    lerp: function(a, b, t) {\n        vec2.lerp(this.array, a.array, b.array, t);\n        this._dirty = true;\n        return this;\n    },\n\n    /**\n     * Minimum of self and b\n     * @param  {clay.Vector2} b\n     * @return {clay.Vector2}\n     */\n    min: function(b) {\n        vec2.min(this.array, this.array, b.array);\n        this._dirty = true;\n        return this;\n    },\n\n    /**\n     * Maximum of self and b\n     * @param  {clay.Vector2} b\n     * @return {clay.Vector2}\n     */\n    max: function(b) {\n        vec2.max(this.array, this.array, b.array);\n        this._dirty = true;\n        return this;\n    },\n\n    /**\n     * Alias for multiply\n     * @param  {clay.Vector2} b\n     * @return {clay.Vector2}\n     */\n    mul: function(b) {\n        vec2.mul(this.array, this.array, b.array);\n        this._dirty = true;\n        return this;\n    },\n\n    /**\n     * Mutiply self and b\n     * @param  {clay.Vector2} b\n     * @return {clay.Vector2}\n     */\n    multiply: function(b) {\n        vec2.multiply(this.array, this.array, b.array);\n        this._dirty = true;\n        return this;\n    },\n\n    /**\n     * Negate self\n     * @return {clay.Vector2}\n     */\n    negate: function() {\n        vec2.negate(this.array, this.array);\n        this._dirty = true;\n        return this;\n    },\n\n    /**\n     * Normalize self\n     * @return {clay.Vector2}\n     */\n    normalize: function() {\n        vec2.normalize(this.array, this.array);\n        this._dirty = true;\n        return this;\n    },\n\n    /**\n     * Generate random x, y components with a given scale\n     * @param  {number} scale\n     * @return {clay.Vector2}\n     */\n    random: function(scale) {\n        vec2.random(this.array, scale);\n        this._dirty = true;\n        return this;\n    },\n\n    /**\n     * Scale self\n     * @param  {number}  scale\n     * @return {clay.Vector2}\n     */\n    scale: function(s) {\n        vec2.scale(this.array, this.array, s);\n        this._dirty = true;\n        return this;\n    },\n\n    /**\n     * Scale b and add to self\n     * @param  {clay.Vector2} b\n     * @param  {number}  scale\n     * @return {clay.Vector2}\n     */\n    scaleAndAdd: function(b, s) {\n        vec2.scaleAndAdd(this.array, this.array, b.array, s);\n        this._dirty = true;\n        return this;\n    },\n\n    /**\n     * Alias for squaredDistance\n     * @param  {clay.Vector2} b\n     * @return {number}\n     */\n    sqrDist: function(b) {\n        return vec2.sqrDist(this.array, b.array);\n    },\n\n    /**\n     * Squared distance between self and b\n     * @param  {clay.Vector2} b\n     * @return {number}\n     */\n    squaredDistance: function(b) {\n        return vec2.squaredDistance(this.array, b.array);\n    },\n\n    /**\n     * Alias for squaredLength\n     * @return {number}\n     */\n    sqrLen: function() {\n        return vec2.sqrLen(this.array);\n    },\n\n    /**\n     * Squared length of self\n     * @return {number}\n     */\n    squaredLength: function() {\n        return vec2.squaredLength(this.array);\n    },\n\n    /**\n     * Alias for subtract\n     * @param  {clay.Vector2} b\n     * @return {clay.Vector2}\n     */\n    sub: function(b) {\n        vec2.sub(this.array, this.array, b.array);\n        this._dirty = true;\n        return this;\n    },\n\n    /**\n     * Subtract b from self\n     * @param  {clay.Vector2} b\n     * @return {clay.Vector2}\n     */\n    subtract: function(b) {\n        vec2.subtract(this.array, this.array, b.array);\n        this._dirty = true;\n        return this;\n    },\n\n    /**\n     * Transform self with a Matrix2 m\n     * @param  {clay.Matrix2} m\n     * @return {clay.Vector2}\n     */\n    transformMat2: function(m) {\n        vec2.transformMat2(this.array, this.array, m.array);\n        this._dirty = true;\n        return this;\n    },\n\n    /**\n     * Transform self with a Matrix2d m\n     * @param  {clay.Matrix2d} m\n     * @return {clay.Vector2}\n     */\n    transformMat2d: function(m) {\n        vec2.transformMat2d(this.array, this.array, m.array);\n        this._dirty = true;\n        return this;\n    },\n\n    /**\n     * Transform self with a Matrix3 m\n     * @param  {clay.Matrix3} m\n     * @return {clay.Vector2}\n     */\n    transformMat3: function(m) {\n        vec2.transformMat3(this.array, this.array, m.array);\n        this._dirty = true;\n        return this;\n    },\n\n    /**\n     * Transform self with a Matrix4 m\n     * @param  {clay.Matrix4} m\n     * @return {clay.Vector2}\n     */\n    transformMat4: function(m) {\n        vec2.transformMat4(this.array, this.array, m.array);\n        this._dirty = true;\n        return this;\n    },\n\n    toString: function() {\n        return '[' + Array.prototype.join.call(this.array, ',') + ']';\n    },\n\n    toArray: function () {\n        return Array.prototype.slice.call(this.array);\n    }\n};\n\n// Getter and Setter\nif (Object.defineProperty) {\n\n    var proto = Vector2.prototype;\n    /**\n     * @name x\n     * @type {number}\n     * @memberOf clay.Vector2\n     * @instance\n     */\n    Object.defineProperty(proto, 'x', {\n        get: function () {\n            return this.array[0];\n        },\n        set: function (value) {\n            this.array[0] = value;\n            this._dirty = true;\n        }\n    });\n\n    /**\n     * @name y\n     * @type {number}\n     * @memberOf clay.Vector2\n     * @instance\n     */\n    Object.defineProperty(proto, 'y', {\n        get: function () {\n            return this.array[1];\n        },\n        set: function (value) {\n            this.array[1] = value;\n            this._dirty = true;\n        }\n    });\n}\n\n// Supply methods that are not in place\n\n/**\n * @param  {clay.Vector2} out\n * @param  {clay.Vector2} a\n * @param  {clay.Vector2} b\n * @return {clay.Vector2}\n */\nVector2.add = function(out, a, b) {\n    vec2.add(out.array, a.array, b.array);\n    out._dirty = true;\n    return out;\n};\n\n/**\n * @param  {clay.Vector2} out\n * @param  {number}  x\n * @param  {number}  y\n * @return {clay.Vector2}\n */\nVector2.set = function(out, x, y) {\n    vec2.set(out.array, x, y);\n    out._dirty = true;\n    return out;\n};\n\n/**\n * @param  {clay.Vector2} out\n * @param  {clay.Vector2} b\n * @return {clay.Vector2}\n */\nVector2.copy = function(out, b) {\n    vec2.copy(out.array, b.array);\n    out._dirty = true;\n    return out;\n};\n\n/**\n * @param  {clay.Vector3} out\n * @param  {clay.Vector2} a\n * @param  {clay.Vector2} b\n * @return {clay.Vector2}\n */\nVector2.cross = function(out, a, b) {\n    vec2.cross(out.array, a.array, b.array);\n    out._dirty = true;\n    return out;\n};\n/**\n * @param  {clay.Vector2} a\n * @param  {clay.Vector2} b\n * @return {number}\n */\nVector2.dist = function(a, b) {\n    return vec2.distance(a.array, b.array);\n};\n/**\n * @function\n * @param  {clay.Vector2} a\n * @param  {clay.Vector2} b\n * @return {number}\n */\nVector2.distance = Vector2.dist;\n/**\n * @param  {clay.Vector2} out\n * @param  {clay.Vector2} a\n * @param  {clay.Vector2} b\n * @return {clay.Vector2}\n */\nVector2.div = function(out, a, b) {\n    vec2.divide(out.array, a.array, b.array);\n    out._dirty = true;\n    return out;\n};\n/**\n * @function\n * @param  {clay.Vector2} out\n * @param  {clay.Vector2} a\n * @param  {clay.Vector2} b\n * @return {clay.Vector2}\n */\nVector2.divide = Vector2.div;\n/**\n * @param  {clay.Vector2} a\n * @param  {clay.Vector2} b\n * @return {number}\n */\nVector2.dot = function(a, b) {\n    return vec2.dot(a.array, b.array);\n};\n\n/**\n * @param  {clay.Vector2} a\n * @return {number}\n */\nVector2.len = function(b) {\n    return vec2.length(b.array);\n};\n\n// Vector2.length = Vector2.len;\n\n/**\n * @param  {clay.Vector2} out\n * @param  {clay.Vector2} a\n * @param  {clay.Vector2} b\n * @param  {number}  t\n * @return {clay.Vector2}\n */\nVector2.lerp = function(out, a, b, t) {\n    vec2.lerp(out.array, a.array, b.array, t);\n    out._dirty = true;\n    return out;\n};\n/**\n * @param  {clay.Vector2} out\n * @param  {clay.Vector2} a\n * @param  {clay.Vector2} b\n * @return {clay.Vector2}\n */\nVector2.min = function(out, a, b) {\n    vec2.min(out.array, a.array, b.array);\n    out._dirty = true;\n    return out;\n};\n\n/**\n * @param  {clay.Vector2} out\n * @param  {clay.Vector2} a\n * @param  {clay.Vector2} b\n * @return {clay.Vector2}\n */\nVector2.max = function(out, a, b) {\n    vec2.max(out.array, a.array, b.array);\n    out._dirty = true;\n    return out;\n};\n/**\n * @param  {clay.Vector2} out\n * @param  {clay.Vector2} a\n * @param  {clay.Vector2} b\n * @return {clay.Vector2}\n */\nVector2.mul = function(out, a, b) {\n    vec2.multiply(out.array, a.array, b.array);\n    out._dirty = true;\n    return out;\n};\n/**\n * @function\n * @param  {clay.Vector2} out\n * @param  {clay.Vector2} a\n * @param  {clay.Vector2} b\n * @return {clay.Vector2}\n */\nVector2.multiply = Vector2.mul;\n/**\n * @param  {clay.Vector2} out\n * @param  {clay.Vector2} a\n * @return {clay.Vector2}\n */\nVector2.negate = function(out, a) {\n    vec2.negate(out.array, a.array);\n    out._dirty = true;\n    return out;\n};\n/**\n * @param  {clay.Vector2} out\n * @param  {clay.Vector2} a\n * @return {clay.Vector2}\n */\nVector2.normalize = function(out, a) {\n    vec2.normalize(out.array, a.array);\n    out._dirty = true;\n    return out;\n};\n/**\n * @param  {clay.Vector2} out\n * @param  {number}  scale\n * @return {clay.Vector2}\n */\nVector2.random = function(out, scale) {\n    vec2.random(out.array, scale);\n    out._dirty = true;\n    return out;\n};\n/**\n * @param  {clay.Vector2} out\n * @param  {clay.Vector2} a\n * @param  {number}  scale\n * @return {clay.Vector2}\n */\nVector2.scale = function(out, a, scale) {\n    vec2.scale(out.array, a.array, scale);\n    out._dirty = true;\n    return out;\n};\n/**\n * @param  {clay.Vector2} out\n * @param  {clay.Vector2} a\n * @param  {clay.Vector2} b\n * @param  {number}  scale\n * @return {clay.Vector2}\n */\nVector2.scaleAndAdd = function(out, a, b, scale) {\n    vec2.scaleAndAdd(out.array, a.array, b.array, scale);\n    out._dirty = true;\n    return out;\n};\n/**\n * @param  {clay.Vector2} a\n * @param  {clay.Vector2} b\n * @return {number}\n */\nVector2.sqrDist = function(a, b) {\n    return vec2.sqrDist(a.array, b.array);\n};\n/**\n * @function\n * @param  {clay.Vector2} a\n * @param  {clay.Vector2} b\n * @return {number}\n */\nVector2.squaredDistance = Vector2.sqrDist;\n\n/**\n * @param  {clay.Vector2} a\n * @return {number}\n */\nVector2.sqrLen = function(a) {\n    return vec2.sqrLen(a.array);\n};\n/**\n * @function\n * @param  {clay.Vector2} a\n * @return {number}\n */\nVector2.squaredLength = Vector2.sqrLen;\n\n/**\n * @param  {clay.Vector2} out\n * @param  {clay.Vector2} a\n * @param  {clay.Vector2} b\n * @return {clay.Vector2}\n */\nVector2.sub = function(out, a, b) {\n    vec2.subtract(out.array, a.array, b.array);\n    out._dirty = true;\n    return out;\n};\n/**\n * @function\n * @param  {clay.Vector2} out\n * @param  {clay.Vector2} a\n * @param  {clay.Vector2} b\n * @return {clay.Vector2}\n */\nVector2.subtract = Vector2.sub;\n/**\n * @param  {clay.Vector2} out\n * @param  {clay.Vector2} a\n * @param  {clay.Matrix2} m\n * @return {clay.Vector2}\n */\nVector2.transformMat2 = function(out, a, m) {\n    vec2.transformMat2(out.array, a.array, m.array);\n    out._dirty = true;\n    return out;\n};\n/**\n * @param  {clay.Vector2}  out\n * @param  {clay.Vector2}  a\n * @param  {clay.Matrix2d} m\n * @return {clay.Vector2}\n */\nVector2.transformMat2d = function(out, a, m) {\n    vec2.transformMat2d(out.array, a.array, m.array);\n    out._dirty = true;\n    return out;\n};\n/**\n * @param  {clay.Vector2} out\n * @param  {clay.Vector2} a\n * @param  {Matrix3} m\n * @return {clay.Vector2}\n */\nVector2.transformMat3 = function(out, a, m) {\n    vec2.transformMat3(out.array, a.array, m.array);\n    out._dirty = true;\n    return out;\n};\n/**\n * @param  {clay.Vector2} out\n * @param  {clay.Vector2} a\n * @param  {clay.Matrix4} m\n * @return {clay.Vector2}\n */\nVector2.transformMat4 = function(out, a, m) {\n    vec2.transformMat4(out.array, a.array, m.array);\n    out._dirty = true;\n    return out;\n};\n\nexport default Vector2;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}