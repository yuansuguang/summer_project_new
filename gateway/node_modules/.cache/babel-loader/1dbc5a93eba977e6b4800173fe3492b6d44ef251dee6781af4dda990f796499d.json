{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/esnext.set.difference.v2.js\";\nimport \"core-js/modules/esnext.set.intersection.v2.js\";\nimport \"core-js/modules/esnext.set.is-disjoint-from.v2.js\";\nimport \"core-js/modules/esnext.set.is-subset-of.v2.js\";\nimport \"core-js/modules/esnext.set.is-superset-of.v2.js\";\nimport \"core-js/modules/esnext.set.symmetric-difference.v2.js\";\nimport \"core-js/modules/esnext.set.union.v2.js\";\nimport { ref, computed, onMounted, watch, nextTick } from 'vue';\nimport * as echarts from 'echarts';\nimport 'echarts-gl';\nimport * as XLSX from 'xlsx';\n//   import ecStat from 'echarts-stat';\n\nexport default {\n  __name: 'qnAnalysis',\n  setup(__props, {\n    expose: __expose\n  }) {\n    __expose();\n    const selectedPrimary = ref('');\n    const selectedSecondary = ref('');\n    const analysisResult = ref({});\n    const surveyData = ref([[{\n      \"question_description\": \"你的年龄是？\",\n      \"answer\": \"18-25\"\n    }, {\n      \"question_description\": \"你的职业是？\",\n      \"answer\": \"学生\"\n    }, {\n      \"question_description\": \"你喜欢什么颜色？\",\n      \"answer\": \"蓝色\"\n    }], [{\n      \"question_description\": \"你的年龄是？\",\n      \"answer\": \"25-32\"\n    }, {\n      \"question_description\": \"你的职业是？\",\n      \"answer\": \"教师\"\n    }, {\n      \"question_description\": \"你喜欢什么颜色？\",\n      \"answer\": \"红色\"\n    }], [{\n      \"question_description\": \"你的年龄是？\",\n      \"answer\": \"10-18\"\n    }, {\n      \"question_description\": \"你的职业是？\",\n      \"answer\": \"学生\"\n    }, {\n      \"question_description\": \"你喜欢什么颜色？\",\n      \"answer\": \"白色\"\n    }], [{\n      \"question_description\": \"你的年龄是？\",\n      \"answer\": \"25-32\"\n    }, {\n      \"question_description\": \"你的职业是？\",\n      \"answer\": \"教师\"\n    }, {\n      \"question_description\": \"你喜欢什么颜色？\",\n      \"answer\": \"黑色\"\n    }], [{\n      \"question_description\": \"你的年龄是？\",\n      \"answer\": \"25-32\"\n    }, {\n      \"question_description\": \"你的职业是？\",\n      \"answer\": \"学生\"\n    }, {\n      \"question_description\": \"你喜欢什么颜色？\",\n      \"answer\": \"白色\"\n    }], [{\n      \"question_description\": \"你的年龄是？\",\n      \"answer\": \"25-32\"\n    }, {\n      \"question_description\": \"你的职业是？\",\n      \"answer\": \"学生\"\n    }, {\n      \"question_description\": \"你喜欢什么颜色？\",\n      \"answer\": \"粉色\"\n    }]]);\n    const exportToExcel = () => {\n      const wb = XLSX.utils.book_new();\n      const ws = XLSX.utils.json_to_sheet(formattedTableData.value);\n      XLSX.utils.book_append_sheet(wb, ws, 'AnalysisResult');\n      XLSX.writeFile(wb, 'analysis_result.xlsx');\n    };\n    let myChart;\n    const exportChart = () => {\n      if (myChart) {\n        const img = new Image();\n        const url = myChart.getDataURL({\n          pixelRatio: 2,\n          backgroundColor: '#fff'\n        });\n        img.src = url;\n        // 创建下载链接并点击进行下载\n        const a = document.createElement('a');\n        a.download = 'chart.png';\n        a.href = url;\n        a.click();\n      }\n    };\n\n    // const questionsData = computed(() => {\n    //   if (!surveyData.value.length) return [];\n    //   const questionNames = Object.keys(surveyData.value[0]);\n    //   return questionNames.map(name => ({ name, displayName: name.charAt(0).toUpperCase() + name.slice(1) }));\n    // });\n\n    const questionsData = computed(() => {\n      if (!surveyData.value.length || !surveyData.value[0].length) return [];\n      const questionSet = new Set();\n      surveyData.value.forEach(response => {\n        response.forEach(item => {\n          questionSet.add(item.question_description);\n        });\n      });\n      return Array.from(questionSet).map(question => ({\n        name: question,\n        displayName: question\n      }));\n    });\n    onMounted(() => {\n      if (questionsData.value.length > 0) {\n        selectedPrimary.value = questionsData.value[0].name;\n        selectedSecondary.value = questionsData.value.length > 1 ? questionsData.value[1].name : questionsData.value[0].name;\n      }\n    });\n    const formattedTableData = computed(() => {\n      let tableData = [];\n      if (analysisResult.value && Object.keys(analysisResult.value).length) {\n        Object.keys(analysisResult.value).forEach(primary => {\n          Object.keys(analysisResult.value[primary]).forEach(secondary => {\n            tableData.push({\n              primary: getDisplayName(primary),\n              secondary: getDisplayName(secondary),\n              count: analysisResult.value[primary][secondary]\n            });\n          });\n        });\n      }\n      return tableData;\n    });\n    const performAnalysis = () => {\n      const primaryQuestionDescription = selectedPrimary.value;\n      const secondaryQuestionDescription = selectedSecondary.value;\n      let analysisMap = new Map();\n      surveyData.value.forEach(response => {\n        const primaryResponse = response.find(item => item.question_description === primaryQuestionDescription).answer;\n        const secondaryResponse = response.find(item => item.question_description === secondaryQuestionDescription).answer;\n        if (!analysisMap.has(primaryResponse)) {\n          analysisMap.set(primaryResponse, {});\n        }\n        const secondaryCounts = analysisMap.get(primaryResponse);\n        secondaryCounts[secondaryResponse] = (secondaryCounts[secondaryResponse] || 0) + 1;\n      });\n      let result = {};\n      analysisMap.forEach((counts, primaryAnswer) => {\n        result[primaryAnswer] = counts;\n      });\n      analysisResult.value = result;\n\n      // Ensure the chart updates with the new analysis result\n      nextTick(() => {\n        if (Object.keys(analysisResult.value).length > 0) {\n          setChart();\n        }\n      });\n    };\n    const getDisplayName = questionName => {\n      const question = questionsData.value.find(q => q.name === questionName);\n      return question ? question.displayName : questionName;\n    };\n    const setChart = () => {\n      nextTick(() => {\n        const chartDom = document.getElementById('chart');\n        if (chartDom && analysisResult.value) {\n          myChart = echarts.init(chartDom);\n          const dimensions = {\n            x: '',\n            y: '',\n            z: ''\n          };\n          let data = [];\n          let xData = [];\n          let yData = [];\n          Object.keys(analysisResult.value).forEach(x => {\n            Object.keys(analysisResult.value[x]).forEach(y => {\n              data.push([x, y, analysisResult.value[x][y]]);\n              if (xData.indexOf(x) === -1) xData.push(x);\n              if (yData.indexOf(y) === -1) yData.push(y);\n            });\n          });\n          dimensions.x = selectedPrimary.value;\n          dimensions.y = selectedSecondary.value;\n          dimensions.z = '数量';\n          let option = {\n            tooltip: {},\n            visualMap: {\n              max: 20,\n              inRange: {\n                color: ['#313695', '#4575b4', '#74add1', '#abd9e9', '#e0f3f8', '#ffffbf', '#fee090', '#fdae61', '#f46d43', '#d73027', '#a50026']\n              }\n            },\n            xAxis3D: {\n              type: 'category',\n              data: xData,\n              name: dimensions.x,\n              axisLabel: {\n                formatter: function (value) {\n                  return value;\n                }\n              }\n            },\n            yAxis3D: {\n              type: 'category',\n              data: yData,\n              name: dimensions.y\n            },\n            zAxis3D: {\n              type: 'value',\n              name: dimensions.z\n            },\n            grid3D: {\n              boxWidth: 200,\n              boxDepth: 80,\n              viewControl: {\n                // projection: 'orthographic'\n              },\n              light: {\n                main: {\n                  intensity: 1.2,\n                  shadow: true\n                },\n                ambient: {\n                  intensity: 0.3\n                }\n              }\n            },\n            series: [{\n              type: 'bar3D',\n              data: data.map(function (item) {\n                return {\n                  value: [item[0], item[1], item[2]]\n                };\n              }),\n              shading: 'lambert',\n              label: {\n                textStyle: {\n                  fontSize: 16,\n                  borderWidth: 1\n                }\n              },\n              emphasis: {\n                label: {\n                  textStyle: {\n                    fontSize: 20,\n                    color: '#900'\n                  }\n                },\n                itemStyle: {\n                  color: '#900'\n                }\n              }\n            }]\n          };\n          myChart.setOption(option);\n        }\n      });\n    };\n    watch(analysisResult, newVal => {\n      if (newVal) {\n        setChart();\n      }\n    });\n    const __returned__ = {\n      selectedPrimary,\n      selectedSecondary,\n      analysisResult,\n      surveyData,\n      exportToExcel,\n      get myChart() {\n        return myChart;\n      },\n      set myChart(v) {\n        myChart = v;\n      },\n      exportChart,\n      questionsData,\n      formattedTableData,\n      performAnalysis,\n      getDisplayName,\n      setChart,\n      ref,\n      computed,\n      onMounted,\n      watch,\n      nextTick,\n      get echarts() {\n        return echarts;\n      },\n      get XLSX() {\n        return XLSX;\n      }\n    };\n    Object.defineProperty(__returned__, '__isScriptSetup', {\n      enumerable: false,\n      value: true\n    });\n    return __returned__;\n  }\n};","map":{"version":3,"names":["ref","computed","onMounted","watch","nextTick","echarts","XLSX","selectedPrimary","selectedSecondary","analysisResult","surveyData","exportToExcel","wb","utils","book_new","ws","json_to_sheet","formattedTableData","value","book_append_sheet","writeFile","myChart","exportChart","img","Image","url","getDataURL","pixelRatio","backgroundColor","src","a","document","createElement","download","href","click","questionsData","length","questionSet","Set","forEach","response","item","add","question_description","Array","from","map","question","name","displayName","tableData","Object","keys","primary","secondary","push","getDisplayName","count","performAnalysis","primaryQuestionDescription","secondaryQuestionDescription","analysisMap","Map","primaryResponse","find","answer","secondaryResponse","has","set","secondaryCounts","get","result","counts","primaryAnswer","setChart","questionName","q","chartDom","getElementById","init","dimensions","x","y","z","data","xData","yData","indexOf","option","tooltip","visualMap","max","inRange","color","xAxis3D","type","axisLabel","formatter","yAxis3D","zAxis3D","grid3D","boxWidth","boxDepth","viewControl","light","main","intensity","shadow","ambient","series","shading","label","textStyle","fontSize","borderWidth","emphasis","itemStyle","setOption","newVal"],"sources":["E:/mytest/src/views/qn-data/qnAnalysis.vue"],"sourcesContent":["<template>\r\n    <div>\r\n      <el-row type=\"flex\" justify=\"center\">\r\n        <el-col :span=\"12\">\r\n          <h1>问卷交叉分析</h1>\r\n          <el-form>\r\n            <el-form-item label=\"选择分析的第一个维度：\">\r\n              <el-select v-model=\"selectedPrimary\" placeholder=\"请选择\">\r\n                <el-option\r\n                  v-for=\"question in questionsData\"\r\n                  :key=\"question.name\"\r\n                  :label=\"question.displayName\"\r\n                  :value=\"question.name\">\r\n                </el-option>\r\n              </el-select>\r\n            </el-form-item>\r\n            <el-form-item label=\"选择分析的第二个维度：\">\r\n              <el-select v-model=\"selectedSecondary\" placeholder=\"请选择\">\r\n                <el-option\r\n                  v-for=\"question in questionsData\"\r\n                  :key=\"question.name\"\r\n                  :label=\"question.displayName\"\r\n                  :value=\"question.name\">\r\n                </el-option>\r\n              </el-select>\r\n            </el-form-item>\r\n            <el-form-item>\r\n              <el-button type=\"primary\" @click=\"performAnalysis\">执行分析</el-button>\r\n              <el-button type=\"success\" @click=\"exportToExcel\">导出Excel</el-button>\r\n              <el-button type=\"warning  \" @click=\"exportChart\">导出立体图</el-button>\r\n            </el-form-item>\r\n          </el-form>\r\n          <div v-if=\"analysisResult && Object.keys(analysisResult).length\">\r\n            <h2>分析结果：</h2>\r\n            <el-card class=\"box-card\" v-for=\"(result, key) in analysisResult\" :key=\"key\">\r\n              <div>\r\n                <h3>{{ getDisplayName(key) }}:</h3>\r\n                <el-list v-for=\"(count, answer) in result\" :key=\"answer\">\r\n                  <el-list-item>{{ getDisplayName(answer) }}: {{ count }} 次<br></el-list-item>\r\n                </el-list>\r\n              </div>\r\n            </el-card>\r\n            <h2>交叉分析表格：</h2>\r\n            <el-table :data=\"formattedTableData\" style=\"width: 100%\" stripe>\r\n                <el-table-column prop=\"primary\" label=\"第一维度\"></el-table-column>\r\n                <el-table-column prop=\"secondary\" label=\"第二维度\"></el-table-column>\r\n                <el-table-column prop=\"count\" label=\"计数\"></el-table-column>\r\n            </el-table>\r\n            <div id=\"chart\" style=\"width: 800px;height:600px;\"></div>\r\n          </div>\r\n        </el-col>\r\n      </el-row>\r\n    </div>\r\n  </template>\r\n  \r\n  <script setup>\r\n  import { ref, computed, onMounted, watch, nextTick } from 'vue';\r\n  import * as echarts from 'echarts';\r\n  import 'echarts-gl';\r\n  import * as XLSX from 'xlsx';\r\n//   import ecStat from 'echarts-stat';\r\n  \r\n  const selectedPrimary = ref('');\r\n  const selectedSecondary = ref('');\r\n  const analysisResult = ref({});\r\n  \r\n  const surveyData = ref([\r\n    [\r\n      {\"question_description\": \"你的年龄是？\", \"answer\": \"18-25\"},\r\n      {\"question_description\": \"你的职业是？\", \"answer\": \"学生\"},\r\n      {\"question_description\": \"你喜欢什么颜色？\", \"answer\": \"蓝色\"}\r\n    ],\r\n    [\r\n      {\"question_description\": \"你的年龄是？\", \"answer\": \"25-32\"},\r\n      {\"question_description\": \"你的职业是？\", \"answer\": \"教师\"},\r\n      {\"question_description\": \"你喜欢什么颜色？\", \"answer\": \"红色\"}\r\n    ],\r\n    [\r\n      {\"question_description\": \"你的年龄是？\", \"answer\": \"10-18\"},\r\n      {\"question_description\": \"你的职业是？\", \"answer\": \"学生\"},\r\n      {\"question_description\": \"你喜欢什么颜色？\", \"answer\": \"白色\"}\r\n    ],\r\n    [\r\n      {\"question_description\": \"你的年龄是？\", \"answer\": \"25-32\"},\r\n      {\"question_description\": \"你的职业是？\", \"answer\": \"教师\"},\r\n      {\"question_description\": \"你喜欢什么颜色？\", \"answer\": \"黑色\"}\r\n    ],\r\n    [\r\n      {\"question_description\": \"你的年龄是？\", \"answer\": \"25-32\"},\r\n      {\"question_description\": \"你的职业是？\", \"answer\": \"学生\"},\r\n      {\"question_description\": \"你喜欢什么颜色？\", \"answer\": \"白色\"}\r\n    ],\r\n    [\r\n      {\"question_description\": \"你的年龄是？\", \"answer\": \"25-32\"},\r\n      {\"question_description\": \"你的职业是？\", \"answer\": \"学生\"},\r\n      {\"question_description\": \"你喜欢什么颜色？\", \"answer\": \"粉色\"}\r\n    ]\r\n  ]);\r\n\r\n  const exportToExcel = () => {\r\n    const wb = XLSX.utils.book_new();\r\n    const ws = XLSX.utils.json_to_sheet(formattedTableData.value);\r\n    XLSX.utils.book_append_sheet(wb, ws, 'AnalysisResult');\r\n    XLSX.writeFile(wb, 'analysis_result.xlsx');\r\n  };\r\n\r\n  let myChart;\r\n\r\n  const exportChart = () => {\r\n    if (myChart) {\r\n      const img = new Image();\r\n      const url = myChart.getDataURL({\r\n        pixelRatio: 2,\r\n        backgroundColor: '#fff'\r\n      });\r\n\r\n      img.src = url;\r\n      // 创建下载链接并点击进行下载\r\n      const a = document.createElement('a');\r\n      a.download = 'chart.png';\r\n      a.href = url;\r\n      a.click();\r\n    }\r\n  };\r\n  \r\n  // const questionsData = computed(() => {\r\n  //   if (!surveyData.value.length) return [];\r\n  //   const questionNames = Object.keys(surveyData.value[0]);\r\n  //   return questionNames.map(name => ({ name, displayName: name.charAt(0).toUpperCase() + name.slice(1) }));\r\n  // });\r\n  \r\n  const questionsData = computed(() => {\r\n    if (!surveyData.value.length || !surveyData.value[0].length) return [];\r\n    const questionSet = new Set();\r\n    surveyData.value.forEach(response => {\r\n      response.forEach(item => {\r\n        questionSet.add(item.question_description);\r\n      });\r\n    });\r\n    return Array.from(questionSet).map(question => ({ \r\n      name: question, \r\n      displayName: question \r\n    }));\r\n  });\r\n\r\n  onMounted(() => {\r\n    if (questionsData.value.length > 0) {\r\n      selectedPrimary.value = questionsData.value[0].name;\r\n      selectedSecondary.value = questionsData.value.length > 1 ? questionsData.value[1].name : questionsData.value[0].name;\r\n    }\r\n  });\r\n\r\n  const formattedTableData = computed(() => {\r\n    let tableData = [];\r\n    if (analysisResult.value && Object.keys(analysisResult.value).length) {\r\n        Object.keys(analysisResult.value).forEach(primary => {\r\n        Object.keys(analysisResult.value[primary]).forEach(secondary => {\r\n            tableData.push({\r\n            primary: getDisplayName(primary),\r\n            secondary: getDisplayName(secondary),\r\n            count: analysisResult.value[primary][secondary]\r\n            });\r\n        });\r\n        });\r\n    }\r\n    return tableData;\r\n  });\r\n  \r\n  const performAnalysis = () => {\r\n    const primaryQuestionDescription = selectedPrimary.value;\r\n    const secondaryQuestionDescription = selectedSecondary.value;\r\n    let analysisMap = new Map();\r\n\r\n    surveyData.value.forEach(response => {\r\n      const primaryResponse = response.find(item => item.question_description === primaryQuestionDescription).answer;\r\n      const secondaryResponse = response.find(item => item.question_description === secondaryQuestionDescription).answer;\r\n\r\n      if (!analysisMap.has(primaryResponse)) {\r\n        analysisMap.set(primaryResponse, {});\r\n      }\r\n\r\n      const secondaryCounts = analysisMap.get(primaryResponse);\r\n      secondaryCounts[secondaryResponse] = (secondaryCounts[secondaryResponse] || 0) + 1;\r\n    });\r\n\r\n    let result = {};\r\n    analysisMap.forEach((counts, primaryAnswer) => {\r\n      result[primaryAnswer] = counts;\r\n    });\r\n\r\n    analysisResult.value = result;\r\n\r\n    // Ensure the chart updates with the new analysis result\r\n    nextTick(() => {\r\n      if (Object.keys(analysisResult.value).length > 0) {\r\n        setChart();\r\n      }\r\n    });\r\n  };\r\n  \r\n  const getDisplayName = (questionName) => {\r\n    const question = questionsData.value.find(q => q.name === questionName);\r\n    return question ? question.displayName : questionName;\r\n  };\r\n  \r\n  const setChart = () => {\r\n    nextTick(() => {\r\n      const chartDom = document.getElementById('chart');\r\n      if (chartDom && analysisResult.value) {\r\n        myChart = echarts.init(chartDom);\r\n        const dimensions = { x: '', y: '', z: '' };\r\n\r\n        let data = [];\r\n        let xData = [];\r\n        let yData = [];\r\n        Object.keys(analysisResult.value).forEach(x => {\r\n          Object.keys(analysisResult.value[x]).forEach(y => {\r\n            data.push([x, y, analysisResult.value[x][y]]);\r\n            if (xData.indexOf(x) === -1) xData.push(x);\r\n            if (yData.indexOf(y) === -1) yData.push(y);\r\n          });\r\n        });\r\n\r\n        dimensions.x = selectedPrimary.value;\r\n        dimensions.y = selectedSecondary.value;\r\n        dimensions.z = '数量';\r\n\r\n        let option = {\r\n          tooltip: {},\r\n          visualMap: {\r\n            max: 20,\r\n            inRange: {\r\n              color: ['#313695', '#4575b4', '#74add1', '#abd9e9', '#e0f3f8', '#ffffbf', '#fee090', '#fdae61', '#f46d43', '#d73027', '#a50026']\r\n            }\r\n          },\r\n          xAxis3D: {\r\n            type: 'category',\r\n            data: xData,\r\n            name: dimensions.x,\r\n            axisLabel: {\r\n              formatter: function (value) {\r\n                return value;\r\n              }\r\n            }\r\n          },\r\n          yAxis3D: {\r\n            type: 'category',\r\n            data: yData,\r\n            name: dimensions.y\r\n          },\r\n          zAxis3D: {\r\n            type: 'value',\r\n            name: dimensions.z\r\n          },\r\n          grid3D: {\r\n            boxWidth: 200,\r\n            boxDepth: 80,\r\n            viewControl: {\r\n              // projection: 'orthographic'\r\n            },\r\n            light: {\r\n              main: {\r\n                intensity: 1.2,\r\n                shadow: true\r\n              },\r\n              ambient: {\r\n                intensity: 0.3\r\n              }\r\n            }\r\n          },\r\n          series: [{\r\n            type: 'bar3D',\r\n            data: data.map(function (item) {\r\n              return {\r\n                value: [item[0], item[1], item[2]],\r\n              }\r\n            }),\r\n            shading: 'lambert',\r\n            label: {\r\n              textStyle: {\r\n                fontSize: 16,\r\n                borderWidth: 1\r\n              }\r\n            },\r\n            emphasis: {\r\n              label: {\r\n                textStyle: {\r\n                  fontSize: 20,\r\n                  color: '#900'\r\n                }\r\n              },\r\n              itemStyle: {\r\n                color: '#900'\r\n              }\r\n            }\r\n          }]\r\n        };\r\n        myChart.setOption(option);\r\n      }\r\n    });\r\n  };\r\n  \r\n  watch(analysisResult, (newVal) => {\r\n    if (newVal) {\r\n      setChart();\r\n    }\r\n  });\r\n  </script>\r\n  \r\n  <style>\r\n  .box-card {\r\n    margin-bottom: 20px;\r\n  }\r\n  \r\n  .el-col {\r\n    padding-top: 100px; /* Adjust this value as necessary */\r\n  }\r\n\r\n  /* 图表区域样式 */\r\n  #chart {\r\n    margin-top: 20px;\r\n    padding: 15px;\r\n    background-color: #fff;\r\n    border-radius: 4px;\r\n    box-shadow: 0 2px 12px 0 rgba(0,0,0,0.1);\r\n  }\r\n\r\n  /* 按钮区域样式 */\r\n  .chart-buttons {\r\n    display: flex;\r\n    justify-content: center;\r\n  }\r\n  </style>"],"mappings":";;;;;;;;AAwDE,SAASA,GAAG,EAAEC,QAAQ,EAAEC,SAAS,EAAEC,KAAK,EAAEC,QAAQ,QAAQ,KAAK;AAC/D,OAAO,KAAKC,OAAO,MAAM,SAAS;AAClC,OAAO,YAAY;AACnB,OAAO,KAAKC,IAAI,MAAM,MAAM;AAC9B;;;;;;;;IAEE,MAAMC,eAAe,GAAGP,GAAG,CAAC,EAAE,CAAC;IAC/B,MAAMQ,iBAAiB,GAAGR,GAAG,CAAC,EAAE,CAAC;IACjC,MAAMS,cAAc,GAAGT,GAAG,CAAC,CAAC,CAAC,CAAC;IAE9B,MAAMU,UAAU,GAAGV,GAAG,CAAC,CACrB,CACE;MAAC,sBAAsB,EAAE,QAAQ;MAAE,QAAQ,EAAE;IAAO,CAAC,EACrD;MAAC,sBAAsB,EAAE,QAAQ;MAAE,QAAQ,EAAE;IAAI,CAAC,EAClD;MAAC,sBAAsB,EAAE,UAAU;MAAE,QAAQ,EAAE;IAAI,CAAC,CACrD,EACD,CACE;MAAC,sBAAsB,EAAE,QAAQ;MAAE,QAAQ,EAAE;IAAO,CAAC,EACrD;MAAC,sBAAsB,EAAE,QAAQ;MAAE,QAAQ,EAAE;IAAI,CAAC,EAClD;MAAC,sBAAsB,EAAE,UAAU;MAAE,QAAQ,EAAE;IAAI,CAAC,CACrD,EACD,CACE;MAAC,sBAAsB,EAAE,QAAQ;MAAE,QAAQ,EAAE;IAAO,CAAC,EACrD;MAAC,sBAAsB,EAAE,QAAQ;MAAE,QAAQ,EAAE;IAAI,CAAC,EAClD;MAAC,sBAAsB,EAAE,UAAU;MAAE,QAAQ,EAAE;IAAI,CAAC,CACrD,EACD,CACE;MAAC,sBAAsB,EAAE,QAAQ;MAAE,QAAQ,EAAE;IAAO,CAAC,EACrD;MAAC,sBAAsB,EAAE,QAAQ;MAAE,QAAQ,EAAE;IAAI,CAAC,EAClD;MAAC,sBAAsB,EAAE,UAAU;MAAE,QAAQ,EAAE;IAAI,CAAC,CACrD,EACD,CACE;MAAC,sBAAsB,EAAE,QAAQ;MAAE,QAAQ,EAAE;IAAO,CAAC,EACrD;MAAC,sBAAsB,EAAE,QAAQ;MAAE,QAAQ,EAAE;IAAI,CAAC,EAClD;MAAC,sBAAsB,EAAE,UAAU;MAAE,QAAQ,EAAE;IAAI,CAAC,CACrD,EACD,CACE;MAAC,sBAAsB,EAAE,QAAQ;MAAE,QAAQ,EAAE;IAAO,CAAC,EACrD;MAAC,sBAAsB,EAAE,QAAQ;MAAE,QAAQ,EAAE;IAAI,CAAC,EAClD;MAAC,sBAAsB,EAAE,UAAU;MAAE,QAAQ,EAAE;IAAI,CAAC,CACrD,CACF,CAAC;IAEF,MAAMW,aAAa,GAAGA,CAAA,KAAM;MAC1B,MAAMC,EAAE,GAAGN,IAAI,CAACO,KAAK,CAACC,QAAQ,CAAC,CAAC;MAChC,MAAMC,EAAE,GAAGT,IAAI,CAACO,KAAK,CAACG,aAAa,CAACC,kBAAkB,CAACC,KAAK,CAAC;MAC7DZ,IAAI,CAACO,KAAK,CAACM,iBAAiB,CAACP,EAAE,EAAEG,EAAE,EAAE,gBAAgB,CAAC;MACtDT,IAAI,CAACc,SAAS,CAACR,EAAE,EAAE,sBAAsB,CAAC;IAC5C,CAAC;IAED,IAAIS,OAAO;IAEX,MAAMC,WAAW,GAAGA,CAAA,KAAM;MACxB,IAAID,OAAO,EAAE;QACX,MAAME,GAAG,GAAG,IAAIC,KAAK,CAAC,CAAC;QACvB,MAAMC,GAAG,GAAGJ,OAAO,CAACK,UAAU,CAAC;UAC7BC,UAAU,EAAE,CAAC;UACbC,eAAe,EAAE;QACnB,CAAC,CAAC;QAEFL,GAAG,CAACM,GAAG,GAAGJ,GAAG;QACb;QACA,MAAMK,CAAC,GAAGC,QAAQ,CAACC,aAAa,CAAC,GAAG,CAAC;QACrCF,CAAC,CAACG,QAAQ,GAAG,WAAW;QACxBH,CAAC,CAACI,IAAI,GAAGT,GAAG;QACZK,CAAC,CAACK,KAAK,CAAC,CAAC;MACX;IACF,CAAC;;IAED;IACA;IACA;IACA;IACA;;IAEA,MAAMC,aAAa,GAAGnC,QAAQ,CAAC,MAAM;MACnC,IAAI,CAACS,UAAU,CAACQ,KAAK,CAACmB,MAAM,IAAI,CAAC3B,UAAU,CAACQ,KAAK,CAAC,CAAC,CAAC,CAACmB,MAAM,EAAE,OAAO,EAAE;MACtE,MAAMC,WAAW,GAAG,IAAIC,GAAG,CAAC,CAAC;MAC7B7B,UAAU,CAACQ,KAAK,CAACsB,OAAO,CAACC,QAAQ,IAAI;QACnCA,QAAQ,CAACD,OAAO,CAACE,IAAI,IAAI;UACvBJ,WAAW,CAACK,GAAG,CAACD,IAAI,CAACE,oBAAoB,CAAC;QAC5C,CAAC,CAAC;MACJ,CAAC,CAAC;MACF,OAAOC,KAAK,CAACC,IAAI,CAACR,WAAW,CAAC,CAACS,GAAG,CAACC,QAAQ,KAAK;QAC9CC,IAAI,EAAED,QAAQ;QACdE,WAAW,EAAEF;MACf,CAAC,CAAC,CAAC;IACL,CAAC,CAAC;IAEF9C,SAAS,CAAC,MAAM;MACd,IAAIkC,aAAa,CAAClB,KAAK,CAACmB,MAAM,GAAG,CAAC,EAAE;QAClC9B,eAAe,CAACW,KAAK,GAAGkB,aAAa,CAAClB,KAAK,CAAC,CAAC,CAAC,CAAC+B,IAAI;QACnDzC,iBAAiB,CAACU,KAAK,GAAGkB,aAAa,CAAClB,KAAK,CAACmB,MAAM,GAAG,CAAC,GAAGD,aAAa,CAAClB,KAAK,CAAC,CAAC,CAAC,CAAC+B,IAAI,GAAGb,aAAa,CAAClB,KAAK,CAAC,CAAC,CAAC,CAAC+B,IAAI;MACtH;IACF,CAAC,CAAC;IAEF,MAAMhC,kBAAkB,GAAGhB,QAAQ,CAAC,MAAM;MACxC,IAAIkD,SAAS,GAAG,EAAE;MAClB,IAAI1C,cAAc,CAACS,KAAK,IAAIkC,MAAM,CAACC,IAAI,CAAC5C,cAAc,CAACS,KAAK,CAAC,CAACmB,MAAM,EAAE;QAClEe,MAAM,CAACC,IAAI,CAAC5C,cAAc,CAACS,KAAK,CAAC,CAACsB,OAAO,CAACc,OAAO,IAAI;UACrDF,MAAM,CAACC,IAAI,CAAC5C,cAAc,CAACS,KAAK,CAACoC,OAAO,CAAC,CAAC,CAACd,OAAO,CAACe,SAAS,IAAI;YAC5DJ,SAAS,CAACK,IAAI,CAAC;cACfF,OAAO,EAAEG,cAAc,CAACH,OAAO,CAAC;cAChCC,SAAS,EAAEE,cAAc,CAACF,SAAS,CAAC;cACpCG,KAAK,EAAEjD,cAAc,CAACS,KAAK,CAACoC,OAAO,CAAC,CAACC,SAAS;YAC9C,CAAC,CAAC;UACN,CAAC,CAAC;QACF,CAAC,CAAC;MACN;MACA,OAAOJ,SAAS;IAClB,CAAC,CAAC;IAEF,MAAMQ,eAAe,GAAGA,CAAA,KAAM;MAC5B,MAAMC,0BAA0B,GAAGrD,eAAe,CAACW,KAAK;MACxD,MAAM2C,4BAA4B,GAAGrD,iBAAiB,CAACU,KAAK;MAC5D,IAAI4C,WAAW,GAAG,IAAIC,GAAG,CAAC,CAAC;MAE3BrD,UAAU,CAACQ,KAAK,CAACsB,OAAO,CAACC,QAAQ,IAAI;QACnC,MAAMuB,eAAe,GAAGvB,QAAQ,CAACwB,IAAI,CAACvB,IAAI,IAAIA,IAAI,CAACE,oBAAoB,KAAKgB,0BAA0B,CAAC,CAACM,MAAM;QAC9G,MAAMC,iBAAiB,GAAG1B,QAAQ,CAACwB,IAAI,CAACvB,IAAI,IAAIA,IAAI,CAACE,oBAAoB,KAAKiB,4BAA4B,CAAC,CAACK,MAAM;QAElH,IAAI,CAACJ,WAAW,CAACM,GAAG,CAACJ,eAAe,CAAC,EAAE;UACrCF,WAAW,CAACO,GAAG,CAACL,eAAe,EAAE,CAAC,CAAC,CAAC;QACtC;QAEA,MAAMM,eAAe,GAAGR,WAAW,CAACS,GAAG,CAACP,eAAe,CAAC;QACxDM,eAAe,CAACH,iBAAiB,CAAC,GAAG,CAACG,eAAe,CAACH,iBAAiB,CAAC,IAAI,CAAC,IAAI,CAAC;MACpF,CAAC,CAAC;MAEF,IAAIK,MAAM,GAAG,CAAC,CAAC;MACfV,WAAW,CAACtB,OAAO,CAAC,CAACiC,MAAM,EAAEC,aAAa,KAAK;QAC7CF,MAAM,CAACE,aAAa,CAAC,GAAGD,MAAM;MAChC,CAAC,CAAC;MAEFhE,cAAc,CAACS,KAAK,GAAGsD,MAAM;;MAE7B;MACApE,QAAQ,CAAC,MAAM;QACb,IAAIgD,MAAM,CAACC,IAAI,CAAC5C,cAAc,CAACS,KAAK,CAAC,CAACmB,MAAM,GAAG,CAAC,EAAE;UAChDsC,QAAQ,CAAC,CAAC;QACZ;MACF,CAAC,CAAC;IACJ,CAAC;IAED,MAAMlB,cAAc,GAAImB,YAAY,IAAK;MACvC,MAAM5B,QAAQ,GAAGZ,aAAa,CAAClB,KAAK,CAAC+C,IAAI,CAACY,CAAC,IAAIA,CAAC,CAAC5B,IAAI,KAAK2B,YAAY,CAAC;MACvE,OAAO5B,QAAQ,GAAGA,QAAQ,CAACE,WAAW,GAAG0B,YAAY;IACvD,CAAC;IAED,MAAMD,QAAQ,GAAGA,CAAA,KAAM;MACrBvE,QAAQ,CAAC,MAAM;QACb,MAAM0E,QAAQ,GAAG/C,QAAQ,CAACgD,cAAc,CAAC,OAAO,CAAC;QACjD,IAAID,QAAQ,IAAIrE,cAAc,CAACS,KAAK,EAAE;UACpCG,OAAO,GAAGhB,OAAO,CAAC2E,IAAI,CAACF,QAAQ,CAAC;UAChC,MAAMG,UAAU,GAAG;YAAEC,CAAC,EAAE,EAAE;YAAEC,CAAC,EAAE,EAAE;YAAEC,CAAC,EAAE;UAAG,CAAC;UAE1C,IAAIC,IAAI,GAAG,EAAE;UACb,IAAIC,KAAK,GAAG,EAAE;UACd,IAAIC,KAAK,GAAG,EAAE;UACdnC,MAAM,CAACC,IAAI,CAAC5C,cAAc,CAACS,KAAK,CAAC,CAACsB,OAAO,CAAC0C,CAAC,IAAI;YAC7C9B,MAAM,CAACC,IAAI,CAAC5C,cAAc,CAACS,KAAK,CAACgE,CAAC,CAAC,CAAC,CAAC1C,OAAO,CAAC2C,CAAC,IAAI;cAChDE,IAAI,CAAC7B,IAAI,CAAC,CAAC0B,CAAC,EAAEC,CAAC,EAAE1E,cAAc,CAACS,KAAK,CAACgE,CAAC,CAAC,CAACC,CAAC,CAAC,CAAC,CAAC;cAC7C,IAAIG,KAAK,CAACE,OAAO,CAACN,CAAC,CAAC,KAAK,CAAC,CAAC,EAAEI,KAAK,CAAC9B,IAAI,CAAC0B,CAAC,CAAC;cAC1C,IAAIK,KAAK,CAACC,OAAO,CAACL,CAAC,CAAC,KAAK,CAAC,CAAC,EAAEI,KAAK,CAAC/B,IAAI,CAAC2B,CAAC,CAAC;YAC5C,CAAC,CAAC;UACJ,CAAC,CAAC;UAEFF,UAAU,CAACC,CAAC,GAAG3E,eAAe,CAACW,KAAK;UACpC+D,UAAU,CAACE,CAAC,GAAG3E,iBAAiB,CAACU,KAAK;UACtC+D,UAAU,CAACG,CAAC,GAAG,IAAI;UAEnB,IAAIK,MAAM,GAAG;YACXC,OAAO,EAAE,CAAC,CAAC;YACXC,SAAS,EAAE;cACTC,GAAG,EAAE,EAAE;cACPC,OAAO,EAAE;gBACPC,KAAK,EAAE,CAAC,SAAS,EAAE,SAAS,EAAE,SAAS,EAAE,SAAS,EAAE,SAAS,EAAE,SAAS,EAAE,SAAS,EAAE,SAAS,EAAE,SAAS,EAAE,SAAS,EAAE,SAAS;cACjI;YACF,CAAC;YACDC,OAAO,EAAE;cACPC,IAAI,EAAE,UAAU;cAChBX,IAAI,EAAEC,KAAK;cACXrC,IAAI,EAAEgC,UAAU,CAACC,CAAC;cAClBe,SAAS,EAAE;gBACTC,SAAS,EAAE,SAAAA,CAAUhF,KAAK,EAAE;kBAC1B,OAAOA,KAAK;gBACd;cACF;YACF,CAAC;YACDiF,OAAO,EAAE;cACPH,IAAI,EAAE,UAAU;cAChBX,IAAI,EAAEE,KAAK;cACXtC,IAAI,EAAEgC,UAAU,CAACE;YACnB,CAAC;YACDiB,OAAO,EAAE;cACPJ,IAAI,EAAE,OAAO;cACb/C,IAAI,EAAEgC,UAAU,CAACG;YACnB,CAAC;YACDiB,MAAM,EAAE;cACNC,QAAQ,EAAE,GAAG;cACbC,QAAQ,EAAE,EAAE;cACZC,WAAW,EAAE;gBACX;cAAA,CACD;cACDC,KAAK,EAAE;gBACLC,IAAI,EAAE;kBACJC,SAAS,EAAE,GAAG;kBACdC,MAAM,EAAE;gBACV,CAAC;gBACDC,OAAO,EAAE;kBACPF,SAAS,EAAE;gBACb;cACF;YACF,CAAC;YACDG,MAAM,EAAE,CAAC;cACPd,IAAI,EAAE,OAAO;cACbX,IAAI,EAAEA,IAAI,CAACtC,GAAG,CAAC,UAAUL,IAAI,EAAE;gBAC7B,OAAO;kBACLxB,KAAK,EAAE,CAACwB,IAAI,CAAC,CAAC,CAAC,EAAEA,IAAI,CAAC,CAAC,CAAC,EAAEA,IAAI,CAAC,CAAC,CAAC;gBACnC,CAAC;cACH,CAAC,CAAC;cACFqE,OAAO,EAAE,SAAS;cAClBC,KAAK,EAAE;gBACLC,SAAS,EAAE;kBACTC,QAAQ,EAAE,EAAE;kBACZC,WAAW,EAAE;gBACf;cACF,CAAC;cACDC,QAAQ,EAAE;gBACRJ,KAAK,EAAE;kBACLC,SAAS,EAAE;oBACTC,QAAQ,EAAE,EAAE;oBACZpB,KAAK,EAAE;kBACT;gBACF,CAAC;gBACDuB,SAAS,EAAE;kBACTvB,KAAK,EAAE;gBACT;cACF;YACF,CAAC;UACH,CAAC;UACDzE,OAAO,CAACiG,SAAS,CAAC7B,MAAM,CAAC;QAC3B;MACF,CAAC,CAAC;IACJ,CAAC;IAEDtF,KAAK,CAACM,cAAc,EAAG8G,MAAM,IAAK;MAChC,IAAIA,MAAM,EAAE;QACV5C,QAAQ,CAAC,CAAC;MACZ;IACF,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}