{"ast":null,"code":"// TODO orthographic camera\nimport * as echarts from 'echarts/lib/echarts';\nimport { createTextStyle } from 'echarts/lib/label/labelStyle';\nimport graphicGL from '../../util/graphicGL';\nimport OrbitControl from '../../util/OrbitControl';\nimport Lines3DGeometry from '../../util/geometry/Lines3D';\nimport retrieve from '../../util/retrieve';\nvar firstNotNull = retrieve.firstNotNull;\nimport ZRTextureAtlasSurface from '../../util/ZRTextureAtlasSurface';\nimport SceneHelper from '../common/SceneHelper';\nimport Grid3DFace from './Grid3DFace';\nimport Grid3DAxis from './Grid3DAxis';\nimport LabelsMesh from '../../util/mesh/LabelsMesh';\nimport lines3DGLSL from '../../util/shader/lines3D.glsl.js';\ngraphicGL.Shader.import(lines3DGLSL);\nvar dimIndicesMap = {\n  // Left to right\n  x: 0,\n  // Far to near\n  y: 2,\n  // Bottom to up\n  z: 1\n};\nexport default echarts.ComponentView.extend({\n  type: 'grid3D',\n  __ecgl__: true,\n  init: function (ecModel, api) {\n    var FACES = [\n    // planeDim0, planeDim1, offsetDim, dir on dim3 axis(gl), plane.\n    ['y', 'z', 'x', -1, 'left'], ['y', 'z', 'x', 1, 'right'], ['x', 'y', 'z', -1, 'bottom'], ['x', 'y', 'z', 1, 'top'], ['x', 'z', 'y', -1, 'far'], ['x', 'z', 'y', 1, 'near']];\n    var DIMS = ['x', 'y', 'z'];\n    var quadsMaterial = new graphicGL.Material({\n      // transparent: true,\n      shader: graphicGL.createShader('ecgl.color'),\n      depthMask: false,\n      transparent: true\n    });\n    var linesMaterial = new graphicGL.Material({\n      // transparent: true,\n      shader: graphicGL.createShader('ecgl.meshLines3D'),\n      depthMask: false,\n      transparent: true\n    });\n    quadsMaterial.define('fragment', 'DOUBLE_SIDED');\n    quadsMaterial.define('both', 'VERTEX_COLOR');\n    this.groupGL = new graphicGL.Node();\n    this._control = new OrbitControl({\n      zr: api.getZr()\n    });\n    this._control.init(); // Save mesh and other infos for each face.\n\n    this._faces = FACES.map(function (faceInfo) {\n      var face = new Grid3DFace(faceInfo, linesMaterial, quadsMaterial);\n      this.groupGL.add(face.rootNode);\n      return face;\n    }, this); // Save mesh and other infos for each axis.\n\n    this._axes = DIMS.map(function (dim) {\n      var axis = new Grid3DAxis(dim, linesMaterial);\n      this.groupGL.add(axis.rootNode);\n      return axis;\n    }, this);\n    var dpr = api.getDevicePixelRatio(); // Texture surface for label.\n\n    this._axisLabelSurface = new ZRTextureAtlasSurface({\n      width: 256,\n      height: 256,\n      devicePixelRatio: dpr\n    });\n    this._axisLabelSurface.onupdate = function () {\n      api.getZr().refresh();\n    };\n    this._axisPointerLineMesh = new graphicGL.Mesh({\n      geometry: new Lines3DGeometry({\n        useNativeLine: false\n      }),\n      material: linesMaterial,\n      castShadow: false,\n      // PENDING\n      ignorePicking: true,\n      renderOrder: 3\n    });\n    this.groupGL.add(this._axisPointerLineMesh);\n    this._axisPointerLabelsSurface = new ZRTextureAtlasSurface({\n      width: 128,\n      height: 128,\n      devicePixelRatio: dpr\n    });\n    this._axisPointerLabelsMesh = new LabelsMesh({\n      ignorePicking: true,\n      renderOrder: 4,\n      castShadow: false\n    });\n    this._axisPointerLabelsMesh.material.set('textureAtlas', this._axisPointerLabelsSurface.getTexture());\n    this.groupGL.add(this._axisPointerLabelsMesh);\n    this._lightRoot = new graphicGL.Node();\n    this._sceneHelper = new SceneHelper();\n    this._sceneHelper.initLight(this._lightRoot);\n  },\n  render: function (grid3DModel, ecModel, api) {\n    this._model = grid3DModel;\n    this._api = api;\n    var cartesian = grid3DModel.coordinateSystem; // Always have light.\n\n    cartesian.viewGL.add(this._lightRoot);\n    if (grid3DModel.get('show')) {\n      cartesian.viewGL.add(this.groupGL);\n    } else {\n      cartesian.viewGL.remove(this.groupGL);\n    } // cartesian.viewGL.setCameraType(grid3DModel.get('viewControl.projection'));\n\n    var control = this._control;\n    control.setViewGL(cartesian.viewGL);\n    var viewControlModel = grid3DModel.getModel('viewControl');\n    control.setFromViewControlModel(viewControlModel, 0);\n    this._axisLabelSurface.clear();\n    control.off('update');\n    if (grid3DModel.get('show')) {\n      this._faces.forEach(function (face) {\n        face.update(grid3DModel, ecModel, api);\n      }, this);\n      this._axes.forEach(function (axis) {\n        axis.update(grid3DModel, this._axisLabelSurface, api);\n      }, this);\n    }\n    control.on('update', this._onCameraChange.bind(this, grid3DModel, api), this);\n    this._sceneHelper.setScene(cartesian.viewGL.scene);\n    this._sceneHelper.updateLight(grid3DModel); // Set post effect\n\n    cartesian.viewGL.setPostEffect(grid3DModel.getModel('postEffect'), api);\n    cartesian.viewGL.setTemporalSuperSampling(grid3DModel.getModel('temporalSuperSampling'));\n    this._initMouseHandler(grid3DModel);\n  },\n  afterRender: function (grid3DModel, ecModel, api, layerGL) {\n    // Create ambient cubemap after render because we need to know the renderer.\n    // TODO\n    var renderer = layerGL.renderer;\n    this._sceneHelper.updateAmbientCubemap(renderer, grid3DModel, api);\n    this._sceneHelper.updateSkybox(renderer, grid3DModel, api);\n  },\n  /**\n   * showAxisPointer will be triggered by action.\n   */\n  showAxisPointer: function (grid3dModel, ecModel, api, payload) {\n    this._doShowAxisPointer();\n    this._updateAxisPointer(payload.value);\n  },\n  /**\n   * hideAxisPointer will be triggered by action.\n   */\n  hideAxisPointer: function (grid3dModel, ecModel, api, payload) {\n    this._doHideAxisPointer();\n  },\n  _initMouseHandler: function (grid3DModel) {\n    var cartesian = grid3DModel.coordinateSystem;\n    var viewGL = cartesian.viewGL; // TODO xAxis3D.axisPointer.show ?\n\n    if (grid3DModel.get('show') && grid3DModel.get('axisPointer.show')) {\n      viewGL.on('mousemove', this._updateAxisPointerOnMousePosition, this);\n    } else {\n      viewGL.off('mousemove', this._updateAxisPointerOnMousePosition);\n    }\n  },\n  /**\n   * Try find and show axisPointer on the intersect point\n   * of mouse ray with grid plane.\n   */\n  _updateAxisPointerOnMousePosition: function (e) {\n    // Ignore if mouse is on the element.\n    if (e.target) {\n      return;\n    }\n    var grid3DModel = this._model;\n    var cartesian = grid3DModel.coordinateSystem;\n    var viewGL = cartesian.viewGL;\n    var ray = viewGL.castRay(e.offsetX, e.offsetY, new graphicGL.Ray());\n    var nearestIntersectPoint;\n    for (var i = 0; i < this._faces.length; i++) {\n      var face = this._faces[i];\n      if (face.rootNode.invisible) {\n        continue;\n      } // Plane is not face the camera. flip it\n\n      if (face.plane.normal.dot(viewGL.camera.worldTransform.z) < 0) {\n        face.plane.normal.negate();\n      }\n      var point = ray.intersectPlane(face.plane);\n      if (!point) {\n        continue;\n      }\n      var axis0 = cartesian.getAxis(face.faceInfo[0]);\n      var axis1 = cartesian.getAxis(face.faceInfo[1]);\n      var idx0 = dimIndicesMap[face.faceInfo[0]];\n      var idx1 = dimIndicesMap[face.faceInfo[1]];\n      if (axis0.contain(point.array[idx0]) && axis1.contain(point.array[idx1])) {\n        nearestIntersectPoint = point;\n      }\n    }\n    if (nearestIntersectPoint) {\n      var data = cartesian.pointToData(nearestIntersectPoint.array, [], true);\n      this._updateAxisPointer(data);\n      this._doShowAxisPointer();\n    } else {\n      this._doHideAxisPointer();\n    }\n  },\n  _onCameraChange: function (grid3DModel, api) {\n    if (grid3DModel.get('show')) {\n      this._updateFaceVisibility();\n      this._updateAxisLinePosition();\n    }\n    var control = this._control;\n    api.dispatchAction({\n      type: 'grid3DChangeCamera',\n      alpha: control.getAlpha(),\n      beta: control.getBeta(),\n      distance: control.getDistance(),\n      center: control.getCenter(),\n      from: this.uid,\n      grid3DId: grid3DModel.id\n    });\n  },\n  /**\n   * Update visibility of each face when camera view changed, front face will be invisible.\n   * @private\n   */\n  _updateFaceVisibility: function () {\n    var camera = this._control.getCamera();\n    var viewSpacePos = new graphicGL.Vector3();\n    camera.update();\n    for (var idx = 0; idx < this._faces.length / 2; idx++) {\n      var depths = [];\n      for (var k = 0; k < 2; k++) {\n        var face = this._faces[idx * 2 + k];\n        face.rootNode.getWorldPosition(viewSpacePos);\n        viewSpacePos.transformMat4(camera.viewMatrix);\n        depths[k] = viewSpacePos.z;\n      } // Set the front face invisible\n\n      var frontIndex = depths[0] > depths[1] ? 0 : 1;\n      var frontFace = this._faces[idx * 2 + frontIndex];\n      var backFace = this._faces[idx * 2 + 1 - frontIndex]; // Update rotation.\n\n      frontFace.rootNode.invisible = true;\n      backFace.rootNode.invisible = false;\n    }\n  },\n  /**\n   * Update axis line position when camera view changed.\n   * @private\n   */\n  _updateAxisLinePosition: function () {\n    // Put xAxis, yAxis on x, y visible plane.\n    // Put zAxis on the left.\n    // TODO\n    var cartesian = this._model.coordinateSystem;\n    var xAxis = cartesian.getAxis('x');\n    var yAxis = cartesian.getAxis('y');\n    var zAxis = cartesian.getAxis('z');\n    var top = zAxis.getExtentMax();\n    var bottom = zAxis.getExtentMin();\n    var left = xAxis.getExtentMin();\n    var right = xAxis.getExtentMax();\n    var near = yAxis.getExtentMax();\n    var far = yAxis.getExtentMin();\n    var xAxisNode = this._axes[0].rootNode;\n    var yAxisNode = this._axes[1].rootNode;\n    var zAxisNode = this._axes[2].rootNode;\n    var faces = this._faces; // Notice: in cartesian up axis is z, but in webgl up axis is y.\n\n    var xAxisZOffset = faces[4].rootNode.invisible ? far : near;\n    var xAxisYOffset = faces[2].rootNode.invisible ? top : bottom;\n    var yAxisXOffset = faces[0].rootNode.invisible ? left : right;\n    var yAxisYOffset = faces[2].rootNode.invisible ? top : bottom;\n    var zAxisXOffset = faces[0].rootNode.invisible ? right : left;\n    var zAxisZOffset = faces[4].rootNode.invisible ? far : near;\n    xAxisNode.rotation.identity();\n    yAxisNode.rotation.identity();\n    zAxisNode.rotation.identity();\n    if (faces[4].rootNode.invisible) {\n      this._axes[0].flipped = true;\n      xAxisNode.rotation.rotateX(Math.PI);\n    }\n    if (faces[0].rootNode.invisible) {\n      this._axes[1].flipped = true;\n      yAxisNode.rotation.rotateZ(Math.PI);\n    }\n    if (faces[4].rootNode.invisible) {\n      this._axes[2].flipped = true;\n      zAxisNode.rotation.rotateY(Math.PI);\n    }\n    xAxisNode.position.set(0, xAxisYOffset, xAxisZOffset);\n    yAxisNode.position.set(yAxisXOffset, yAxisYOffset, 0); // Actually z\n\n    zAxisNode.position.set(zAxisXOffset, 0, zAxisZOffset); // Actually y\n\n    xAxisNode.update();\n    yAxisNode.update();\n    zAxisNode.update();\n    this._updateAxisLabelAlign();\n  },\n  /**\n   * Update label align on axis when axisLine position changed.\n   * @private\n   */\n  _updateAxisLabelAlign: function () {\n    // var cartesian = this._model.coordinateSystem;\n    var camera = this._control.getCamera();\n    var coords = [new graphicGL.Vector4(), new graphicGL.Vector4()];\n    var center = new graphicGL.Vector4();\n    this.groupGL.getWorldPosition(center);\n    center.w = 1.0;\n    center.transformMat4(camera.viewMatrix).transformMat4(camera.projectionMatrix);\n    center.x /= center.w;\n    center.y /= center.w;\n    this._axes.forEach(function (axisInfo) {\n      var lineCoords = axisInfo.axisLineCoords;\n      var labelGeo = axisInfo.labelsMesh.geometry;\n      for (var i = 0; i < coords.length; i++) {\n        coords[i].setArray(lineCoords[i]);\n        coords[i].w = 1.0;\n        coords[i].transformMat4(axisInfo.rootNode.worldTransform).transformMat4(camera.viewMatrix).transformMat4(camera.projectionMatrix);\n        coords[i].x /= coords[i].w;\n        coords[i].y /= coords[i].w;\n      }\n      var dx = coords[1].x - coords[0].x;\n      var dy = coords[1].y - coords[0].y;\n      var cx = (coords[1].x + coords[0].x) / 2;\n      var cy = (coords[1].y + coords[0].y) / 2;\n      var textAlign;\n      var verticalAlign;\n      if (Math.abs(dy / dx) < 0.5) {\n        textAlign = 'center';\n        verticalAlign = cy > center.y ? 'bottom' : 'top';\n      } else {\n        verticalAlign = 'middle';\n        textAlign = cx > center.x ? 'left' : 'right';\n      } // axis labels\n\n      axisInfo.setSpriteAlign(textAlign, verticalAlign, this._api);\n    }, this);\n  },\n  _doShowAxisPointer: function () {\n    if (!this._axisPointerLineMesh.invisible) {\n      return;\n    }\n    this._axisPointerLineMesh.invisible = false;\n    this._axisPointerLabelsMesh.invisible = false;\n    this._api.getZr().refresh();\n  },\n  _doHideAxisPointer: function () {\n    if (this._axisPointerLineMesh.invisible) {\n      return;\n    }\n    this._axisPointerLineMesh.invisible = true;\n    this._axisPointerLabelsMesh.invisible = true;\n    this._api.getZr().refresh();\n  },\n  /**\n   * @private updateAxisPointer.\n   */\n  _updateAxisPointer: function (data) {\n    var cartesian = this._model.coordinateSystem;\n    var point = cartesian.dataToPoint(data);\n    var axisPointerLineMesh = this._axisPointerLineMesh;\n    var linesGeo = axisPointerLineMesh.geometry;\n    var axisPointerParentModel = this._model.getModel('axisPointer');\n    var dpr = this._api.getDevicePixelRatio();\n    linesGeo.convertToDynamicArray(true);\n    function ifShowAxisPointer(axis) {\n      return retrieve.firstNotNull(axis.model.get('axisPointer.show'), axisPointerParentModel.get('show'));\n    }\n    function getAxisColorAndLineWidth(axis) {\n      var axisPointerModel = axis.model.getModel('axisPointer', axisPointerParentModel);\n      var lineStyleModel = axisPointerModel.getModel('lineStyle');\n      var color = graphicGL.parseColor(lineStyleModel.get('color'));\n      var lineWidth = firstNotNull(lineStyleModel.get('width'), 1);\n      var opacity = firstNotNull(lineStyleModel.get('opacity'), 1);\n      color[3] *= opacity;\n      return {\n        color: color,\n        lineWidth: lineWidth\n      };\n    }\n    for (var k = 0; k < this._faces.length; k++) {\n      var face = this._faces[k];\n      if (face.rootNode.invisible) {\n        continue;\n      }\n      var faceInfo = face.faceInfo;\n      var otherCoord = faceInfo[3] < 0 ? cartesian.getAxis(faceInfo[2]).getExtentMin() : cartesian.getAxis(faceInfo[2]).getExtentMax();\n      var otherDimIdx = dimIndicesMap[faceInfo[2]]; // Line on face.\n\n      for (var i = 0; i < 2; i++) {\n        var dim = faceInfo[i];\n        var faceOtherDim = faceInfo[1 - i];\n        var axis = cartesian.getAxis(dim);\n        var faceOtherAxis = cartesian.getAxis(faceOtherDim);\n        if (!ifShowAxisPointer(axis)) {\n          continue;\n        }\n        var p0 = [0, 0, 0];\n        var p1 = [0, 0, 0];\n        var dimIdx = dimIndicesMap[dim];\n        var faceOtherDimIdx = dimIndicesMap[faceOtherDim];\n        p0[dimIdx] = p1[dimIdx] = point[dimIdx];\n        p0[otherDimIdx] = p1[otherDimIdx] = otherCoord;\n        p0[faceOtherDimIdx] = faceOtherAxis.getExtentMin();\n        p1[faceOtherDimIdx] = faceOtherAxis.getExtentMax();\n        var colorAndLineWidth = getAxisColorAndLineWidth(axis);\n        linesGeo.addLine(p0, p1, colorAndLineWidth.color, colorAndLineWidth.lineWidth * dpr);\n      } // Project line.\n\n      if (ifShowAxisPointer(cartesian.getAxis(faceInfo[2]))) {\n        var p0 = point.slice();\n        var p1 = point.slice();\n        p1[otherDimIdx] = otherCoord;\n        var colorAndLineWidth = getAxisColorAndLineWidth(cartesian.getAxis(faceInfo[2]));\n        linesGeo.addLine(p0, p1, colorAndLineWidth.color, colorAndLineWidth.lineWidth * dpr);\n      }\n    }\n    linesGeo.convertToTypedArray();\n    this._updateAxisPointerLabelsMesh(data);\n    this._api.getZr().refresh();\n  },\n  _updateAxisPointerLabelsMesh: function (data) {\n    var grid3dModel = this._model;\n    var axisPointerLabelsMesh = this._axisPointerLabelsMesh;\n    var axisPointerLabelsSurface = this._axisPointerLabelsSurface;\n    var cartesian = grid3dModel.coordinateSystem;\n    var axisPointerParentModel = grid3dModel.getModel('axisPointer');\n    axisPointerLabelsMesh.geometry.convertToDynamicArray(true);\n    axisPointerLabelsSurface.clear();\n    var otherDim = {\n      x: 'y',\n      y: 'x',\n      z: 'y'\n    };\n    this._axes.forEach(function (axisInfo, idx) {\n      var axis = cartesian.getAxis(axisInfo.dim);\n      var axisModel = axis.model;\n      var axisPointerModel = axisModel.getModel('axisPointer', axisPointerParentModel);\n      var labelModel = axisPointerModel.getModel('label');\n      var lineColor = axisPointerModel.get('lineStyle.color');\n      if (!labelModel.get('show') || !axisPointerModel.get('show')) {\n        return;\n      }\n      var val = data[idx];\n      var formatter = labelModel.get('formatter');\n      var text = axis.scale.getLabel({\n        value: val\n      });\n      if (formatter != null) {\n        text = formatter(text, data);\n      } else {\n        if (axis.scale.type === 'interval' || axis.scale.type === 'log') {\n          var precision = echarts.number.getPrecisionSafe(axis.scale.getTicks()[0]);\n          text = val.toFixed(precision + 2);\n        }\n      }\n      var labelColor = labelModel.get('color');\n      var textEl = new echarts.graphic.Text({\n        style: createTextStyle(labelModel, {\n          text: text,\n          fill: labelColor || lineColor,\n          align: 'left',\n          verticalAlign: 'top'\n        })\n      });\n      var coords = axisPointerLabelsSurface.add(textEl);\n      var rect = textEl.getBoundingRect();\n      var dpr = this._api.getDevicePixelRatio();\n      var pos = axisInfo.rootNode.position.toArray();\n      var otherIdx = dimIndicesMap[otherDim[axisInfo.dim]];\n      pos[otherIdx] += (axisInfo.flipped ? -1 : 1) * labelModel.get('margin');\n      pos[dimIndicesMap[axisInfo.dim]] = axis.dataToCoord(data[idx]);\n      axisPointerLabelsMesh.geometry.addSprite(pos, [rect.width * dpr, rect.height * dpr], coords, axisInfo.textAlign, axisInfo.textVerticalAlign);\n    }, this);\n    axisPointerLabelsSurface.getZr().refreshImmediately();\n    axisPointerLabelsMesh.material.set('uvScale', axisPointerLabelsSurface.getCoordsScale());\n    axisPointerLabelsMesh.geometry.convertToTypedArray();\n  },\n  dispose: function () {\n    this.groupGL.removeAll();\n    this._control.dispose();\n    this._axisLabelSurface.dispose();\n    this._axisPointerLabelsSurface.dispose();\n  }\n});","map":{"version":3,"names":["echarts","createTextStyle","graphicGL","OrbitControl","Lines3DGeometry","retrieve","firstNotNull","ZRTextureAtlasSurface","SceneHelper","Grid3DFace","Grid3DAxis","LabelsMesh","lines3DGLSL","Shader","import","dimIndicesMap","x","y","z","ComponentView","extend","type","__ecgl__","init","ecModel","api","FACES","DIMS","quadsMaterial","Material","shader","createShader","depthMask","transparent","linesMaterial","define","groupGL","Node","_control","zr","getZr","_faces","map","faceInfo","face","add","rootNode","_axes","dim","axis","dpr","getDevicePixelRatio","_axisLabelSurface","width","height","devicePixelRatio","onupdate","refresh","_axisPointerLineMesh","Mesh","geometry","useNativeLine","material","castShadow","ignorePicking","renderOrder","_axisPointerLabelsSurface","_axisPointerLabelsMesh","set","getTexture","_lightRoot","_sceneHelper","initLight","render","grid3DModel","_model","_api","cartesian","coordinateSystem","viewGL","get","remove","control","setViewGL","viewControlModel","getModel","setFromViewControlModel","clear","off","forEach","update","on","_onCameraChange","bind","setScene","scene","updateLight","setPostEffect","setTemporalSuperSampling","_initMouseHandler","afterRender","layerGL","renderer","updateAmbientCubemap","updateSkybox","showAxisPointer","grid3dModel","payload","_doShowAxisPointer","_updateAxisPointer","value","hideAxisPointer","_doHideAxisPointer","_updateAxisPointerOnMousePosition","e","target","ray","castRay","offsetX","offsetY","Ray","nearestIntersectPoint","i","length","invisible","plane","normal","dot","camera","worldTransform","negate","point","intersectPlane","axis0","getAxis","axis1","idx0","idx1","contain","array","data","pointToData","_updateFaceVisibility","_updateAxisLinePosition","dispatchAction","alpha","getAlpha","beta","getBeta","distance","getDistance","center","getCenter","from","uid","grid3DId","id","getCamera","viewSpacePos","Vector3","idx","depths","k","getWorldPosition","transformMat4","viewMatrix","frontIndex","frontFace","backFace","xAxis","yAxis","zAxis","top","getExtentMax","bottom","getExtentMin","left","right","near","far","xAxisNode","yAxisNode","zAxisNode","faces","xAxisZOffset","xAxisYOffset","yAxisXOffset","yAxisYOffset","zAxisXOffset","zAxisZOffset","rotation","identity","flipped","rotateX","Math","PI","rotateZ","rotateY","position","_updateAxisLabelAlign","coords","Vector4","w","projectionMatrix","axisInfo","lineCoords","axisLineCoords","labelGeo","labelsMesh","setArray","dx","dy","cx","cy","textAlign","verticalAlign","abs","setSpriteAlign","dataToPoint","axisPointerLineMesh","linesGeo","axisPointerParentModel","convertToDynamicArray","ifShowAxisPointer","model","getAxisColorAndLineWidth","axisPointerModel","lineStyleModel","color","parseColor","lineWidth","opacity","otherCoord","otherDimIdx","faceOtherDim","faceOtherAxis","p0","p1","dimIdx","faceOtherDimIdx","colorAndLineWidth","addLine","slice","convertToTypedArray","_updateAxisPointerLabelsMesh","axisPointerLabelsMesh","axisPointerLabelsSurface","otherDim","axisModel","labelModel","lineColor","val","formatter","text","scale","getLabel","precision","number","getPrecisionSafe","getTicks","toFixed","labelColor","textEl","graphic","Text","style","fill","align","rect","getBoundingRect","pos","toArray","otherIdx","dataToCoord","addSprite","textVerticalAlign","refreshImmediately","getCoordsScale","dispose","removeAll"],"sources":["E:/mytest/node_modules/echarts-gl/lib/component/grid3D/Grid3DView.js"],"sourcesContent":["// TODO orthographic camera\nimport * as echarts from 'echarts/lib/echarts';\nimport { createTextStyle } from 'echarts/lib/label/labelStyle';\nimport graphicGL from '../../util/graphicGL';\nimport OrbitControl from '../../util/OrbitControl';\nimport Lines3DGeometry from '../../util/geometry/Lines3D';\nimport retrieve from '../../util/retrieve';\nvar firstNotNull = retrieve.firstNotNull;\nimport ZRTextureAtlasSurface from '../../util/ZRTextureAtlasSurface';\nimport SceneHelper from '../common/SceneHelper';\nimport Grid3DFace from './Grid3DFace';\nimport Grid3DAxis from './Grid3DAxis';\nimport LabelsMesh from '../../util/mesh/LabelsMesh';\nimport lines3DGLSL from '../../util/shader/lines3D.glsl.js';\ngraphicGL.Shader.import(lines3DGLSL);\nvar dimIndicesMap = {\n  // Left to right\n  x: 0,\n  // Far to near\n  y: 2,\n  // Bottom to up\n  z: 1\n};\nexport default echarts.ComponentView.extend({\n  type: 'grid3D',\n  __ecgl__: true,\n  init: function (ecModel, api) {\n    var FACES = [// planeDim0, planeDim1, offsetDim, dir on dim3 axis(gl), plane.\n    ['y', 'z', 'x', -1, 'left'], ['y', 'z', 'x', 1, 'right'], ['x', 'y', 'z', -1, 'bottom'], ['x', 'y', 'z', 1, 'top'], ['x', 'z', 'y', -1, 'far'], ['x', 'z', 'y', 1, 'near']];\n    var DIMS = ['x', 'y', 'z'];\n    var quadsMaterial = new graphicGL.Material({\n      // transparent: true,\n      shader: graphicGL.createShader('ecgl.color'),\n      depthMask: false,\n      transparent: true\n    });\n    var linesMaterial = new graphicGL.Material({\n      // transparent: true,\n      shader: graphicGL.createShader('ecgl.meshLines3D'),\n      depthMask: false,\n      transparent: true\n    });\n    quadsMaterial.define('fragment', 'DOUBLE_SIDED');\n    quadsMaterial.define('both', 'VERTEX_COLOR');\n    this.groupGL = new graphicGL.Node();\n    this._control = new OrbitControl({\n      zr: api.getZr()\n    });\n\n    this._control.init(); // Save mesh and other infos for each face.\n\n\n    this._faces = FACES.map(function (faceInfo) {\n      var face = new Grid3DFace(faceInfo, linesMaterial, quadsMaterial);\n      this.groupGL.add(face.rootNode);\n      return face;\n    }, this); // Save mesh and other infos for each axis.\n\n    this._axes = DIMS.map(function (dim) {\n      var axis = new Grid3DAxis(dim, linesMaterial);\n      this.groupGL.add(axis.rootNode);\n      return axis;\n    }, this);\n    var dpr = api.getDevicePixelRatio(); // Texture surface for label.\n\n    this._axisLabelSurface = new ZRTextureAtlasSurface({\n      width: 256,\n      height: 256,\n      devicePixelRatio: dpr\n    });\n\n    this._axisLabelSurface.onupdate = function () {\n      api.getZr().refresh();\n    };\n\n    this._axisPointerLineMesh = new graphicGL.Mesh({\n      geometry: new Lines3DGeometry({\n        useNativeLine: false\n      }),\n      material: linesMaterial,\n      castShadow: false,\n      // PENDING\n      ignorePicking: true,\n      renderOrder: 3\n    });\n    this.groupGL.add(this._axisPointerLineMesh);\n    this._axisPointerLabelsSurface = new ZRTextureAtlasSurface({\n      width: 128,\n      height: 128,\n      devicePixelRatio: dpr\n    });\n    this._axisPointerLabelsMesh = new LabelsMesh({\n      ignorePicking: true,\n      renderOrder: 4,\n      castShadow: false\n    });\n\n    this._axisPointerLabelsMesh.material.set('textureAtlas', this._axisPointerLabelsSurface.getTexture());\n\n    this.groupGL.add(this._axisPointerLabelsMesh);\n    this._lightRoot = new graphicGL.Node();\n    this._sceneHelper = new SceneHelper();\n\n    this._sceneHelper.initLight(this._lightRoot);\n  },\n  render: function (grid3DModel, ecModel, api) {\n    this._model = grid3DModel;\n    this._api = api;\n    var cartesian = grid3DModel.coordinateSystem; // Always have light.\n\n    cartesian.viewGL.add(this._lightRoot);\n\n    if (grid3DModel.get('show')) {\n      cartesian.viewGL.add(this.groupGL);\n    } else {\n      cartesian.viewGL.remove(this.groupGL);\n    } // cartesian.viewGL.setCameraType(grid3DModel.get('viewControl.projection'));\n\n\n    var control = this._control;\n    control.setViewGL(cartesian.viewGL);\n    var viewControlModel = grid3DModel.getModel('viewControl');\n    control.setFromViewControlModel(viewControlModel, 0);\n\n    this._axisLabelSurface.clear();\n\n    control.off('update');\n\n    if (grid3DModel.get('show')) {\n      this._faces.forEach(function (face) {\n        face.update(grid3DModel, ecModel, api);\n      }, this);\n\n      this._axes.forEach(function (axis) {\n        axis.update(grid3DModel, this._axisLabelSurface, api);\n      }, this);\n    }\n\n    control.on('update', this._onCameraChange.bind(this, grid3DModel, api), this);\n\n    this._sceneHelper.setScene(cartesian.viewGL.scene);\n\n    this._sceneHelper.updateLight(grid3DModel); // Set post effect\n\n\n    cartesian.viewGL.setPostEffect(grid3DModel.getModel('postEffect'), api);\n    cartesian.viewGL.setTemporalSuperSampling(grid3DModel.getModel('temporalSuperSampling'));\n\n    this._initMouseHandler(grid3DModel);\n  },\n  afterRender: function (grid3DModel, ecModel, api, layerGL) {\n    // Create ambient cubemap after render because we need to know the renderer.\n    // TODO\n    var renderer = layerGL.renderer;\n\n    this._sceneHelper.updateAmbientCubemap(renderer, grid3DModel, api);\n\n    this._sceneHelper.updateSkybox(renderer, grid3DModel, api);\n  },\n\n  /**\n   * showAxisPointer will be triggered by action.\n   */\n  showAxisPointer: function (grid3dModel, ecModel, api, payload) {\n    this._doShowAxisPointer();\n\n    this._updateAxisPointer(payload.value);\n  },\n\n  /**\n   * hideAxisPointer will be triggered by action.\n   */\n  hideAxisPointer: function (grid3dModel, ecModel, api, payload) {\n    this._doHideAxisPointer();\n  },\n  _initMouseHandler: function (grid3DModel) {\n    var cartesian = grid3DModel.coordinateSystem;\n    var viewGL = cartesian.viewGL; // TODO xAxis3D.axisPointer.show ?\n\n    if (grid3DModel.get('show') && grid3DModel.get('axisPointer.show')) {\n      viewGL.on('mousemove', this._updateAxisPointerOnMousePosition, this);\n    } else {\n      viewGL.off('mousemove', this._updateAxisPointerOnMousePosition);\n    }\n  },\n\n  /**\n   * Try find and show axisPointer on the intersect point\n   * of mouse ray with grid plane.\n   */\n  _updateAxisPointerOnMousePosition: function (e) {\n    // Ignore if mouse is on the element.\n    if (e.target) {\n      return;\n    }\n\n    var grid3DModel = this._model;\n    var cartesian = grid3DModel.coordinateSystem;\n    var viewGL = cartesian.viewGL;\n    var ray = viewGL.castRay(e.offsetX, e.offsetY, new graphicGL.Ray());\n    var nearestIntersectPoint;\n\n    for (var i = 0; i < this._faces.length; i++) {\n      var face = this._faces[i];\n\n      if (face.rootNode.invisible) {\n        continue;\n      } // Plane is not face the camera. flip it\n\n\n      if (face.plane.normal.dot(viewGL.camera.worldTransform.z) < 0) {\n        face.plane.normal.negate();\n      }\n\n      var point = ray.intersectPlane(face.plane);\n\n      if (!point) {\n        continue;\n      }\n\n      var axis0 = cartesian.getAxis(face.faceInfo[0]);\n      var axis1 = cartesian.getAxis(face.faceInfo[1]);\n      var idx0 = dimIndicesMap[face.faceInfo[0]];\n      var idx1 = dimIndicesMap[face.faceInfo[1]];\n\n      if (axis0.contain(point.array[idx0]) && axis1.contain(point.array[idx1])) {\n        nearestIntersectPoint = point;\n      }\n    }\n\n    if (nearestIntersectPoint) {\n      var data = cartesian.pointToData(nearestIntersectPoint.array, [], true);\n\n      this._updateAxisPointer(data);\n\n      this._doShowAxisPointer();\n    } else {\n      this._doHideAxisPointer();\n    }\n  },\n  _onCameraChange: function (grid3DModel, api) {\n    if (grid3DModel.get('show')) {\n      this._updateFaceVisibility();\n\n      this._updateAxisLinePosition();\n    }\n\n    var control = this._control;\n    api.dispatchAction({\n      type: 'grid3DChangeCamera',\n      alpha: control.getAlpha(),\n      beta: control.getBeta(),\n      distance: control.getDistance(),\n      center: control.getCenter(),\n      from: this.uid,\n      grid3DId: grid3DModel.id\n    });\n  },\n\n  /**\n   * Update visibility of each face when camera view changed, front face will be invisible.\n   * @private\n   */\n  _updateFaceVisibility: function () {\n    var camera = this._control.getCamera();\n\n    var viewSpacePos = new graphicGL.Vector3();\n    camera.update();\n\n    for (var idx = 0; idx < this._faces.length / 2; idx++) {\n      var depths = [];\n\n      for (var k = 0; k < 2; k++) {\n        var face = this._faces[idx * 2 + k];\n        face.rootNode.getWorldPosition(viewSpacePos);\n        viewSpacePos.transformMat4(camera.viewMatrix);\n        depths[k] = viewSpacePos.z;\n      } // Set the front face invisible\n\n\n      var frontIndex = depths[0] > depths[1] ? 0 : 1;\n      var frontFace = this._faces[idx * 2 + frontIndex];\n      var backFace = this._faces[idx * 2 + 1 - frontIndex]; // Update rotation.\n\n      frontFace.rootNode.invisible = true;\n      backFace.rootNode.invisible = false;\n    }\n  },\n\n  /**\n   * Update axis line position when camera view changed.\n   * @private\n   */\n  _updateAxisLinePosition: function () {\n    // Put xAxis, yAxis on x, y visible plane.\n    // Put zAxis on the left.\n    // TODO\n    var cartesian = this._model.coordinateSystem;\n    var xAxis = cartesian.getAxis('x');\n    var yAxis = cartesian.getAxis('y');\n    var zAxis = cartesian.getAxis('z');\n    var top = zAxis.getExtentMax();\n    var bottom = zAxis.getExtentMin();\n    var left = xAxis.getExtentMin();\n    var right = xAxis.getExtentMax();\n    var near = yAxis.getExtentMax();\n    var far = yAxis.getExtentMin();\n    var xAxisNode = this._axes[0].rootNode;\n    var yAxisNode = this._axes[1].rootNode;\n    var zAxisNode = this._axes[2].rootNode;\n    var faces = this._faces; // Notice: in cartesian up axis is z, but in webgl up axis is y.\n\n    var xAxisZOffset = faces[4].rootNode.invisible ? far : near;\n    var xAxisYOffset = faces[2].rootNode.invisible ? top : bottom;\n    var yAxisXOffset = faces[0].rootNode.invisible ? left : right;\n    var yAxisYOffset = faces[2].rootNode.invisible ? top : bottom;\n    var zAxisXOffset = faces[0].rootNode.invisible ? right : left;\n    var zAxisZOffset = faces[4].rootNode.invisible ? far : near;\n    xAxisNode.rotation.identity();\n    yAxisNode.rotation.identity();\n    zAxisNode.rotation.identity();\n\n    if (faces[4].rootNode.invisible) {\n      this._axes[0].flipped = true;\n      xAxisNode.rotation.rotateX(Math.PI);\n    }\n\n    if (faces[0].rootNode.invisible) {\n      this._axes[1].flipped = true;\n      yAxisNode.rotation.rotateZ(Math.PI);\n    }\n\n    if (faces[4].rootNode.invisible) {\n      this._axes[2].flipped = true;\n      zAxisNode.rotation.rotateY(Math.PI);\n    }\n\n    xAxisNode.position.set(0, xAxisYOffset, xAxisZOffset);\n    yAxisNode.position.set(yAxisXOffset, yAxisYOffset, 0); // Actually z\n\n    zAxisNode.position.set(zAxisXOffset, 0, zAxisZOffset); // Actually y\n\n    xAxisNode.update();\n    yAxisNode.update();\n    zAxisNode.update();\n\n    this._updateAxisLabelAlign();\n  },\n\n  /**\n   * Update label align on axis when axisLine position changed.\n   * @private\n   */\n  _updateAxisLabelAlign: function () {\n    // var cartesian = this._model.coordinateSystem;\n    var camera = this._control.getCamera();\n\n    var coords = [new graphicGL.Vector4(), new graphicGL.Vector4()];\n    var center = new graphicGL.Vector4();\n    this.groupGL.getWorldPosition(center);\n    center.w = 1.0;\n    center.transformMat4(camera.viewMatrix).transformMat4(camera.projectionMatrix);\n    center.x /= center.w;\n    center.y /= center.w;\n\n    this._axes.forEach(function (axisInfo) {\n      var lineCoords = axisInfo.axisLineCoords;\n      var labelGeo = axisInfo.labelsMesh.geometry;\n\n      for (var i = 0; i < coords.length; i++) {\n        coords[i].setArray(lineCoords[i]);\n        coords[i].w = 1.0;\n        coords[i].transformMat4(axisInfo.rootNode.worldTransform).transformMat4(camera.viewMatrix).transformMat4(camera.projectionMatrix);\n        coords[i].x /= coords[i].w;\n        coords[i].y /= coords[i].w;\n      }\n\n      var dx = coords[1].x - coords[0].x;\n      var dy = coords[1].y - coords[0].y;\n      var cx = (coords[1].x + coords[0].x) / 2;\n      var cy = (coords[1].y + coords[0].y) / 2;\n      var textAlign;\n      var verticalAlign;\n\n      if (Math.abs(dy / dx) < 0.5) {\n        textAlign = 'center';\n        verticalAlign = cy > center.y ? 'bottom' : 'top';\n      } else {\n        verticalAlign = 'middle';\n        textAlign = cx > center.x ? 'left' : 'right';\n      } // axis labels\n\n\n      axisInfo.setSpriteAlign(textAlign, verticalAlign, this._api);\n    }, this);\n  },\n  _doShowAxisPointer: function () {\n    if (!this._axisPointerLineMesh.invisible) {\n      return;\n    }\n\n    this._axisPointerLineMesh.invisible = false;\n    this._axisPointerLabelsMesh.invisible = false;\n\n    this._api.getZr().refresh();\n  },\n  _doHideAxisPointer: function () {\n    if (this._axisPointerLineMesh.invisible) {\n      return;\n    }\n\n    this._axisPointerLineMesh.invisible = true;\n    this._axisPointerLabelsMesh.invisible = true;\n\n    this._api.getZr().refresh();\n  },\n\n  /**\n   * @private updateAxisPointer.\n   */\n  _updateAxisPointer: function (data) {\n    var cartesian = this._model.coordinateSystem;\n    var point = cartesian.dataToPoint(data);\n    var axisPointerLineMesh = this._axisPointerLineMesh;\n    var linesGeo = axisPointerLineMesh.geometry;\n\n    var axisPointerParentModel = this._model.getModel('axisPointer');\n\n    var dpr = this._api.getDevicePixelRatio();\n\n    linesGeo.convertToDynamicArray(true);\n\n    function ifShowAxisPointer(axis) {\n      return retrieve.firstNotNull(axis.model.get('axisPointer.show'), axisPointerParentModel.get('show'));\n    }\n\n    function getAxisColorAndLineWidth(axis) {\n      var axisPointerModel = axis.model.getModel('axisPointer', axisPointerParentModel);\n      var lineStyleModel = axisPointerModel.getModel('lineStyle');\n      var color = graphicGL.parseColor(lineStyleModel.get('color'));\n      var lineWidth = firstNotNull(lineStyleModel.get('width'), 1);\n      var opacity = firstNotNull(lineStyleModel.get('opacity'), 1);\n      color[3] *= opacity;\n      return {\n        color: color,\n        lineWidth: lineWidth\n      };\n    }\n\n    for (var k = 0; k < this._faces.length; k++) {\n      var face = this._faces[k];\n\n      if (face.rootNode.invisible) {\n        continue;\n      }\n\n      var faceInfo = face.faceInfo;\n      var otherCoord = faceInfo[3] < 0 ? cartesian.getAxis(faceInfo[2]).getExtentMin() : cartesian.getAxis(faceInfo[2]).getExtentMax();\n      var otherDimIdx = dimIndicesMap[faceInfo[2]]; // Line on face.\n\n      for (var i = 0; i < 2; i++) {\n        var dim = faceInfo[i];\n        var faceOtherDim = faceInfo[1 - i];\n        var axis = cartesian.getAxis(dim);\n        var faceOtherAxis = cartesian.getAxis(faceOtherDim);\n\n        if (!ifShowAxisPointer(axis)) {\n          continue;\n        }\n\n        var p0 = [0, 0, 0];\n        var p1 = [0, 0, 0];\n        var dimIdx = dimIndicesMap[dim];\n        var faceOtherDimIdx = dimIndicesMap[faceOtherDim];\n        p0[dimIdx] = p1[dimIdx] = point[dimIdx];\n        p0[otherDimIdx] = p1[otherDimIdx] = otherCoord;\n        p0[faceOtherDimIdx] = faceOtherAxis.getExtentMin();\n        p1[faceOtherDimIdx] = faceOtherAxis.getExtentMax();\n        var colorAndLineWidth = getAxisColorAndLineWidth(axis);\n        linesGeo.addLine(p0, p1, colorAndLineWidth.color, colorAndLineWidth.lineWidth * dpr);\n      } // Project line.\n\n\n      if (ifShowAxisPointer(cartesian.getAxis(faceInfo[2]))) {\n        var p0 = point.slice();\n        var p1 = point.slice();\n        p1[otherDimIdx] = otherCoord;\n        var colorAndLineWidth = getAxisColorAndLineWidth(cartesian.getAxis(faceInfo[2]));\n        linesGeo.addLine(p0, p1, colorAndLineWidth.color, colorAndLineWidth.lineWidth * dpr);\n      }\n    }\n\n    linesGeo.convertToTypedArray();\n\n    this._updateAxisPointerLabelsMesh(data);\n\n    this._api.getZr().refresh();\n  },\n  _updateAxisPointerLabelsMesh: function (data) {\n    var grid3dModel = this._model;\n    var axisPointerLabelsMesh = this._axisPointerLabelsMesh;\n    var axisPointerLabelsSurface = this._axisPointerLabelsSurface;\n    var cartesian = grid3dModel.coordinateSystem;\n    var axisPointerParentModel = grid3dModel.getModel('axisPointer');\n    axisPointerLabelsMesh.geometry.convertToDynamicArray(true);\n    axisPointerLabelsSurface.clear();\n    var otherDim = {\n      x: 'y',\n      y: 'x',\n      z: 'y'\n    };\n\n    this._axes.forEach(function (axisInfo, idx) {\n      var axis = cartesian.getAxis(axisInfo.dim);\n      var axisModel = axis.model;\n      var axisPointerModel = axisModel.getModel('axisPointer', axisPointerParentModel);\n      var labelModel = axisPointerModel.getModel('label');\n      var lineColor = axisPointerModel.get('lineStyle.color');\n\n      if (!labelModel.get('show') || !axisPointerModel.get('show')) {\n        return;\n      }\n\n      var val = data[idx];\n      var formatter = labelModel.get('formatter');\n      var text = axis.scale.getLabel({\n        value: val\n      });\n\n      if (formatter != null) {\n        text = formatter(text, data);\n      } else {\n        if (axis.scale.type === 'interval' || axis.scale.type === 'log') {\n          var precision = echarts.number.getPrecisionSafe(axis.scale.getTicks()[0]);\n          text = val.toFixed(precision + 2);\n        }\n      }\n\n      var labelColor = labelModel.get('color');\n      var textEl = new echarts.graphic.Text({\n        style: createTextStyle(labelModel, {\n          text: text,\n          fill: labelColor || lineColor,\n          align: 'left',\n          verticalAlign: 'top'\n        })\n      });\n      var coords = axisPointerLabelsSurface.add(textEl);\n      var rect = textEl.getBoundingRect();\n\n      var dpr = this._api.getDevicePixelRatio();\n\n      var pos = axisInfo.rootNode.position.toArray();\n      var otherIdx = dimIndicesMap[otherDim[axisInfo.dim]];\n      pos[otherIdx] += (axisInfo.flipped ? -1 : 1) * labelModel.get('margin');\n      pos[dimIndicesMap[axisInfo.dim]] = axis.dataToCoord(data[idx]);\n      axisPointerLabelsMesh.geometry.addSprite(pos, [rect.width * dpr, rect.height * dpr], coords, axisInfo.textAlign, axisInfo.textVerticalAlign);\n    }, this);\n\n    axisPointerLabelsSurface.getZr().refreshImmediately();\n    axisPointerLabelsMesh.material.set('uvScale', axisPointerLabelsSurface.getCoordsScale());\n    axisPointerLabelsMesh.geometry.convertToTypedArray();\n  },\n  dispose: function () {\n    this.groupGL.removeAll();\n\n    this._control.dispose();\n\n    this._axisLabelSurface.dispose();\n\n    this._axisPointerLabelsSurface.dispose();\n  }\n});"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}