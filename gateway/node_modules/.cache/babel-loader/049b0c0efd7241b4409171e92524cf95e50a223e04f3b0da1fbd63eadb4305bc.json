{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport Cartesian3D from './grid3D/Cartesian3D';\nimport Axis3D from './grid3D/Axis3D';\nimport * as echarts from 'echarts/lib/echarts';\nimport { getLayoutRect } from 'echarts/lib/util/layout';\nimport ViewGL from '../core/ViewGL';\nimport retrieve from '../util/retrieve';\nfunction resizeCartesian3D(grid3DModel, api) {\n  // Use left/top/width/height\n  var boxLayoutOption = grid3DModel.getBoxLayoutParams();\n  var viewport = getLayoutRect(boxLayoutOption, {\n    width: api.getWidth(),\n    height: api.getHeight()\n  }); // Flip Y\n\n  viewport.y = api.getHeight() - viewport.y - viewport.height;\n  this.viewGL.setViewport(viewport.x, viewport.y, viewport.width, viewport.height, api.getDevicePixelRatio());\n  var boxWidth = grid3DModel.get('boxWidth');\n  var boxHeight = grid3DModel.get('boxHeight');\n  var boxDepth = grid3DModel.get('boxDepth');\n  if (process.env.NODE_ENV !== 'production') {\n    ['x', 'y', 'z'].forEach(function (dim) {\n      if (!this.getAxis(dim)) {\n        throw new Error('Grid' + grid3DModel.id + ' don\\'t have ' + dim + 'Axis');\n      }\n    }, this);\n  }\n  this.getAxis('x').setExtent(-boxWidth / 2, boxWidth / 2); // From near to far\n\n  this.getAxis('y').setExtent(boxDepth / 2, -boxDepth / 2);\n  this.getAxis('z').setExtent(-boxHeight / 2, boxHeight / 2);\n  this.size = [boxWidth, boxHeight, boxDepth];\n}\nfunction updateCartesian3D(ecModel, api) {\n  var dataExtents = {};\n  function unionDataExtents(dim, extent) {\n    dataExtents[dim] = dataExtents[dim] || [Infinity, -Infinity];\n    dataExtents[dim][0] = Math.min(extent[0], dataExtents[dim][0]);\n    dataExtents[dim][1] = Math.max(extent[1], dataExtents[dim][1]);\n  } // Get data extents for scale.\n\n  ecModel.eachSeries(function (seriesModel) {\n    if (seriesModel.coordinateSystem !== this) {\n      return;\n    }\n    var data = seriesModel.getData();\n    ['x', 'y', 'z'].forEach(function (coordDim) {\n      data.mapDimensionsAll(coordDim, true).forEach(function (dataDim) {\n        unionDataExtents(coordDim, data.getDataExtent(dataDim, true));\n      });\n    });\n  }, this);\n  ['xAxis3D', 'yAxis3D', 'zAxis3D'].forEach(function (axisType) {\n    ecModel.eachComponent(axisType, function (axisModel) {\n      var dim = axisType.charAt(0);\n      var grid3DModel = axisModel.getReferringComponents('grid3D').models[0];\n      var cartesian3D = grid3DModel.coordinateSystem;\n      if (cartesian3D !== this) {\n        return;\n      }\n      var axis = cartesian3D.getAxis(dim);\n      if (axis) {\n        if (process.env.NODE_ENV !== 'production') {\n          console.warn('Can\\'t have two %s in one grid3D', axisType);\n        }\n        return;\n      }\n      var scale = echarts.helper.createScale(dataExtents[dim] || [Infinity, -Infinity], axisModel);\n      axis = new Axis3D(dim, scale);\n      axis.type = axisModel.get('type');\n      var isCategory = axis.type === 'category';\n      axis.onBand = isCategory && axisModel.get('boundaryGap');\n      axis.inverse = axisModel.get('inverse');\n      axisModel.axis = axis;\n      axis.model = axisModel; // override `echarts/coord/Axis#getLabelModel`\n\n      axis.getLabelModel = function () {\n        return axisModel.getModel('axisLabel', grid3DModel.getModel('axisLabel'));\n      }; // override `echarts/coord/Axis#getTickModel`\n\n      axis.getTickModel = function () {\n        return axisModel.getModel('axisTick', grid3DModel.getModel('axisTick'));\n      };\n      cartesian3D.addAxis(axis);\n    }, this);\n  }, this);\n  this.resize(this.model, api);\n}\nvar grid3DCreator = {\n  dimensions: Cartesian3D.prototype.dimensions,\n  create: function (ecModel, api) {\n    var cartesian3DList = [];\n    ecModel.eachComponent('grid3D', function (grid3DModel) {\n      // FIXME\n      grid3DModel.__viewGL = grid3DModel.__viewGL || new ViewGL();\n      var cartesian3D = new Cartesian3D();\n      cartesian3D.model = grid3DModel;\n      cartesian3D.viewGL = grid3DModel.__viewGL;\n      grid3DModel.coordinateSystem = cartesian3D;\n      cartesian3DList.push(cartesian3D); // Inject resize and update\n\n      cartesian3D.resize = resizeCartesian3D;\n      cartesian3D.update = updateCartesian3D;\n    });\n    var axesTypes = ['xAxis3D', 'yAxis3D', 'zAxis3D'];\n    function findAxesModels(seriesModel, ecModel) {\n      return axesTypes.map(function (axisType) {\n        var axisModel = seriesModel.getReferringComponents(axisType).models[0];\n        if (axisModel == null) {\n          axisModel = ecModel.getComponent(axisType);\n        }\n        if (process.env.NODE_ENV !== 'production') {\n          if (!axisModel) {\n            throw new Error(axisType + ' \"' + retrieve.firstNotNull(seriesModel.get(axisType + 'Index'), seriesModel.get(axisType + 'Id'), 0) + '\" not found');\n          }\n        }\n        return axisModel;\n      });\n    }\n    ecModel.eachSeries(function (seriesModel) {\n      if (seriesModel.get('coordinateSystem') !== 'cartesian3D') {\n        return;\n      }\n      var firstGridModel = seriesModel.getReferringComponents('grid3D').models[0];\n      if (firstGridModel == null) {\n        var axesModels = findAxesModels(seriesModel, ecModel);\n        var firstGridModel = axesModels[0].getCoordSysModel();\n        axesModels.forEach(function (axisModel) {\n          var grid3DModel = axisModel.getCoordSysModel();\n          if (process.env.NODE_ENV !== 'production') {\n            if (!grid3DModel) {\n              throw new Error('grid3D \"' + retrieve.firstNotNull(axisModel.get('gridIndex'), axisModel.get('gridId'), 0) + '\" not found');\n            }\n            if (grid3DModel !== firstGridModel) {\n              throw new Error('xAxis3D, yAxis3D, zAxis3D must use the same grid');\n            }\n          }\n        });\n      }\n      var coordSys = firstGridModel.coordinateSystem;\n      seriesModel.coordinateSystem = coordSys;\n    });\n    return cartesian3DList;\n  }\n};\nexport default grid3DCreator;","map":{"version":3,"names":["Cartesian3D","Axis3D","echarts","getLayoutRect","ViewGL","retrieve","resizeCartesian3D","grid3DModel","api","boxLayoutOption","getBoxLayoutParams","viewport","width","getWidth","height","getHeight","y","viewGL","setViewport","x","getDevicePixelRatio","boxWidth","get","boxHeight","boxDepth","process","env","NODE_ENV","forEach","dim","getAxis","Error","id","setExtent","size","updateCartesian3D","ecModel","dataExtents","unionDataExtents","extent","Infinity","Math","min","max","eachSeries","seriesModel","coordinateSystem","data","getData","coordDim","mapDimensionsAll","dataDim","getDataExtent","axisType","eachComponent","axisModel","charAt","getReferringComponents","models","cartesian3D","axis","console","warn","scale","helper","createScale","type","isCategory","onBand","inverse","model","getLabelModel","getModel","getTickModel","addAxis","resize","grid3DCreator","dimensions","prototype","create","cartesian3DList","__viewGL","push","update","axesTypes","findAxesModels","map","getComponent","firstNotNull","firstGridModel","axesModels","getCoordSysModel","coordSys"],"sources":["E:/mytest/node_modules/echarts-gl/lib/coord/grid3DCreator.js"],"sourcesContent":["import Cartesian3D from './grid3D/Cartesian3D';\nimport Axis3D from './grid3D/Axis3D';\nimport * as echarts from 'echarts/lib/echarts';\nimport { getLayoutRect } from 'echarts/lib/util/layout';\nimport ViewGL from '../core/ViewGL';\nimport retrieve from '../util/retrieve';\n\nfunction resizeCartesian3D(grid3DModel, api) {\n  // Use left/top/width/height\n  var boxLayoutOption = grid3DModel.getBoxLayoutParams();\n  var viewport = getLayoutRect(boxLayoutOption, {\n    width: api.getWidth(),\n    height: api.getHeight()\n  }); // Flip Y\n\n  viewport.y = api.getHeight() - viewport.y - viewport.height;\n  this.viewGL.setViewport(viewport.x, viewport.y, viewport.width, viewport.height, api.getDevicePixelRatio());\n  var boxWidth = grid3DModel.get('boxWidth');\n  var boxHeight = grid3DModel.get('boxHeight');\n  var boxDepth = grid3DModel.get('boxDepth');\n\n  if (process.env.NODE_ENV !== 'production') {\n    ['x', 'y', 'z'].forEach(function (dim) {\n      if (!this.getAxis(dim)) {\n        throw new Error('Grid' + grid3DModel.id + ' don\\'t have ' + dim + 'Axis');\n      }\n    }, this);\n  }\n\n  this.getAxis('x').setExtent(-boxWidth / 2, boxWidth / 2); // From near to far\n\n  this.getAxis('y').setExtent(boxDepth / 2, -boxDepth / 2);\n  this.getAxis('z').setExtent(-boxHeight / 2, boxHeight / 2);\n  this.size = [boxWidth, boxHeight, boxDepth];\n}\n\nfunction updateCartesian3D(ecModel, api) {\n  var dataExtents = {};\n\n  function unionDataExtents(dim, extent) {\n    dataExtents[dim] = dataExtents[dim] || [Infinity, -Infinity];\n    dataExtents[dim][0] = Math.min(extent[0], dataExtents[dim][0]);\n    dataExtents[dim][1] = Math.max(extent[1], dataExtents[dim][1]);\n  } // Get data extents for scale.\n\n\n  ecModel.eachSeries(function (seriesModel) {\n    if (seriesModel.coordinateSystem !== this) {\n      return;\n    }\n\n    var data = seriesModel.getData();\n    ['x', 'y', 'z'].forEach(function (coordDim) {\n      data.mapDimensionsAll(coordDim, true).forEach(function (dataDim) {\n        unionDataExtents(coordDim, data.getDataExtent(dataDim, true));\n      });\n    });\n  }, this);\n  ['xAxis3D', 'yAxis3D', 'zAxis3D'].forEach(function (axisType) {\n    ecModel.eachComponent(axisType, function (axisModel) {\n      var dim = axisType.charAt(0);\n      var grid3DModel = axisModel.getReferringComponents('grid3D').models[0];\n      var cartesian3D = grid3DModel.coordinateSystem;\n\n      if (cartesian3D !== this) {\n        return;\n      }\n\n      var axis = cartesian3D.getAxis(dim);\n\n      if (axis) {\n        if (process.env.NODE_ENV !== 'production') {\n          console.warn('Can\\'t have two %s in one grid3D', axisType);\n        }\n\n        return;\n      }\n\n      var scale = echarts.helper.createScale(dataExtents[dim] || [Infinity, -Infinity], axisModel);\n      axis = new Axis3D(dim, scale);\n      axis.type = axisModel.get('type');\n      var isCategory = axis.type === 'category';\n      axis.onBand = isCategory && axisModel.get('boundaryGap');\n      axis.inverse = axisModel.get('inverse');\n      axisModel.axis = axis;\n      axis.model = axisModel; // override `echarts/coord/Axis#getLabelModel`\n\n      axis.getLabelModel = function () {\n        return axisModel.getModel('axisLabel', grid3DModel.getModel('axisLabel'));\n      }; // override `echarts/coord/Axis#getTickModel`\n\n\n      axis.getTickModel = function () {\n        return axisModel.getModel('axisTick', grid3DModel.getModel('axisTick'));\n      };\n\n      cartesian3D.addAxis(axis);\n    }, this);\n  }, this);\n  this.resize(this.model, api);\n}\n\nvar grid3DCreator = {\n  dimensions: Cartesian3D.prototype.dimensions,\n  create: function (ecModel, api) {\n    var cartesian3DList = [];\n    ecModel.eachComponent('grid3D', function (grid3DModel) {\n      // FIXME\n      grid3DModel.__viewGL = grid3DModel.__viewGL || new ViewGL();\n      var cartesian3D = new Cartesian3D();\n      cartesian3D.model = grid3DModel;\n      cartesian3D.viewGL = grid3DModel.__viewGL;\n      grid3DModel.coordinateSystem = cartesian3D;\n      cartesian3DList.push(cartesian3D); // Inject resize and update\n\n      cartesian3D.resize = resizeCartesian3D;\n      cartesian3D.update = updateCartesian3D;\n    });\n    var axesTypes = ['xAxis3D', 'yAxis3D', 'zAxis3D'];\n\n    function findAxesModels(seriesModel, ecModel) {\n      return axesTypes.map(function (axisType) {\n        var axisModel = seriesModel.getReferringComponents(axisType).models[0];\n\n        if (axisModel == null) {\n          axisModel = ecModel.getComponent(axisType);\n        }\n\n        if (process.env.NODE_ENV !== 'production') {\n          if (!axisModel) {\n            throw new Error(axisType + ' \"' + retrieve.firstNotNull(seriesModel.get(axisType + 'Index'), seriesModel.get(axisType + 'Id'), 0) + '\" not found');\n          }\n        }\n\n        return axisModel;\n      });\n    }\n\n    ecModel.eachSeries(function (seriesModel) {\n      if (seriesModel.get('coordinateSystem') !== 'cartesian3D') {\n        return;\n      }\n\n      var firstGridModel = seriesModel.getReferringComponents('grid3D').models[0];\n\n      if (firstGridModel == null) {\n        var axesModels = findAxesModels(seriesModel, ecModel);\n        var firstGridModel = axesModels[0].getCoordSysModel();\n        axesModels.forEach(function (axisModel) {\n          var grid3DModel = axisModel.getCoordSysModel();\n\n          if (process.env.NODE_ENV !== 'production') {\n            if (!grid3DModel) {\n              throw new Error('grid3D \"' + retrieve.firstNotNull(axisModel.get('gridIndex'), axisModel.get('gridId'), 0) + '\" not found');\n            }\n\n            if (grid3DModel !== firstGridModel) {\n              throw new Error('xAxis3D, yAxis3D, zAxis3D must use the same grid');\n            }\n          }\n        });\n      }\n\n      var coordSys = firstGridModel.coordinateSystem;\n      seriesModel.coordinateSystem = coordSys;\n    });\n    return cartesian3DList;\n  }\n};\nexport default grid3DCreator;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}