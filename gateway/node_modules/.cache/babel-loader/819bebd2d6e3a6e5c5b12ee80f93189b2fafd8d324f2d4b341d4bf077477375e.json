{"ast":null,"code":"import * as echarts from 'echarts/lib/echarts';\nvar GL_SERIES = ['bar3D', 'line3D', 'map3D', 'scatter3D', 'surface', 'lines3D', 'scatterGL', 'scatter3D'];\nfunction convertNormalEmphasis(option, optType) {\n  if (option && option[optType] && (option[optType].normal || option[optType].emphasis)) {\n    var normalOpt = option[optType].normal;\n    var emphasisOpt = option[optType].emphasis;\n    if (normalOpt) {\n      option[optType] = normalOpt;\n    }\n    if (emphasisOpt) {\n      option.emphasis = option.emphasis || {};\n      option.emphasis[optType] = emphasisOpt;\n    }\n  }\n}\nfunction convertNormalEmphasisForEach(option) {\n  convertNormalEmphasis(option, 'itemStyle');\n  convertNormalEmphasis(option, 'lineStyle');\n  convertNormalEmphasis(option, 'areaStyle');\n  convertNormalEmphasis(option, 'label');\n}\nfunction removeTextStyleInAxis(axesOpt) {\n  if (!axesOpt) {\n    return;\n  }\n  if (!(axesOpt instanceof Array)) {\n    axesOpt = [axesOpt];\n  }\n  echarts.util.each(axesOpt, function (axisOpt) {\n    if (axisOpt.axisLabel) {\n      var labelOpt = axisOpt.axisLabel;\n      Object.assign(labelOpt, labelOpt.textStyle);\n      labelOpt.textStyle = null;\n    }\n  });\n}\nexport default function (option) {\n  echarts.util.each(option.series, function (series) {\n    if (echarts.util.indexOf(GL_SERIES, series.type) >= 0) {\n      convertNormalEmphasisForEach(series); // Compatitable with original mapbox\n\n      if (series.coordinateSystem === 'mapbox') {\n        series.coordinateSystem = 'mapbox3D';\n        option.mapbox3D = option.mapbox;\n      }\n    }\n  });\n  removeTextStyleInAxis(option.xAxis3D);\n  removeTextStyleInAxis(option.yAxis3D);\n  removeTextStyleInAxis(option.zAxis3D);\n  removeTextStyleInAxis(option.grid3D);\n  convertNormalEmphasis(option.geo3D);\n}\n;","map":{"version":3,"names":["echarts","GL_SERIES","convertNormalEmphasis","option","optType","normal","emphasis","normalOpt","emphasisOpt","convertNormalEmphasisForEach","removeTextStyleInAxis","axesOpt","Array","util","each","axisOpt","axisLabel","labelOpt","Object","assign","textStyle","series","indexOf","type","coordinateSystem","mapbox3D","mapbox","xAxis3D","yAxis3D","zAxis3D","grid3D","geo3D"],"sources":["E:/mytest/node_modules/echarts-gl/lib/preprocessor/backwardCompat.js"],"sourcesContent":["import * as echarts from 'echarts/lib/echarts';\nvar GL_SERIES = ['bar3D', 'line3D', 'map3D', 'scatter3D', 'surface', 'lines3D', 'scatterGL', 'scatter3D'];\n\nfunction convertNormalEmphasis(option, optType) {\n  if (option && option[optType] && (option[optType].normal || option[optType].emphasis)) {\n    var normalOpt = option[optType].normal;\n    var emphasisOpt = option[optType].emphasis;\n\n    if (normalOpt) {\n      option[optType] = normalOpt;\n    }\n\n    if (emphasisOpt) {\n      option.emphasis = option.emphasis || {};\n      option.emphasis[optType] = emphasisOpt;\n    }\n  }\n}\n\nfunction convertNormalEmphasisForEach(option) {\n  convertNormalEmphasis(option, 'itemStyle');\n  convertNormalEmphasis(option, 'lineStyle');\n  convertNormalEmphasis(option, 'areaStyle');\n  convertNormalEmphasis(option, 'label');\n}\n\nfunction removeTextStyleInAxis(axesOpt) {\n  if (!axesOpt) {\n    return;\n  }\n\n  if (!(axesOpt instanceof Array)) {\n    axesOpt = [axesOpt];\n  }\n\n  echarts.util.each(axesOpt, function (axisOpt) {\n    if (axisOpt.axisLabel) {\n      var labelOpt = axisOpt.axisLabel;\n      Object.assign(labelOpt, labelOpt.textStyle);\n      labelOpt.textStyle = null;\n    }\n  });\n}\n\nexport default function (option) {\n  echarts.util.each(option.series, function (series) {\n    if (echarts.util.indexOf(GL_SERIES, series.type) >= 0) {\n      convertNormalEmphasisForEach(series); // Compatitable with original mapbox\n\n      if (series.coordinateSystem === 'mapbox') {\n        series.coordinateSystem = 'mapbox3D';\n        option.mapbox3D = option.mapbox;\n      }\n    }\n  });\n  removeTextStyleInAxis(option.xAxis3D);\n  removeTextStyleInAxis(option.yAxis3D);\n  removeTextStyleInAxis(option.zAxis3D);\n  removeTextStyleInAxis(option.grid3D);\n  convertNormalEmphasis(option.geo3D);\n}\n;"],"mappings":"AAAA,OAAO,KAAKA,OAAO,MAAM,qBAAqB;AAC9C,IAAIC,SAAS,GAAG,CAAC,OAAO,EAAE,QAAQ,EAAE,OAAO,EAAE,WAAW,EAAE,SAAS,EAAE,SAAS,EAAE,WAAW,EAAE,WAAW,CAAC;AAEzG,SAASC,qBAAqBA,CAACC,MAAM,EAAEC,OAAO,EAAE;EAC9C,IAAID,MAAM,IAAIA,MAAM,CAACC,OAAO,CAAC,KAAKD,MAAM,CAACC,OAAO,CAAC,CAACC,MAAM,IAAIF,MAAM,CAACC,OAAO,CAAC,CAACE,QAAQ,CAAC,EAAE;IACrF,IAAIC,SAAS,GAAGJ,MAAM,CAACC,OAAO,CAAC,CAACC,MAAM;IACtC,IAAIG,WAAW,GAAGL,MAAM,CAACC,OAAO,CAAC,CAACE,QAAQ;IAE1C,IAAIC,SAAS,EAAE;MACbJ,MAAM,CAACC,OAAO,CAAC,GAAGG,SAAS;IAC7B;IAEA,IAAIC,WAAW,EAAE;MACfL,MAAM,CAACG,QAAQ,GAAGH,MAAM,CAACG,QAAQ,IAAI,CAAC,CAAC;MACvCH,MAAM,CAACG,QAAQ,CAACF,OAAO,CAAC,GAAGI,WAAW;IACxC;EACF;AACF;AAEA,SAASC,4BAA4BA,CAACN,MAAM,EAAE;EAC5CD,qBAAqB,CAACC,MAAM,EAAE,WAAW,CAAC;EAC1CD,qBAAqB,CAACC,MAAM,EAAE,WAAW,CAAC;EAC1CD,qBAAqB,CAACC,MAAM,EAAE,WAAW,CAAC;EAC1CD,qBAAqB,CAACC,MAAM,EAAE,OAAO,CAAC;AACxC;AAEA,SAASO,qBAAqBA,CAACC,OAAO,EAAE;EACtC,IAAI,CAACA,OAAO,EAAE;IACZ;EACF;EAEA,IAAI,EAAEA,OAAO,YAAYC,KAAK,CAAC,EAAE;IAC/BD,OAAO,GAAG,CAACA,OAAO,CAAC;EACrB;EAEAX,OAAO,CAACa,IAAI,CAACC,IAAI,CAACH,OAAO,EAAE,UAAUI,OAAO,EAAE;IAC5C,IAAIA,OAAO,CAACC,SAAS,EAAE;MACrB,IAAIC,QAAQ,GAAGF,OAAO,CAACC,SAAS;MAChCE,MAAM,CAACC,MAAM,CAACF,QAAQ,EAAEA,QAAQ,CAACG,SAAS,CAAC;MAC3CH,QAAQ,CAACG,SAAS,GAAG,IAAI;IAC3B;EACF,CAAC,CAAC;AACJ;AAEA,eAAe,UAAUjB,MAAM,EAAE;EAC/BH,OAAO,CAACa,IAAI,CAACC,IAAI,CAACX,MAAM,CAACkB,MAAM,EAAE,UAAUA,MAAM,EAAE;IACjD,IAAIrB,OAAO,CAACa,IAAI,CAACS,OAAO,CAACrB,SAAS,EAAEoB,MAAM,CAACE,IAAI,CAAC,IAAI,CAAC,EAAE;MACrDd,4BAA4B,CAACY,MAAM,CAAC,CAAC,CAAC;;MAEtC,IAAIA,MAAM,CAACG,gBAAgB,KAAK,QAAQ,EAAE;QACxCH,MAAM,CAACG,gBAAgB,GAAG,UAAU;QACpCrB,MAAM,CAACsB,QAAQ,GAAGtB,MAAM,CAACuB,MAAM;MACjC;IACF;EACF,CAAC,CAAC;EACFhB,qBAAqB,CAACP,MAAM,CAACwB,OAAO,CAAC;EACrCjB,qBAAqB,CAACP,MAAM,CAACyB,OAAO,CAAC;EACrClB,qBAAqB,CAACP,MAAM,CAAC0B,OAAO,CAAC;EACrCnB,qBAAqB,CAACP,MAAM,CAAC2B,MAAM,CAAC;EACpC5B,qBAAqB,CAACC,MAAM,CAAC4B,KAAK,CAAC;AACrC;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}