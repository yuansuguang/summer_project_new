{"ast":null,"code":"import \"core-js/modules/es.array-buffer.detached.js\";\nimport \"core-js/modules/es.array-buffer.transfer.js\";\nimport \"core-js/modules/es.array-buffer.transfer-to-fixed-length.js\";\nimport \"core-js/modules/es.typed-array.to-reversed.js\";\nimport \"core-js/modules/es.typed-array.to-sorted.js\";\nimport \"core-js/modules/es.typed-array.with.js\";\nimport ProgressiveQuickSort from '../ProgressiveQuickSort';\nimport glmatrix from 'claygl/src/dep/glmatrix';\nvar vec3 = glmatrix.vec3;\nvar p0 = vec3.create();\nvar p1 = vec3.create();\nvar p2 = vec3.create(); // var cp = vec3.create();\n\nexport default {\n  needsSortTriangles: function () {\n    return this.indices && this.sortTriangles;\n  },\n  needsSortTrianglesProgressively: function () {\n    return this.needsSortTriangles() && this.triangleCount >= 2e4;\n  },\n  doSortTriangles: function (cameraPos, frame) {\n    var indices = this.indices; // Do progressive quick sort.\n\n    if (frame === 0) {\n      var posAttr = this.attributes.position;\n      var cameraPos = cameraPos.array;\n      if (!this._triangleZList || this._triangleZList.length !== this.triangleCount) {\n        this._triangleZList = new Float32Array(this.triangleCount);\n        this._sortedTriangleIndices = new Uint32Array(this.triangleCount);\n        this._indicesTmp = new indices.constructor(indices.length);\n        this._triangleZListTmp = new Float32Array(this.triangleCount);\n      }\n      var cursor = 0;\n      var firstZ;\n      for (var i = 0; i < indices.length;) {\n        posAttr.get(indices[i++], p0);\n        posAttr.get(indices[i++], p1);\n        posAttr.get(indices[i++], p2); // FIXME If use center ?\n        // cp[0] = (p0[0] + p1[0] + p2[0]) / 3;\n        // cp[1] = (p0[1] + p1[1] + p2[1]) / 3;\n        // cp[2] = (p0[2] + p1[2] + p2[2]) / 3;\n        // Camera position is in object space\n        // Use max of three points, PENDING\n\n        var z0 = vec3.sqrDist(p0, cameraPos);\n        var z1 = vec3.sqrDist(p1, cameraPos);\n        var z2 = vec3.sqrDist(p2, cameraPos);\n        var zMax = Math.min(z0, z1);\n        zMax = Math.min(zMax, z2);\n        if (i === 3) {\n          firstZ = zMax;\n          zMax = 0;\n        } else {\n          // Only store the difference to avoid the precision issue.\n          zMax = zMax - firstZ;\n        }\n        this._triangleZList[cursor++] = zMax;\n      }\n    }\n    var sortedTriangleIndices = this._sortedTriangleIndices;\n    for (var i = 0; i < sortedTriangleIndices.length; i++) {\n      sortedTriangleIndices[i] = i;\n    }\n    if (this.triangleCount < 2e4) {\n      // Use simple timsort for simple geometries.\n      if (frame === 0) {\n        // Use native sort temporary.\n        this._simpleSort(true);\n      }\n    } else {\n      for (var i = 0; i < 3; i++) {\n        this._progressiveQuickSort(frame * 3 + i);\n      }\n    }\n    var targetIndices = this._indicesTmp;\n    var targetTriangleZList = this._triangleZListTmp;\n    var faceZList = this._triangleZList;\n    for (var i = 0; i < this.triangleCount; i++) {\n      var fromIdx3 = sortedTriangleIndices[i] * 3;\n      var toIdx3 = i * 3;\n      targetIndices[toIdx3++] = indices[fromIdx3++];\n      targetIndices[toIdx3++] = indices[fromIdx3++];\n      targetIndices[toIdx3] = indices[fromIdx3];\n      targetTriangleZList[i] = faceZList[sortedTriangleIndices[i]];\n    } // Swap indices.\n\n    var tmp = this._indicesTmp;\n    this._indicesTmp = this.indices;\n    this.indices = tmp;\n    var tmp = this._triangleZListTmp;\n    this._triangleZListTmp = this._triangleZList;\n    this._triangleZList = tmp;\n    this.dirtyIndices();\n  },\n  _simpleSort: function (useNativeQuickSort) {\n    var faceZList = this._triangleZList;\n    var sortedTriangleIndices = this._sortedTriangleIndices;\n    function compare(a, b) {\n      // Sort from far to near. which is descending order\n      return faceZList[b] - faceZList[a];\n    }\n    if (useNativeQuickSort) {\n      Array.prototype.sort.call(sortedTriangleIndices, compare);\n    } else {\n      ProgressiveQuickSort.sort(sortedTriangleIndices, compare, 0, sortedTriangleIndices.length - 1);\n    }\n  },\n  _progressiveQuickSort: function (frame) {\n    var faceZList = this._triangleZList;\n    var sortedTriangleIndices = this._sortedTriangleIndices;\n    this._quickSort = this._quickSort || new ProgressiveQuickSort();\n    this._quickSort.step(sortedTriangleIndices, function (a, b) {\n      return faceZList[b] - faceZList[a];\n    }, frame);\n  }\n};","map":{"version":3,"names":["ProgressiveQuickSort","glmatrix","vec3","p0","create","p1","p2","needsSortTriangles","indices","sortTriangles","needsSortTrianglesProgressively","triangleCount","doSortTriangles","cameraPos","frame","posAttr","attributes","position","array","_triangleZList","length","Float32Array","_sortedTriangleIndices","Uint32Array","_indicesTmp","constructor","_triangleZListTmp","cursor","firstZ","i","get","z0","sqrDist","z1","z2","zMax","Math","min","sortedTriangleIndices","_simpleSort","_progressiveQuickSort","targetIndices","targetTriangleZList","faceZList","fromIdx3","toIdx3","tmp","dirtyIndices","useNativeQuickSort","compare","a","b","Array","prototype","sort","call","_quickSort","step"],"sources":["E:/mytest/node_modules/echarts-gl/lib/util/geometry/trianglesSortMixin.js"],"sourcesContent":["import ProgressiveQuickSort from '../ProgressiveQuickSort';\nimport glmatrix from 'claygl/src/dep/glmatrix';\nvar vec3 = glmatrix.vec3;\nvar p0 = vec3.create();\nvar p1 = vec3.create();\nvar p2 = vec3.create(); // var cp = vec3.create();\n\nexport default {\n  needsSortTriangles: function () {\n    return this.indices && this.sortTriangles;\n  },\n  needsSortTrianglesProgressively: function () {\n    return this.needsSortTriangles() && this.triangleCount >= 2e4;\n  },\n  doSortTriangles: function (cameraPos, frame) {\n    var indices = this.indices; // Do progressive quick sort.\n\n    if (frame === 0) {\n      var posAttr = this.attributes.position;\n      var cameraPos = cameraPos.array;\n\n      if (!this._triangleZList || this._triangleZList.length !== this.triangleCount) {\n        this._triangleZList = new Float32Array(this.triangleCount);\n        this._sortedTriangleIndices = new Uint32Array(this.triangleCount);\n        this._indicesTmp = new indices.constructor(indices.length);\n        this._triangleZListTmp = new Float32Array(this.triangleCount);\n      }\n\n      var cursor = 0;\n      var firstZ;\n\n      for (var i = 0; i < indices.length;) {\n        posAttr.get(indices[i++], p0);\n        posAttr.get(indices[i++], p1);\n        posAttr.get(indices[i++], p2); // FIXME If use center ?\n        // cp[0] = (p0[0] + p1[0] + p2[0]) / 3;\n        // cp[1] = (p0[1] + p1[1] + p2[1]) / 3;\n        // cp[2] = (p0[2] + p1[2] + p2[2]) / 3;\n        // Camera position is in object space\n        // Use max of three points, PENDING\n\n        var z0 = vec3.sqrDist(p0, cameraPos);\n        var z1 = vec3.sqrDist(p1, cameraPos);\n        var z2 = vec3.sqrDist(p2, cameraPos);\n        var zMax = Math.min(z0, z1);\n        zMax = Math.min(zMax, z2);\n\n        if (i === 3) {\n          firstZ = zMax;\n          zMax = 0;\n        } else {\n          // Only store the difference to avoid the precision issue.\n          zMax = zMax - firstZ;\n        }\n\n        this._triangleZList[cursor++] = zMax;\n      }\n    }\n\n    var sortedTriangleIndices = this._sortedTriangleIndices;\n\n    for (var i = 0; i < sortedTriangleIndices.length; i++) {\n      sortedTriangleIndices[i] = i;\n    }\n\n    if (this.triangleCount < 2e4) {\n      // Use simple timsort for simple geometries.\n      if (frame === 0) {\n        // Use native sort temporary.\n        this._simpleSort(true);\n      }\n    } else {\n      for (var i = 0; i < 3; i++) {\n        this._progressiveQuickSort(frame * 3 + i);\n      }\n    }\n\n    var targetIndices = this._indicesTmp;\n    var targetTriangleZList = this._triangleZListTmp;\n    var faceZList = this._triangleZList;\n\n    for (var i = 0; i < this.triangleCount; i++) {\n      var fromIdx3 = sortedTriangleIndices[i] * 3;\n      var toIdx3 = i * 3;\n      targetIndices[toIdx3++] = indices[fromIdx3++];\n      targetIndices[toIdx3++] = indices[fromIdx3++];\n      targetIndices[toIdx3] = indices[fromIdx3];\n      targetTriangleZList[i] = faceZList[sortedTriangleIndices[i]];\n    } // Swap indices.\n\n\n    var tmp = this._indicesTmp;\n    this._indicesTmp = this.indices;\n    this.indices = tmp;\n    var tmp = this._triangleZListTmp;\n    this._triangleZListTmp = this._triangleZList;\n    this._triangleZList = tmp;\n    this.dirtyIndices();\n  },\n  _simpleSort: function (useNativeQuickSort) {\n    var faceZList = this._triangleZList;\n    var sortedTriangleIndices = this._sortedTriangleIndices;\n\n    function compare(a, b) {\n      // Sort from far to near. which is descending order\n      return faceZList[b] - faceZList[a];\n    }\n\n    if (useNativeQuickSort) {\n      Array.prototype.sort.call(sortedTriangleIndices, compare);\n    } else {\n      ProgressiveQuickSort.sort(sortedTriangleIndices, compare, 0, sortedTriangleIndices.length - 1);\n    }\n  },\n  _progressiveQuickSort: function (frame) {\n    var faceZList = this._triangleZList;\n    var sortedTriangleIndices = this._sortedTriangleIndices;\n    this._quickSort = this._quickSort || new ProgressiveQuickSort();\n\n    this._quickSort.step(sortedTriangleIndices, function (a, b) {\n      return faceZList[b] - faceZList[a];\n    }, frame);\n  }\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}