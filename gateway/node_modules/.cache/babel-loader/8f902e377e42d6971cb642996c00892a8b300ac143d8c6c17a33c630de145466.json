{"ast":null,"code":"import \"core-js/modules/es.array-buffer.detached.js\";\nimport \"core-js/modules/es.array-buffer.transfer.js\";\nimport \"core-js/modules/es.array-buffer.transfer-to-fixed-length.js\";\nimport \"core-js/modules/es.typed-array.to-reversed.js\";\nimport \"core-js/modules/es.typed-array.to-sorted.js\";\nimport \"core-js/modules/es.typed-array.with.js\";\n// TODO ECharts GL must be imported whatever component,charts is imported.\nimport '../../echarts-gl';\nimport SurfaceSeries from './SurfaceSeries';\nimport SurfaceView from './SurfaceView';\nexport function install(registers) {\n  registers.registerChartView(SurfaceView);\n  registers.registerSeriesModel(SurfaceSeries);\n  registers.registerLayout(function (ecModel, api) {\n    ecModel.eachSeriesByType('surface', function (surfaceModel) {\n      var cartesian = surfaceModel.coordinateSystem;\n      if (!cartesian || cartesian.type !== 'cartesian3D') {\n        if (process.env.NODE_ENV !== 'production') {\n          console.error('Surface chart only support cartesian3D coordinateSystem');\n        }\n      }\n      var data = surfaceModel.getData();\n      var points = new Float32Array(3 * data.count());\n      var nanPoint = [NaN, NaN, NaN];\n      if (cartesian && cartesian.type === 'cartesian3D') {\n        var coordDims = cartesian.dimensions;\n        var dims = coordDims.map(function (coordDim) {\n          return surfaceModel.coordDimToDataDim(coordDim)[0];\n        });\n        data.each(dims, function (x, y, z, idx) {\n          var pt;\n          if (!data.hasValue(idx)) {\n            pt = nanPoint;\n          } else {\n            pt = cartesian.dataToPoint([x, y, z]);\n          }\n          points[idx * 3] = pt[0];\n          points[idx * 3 + 1] = pt[1];\n          points[idx * 3 + 2] = pt[2];\n        });\n      }\n      data.setLayout('points', points);\n    });\n  });\n}","map":{"version":3,"names":["SurfaceSeries","SurfaceView","install","registers","registerChartView","registerSeriesModel","registerLayout","ecModel","api","eachSeriesByType","surfaceModel","cartesian","coordinateSystem","type","process","env","NODE_ENV","console","error","data","getData","points","Float32Array","count","nanPoint","NaN","coordDims","dimensions","dims","map","coordDim","coordDimToDataDim","each","x","y","z","idx","pt","hasValue","dataToPoint","setLayout"],"sources":["E:/QuestionairePlanet_Fronted/mytest/node_modules/echarts-gl/lib/chart/surface/install.js"],"sourcesContent":["// TODO ECharts GL must be imported whatever component,charts is imported.\nimport '../../echarts-gl';\nimport SurfaceSeries from './SurfaceSeries';\nimport SurfaceView from './SurfaceView';\nexport function install(registers) {\n  registers.registerChartView(SurfaceView);\n  registers.registerSeriesModel(SurfaceSeries);\n  registers.registerLayout(function (ecModel, api) {\n    ecModel.eachSeriesByType('surface', function (surfaceModel) {\n      var cartesian = surfaceModel.coordinateSystem;\n\n      if (!cartesian || cartesian.type !== 'cartesian3D') {\n        if (process.env.NODE_ENV !== 'production') {\n          console.error('Surface chart only support cartesian3D coordinateSystem');\n        }\n      }\n\n      var data = surfaceModel.getData();\n      var points = new Float32Array(3 * data.count());\n      var nanPoint = [NaN, NaN, NaN];\n\n      if (cartesian && cartesian.type === 'cartesian3D') {\n        var coordDims = cartesian.dimensions;\n        var dims = coordDims.map(function (coordDim) {\n          return surfaceModel.coordDimToDataDim(coordDim)[0];\n        });\n        data.each(dims, function (x, y, z, idx) {\n          var pt;\n\n          if (!data.hasValue(idx)) {\n            pt = nanPoint;\n          } else {\n            pt = cartesian.dataToPoint([x, y, z]);\n          }\n\n          points[idx * 3] = pt[0];\n          points[idx * 3 + 1] = pt[1];\n          points[idx * 3 + 2] = pt[2];\n        });\n      }\n\n      data.setLayout('points', points);\n    });\n  });\n}"],"mappings":";;;;;;AAAA;AACA,OAAO,kBAAkB;AACzB,OAAOA,aAAa,MAAM,iBAAiB;AAC3C,OAAOC,WAAW,MAAM,eAAe;AACvC,OAAO,SAASC,OAAOA,CAACC,SAAS,EAAE;EACjCA,SAAS,CAACC,iBAAiB,CAACH,WAAW,CAAC;EACxCE,SAAS,CAACE,mBAAmB,CAACL,aAAa,CAAC;EAC5CG,SAAS,CAACG,cAAc,CAAC,UAAUC,OAAO,EAAEC,GAAG,EAAE;IAC/CD,OAAO,CAACE,gBAAgB,CAAC,SAAS,EAAE,UAAUC,YAAY,EAAE;MAC1D,IAAIC,SAAS,GAAGD,YAAY,CAACE,gBAAgB;MAE7C,IAAI,CAACD,SAAS,IAAIA,SAAS,CAACE,IAAI,KAAK,aAAa,EAAE;QAClD,IAAIC,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,YAAY,EAAE;UACzCC,OAAO,CAACC,KAAK,CAAC,yDAAyD,CAAC;QAC1E;MACF;MAEA,IAAIC,IAAI,GAAGT,YAAY,CAACU,OAAO,CAAC,CAAC;MACjC,IAAIC,MAAM,GAAG,IAAIC,YAAY,CAAC,CAAC,GAAGH,IAAI,CAACI,KAAK,CAAC,CAAC,CAAC;MAC/C,IAAIC,QAAQ,GAAG,CAACC,GAAG,EAAEA,GAAG,EAAEA,GAAG,CAAC;MAE9B,IAAId,SAAS,IAAIA,SAAS,CAACE,IAAI,KAAK,aAAa,EAAE;QACjD,IAAIa,SAAS,GAAGf,SAAS,CAACgB,UAAU;QACpC,IAAIC,IAAI,GAAGF,SAAS,CAACG,GAAG,CAAC,UAAUC,QAAQ,EAAE;UAC3C,OAAOpB,YAAY,CAACqB,iBAAiB,CAACD,QAAQ,CAAC,CAAC,CAAC,CAAC;QACpD,CAAC,CAAC;QACFX,IAAI,CAACa,IAAI,CAACJ,IAAI,EAAE,UAAUK,CAAC,EAAEC,CAAC,EAAEC,CAAC,EAAEC,GAAG,EAAE;UACtC,IAAIC,EAAE;UAEN,IAAI,CAAClB,IAAI,CAACmB,QAAQ,CAACF,GAAG,CAAC,EAAE;YACvBC,EAAE,GAAGb,QAAQ;UACf,CAAC,MAAM;YACLa,EAAE,GAAG1B,SAAS,CAAC4B,WAAW,CAAC,CAACN,CAAC,EAAEC,CAAC,EAAEC,CAAC,CAAC,CAAC;UACvC;UAEAd,MAAM,CAACe,GAAG,GAAG,CAAC,CAAC,GAAGC,EAAE,CAAC,CAAC,CAAC;UACvBhB,MAAM,CAACe,GAAG,GAAG,CAAC,GAAG,CAAC,CAAC,GAAGC,EAAE,CAAC,CAAC,CAAC;UAC3BhB,MAAM,CAACe,GAAG,GAAG,CAAC,GAAG,CAAC,CAAC,GAAGC,EAAE,CAAC,CAAC,CAAC;QAC7B,CAAC,CAAC;MACJ;MAEAlB,IAAI,CAACqB,SAAS,CAAC,QAAQ,EAAEnB,MAAM,CAAC;IAClC,CAAC,CAAC;EACJ,CAAC,CAAC;AACJ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}