{"ast":null,"code":"import * as echarts from 'echarts/lib/echarts';\nimport graphicGL from '../../util/graphicGL';\nimport ViewGL from '../../core/ViewGL';\nimport Lines2DGeometry from '../../util/geometry/Lines2D';\nimport GLViewHelper from '../common/GLViewHelper';\nimport { getItemVisualColor, getItemVisualOpacity } from '../../util/visual';\nimport retrieve from '../../util/retrieve';\nexport default echarts.ChartView.extend({\n  type: 'linesGL',\n  __ecgl__: true,\n  init: function (ecModel, api) {\n    this.groupGL = new graphicGL.Node();\n    this.viewGL = new ViewGL('orthographic');\n    this.viewGL.add(this.groupGL);\n    this._glViewHelper = new GLViewHelper(this.viewGL);\n    this._nativeLinesShader = graphicGL.createShader('ecgl.lines3D');\n    this._meshLinesShader = graphicGL.createShader('ecgl.meshLines3D');\n    this._linesMeshes = [];\n    this._currentStep = 0;\n  },\n  render: function (seriesModel, ecModel, api) {\n    this.groupGL.removeAll();\n    this._glViewHelper.reset(seriesModel, api);\n    var linesMesh = this._linesMeshes[0];\n    if (!linesMesh) {\n      linesMesh = this._linesMeshes[0] = this._createLinesMesh(seriesModel);\n    }\n    this._linesMeshes.length = 1;\n    this.groupGL.add(linesMesh);\n    this._updateLinesMesh(seriesModel, linesMesh, 0, seriesModel.getData().count());\n    this.viewGL.setPostEffect(seriesModel.getModel('postEffect'), api);\n  },\n  incrementalPrepareRender: function (seriesModel, ecModel, api) {\n    this.groupGL.removeAll();\n    this._glViewHelper.reset(seriesModel, api);\n    this._currentStep = 0;\n    this.viewGL.setPostEffect(seriesModel.getModel('postEffect'), api);\n  },\n  incrementalRender: function (params, seriesModel, ecModel, api) {\n    var linesMesh = this._linesMeshes[this._currentStep];\n    if (!linesMesh) {\n      linesMesh = this._createLinesMesh(seriesModel);\n      this._linesMeshes[this._currentStep] = linesMesh;\n    }\n    this._updateLinesMesh(seriesModel, linesMesh, params.start, params.end);\n    this.groupGL.add(linesMesh);\n    api.getZr().refresh();\n    this._currentStep++;\n  },\n  updateTransform: function (seriesModel, ecModel, api) {\n    if (seriesModel.coordinateSystem.getRoamTransform) {\n      this._glViewHelper.updateTransform(seriesModel, api);\n    }\n  },\n  _createLinesMesh: function (seriesModel) {\n    var linesMesh = new graphicGL.Mesh({\n      $ignorePicking: true,\n      material: new graphicGL.Material({\n        shader: graphicGL.createShader('ecgl.lines3D'),\n        transparent: true,\n        depthMask: false,\n        depthTest: false\n      }),\n      geometry: new Lines2DGeometry({\n        segmentScale: 10,\n        useNativeLine: true,\n        dynamic: false\n      }),\n      mode: graphicGL.Mesh.LINES,\n      culling: false\n    });\n    return linesMesh;\n  },\n  _updateLinesMesh: function (seriesModel, linesMesh, start, end) {\n    var data = seriesModel.getData();\n    linesMesh.material.blend = seriesModel.get('blendMode') === 'lighter' ? graphicGL.additiveBlend : null;\n    var curveness = seriesModel.get('lineStyle.curveness') || 0;\n    var isPolyline = seriesModel.get('polyline');\n    var geometry = linesMesh.geometry;\n    var coordSys = seriesModel.coordinateSystem;\n    var lineWidth = retrieve.firstNotNull(seriesModel.get('lineStyle.width'), 1);\n    if (lineWidth > 1) {\n      if (linesMesh.material.shader !== this._meshLinesShader) {\n        linesMesh.material.attachShader(this._meshLinesShader);\n      }\n      linesMesh.mode = graphicGL.Mesh.TRIANGLES;\n    } else {\n      if (linesMesh.material.shader !== this._nativeLinesShader) {\n        linesMesh.material.attachShader(this._nativeLinesShader);\n      }\n      linesMesh.mode = graphicGL.Mesh.LINES;\n    }\n    start = start || 0;\n    end = end || data.count();\n    geometry.resetOffset();\n    var vertexCount = 0;\n    var triangleCount = 0;\n    var p0 = [];\n    var p1 = [];\n    var p2 = [];\n    var p3 = [];\n    var lineCoords = [];\n    var t = 0.3;\n    var t2 = 0.7;\n    function updateBezierControlPoints() {\n      p1[0] = p0[0] * t2 + p3[0] * t - (p0[1] - p3[1]) * curveness;\n      p1[1] = p0[1] * t2 + p3[1] * t - (p3[0] - p0[0]) * curveness;\n      p2[0] = p0[0] * t + p3[0] * t2 - (p0[1] - p3[1]) * curveness;\n      p2[1] = p0[1] * t + p3[1] * t2 - (p3[0] - p0[0]) * curveness;\n    }\n    if (isPolyline || curveness !== 0) {\n      for (var idx = start; idx < end; idx++) {\n        if (isPolyline) {\n          var count = seriesModel.getLineCoordsCount(idx);\n          vertexCount += geometry.getPolylineVertexCount(count);\n          triangleCount += geometry.getPolylineTriangleCount(count);\n        } else {\n          seriesModel.getLineCoords(idx, lineCoords);\n          this._glViewHelper.dataToPoint(coordSys, lineCoords[0], p0);\n          this._glViewHelper.dataToPoint(coordSys, lineCoords[1], p3);\n          updateBezierControlPoints();\n          vertexCount += geometry.getCubicCurveVertexCount(p0, p1, p2, p3);\n          triangleCount += geometry.getCubicCurveTriangleCount(p0, p1, p2, p3);\n        }\n      }\n    } else {\n      var lineCount = end - start;\n      vertexCount += lineCount * geometry.getLineVertexCount();\n      triangleCount += lineCount * geometry.getLineVertexCount();\n    }\n    geometry.setVertexCount(vertexCount);\n    geometry.setTriangleCount(triangleCount);\n    var dataIndex = start;\n    var colorArr = [];\n    for (var idx = start; idx < end; idx++) {\n      graphicGL.parseColor(getItemVisualColor(data, dataIndex), colorArr);\n      var opacity = retrieve.firstNotNull(getItemVisualOpacity(data, dataIndex), 1);\n      colorArr[3] *= opacity;\n      var count = seriesModel.getLineCoords(idx, lineCoords);\n      for (var k = 0; k < count; k++) {\n        this._glViewHelper.dataToPoint(coordSys, lineCoords[k], lineCoords[k]);\n      }\n      if (isPolyline) {\n        geometry.addPolyline(lineCoords, colorArr, lineWidth, 0, count);\n      } else if (curveness !== 0) {\n        p0 = lineCoords[0];\n        p3 = lineCoords[1];\n        updateBezierControlPoints();\n        geometry.addCubicCurve(p0, p1, p2, p3, colorArr, lineWidth);\n      } else {\n        geometry.addPolyline(lineCoords, colorArr, lineWidth, 0, 2);\n      }\n      dataIndex++;\n    }\n  },\n  dispose: function () {\n    this.groupGL.removeAll();\n  },\n  remove: function () {\n    this.groupGL.removeAll();\n  }\n});","map":{"version":3,"names":["echarts","graphicGL","ViewGL","Lines2DGeometry","GLViewHelper","getItemVisualColor","getItemVisualOpacity","retrieve","ChartView","extend","type","__ecgl__","init","ecModel","api","groupGL","Node","viewGL","add","_glViewHelper","_nativeLinesShader","createShader","_meshLinesShader","_linesMeshes","_currentStep","render","seriesModel","removeAll","reset","linesMesh","_createLinesMesh","length","_updateLinesMesh","getData","count","setPostEffect","getModel","incrementalPrepareRender","incrementalRender","params","start","end","getZr","refresh","updateTransform","coordinateSystem","getRoamTransform","Mesh","$ignorePicking","material","Material","shader","transparent","depthMask","depthTest","geometry","segmentScale","useNativeLine","dynamic","mode","LINES","culling","data","blend","get","additiveBlend","curveness","isPolyline","coordSys","lineWidth","firstNotNull","attachShader","TRIANGLES","resetOffset","vertexCount","triangleCount","p0","p1","p2","p3","lineCoords","t","t2","updateBezierControlPoints","idx","getLineCoordsCount","getPolylineVertexCount","getPolylineTriangleCount","getLineCoords","dataToPoint","getCubicCurveVertexCount","getCubicCurveTriangleCount","lineCount","getLineVertexCount","setVertexCount","setTriangleCount","dataIndex","colorArr","parseColor","opacity","k","addPolyline","addCubicCurve","dispose","remove"],"sources":["E:/mytest/node_modules/echarts-gl/lib/chart/linesGL/LinesGLView.js"],"sourcesContent":["import * as echarts from 'echarts/lib/echarts';\nimport graphicGL from '../../util/graphicGL';\nimport ViewGL from '../../core/ViewGL';\nimport Lines2DGeometry from '../../util/geometry/Lines2D';\nimport GLViewHelper from '../common/GLViewHelper';\nimport { getItemVisualColor, getItemVisualOpacity } from '../../util/visual';\nimport retrieve from '../../util/retrieve';\nexport default echarts.ChartView.extend({\n  type: 'linesGL',\n  __ecgl__: true,\n  init: function (ecModel, api) {\n    this.groupGL = new graphicGL.Node();\n    this.viewGL = new ViewGL('orthographic');\n    this.viewGL.add(this.groupGL);\n    this._glViewHelper = new GLViewHelper(this.viewGL);\n    this._nativeLinesShader = graphicGL.createShader('ecgl.lines3D');\n    this._meshLinesShader = graphicGL.createShader('ecgl.meshLines3D');\n    this._linesMeshes = [];\n    this._currentStep = 0;\n  },\n  render: function (seriesModel, ecModel, api) {\n    this.groupGL.removeAll();\n\n    this._glViewHelper.reset(seriesModel, api);\n\n    var linesMesh = this._linesMeshes[0];\n\n    if (!linesMesh) {\n      linesMesh = this._linesMeshes[0] = this._createLinesMesh(seriesModel);\n    }\n\n    this._linesMeshes.length = 1;\n    this.groupGL.add(linesMesh);\n\n    this._updateLinesMesh(seriesModel, linesMesh, 0, seriesModel.getData().count());\n\n    this.viewGL.setPostEffect(seriesModel.getModel('postEffect'), api);\n  },\n  incrementalPrepareRender: function (seriesModel, ecModel, api) {\n    this.groupGL.removeAll();\n\n    this._glViewHelper.reset(seriesModel, api);\n\n    this._currentStep = 0;\n    this.viewGL.setPostEffect(seriesModel.getModel('postEffect'), api);\n  },\n  incrementalRender: function (params, seriesModel, ecModel, api) {\n    var linesMesh = this._linesMeshes[this._currentStep];\n\n    if (!linesMesh) {\n      linesMesh = this._createLinesMesh(seriesModel);\n      this._linesMeshes[this._currentStep] = linesMesh;\n    }\n\n    this._updateLinesMesh(seriesModel, linesMesh, params.start, params.end);\n\n    this.groupGL.add(linesMesh);\n    api.getZr().refresh();\n    this._currentStep++;\n  },\n  updateTransform: function (seriesModel, ecModel, api) {\n    if (seriesModel.coordinateSystem.getRoamTransform) {\n      this._glViewHelper.updateTransform(seriesModel, api);\n    }\n  },\n  _createLinesMesh: function (seriesModel) {\n    var linesMesh = new graphicGL.Mesh({\n      $ignorePicking: true,\n      material: new graphicGL.Material({\n        shader: graphicGL.createShader('ecgl.lines3D'),\n        transparent: true,\n        depthMask: false,\n        depthTest: false\n      }),\n      geometry: new Lines2DGeometry({\n        segmentScale: 10,\n        useNativeLine: true,\n        dynamic: false\n      }),\n      mode: graphicGL.Mesh.LINES,\n      culling: false\n    });\n    return linesMesh;\n  },\n  _updateLinesMesh: function (seriesModel, linesMesh, start, end) {\n    var data = seriesModel.getData();\n    linesMesh.material.blend = seriesModel.get('blendMode') === 'lighter' ? graphicGL.additiveBlend : null;\n    var curveness = seriesModel.get('lineStyle.curveness') || 0;\n    var isPolyline = seriesModel.get('polyline');\n    var geometry = linesMesh.geometry;\n    var coordSys = seriesModel.coordinateSystem;\n    var lineWidth = retrieve.firstNotNull(seriesModel.get('lineStyle.width'), 1);\n\n    if (lineWidth > 1) {\n      if (linesMesh.material.shader !== this._meshLinesShader) {\n        linesMesh.material.attachShader(this._meshLinesShader);\n      }\n\n      linesMesh.mode = graphicGL.Mesh.TRIANGLES;\n    } else {\n      if (linesMesh.material.shader !== this._nativeLinesShader) {\n        linesMesh.material.attachShader(this._nativeLinesShader);\n      }\n\n      linesMesh.mode = graphicGL.Mesh.LINES;\n    }\n\n    start = start || 0;\n    end = end || data.count();\n    geometry.resetOffset();\n    var vertexCount = 0;\n    var triangleCount = 0;\n    var p0 = [];\n    var p1 = [];\n    var p2 = [];\n    var p3 = [];\n    var lineCoords = [];\n    var t = 0.3;\n    var t2 = 0.7;\n\n    function updateBezierControlPoints() {\n      p1[0] = p0[0] * t2 + p3[0] * t - (p0[1] - p3[1]) * curveness;\n      p1[1] = p0[1] * t2 + p3[1] * t - (p3[0] - p0[0]) * curveness;\n      p2[0] = p0[0] * t + p3[0] * t2 - (p0[1] - p3[1]) * curveness;\n      p2[1] = p0[1] * t + p3[1] * t2 - (p3[0] - p0[0]) * curveness;\n    }\n\n    if (isPolyline || curveness !== 0) {\n      for (var idx = start; idx < end; idx++) {\n        if (isPolyline) {\n          var count = seriesModel.getLineCoordsCount(idx);\n          vertexCount += geometry.getPolylineVertexCount(count);\n          triangleCount += geometry.getPolylineTriangleCount(count);\n        } else {\n          seriesModel.getLineCoords(idx, lineCoords);\n\n          this._glViewHelper.dataToPoint(coordSys, lineCoords[0], p0);\n\n          this._glViewHelper.dataToPoint(coordSys, lineCoords[1], p3);\n\n          updateBezierControlPoints();\n          vertexCount += geometry.getCubicCurveVertexCount(p0, p1, p2, p3);\n          triangleCount += geometry.getCubicCurveTriangleCount(p0, p1, p2, p3);\n        }\n      }\n    } else {\n      var lineCount = end - start;\n      vertexCount += lineCount * geometry.getLineVertexCount();\n      triangleCount += lineCount * geometry.getLineVertexCount();\n    }\n\n    geometry.setVertexCount(vertexCount);\n    geometry.setTriangleCount(triangleCount);\n    var dataIndex = start;\n    var colorArr = [];\n\n    for (var idx = start; idx < end; idx++) {\n      graphicGL.parseColor(getItemVisualColor(data, dataIndex), colorArr);\n      var opacity = retrieve.firstNotNull(getItemVisualOpacity(data, dataIndex), 1);\n      colorArr[3] *= opacity;\n      var count = seriesModel.getLineCoords(idx, lineCoords);\n\n      for (var k = 0; k < count; k++) {\n        this._glViewHelper.dataToPoint(coordSys, lineCoords[k], lineCoords[k]);\n      }\n\n      if (isPolyline) {\n        geometry.addPolyline(lineCoords, colorArr, lineWidth, 0, count);\n      } else if (curveness !== 0) {\n        p0 = lineCoords[0];\n        p3 = lineCoords[1];\n        updateBezierControlPoints();\n        geometry.addCubicCurve(p0, p1, p2, p3, colorArr, lineWidth);\n      } else {\n        geometry.addPolyline(lineCoords, colorArr, lineWidth, 0, 2);\n      }\n\n      dataIndex++;\n    }\n  },\n  dispose: function () {\n    this.groupGL.removeAll();\n  },\n  remove: function () {\n    this.groupGL.removeAll();\n  }\n});"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}