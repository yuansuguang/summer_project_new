{"ast":null,"code":"import * as echarts from 'echarts/lib/echarts';\nimport componentViewControlMixin from '../common/componentViewControlMixin';\nimport componentPostEffectMixin from '../common/componentPostEffectMixin';\nimport componentLightMixin from '../common/componentLightMixin';\nvar Grid3DModel = echarts.ComponentModel.extend({\n  type: 'grid3D',\n  dependencies: ['xAxis3D', 'yAxis3D', 'zAxis3D'],\n  defaultOption: {\n    show: true,\n    zlevel: -10,\n    // Layout used for viewport\n    left: 0,\n    top: 0,\n    width: '100%',\n    height: '100%',\n    environment: 'auto',\n    // Dimension of grid3D\n    boxWidth: 100,\n    boxHeight: 100,\n    boxDepth: 100,\n    // Common axis options.\n    axisPointer: {\n      show: true,\n      lineStyle: {\n        color: 'rgba(0, 0, 0, 0.8)',\n        width: 1\n      },\n      label: {\n        show: true,\n        // (dimValue: number, value: Array) => string\n        formatter: null,\n        // TODO, Consider boxWidth\n        margin: 8,\n        // backgroundColor: '#ffbd67',\n        // borderColor: '#000',\n        // borderWidth: 0,\n        textStyle: {\n          fontSize: 14,\n          color: '#fff',\n          backgroundColor: 'rgba(0,0,0,0.5)',\n          padding: 3,\n          borderRadius: 3\n        }\n      }\n    },\n    axisLine: {\n      show: true,\n      lineStyle: {\n        color: '#333',\n        width: 2,\n        type: 'solid'\n      }\n    },\n    axisTick: {\n      show: true,\n      inside: false,\n      length: 3,\n      lineStyle: {\n        width: 1\n      }\n    },\n    axisLabel: {\n      show: true,\n      inside: false,\n      rotate: 0,\n      margin: 8,\n      textStyle: {\n        fontSize: 12\n      }\n    },\n    splitLine: {\n      show: true,\n      lineStyle: {\n        color: ['#ccc'],\n        width: 1,\n        type: 'solid'\n      }\n    },\n    splitArea: {\n      show: false,\n      areaStyle: {\n        color: ['rgba(250,250,250,0.3)', 'rgba(200,200,200,0.3)']\n      }\n    },\n    // Light options\n    light: {\n      main: {\n        // Alpha angle for top-down rotation\n        // Positive to rotate to top.\n        alpha: 30,\n        // beta angle for left-right rotation\n        // Positive to rotate to right.\n        beta: 40\n      },\n      ambient: {\n        intensity: 0.4\n      }\n    },\n    viewControl: {\n      // Small damping for precise control.\n      // damping: 0.1,\n      // Alpha angle for top-down rotation\n      // Positive to rotate to top.\n      alpha: 20,\n      // beta angle for left-right rotation\n      // Positive to rotate to right.\n      beta: 40,\n      autoRotate: false,\n      // Distance to the surface of grid3D.\n      distance: 200,\n      // Min distance to the surface of grid3D\n      minDistance: 40,\n      // Max distance to the surface of grid3D\n      maxDistance: 400\n    }\n  }\n});\necharts.util.merge(Grid3DModel.prototype, componentViewControlMixin);\necharts.util.merge(Grid3DModel.prototype, componentPostEffectMixin);\necharts.util.merge(Grid3DModel.prototype, componentLightMixin);\nexport default Grid3DModel;","map":{"version":3,"names":["echarts","componentViewControlMixin","componentPostEffectMixin","componentLightMixin","Grid3DModel","ComponentModel","extend","type","dependencies","defaultOption","show","zlevel","left","top","width","height","environment","boxWidth","boxHeight","boxDepth","axisPointer","lineStyle","color","label","formatter","margin","textStyle","fontSize","backgroundColor","padding","borderRadius","axisLine","axisTick","inside","length","axisLabel","rotate","splitLine","splitArea","areaStyle","light","main","alpha","beta","ambient","intensity","viewControl","autoRotate","distance","minDistance","maxDistance","util","merge","prototype"],"sources":["E:/mytest/node_modules/echarts-gl/lib/component/grid3D/Grid3DModel.js"],"sourcesContent":["import * as echarts from 'echarts/lib/echarts';\nimport componentViewControlMixin from '../common/componentViewControlMixin';\nimport componentPostEffectMixin from '../common/componentPostEffectMixin';\nimport componentLightMixin from '../common/componentLightMixin';\nvar Grid3DModel = echarts.ComponentModel.extend({\n  type: 'grid3D',\n  dependencies: ['xAxis3D', 'yAxis3D', 'zAxis3D'],\n  defaultOption: {\n    show: true,\n    zlevel: -10,\n    // Layout used for viewport\n    left: 0,\n    top: 0,\n    width: '100%',\n    height: '100%',\n    environment: 'auto',\n    // Dimension of grid3D\n    boxWidth: 100,\n    boxHeight: 100,\n    boxDepth: 100,\n    // Common axis options.\n    axisPointer: {\n      show: true,\n      lineStyle: {\n        color: 'rgba(0, 0, 0, 0.8)',\n        width: 1\n      },\n      label: {\n        show: true,\n        // (dimValue: number, value: Array) => string\n        formatter: null,\n        // TODO, Consider boxWidth\n        margin: 8,\n        // backgroundColor: '#ffbd67',\n        // borderColor: '#000',\n        // borderWidth: 0,\n        textStyle: {\n          fontSize: 14,\n          color: '#fff',\n          backgroundColor: 'rgba(0,0,0,0.5)',\n          padding: 3,\n          borderRadius: 3\n        }\n      }\n    },\n    axisLine: {\n      show: true,\n      lineStyle: {\n        color: '#333',\n        width: 2,\n        type: 'solid'\n      }\n    },\n    axisTick: {\n      show: true,\n      inside: false,\n      length: 3,\n      lineStyle: {\n        width: 1\n      }\n    },\n    axisLabel: {\n      show: true,\n      inside: false,\n      rotate: 0,\n      margin: 8,\n      textStyle: {\n        fontSize: 12\n      }\n    },\n    splitLine: {\n      show: true,\n      lineStyle: {\n        color: ['#ccc'],\n        width: 1,\n        type: 'solid'\n      }\n    },\n    splitArea: {\n      show: false,\n      areaStyle: {\n        color: ['rgba(250,250,250,0.3)', 'rgba(200,200,200,0.3)']\n      }\n    },\n    // Light options\n    light: {\n      main: {\n        // Alpha angle for top-down rotation\n        // Positive to rotate to top.\n        alpha: 30,\n        // beta angle for left-right rotation\n        // Positive to rotate to right.\n        beta: 40\n      },\n      ambient: {\n        intensity: 0.4\n      }\n    },\n    viewControl: {\n      // Small damping for precise control.\n      // damping: 0.1,\n      // Alpha angle for top-down rotation\n      // Positive to rotate to top.\n      alpha: 20,\n      // beta angle for left-right rotation\n      // Positive to rotate to right.\n      beta: 40,\n      autoRotate: false,\n      // Distance to the surface of grid3D.\n      distance: 200,\n      // Min distance to the surface of grid3D\n      minDistance: 40,\n      // Max distance to the surface of grid3D\n      maxDistance: 400\n    }\n  }\n});\necharts.util.merge(Grid3DModel.prototype, componentViewControlMixin);\necharts.util.merge(Grid3DModel.prototype, componentPostEffectMixin);\necharts.util.merge(Grid3DModel.prototype, componentLightMixin);\nexport default Grid3DModel;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}