{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.array-buffer.detached.js\";\nimport \"core-js/modules/es.array-buffer.transfer.js\";\nimport \"core-js/modules/es.array-buffer.transfer-to-fixed-length.js\";\nimport \"core-js/modules/es.typed-array.to-reversed.js\";\nimport \"core-js/modules/es.typed-array.to-sorted.js\";\nimport \"core-js/modules/es.typed-array.with.js\";\nimport * as echarts from 'echarts/lib/echarts';\nimport { getLayoutRect } from 'echarts/lib/util/layout';\nimport graphicGL from '../../util/graphicGL';\nimport ViewGL from '../../core/ViewGL';\nimport Lines2DGeometry from '../../util/geometry/Lines2D';\nimport retrieve from '../../util/retrieve';\nimport ForceAtlas2GPU from './ForceAtlas2GPU';\nimport ForceAtlas2 from './ForceAtlas2';\nimport requestAnimationFrame from 'zrender/lib/animation/requestAnimationFrame';\nimport glmatrix from 'claygl/src/dep/glmatrix';\nimport { getItemVisualColor, getItemVisualOpacity } from '../../util/visual';\nvar vec2 = glmatrix.vec2;\nimport Roam2DControl from '../../util/Roam2DControl';\nimport PointsBuilder from '../common/PointsBuilder';\nimport lines2DGLSL from '../../util/shader/lines2D.glsl.js';\ngraphicGL.Shader.import(lines2DGLSL);\nvar globalLayoutId = 1;\nexport default echarts.ChartView.extend({\n  type: 'graphGL',\n  __ecgl__: true,\n  init: function (ecModel, api) {\n    this.groupGL = new graphicGL.Node();\n    this.viewGL = new ViewGL('orthographic');\n    this.viewGL.camera.left = this.viewGL.camera.right = 0;\n    this.viewGL.add(this.groupGL);\n    this._pointsBuilder = new PointsBuilder(true, api); // Mesh used during force directed layout.\n\n    this._forceEdgesMesh = new graphicGL.Mesh({\n      material: new graphicGL.Material({\n        shader: graphicGL.createShader('ecgl.forceAtlas2.edges'),\n        transparent: true,\n        depthMask: false,\n        depthTest: false\n      }),\n      $ignorePicking: true,\n      geometry: new graphicGL.Geometry({\n        attributes: {\n          node: new graphicGL.Geometry.Attribute('node', 'float', 2),\n          color: new graphicGL.Geometry.Attribute('color', 'float', 4, 'COLOR')\n        },\n        dynamic: true,\n        mainAttribute: 'node'\n      }),\n      renderOrder: -1,\n      mode: graphicGL.Mesh.LINES\n    }); // Mesh used after force directed layout.\n\n    this._edgesMesh = new graphicGL.Mesh({\n      material: new graphicGL.Material({\n        shader: graphicGL.createShader('ecgl.meshLines2D'),\n        transparent: true,\n        depthMask: false,\n        depthTest: false\n      }),\n      $ignorePicking: true,\n      geometry: new Lines2DGeometry({\n        useNativeLine: false,\n        dynamic: true\n      }),\n      renderOrder: -1,\n      culling: false\n    });\n    this._layoutId = 0;\n    this._control = new Roam2DControl({\n      zr: api.getZr(),\n      viewGL: this.viewGL\n    });\n    this._control.setTarget(this.groupGL);\n    this._control.init();\n    this._clickHandler = this._clickHandler.bind(this);\n  },\n  render: function (seriesModel, ecModel, api) {\n    this.groupGL.add(this._pointsBuilder.rootNode);\n    this._model = seriesModel;\n    this._api = api;\n    this._initLayout(seriesModel, ecModel, api);\n    this._pointsBuilder.update(seriesModel, ecModel, api);\n    if (!(this._forceLayoutInstance instanceof ForceAtlas2GPU)) {\n      this.groupGL.remove(this._forceEdgesMesh);\n    }\n    this._updateCamera(seriesModel, api);\n    this._control.off('update');\n    this._control.on('update', function () {\n      api.dispatchAction({\n        type: 'graphGLRoam',\n        seriesId: seriesModel.id,\n        zoom: this._control.getZoom(),\n        offset: this._control.getOffset()\n      });\n      this._pointsBuilder.updateView(this.viewGL.camera);\n    }, this);\n    this._control.setZoom(retrieve.firstNotNull(seriesModel.get('zoom'), 1));\n    this._control.setOffset(seriesModel.get('offset') || [0, 0]);\n    var mesh = this._pointsBuilder.getPointsMesh();\n    mesh.off('mousemove', this._mousemoveHandler);\n    mesh.off('mouseout', this._mouseOutHandler, this);\n    api.getZr().off('click', this._clickHandler);\n    this._pointsBuilder.highlightOnMouseover = true;\n    if (seriesModel.get('focusNodeAdjacency')) {\n      var focusNodeAdjacencyOn = seriesModel.get('focusNodeAdjacencyOn');\n      if (focusNodeAdjacencyOn === 'click') {\n        // Remove default emphasis effect\n        api.getZr().on('click', this._clickHandler);\n      } else if (focusNodeAdjacencyOn === 'mouseover') {\n        mesh.on('mousemove', this._mousemoveHandler, this);\n        mesh.on('mouseout', this._mouseOutHandler, this);\n        this._pointsBuilder.highlightOnMouseover = false;\n      } else {\n        if (process.env.NODE_ENV !== 'production') {\n          console.warn('Unkown focusNodeAdjacencyOn value \\s' + focusNodeAdjacencyOn);\n        }\n      }\n    } // Reset\n\n    this._lastMouseOverDataIndex = -1;\n  },\n  _clickHandler: function (e) {\n    if (this._layouting) {\n      return;\n    }\n    var dataIndex = this._pointsBuilder.getPointsMesh().dataIndex;\n    if (dataIndex >= 0) {\n      this._api.dispatchAction({\n        type: 'graphGLFocusNodeAdjacency',\n        seriesId: this._model.id,\n        dataIndex: dataIndex\n      });\n    } else {\n      this._api.dispatchAction({\n        type: 'graphGLUnfocusNodeAdjacency',\n        seriesId: this._model.id\n      });\n    }\n  },\n  _mousemoveHandler: function (e) {\n    if (this._layouting) {\n      return;\n    }\n    var dataIndex = this._pointsBuilder.getPointsMesh().dataIndex;\n    if (dataIndex >= 0) {\n      if (dataIndex !== this._lastMouseOverDataIndex) {\n        this._api.dispatchAction({\n          type: 'graphGLFocusNodeAdjacency',\n          seriesId: this._model.id,\n          dataIndex: dataIndex\n        });\n      }\n    } else {\n      this._mouseOutHandler(e);\n    }\n    this._lastMouseOverDataIndex = dataIndex;\n  },\n  _mouseOutHandler: function (e) {\n    if (this._layouting) {\n      return;\n    }\n    this._api.dispatchAction({\n      type: 'graphGLUnfocusNodeAdjacency',\n      seriesId: this._model.id\n    });\n    this._lastMouseOverDataIndex = -1;\n  },\n  _updateForceEdgesGeometry: function (edges, seriesModel) {\n    var geometry = this._forceEdgesMesh.geometry;\n    var edgeData = seriesModel.getEdgeData();\n    var offset = 0;\n    var layoutInstance = this._forceLayoutInstance;\n    var vertexCount = edgeData.count() * 2;\n    geometry.attributes.node.init(vertexCount);\n    geometry.attributes.color.init(vertexCount);\n    edgeData.each(function (idx) {\n      var edge = edges[idx];\n      geometry.attributes.node.set(offset, layoutInstance.getNodeUV(edge.node1));\n      geometry.attributes.node.set(offset + 1, layoutInstance.getNodeUV(edge.node2));\n      var color = getItemVisualColor(edgeData, edge.dataIndex);\n      var colorArr = graphicGL.parseColor(color);\n      colorArr[3] *= retrieve.firstNotNull(getItemVisualOpacity(edgeData, edge.dataIndex), 1);\n      geometry.attributes.color.set(offset, colorArr);\n      geometry.attributes.color.set(offset + 1, colorArr);\n      offset += 2;\n    });\n    geometry.dirty();\n  },\n  _updateMeshLinesGeometry: function () {\n    var edgeData = this._model.getEdgeData();\n    var geometry = this._edgesMesh.geometry;\n    var edgeData = this._model.getEdgeData();\n    var points = this._model.getData().getLayout('points');\n    geometry.resetOffset();\n    geometry.setVertexCount(edgeData.count() * geometry.getLineVertexCount());\n    geometry.setTriangleCount(edgeData.count() * geometry.getLineTriangleCount());\n    var p0 = [];\n    var p1 = [];\n    var lineWidthQuery = ['lineStyle', 'width'];\n    this._originalEdgeColors = new Float32Array(edgeData.count() * 4);\n    this._edgeIndicesMap = new Float32Array(edgeData.count());\n    edgeData.each(function (idx) {\n      var edge = edgeData.graph.getEdgeByIndex(idx);\n      var idx1 = edge.node1.dataIndex * 2;\n      var idx2 = edge.node2.dataIndex * 2;\n      p0[0] = points[idx1];\n      p0[1] = points[idx1 + 1];\n      p1[0] = points[idx2];\n      p1[1] = points[idx2 + 1];\n      var color = getItemVisualColor(edgeData, edge.dataIndex);\n      var colorArr = graphicGL.parseColor(color);\n      colorArr[3] *= retrieve.firstNotNull(getItemVisualOpacity(edgeData, edge.dataIndex), 1);\n      var itemModel = edgeData.getItemModel(edge.dataIndex);\n      var lineWidth = retrieve.firstNotNull(itemModel.get(lineWidthQuery), 1) * this._api.getDevicePixelRatio();\n      geometry.addLine(p0, p1, colorArr, lineWidth);\n      for (var k = 0; k < 4; k++) {\n        this._originalEdgeColors[edge.dataIndex * 4 + k] = colorArr[k];\n      }\n      this._edgeIndicesMap[edge.dataIndex] = idx;\n    }, this);\n    geometry.dirty();\n  },\n  _updateForceNodesGeometry: function (nodeData) {\n    var pointsMesh = this._pointsBuilder.getPointsMesh();\n    var pos = [];\n    for (var i = 0; i < nodeData.count(); i++) {\n      this._forceLayoutInstance.getNodeUV(i, pos);\n      pointsMesh.geometry.attributes.position.set(i, pos);\n    }\n    pointsMesh.geometry.dirty('position');\n  },\n  _initLayout: function (seriesModel, ecModel, api) {\n    var layout = seriesModel.get('layout');\n    var graph = seriesModel.getGraph();\n    var boxLayoutOption = seriesModel.getBoxLayoutParams();\n    var viewport = getLayoutRect(boxLayoutOption, {\n      width: api.getWidth(),\n      height: api.getHeight()\n    });\n    if (layout === 'force') {\n      if (process.env.NODE_ENV !== 'production') {\n        console.warn('Currently only forceAtlas2 layout supported.');\n      }\n      layout = 'forceAtlas2';\n    } // Stop previous layout\n\n    this.stopLayout(seriesModel, ecModel, api, {\n      beforeLayout: true\n    });\n    var nodeData = seriesModel.getData();\n    var edgeData = seriesModel.getData();\n    if (layout === 'forceAtlas2') {\n      var layoutModel = seriesModel.getModel('forceAtlas2');\n      var layoutInstance = this._forceLayoutInstance;\n      var nodes = [];\n      var edges = [];\n      var nodeDataExtent = nodeData.getDataExtent('value');\n      var edgeDataExtent = edgeData.getDataExtent('value');\n      var edgeWeightRange = retrieve.firstNotNull(layoutModel.get('edgeWeight'), 1.0);\n      var nodeWeightRange = retrieve.firstNotNull(layoutModel.get('nodeWeight'), 1.0);\n      if (typeof edgeWeightRange === 'number') {\n        edgeWeightRange = [edgeWeightRange, edgeWeightRange];\n      }\n      if (typeof nodeWeightRange === 'number') {\n        nodeWeightRange = [nodeWeightRange, nodeWeightRange];\n      }\n      var offset = 0;\n      var nodesIndicesMap = {};\n      var layoutPoints = new Float32Array(nodeData.count() * 2);\n      graph.eachNode(function (node) {\n        var dataIndex = node.dataIndex;\n        var value = nodeData.get('value', dataIndex);\n        var x;\n        var y;\n        if (nodeData.hasItemOption) {\n          var itemModel = nodeData.getItemModel(dataIndex);\n          x = itemModel.get('x');\n          y = itemModel.get('y');\n        }\n        if (x == null) {\n          // Random in rectangle\n          x = viewport.x + Math.random() * viewport.width;\n          y = viewport.y + Math.random() * viewport.height;\n        }\n        layoutPoints[offset * 2] = x;\n        layoutPoints[offset * 2 + 1] = y;\n        nodesIndicesMap[node.id] = offset++;\n        var mass = echarts.number.linearMap(value, nodeDataExtent, nodeWeightRange);\n        if (isNaN(mass)) {\n          if (!isNaN(nodeWeightRange[0])) {\n            mass = nodeWeightRange[0];\n          } else {\n            mass = 1;\n          }\n        }\n        nodes.push({\n          x: x,\n          y: y,\n          mass: mass,\n          size: nodeData.getItemVisual(dataIndex, 'symbolSize')\n        });\n      });\n      nodeData.setLayout('points', layoutPoints);\n      graph.eachEdge(function (edge) {\n        var dataIndex = edge.dataIndex;\n        var value = nodeData.get('value', dataIndex);\n        var weight = echarts.number.linearMap(value, edgeDataExtent, edgeWeightRange);\n        if (isNaN(weight)) {\n          if (!isNaN(edgeWeightRange[0])) {\n            weight = edgeWeightRange[0];\n          } else {\n            weight = 1;\n          }\n        }\n        edges.push({\n          node1: nodesIndicesMap[edge.node1.id],\n          node2: nodesIndicesMap[edge.node2.id],\n          weight: weight,\n          dataIndex: dataIndex\n        });\n      });\n      if (!layoutInstance) {\n        var isGPU = layoutModel.get('GPU');\n        if (this._forceLayoutInstance) {\n          if (isGPU && !(this._forceLayoutInstance instanceof ForceAtlas2GPU) || !isGPU && !(this._forceLayoutInstance instanceof ForceAtlas2)) {\n            // Mark to dispose\n            this._forceLayoutInstanceToDispose = this._forceLayoutInstance;\n          }\n        }\n        layoutInstance = this._forceLayoutInstance = isGPU ? new ForceAtlas2GPU() : new ForceAtlas2();\n      }\n      layoutInstance.initData(nodes, edges);\n      layoutInstance.updateOption(layoutModel.option); // Update lines geometry after first layout;\n\n      this._updateForceEdgesGeometry(layoutInstance.getEdges(), seriesModel);\n      this._updatePositionTexture();\n      api.dispatchAction({\n        type: 'graphGLStartLayout',\n        from: this.uid\n      });\n    } else {\n      var layoutPoints = new Float32Array(nodeData.count() * 2);\n      var offset = 0;\n      graph.eachNode(function (node) {\n        var dataIndex = node.dataIndex;\n        var x;\n        var y;\n        if (nodeData.hasItemOption) {\n          var itemModel = nodeData.getItemModel(dataIndex);\n          x = itemModel.get('x');\n          y = itemModel.get('y');\n        }\n        layoutPoints[offset++] = x;\n        layoutPoints[offset++] = y;\n      });\n      nodeData.setLayout('points', layoutPoints);\n      this._updateAfterLayout(seriesModel, ecModel, api);\n    }\n  },\n  _updatePositionTexture: function () {\n    var positionTex = this._forceLayoutInstance.getNodePositionTexture();\n    this._pointsBuilder.setPositionTexture(positionTex);\n    this._forceEdgesMesh.material.set('positionTex', positionTex);\n  },\n  startLayout: function (seriesModel, ecModel, api, payload) {\n    if (payload && payload.from != null && payload.from !== this.uid) {\n      return;\n    }\n    var viewGL = this.viewGL;\n    var api = this._api;\n    var layoutInstance = this._forceLayoutInstance;\n    var data = this._model.getData();\n    var layoutModel = this._model.getModel('forceAtlas2');\n    if (!layoutInstance) {\n      if (process.env.NODE_ENV !== 'production') {\n        console.error('None layout don\\'t have startLayout action');\n      }\n      return;\n    }\n    this.groupGL.remove(this._edgesMesh);\n    this.groupGL.add(this._forceEdgesMesh);\n    if (!this._forceLayoutInstance) {\n      return;\n    }\n    this._updateForceNodesGeometry(seriesModel.getData());\n    this._pointsBuilder.hideLabels();\n    var self = this;\n    var layoutId = this._layoutId = globalLayoutId++;\n    var maxSteps = layoutModel.getShallow('maxSteps');\n    var steps = layoutModel.getShallow('steps');\n    var stepsCount = 0;\n    var syncStepCount = Math.max(steps * 2, 20);\n    var doLayout = function (layoutId) {\n      if (layoutId !== self._layoutId) {\n        return;\n      }\n      if (layoutInstance.isFinished(maxSteps)) {\n        api.dispatchAction({\n          type: 'graphGLStopLayout',\n          from: self.uid\n        });\n        api.dispatchAction({\n          type: 'graphGLFinishLayout',\n          points: data.getLayout('points'),\n          from: self.uid\n        });\n        return;\n      }\n      layoutInstance.update(viewGL.layer.renderer, steps, function () {\n        self._updatePositionTexture(); // PENDING Performance.\n\n        stepsCount += steps; // Sync posiiton every 20 steps.\n\n        if (stepsCount >= syncStepCount) {\n          self._syncNodePosition(seriesModel);\n          stepsCount = 0;\n        } // Position texture will been swapped. set every time.\n\n        api.getZr().refresh();\n        requestAnimationFrame(function () {\n          doLayout(layoutId);\n        });\n      });\n    };\n    requestAnimationFrame(function () {\n      if (self._forceLayoutInstanceToDispose) {\n        self._forceLayoutInstanceToDispose.dispose(viewGL.layer.renderer);\n        self._forceLayoutInstanceToDispose = null;\n      }\n      doLayout(layoutId);\n    });\n    this._layouting = true;\n  },\n  stopLayout: function (seriesModel, ecModel, api, payload) {\n    if (payload && payload.from != null && payload.from !== this.uid) {\n      return;\n    }\n    this._layoutId = 0;\n    this.groupGL.remove(this._forceEdgesMesh);\n    this.groupGL.add(this._edgesMesh);\n    if (!this._forceLayoutInstance) {\n      return;\n    }\n    if (!this.viewGL.layer) {\n      return;\n    }\n    if (!(payload && payload.beforeLayout)) {\n      this._syncNodePosition(seriesModel);\n      this._updateAfterLayout(seriesModel, ecModel, api);\n    }\n    this._api.getZr().refresh();\n    this._layouting = false;\n  },\n  _syncNodePosition: function (seriesModel) {\n    var points = this._forceLayoutInstance.getNodePosition(this.viewGL.layer.renderer);\n    seriesModel.getData().setLayout('points', points);\n    seriesModel.setNodePosition(points);\n  },\n  _updateAfterLayout: function (seriesModel, ecModel, api) {\n    this._updateMeshLinesGeometry();\n    this._pointsBuilder.removePositionTexture();\n    this._pointsBuilder.updateLayout(seriesModel, ecModel, api);\n    this._pointsBuilder.updateView(this.viewGL.camera);\n    this._pointsBuilder.updateLabels();\n    this._pointsBuilder.showLabels();\n  },\n  focusNodeAdjacency: function (seriesModel, ecModel, api, payload) {\n    var data = this._model.getData();\n    this._downplayAll();\n    var dataIndex = payload.dataIndex;\n    var graph = data.graph;\n    var focusNodes = [];\n    var node = graph.getNodeByIndex(dataIndex);\n    focusNodes.push(node);\n    node.edges.forEach(function (edge) {\n      if (edge.dataIndex < 0) {\n        return;\n      }\n      edge.node1 !== node && focusNodes.push(edge.node1);\n      edge.node2 !== node && focusNodes.push(edge.node2);\n    }, this);\n    this._pointsBuilder.fadeOutAll(0.05);\n    this._fadeOutEdgesAll(0.05);\n    focusNodes.forEach(function (node) {\n      this._pointsBuilder.highlight(data, node.dataIndex);\n    }, this);\n    this._pointsBuilder.updateLabels(focusNodes.map(function (node) {\n      return node.dataIndex;\n    }));\n    var focusEdges = [];\n    node.edges.forEach(function (edge) {\n      if (edge.dataIndex >= 0) {\n        this._highlightEdge(edge.dataIndex);\n        focusEdges.push(edge);\n      }\n    }, this);\n    this._focusNodes = focusNodes;\n    this._focusEdges = focusEdges;\n  },\n  unfocusNodeAdjacency: function (seriesModel, ecModel, api, payload) {\n    this._downplayAll();\n    this._pointsBuilder.fadeInAll();\n    this._fadeInEdgesAll();\n    this._pointsBuilder.updateLabels();\n  },\n  _highlightEdge: function (dataIndex) {\n    var itemModel = this._model.getEdgeData().getItemModel(dataIndex);\n    var emphasisColor = graphicGL.parseColor(itemModel.get('emphasis.lineStyle.color') || itemModel.get('lineStyle.color'));\n    var emphasisOpacity = retrieve.firstNotNull(itemModel.get('emphasis.lineStyle.opacity'), itemModel.get('lineStyle.opacity'), 1);\n    emphasisColor[3] *= emphasisOpacity;\n    this._edgesMesh.geometry.setItemColor(this._edgeIndicesMap[dataIndex], emphasisColor);\n  },\n  _downplayAll: function () {\n    if (this._focusNodes) {\n      this._focusNodes.forEach(function (node) {\n        this._pointsBuilder.downplay(this._model.getData(), node.dataIndex);\n      }, this);\n    }\n    if (this._focusEdges) {\n      this._focusEdges.forEach(function (edge) {\n        this._downplayEdge(edge.dataIndex);\n      }, this);\n    }\n  },\n  _downplayEdge: function (dataIndex) {\n    var color = this._getColor(dataIndex, []);\n    this._edgesMesh.geometry.setItemColor(this._edgeIndicesMap[dataIndex], color);\n  },\n  _setEdgeFade: function () {\n    var color = [];\n    return function (dataIndex, percent) {\n      this._getColor(dataIndex, color);\n      color[3] *= percent;\n      this._edgesMesh.geometry.setItemColor(this._edgeIndicesMap[dataIndex], color);\n    };\n  }(),\n  _getColor: function (dataIndex, out) {\n    for (var i = 0; i < 4; i++) {\n      out[i] = this._originalEdgeColors[dataIndex * 4 + i];\n    }\n    return out;\n  },\n  _fadeOutEdgesAll: function (percent) {\n    var graph = this._model.getData().graph;\n    graph.eachEdge(function (edge) {\n      this._setEdgeFade(edge.dataIndex, percent);\n    }, this);\n  },\n  _fadeInEdgesAll: function () {\n    this._fadeOutEdgesAll(1);\n  },\n  _updateCamera: function (seriesModel, api) {\n    this.viewGL.setViewport(0, 0, api.getWidth(), api.getHeight(), api.getDevicePixelRatio());\n    var camera = this.viewGL.camera;\n    var nodeData = seriesModel.getData();\n    var points = nodeData.getLayout('points');\n    var min = vec2.create(Infinity, Infinity);\n    var max = vec2.create(-Infinity, -Infinity);\n    var pt = [];\n    for (var i = 0; i < points.length;) {\n      pt[0] = points[i++];\n      pt[1] = points[i++];\n      vec2.min(min, min, pt);\n      vec2.max(max, max, pt);\n    }\n    var cy = (max[1] + min[1]) / 2;\n    var cx = (max[0] + min[0]) / 2; // Only fit the camera when graph is not in the center.\n    // PENDING\n\n    if (cx > camera.left && cx < camera.right && cy < camera.bottom && cy > camera.top) {\n      return;\n    } // Scale a bit\n\n    var width = Math.max(max[0] - min[0], 10); // Keep aspect\n\n    var height = width / api.getWidth() * api.getHeight();\n    width *= 1.4;\n    height *= 1.4;\n    min[0] -= width * 0.2;\n    camera.left = min[0];\n    camera.top = cy - height / 2;\n    camera.bottom = cy + height / 2;\n    camera.right = width + min[0];\n    camera.near = 0;\n    camera.far = 100;\n  },\n  dispose: function () {\n    var renderer = this.viewGL.layer.renderer;\n    if (this._forceLayoutInstance) {\n      this._forceLayoutInstance.dispose(renderer);\n    }\n    this.groupGL.removeAll(); // Stop layout.\n\n    this._layoutId = -1;\n    this._pointsBuilder.dispose();\n  },\n  remove: function () {\n    this.groupGL.removeAll();\n    this._control.dispose();\n  }\n});","map":{"version":3,"names":["echarts","getLayoutRect","graphicGL","ViewGL","Lines2DGeometry","retrieve","ForceAtlas2GPU","ForceAtlas2","requestAnimationFrame","glmatrix","getItemVisualColor","getItemVisualOpacity","vec2","Roam2DControl","PointsBuilder","lines2DGLSL","Shader","import","globalLayoutId","ChartView","extend","type","__ecgl__","init","ecModel","api","groupGL","Node","viewGL","camera","left","right","add","_pointsBuilder","_forceEdgesMesh","Mesh","material","Material","shader","createShader","transparent","depthMask","depthTest","$ignorePicking","geometry","Geometry","attributes","node","Attribute","color","dynamic","mainAttribute","renderOrder","mode","LINES","_edgesMesh","useNativeLine","culling","_layoutId","_control","zr","getZr","setTarget","_clickHandler","bind","render","seriesModel","rootNode","_model","_api","_initLayout","update","_forceLayoutInstance","remove","_updateCamera","off","on","dispatchAction","seriesId","id","zoom","getZoom","offset","getOffset","updateView","setZoom","firstNotNull","get","setOffset","mesh","getPointsMesh","_mousemoveHandler","_mouseOutHandler","highlightOnMouseover","focusNodeAdjacencyOn","process","env","NODE_ENV","console","warn","_lastMouseOverDataIndex","e","_layouting","dataIndex","_updateForceEdgesGeometry","edges","edgeData","getEdgeData","layoutInstance","vertexCount","count","each","idx","edge","set","getNodeUV","node1","node2","colorArr","parseColor","dirty","_updateMeshLinesGeometry","points","getData","getLayout","resetOffset","setVertexCount","getLineVertexCount","setTriangleCount","getLineTriangleCount","p0","p1","lineWidthQuery","_originalEdgeColors","Float32Array","_edgeIndicesMap","graph","getEdgeByIndex","idx1","idx2","itemModel","getItemModel","lineWidth","getDevicePixelRatio","addLine","k","_updateForceNodesGeometry","nodeData","pointsMesh","pos","i","position","layout","getGraph","boxLayoutOption","getBoxLayoutParams","viewport","width","getWidth","height","getHeight","stopLayout","beforeLayout","layoutModel","getModel","nodes","nodeDataExtent","getDataExtent","edgeDataExtent","edgeWeightRange","nodeWeightRange","nodesIndicesMap","layoutPoints","eachNode","value","x","y","hasItemOption","Math","random","mass","number","linearMap","isNaN","push","size","getItemVisual","setLayout","eachEdge","weight","isGPU","_forceLayoutInstanceToDispose","initData","updateOption","option","getEdges","_updatePositionTexture","from","uid","_updateAfterLayout","positionTex","getNodePositionTexture","setPositionTexture","startLayout","payload","data","error","hideLabels","self","layoutId","maxSteps","getShallow","steps","stepsCount","syncStepCount","max","doLayout","isFinished","layer","renderer","_syncNodePosition","refresh","dispose","getNodePosition","setNodePosition","removePositionTexture","updateLayout","updateLabels","showLabels","focusNodeAdjacency","_downplayAll","focusNodes","getNodeByIndex","forEach","fadeOutAll","_fadeOutEdgesAll","highlight","map","focusEdges","_highlightEdge","_focusNodes","_focusEdges","unfocusNodeAdjacency","fadeInAll","_fadeInEdgesAll","emphasisColor","emphasisOpacity","setItemColor","downplay","_downplayEdge","_getColor","_setEdgeFade","percent","out","setViewport","min","create","Infinity","pt","length","cy","cx","bottom","top","near","far","removeAll"],"sources":["E:/mytest/node_modules/echarts-gl/lib/chart/graphGL/GraphGLView.js"],"sourcesContent":["import * as echarts from 'echarts/lib/echarts';\nimport { getLayoutRect } from 'echarts/lib/util/layout';\nimport graphicGL from '../../util/graphicGL';\nimport ViewGL from '../../core/ViewGL';\nimport Lines2DGeometry from '../../util/geometry/Lines2D';\nimport retrieve from '../../util/retrieve';\nimport ForceAtlas2GPU from './ForceAtlas2GPU';\nimport ForceAtlas2 from './ForceAtlas2';\nimport requestAnimationFrame from 'zrender/lib/animation/requestAnimationFrame';\nimport glmatrix from 'claygl/src/dep/glmatrix';\nimport { getItemVisualColor, getItemVisualOpacity } from '../../util/visual';\nvar vec2 = glmatrix.vec2;\nimport Roam2DControl from '../../util/Roam2DControl';\nimport PointsBuilder from '../common/PointsBuilder';\nimport lines2DGLSL from '../../util/shader/lines2D.glsl.js';\ngraphicGL.Shader.import(lines2DGLSL);\nvar globalLayoutId = 1;\nexport default echarts.ChartView.extend({\n  type: 'graphGL',\n  __ecgl__: true,\n  init: function (ecModel, api) {\n    this.groupGL = new graphicGL.Node();\n    this.viewGL = new ViewGL('orthographic');\n    this.viewGL.camera.left = this.viewGL.camera.right = 0;\n    this.viewGL.add(this.groupGL);\n    this._pointsBuilder = new PointsBuilder(true, api); // Mesh used during force directed layout.\n\n    this._forceEdgesMesh = new graphicGL.Mesh({\n      material: new graphicGL.Material({\n        shader: graphicGL.createShader('ecgl.forceAtlas2.edges'),\n        transparent: true,\n        depthMask: false,\n        depthTest: false\n      }),\n      $ignorePicking: true,\n      geometry: new graphicGL.Geometry({\n        attributes: {\n          node: new graphicGL.Geometry.Attribute('node', 'float', 2),\n          color: new graphicGL.Geometry.Attribute('color', 'float', 4, 'COLOR')\n        },\n        dynamic: true,\n        mainAttribute: 'node'\n      }),\n      renderOrder: -1,\n      mode: graphicGL.Mesh.LINES\n    }); // Mesh used after force directed layout.\n\n    this._edgesMesh = new graphicGL.Mesh({\n      material: new graphicGL.Material({\n        shader: graphicGL.createShader('ecgl.meshLines2D'),\n        transparent: true,\n        depthMask: false,\n        depthTest: false\n      }),\n      $ignorePicking: true,\n      geometry: new Lines2DGeometry({\n        useNativeLine: false,\n        dynamic: true\n      }),\n      renderOrder: -1,\n      culling: false\n    });\n    this._layoutId = 0;\n    this._control = new Roam2DControl({\n      zr: api.getZr(),\n      viewGL: this.viewGL\n    });\n\n    this._control.setTarget(this.groupGL);\n\n    this._control.init();\n\n    this._clickHandler = this._clickHandler.bind(this);\n  },\n  render: function (seriesModel, ecModel, api) {\n    this.groupGL.add(this._pointsBuilder.rootNode);\n    this._model = seriesModel;\n    this._api = api;\n\n    this._initLayout(seriesModel, ecModel, api);\n\n    this._pointsBuilder.update(seriesModel, ecModel, api);\n\n    if (!(this._forceLayoutInstance instanceof ForceAtlas2GPU)) {\n      this.groupGL.remove(this._forceEdgesMesh);\n    }\n\n    this._updateCamera(seriesModel, api);\n\n    this._control.off('update');\n\n    this._control.on('update', function () {\n      api.dispatchAction({\n        type: 'graphGLRoam',\n        seriesId: seriesModel.id,\n        zoom: this._control.getZoom(),\n        offset: this._control.getOffset()\n      });\n\n      this._pointsBuilder.updateView(this.viewGL.camera);\n    }, this);\n\n    this._control.setZoom(retrieve.firstNotNull(seriesModel.get('zoom'), 1));\n\n    this._control.setOffset(seriesModel.get('offset') || [0, 0]);\n\n    var mesh = this._pointsBuilder.getPointsMesh();\n\n    mesh.off('mousemove', this._mousemoveHandler);\n    mesh.off('mouseout', this._mouseOutHandler, this);\n    api.getZr().off('click', this._clickHandler);\n    this._pointsBuilder.highlightOnMouseover = true;\n\n    if (seriesModel.get('focusNodeAdjacency')) {\n      var focusNodeAdjacencyOn = seriesModel.get('focusNodeAdjacencyOn');\n\n      if (focusNodeAdjacencyOn === 'click') {\n        // Remove default emphasis effect\n        api.getZr().on('click', this._clickHandler);\n      } else if (focusNodeAdjacencyOn === 'mouseover') {\n        mesh.on('mousemove', this._mousemoveHandler, this);\n        mesh.on('mouseout', this._mouseOutHandler, this);\n        this._pointsBuilder.highlightOnMouseover = false;\n      } else {\n        if (process.env.NODE_ENV !== 'production') {\n          console.warn('Unkown focusNodeAdjacencyOn value \\s' + focusNodeAdjacencyOn);\n        }\n      }\n    } // Reset\n\n\n    this._lastMouseOverDataIndex = -1;\n  },\n  _clickHandler: function (e) {\n    if (this._layouting) {\n      return;\n    }\n\n    var dataIndex = this._pointsBuilder.getPointsMesh().dataIndex;\n\n    if (dataIndex >= 0) {\n      this._api.dispatchAction({\n        type: 'graphGLFocusNodeAdjacency',\n        seriesId: this._model.id,\n        dataIndex: dataIndex\n      });\n    } else {\n      this._api.dispatchAction({\n        type: 'graphGLUnfocusNodeAdjacency',\n        seriesId: this._model.id\n      });\n    }\n  },\n  _mousemoveHandler: function (e) {\n    if (this._layouting) {\n      return;\n    }\n\n    var dataIndex = this._pointsBuilder.getPointsMesh().dataIndex;\n\n    if (dataIndex >= 0) {\n      if (dataIndex !== this._lastMouseOverDataIndex) {\n        this._api.dispatchAction({\n          type: 'graphGLFocusNodeAdjacency',\n          seriesId: this._model.id,\n          dataIndex: dataIndex\n        });\n      }\n    } else {\n      this._mouseOutHandler(e);\n    }\n\n    this._lastMouseOverDataIndex = dataIndex;\n  },\n  _mouseOutHandler: function (e) {\n    if (this._layouting) {\n      return;\n    }\n\n    this._api.dispatchAction({\n      type: 'graphGLUnfocusNodeAdjacency',\n      seriesId: this._model.id\n    });\n\n    this._lastMouseOverDataIndex = -1;\n  },\n  _updateForceEdgesGeometry: function (edges, seriesModel) {\n    var geometry = this._forceEdgesMesh.geometry;\n    var edgeData = seriesModel.getEdgeData();\n    var offset = 0;\n    var layoutInstance = this._forceLayoutInstance;\n    var vertexCount = edgeData.count() * 2;\n    geometry.attributes.node.init(vertexCount);\n    geometry.attributes.color.init(vertexCount);\n    edgeData.each(function (idx) {\n      var edge = edges[idx];\n      geometry.attributes.node.set(offset, layoutInstance.getNodeUV(edge.node1));\n      geometry.attributes.node.set(offset + 1, layoutInstance.getNodeUV(edge.node2));\n      var color = getItemVisualColor(edgeData, edge.dataIndex);\n      var colorArr = graphicGL.parseColor(color);\n      colorArr[3] *= retrieve.firstNotNull(getItemVisualOpacity(edgeData, edge.dataIndex), 1);\n      geometry.attributes.color.set(offset, colorArr);\n      geometry.attributes.color.set(offset + 1, colorArr);\n      offset += 2;\n    });\n    geometry.dirty();\n  },\n  _updateMeshLinesGeometry: function () {\n    var edgeData = this._model.getEdgeData();\n\n    var geometry = this._edgesMesh.geometry;\n\n    var edgeData = this._model.getEdgeData();\n\n    var points = this._model.getData().getLayout('points');\n\n    geometry.resetOffset();\n    geometry.setVertexCount(edgeData.count() * geometry.getLineVertexCount());\n    geometry.setTriangleCount(edgeData.count() * geometry.getLineTriangleCount());\n    var p0 = [];\n    var p1 = [];\n    var lineWidthQuery = ['lineStyle', 'width'];\n    this._originalEdgeColors = new Float32Array(edgeData.count() * 4);\n    this._edgeIndicesMap = new Float32Array(edgeData.count());\n    edgeData.each(function (idx) {\n      var edge = edgeData.graph.getEdgeByIndex(idx);\n      var idx1 = edge.node1.dataIndex * 2;\n      var idx2 = edge.node2.dataIndex * 2;\n      p0[0] = points[idx1];\n      p0[1] = points[idx1 + 1];\n      p1[0] = points[idx2];\n      p1[1] = points[idx2 + 1];\n      var color = getItemVisualColor(edgeData, edge.dataIndex);\n      var colorArr = graphicGL.parseColor(color);\n      colorArr[3] *= retrieve.firstNotNull(getItemVisualOpacity(edgeData, edge.dataIndex), 1);\n      var itemModel = edgeData.getItemModel(edge.dataIndex);\n\n      var lineWidth = retrieve.firstNotNull(itemModel.get(lineWidthQuery), 1) * this._api.getDevicePixelRatio();\n\n      geometry.addLine(p0, p1, colorArr, lineWidth);\n\n      for (var k = 0; k < 4; k++) {\n        this._originalEdgeColors[edge.dataIndex * 4 + k] = colorArr[k];\n      }\n\n      this._edgeIndicesMap[edge.dataIndex] = idx;\n    }, this);\n    geometry.dirty();\n  },\n  _updateForceNodesGeometry: function (nodeData) {\n    var pointsMesh = this._pointsBuilder.getPointsMesh();\n\n    var pos = [];\n\n    for (var i = 0; i < nodeData.count(); i++) {\n      this._forceLayoutInstance.getNodeUV(i, pos);\n\n      pointsMesh.geometry.attributes.position.set(i, pos);\n    }\n\n    pointsMesh.geometry.dirty('position');\n  },\n  _initLayout: function (seriesModel, ecModel, api) {\n    var layout = seriesModel.get('layout');\n    var graph = seriesModel.getGraph();\n    var boxLayoutOption = seriesModel.getBoxLayoutParams();\n    var viewport = getLayoutRect(boxLayoutOption, {\n      width: api.getWidth(),\n      height: api.getHeight()\n    });\n\n    if (layout === 'force') {\n      if (process.env.NODE_ENV !== 'production') {\n        console.warn('Currently only forceAtlas2 layout supported.');\n      }\n\n      layout = 'forceAtlas2';\n    } // Stop previous layout\n\n\n    this.stopLayout(seriesModel, ecModel, api, {\n      beforeLayout: true\n    });\n    var nodeData = seriesModel.getData();\n    var edgeData = seriesModel.getData();\n\n    if (layout === 'forceAtlas2') {\n      var layoutModel = seriesModel.getModel('forceAtlas2');\n      var layoutInstance = this._forceLayoutInstance;\n      var nodes = [];\n      var edges = [];\n      var nodeDataExtent = nodeData.getDataExtent('value');\n      var edgeDataExtent = edgeData.getDataExtent('value');\n      var edgeWeightRange = retrieve.firstNotNull(layoutModel.get('edgeWeight'), 1.0);\n      var nodeWeightRange = retrieve.firstNotNull(layoutModel.get('nodeWeight'), 1.0);\n\n      if (typeof edgeWeightRange === 'number') {\n        edgeWeightRange = [edgeWeightRange, edgeWeightRange];\n      }\n\n      if (typeof nodeWeightRange === 'number') {\n        nodeWeightRange = [nodeWeightRange, nodeWeightRange];\n      }\n\n      var offset = 0;\n      var nodesIndicesMap = {};\n      var layoutPoints = new Float32Array(nodeData.count() * 2);\n      graph.eachNode(function (node) {\n        var dataIndex = node.dataIndex;\n        var value = nodeData.get('value', dataIndex);\n        var x;\n        var y;\n\n        if (nodeData.hasItemOption) {\n          var itemModel = nodeData.getItemModel(dataIndex);\n          x = itemModel.get('x');\n          y = itemModel.get('y');\n        }\n\n        if (x == null) {\n          // Random in rectangle\n          x = viewport.x + Math.random() * viewport.width;\n          y = viewport.y + Math.random() * viewport.height;\n        }\n\n        layoutPoints[offset * 2] = x;\n        layoutPoints[offset * 2 + 1] = y;\n        nodesIndicesMap[node.id] = offset++;\n        var mass = echarts.number.linearMap(value, nodeDataExtent, nodeWeightRange);\n\n        if (isNaN(mass)) {\n          if (!isNaN(nodeWeightRange[0])) {\n            mass = nodeWeightRange[0];\n          } else {\n            mass = 1;\n          }\n        }\n\n        nodes.push({\n          x: x,\n          y: y,\n          mass: mass,\n          size: nodeData.getItemVisual(dataIndex, 'symbolSize')\n        });\n      });\n      nodeData.setLayout('points', layoutPoints);\n      graph.eachEdge(function (edge) {\n        var dataIndex = edge.dataIndex;\n        var value = nodeData.get('value', dataIndex);\n        var weight = echarts.number.linearMap(value, edgeDataExtent, edgeWeightRange);\n\n        if (isNaN(weight)) {\n          if (!isNaN(edgeWeightRange[0])) {\n            weight = edgeWeightRange[0];\n          } else {\n            weight = 1;\n          }\n        }\n\n        edges.push({\n          node1: nodesIndicesMap[edge.node1.id],\n          node2: nodesIndicesMap[edge.node2.id],\n          weight: weight,\n          dataIndex: dataIndex\n        });\n      });\n\n      if (!layoutInstance) {\n        var isGPU = layoutModel.get('GPU');\n\n        if (this._forceLayoutInstance) {\n          if (isGPU && !(this._forceLayoutInstance instanceof ForceAtlas2GPU) || !isGPU && !(this._forceLayoutInstance instanceof ForceAtlas2)) {\n            // Mark to dispose\n            this._forceLayoutInstanceToDispose = this._forceLayoutInstance;\n          }\n        }\n\n        layoutInstance = this._forceLayoutInstance = isGPU ? new ForceAtlas2GPU() : new ForceAtlas2();\n      }\n\n      layoutInstance.initData(nodes, edges);\n      layoutInstance.updateOption(layoutModel.option); // Update lines geometry after first layout;\n\n      this._updateForceEdgesGeometry(layoutInstance.getEdges(), seriesModel);\n\n      this._updatePositionTexture();\n\n      api.dispatchAction({\n        type: 'graphGLStartLayout',\n        from: this.uid\n      });\n    } else {\n      var layoutPoints = new Float32Array(nodeData.count() * 2);\n      var offset = 0;\n      graph.eachNode(function (node) {\n        var dataIndex = node.dataIndex;\n        var x;\n        var y;\n\n        if (nodeData.hasItemOption) {\n          var itemModel = nodeData.getItemModel(dataIndex);\n          x = itemModel.get('x');\n          y = itemModel.get('y');\n        }\n\n        layoutPoints[offset++] = x;\n        layoutPoints[offset++] = y;\n      });\n      nodeData.setLayout('points', layoutPoints);\n\n      this._updateAfterLayout(seriesModel, ecModel, api);\n    }\n  },\n  _updatePositionTexture: function () {\n    var positionTex = this._forceLayoutInstance.getNodePositionTexture();\n\n    this._pointsBuilder.setPositionTexture(positionTex);\n\n    this._forceEdgesMesh.material.set('positionTex', positionTex);\n  },\n  startLayout: function (seriesModel, ecModel, api, payload) {\n    if (payload && payload.from != null && payload.from !== this.uid) {\n      return;\n    }\n\n    var viewGL = this.viewGL;\n    var api = this._api;\n    var layoutInstance = this._forceLayoutInstance;\n\n    var data = this._model.getData();\n\n    var layoutModel = this._model.getModel('forceAtlas2');\n\n    if (!layoutInstance) {\n      if (process.env.NODE_ENV !== 'production') {\n        console.error('None layout don\\'t have startLayout action');\n      }\n\n      return;\n    }\n\n    this.groupGL.remove(this._edgesMesh);\n    this.groupGL.add(this._forceEdgesMesh);\n\n    if (!this._forceLayoutInstance) {\n      return;\n    }\n\n    this._updateForceNodesGeometry(seriesModel.getData());\n\n    this._pointsBuilder.hideLabels();\n\n    var self = this;\n    var layoutId = this._layoutId = globalLayoutId++;\n    var maxSteps = layoutModel.getShallow('maxSteps');\n    var steps = layoutModel.getShallow('steps');\n    var stepsCount = 0;\n    var syncStepCount = Math.max(steps * 2, 20);\n\n    var doLayout = function (layoutId) {\n      if (layoutId !== self._layoutId) {\n        return;\n      }\n\n      if (layoutInstance.isFinished(maxSteps)) {\n        api.dispatchAction({\n          type: 'graphGLStopLayout',\n          from: self.uid\n        });\n        api.dispatchAction({\n          type: 'graphGLFinishLayout',\n          points: data.getLayout('points'),\n          from: self.uid\n        });\n        return;\n      }\n\n      layoutInstance.update(viewGL.layer.renderer, steps, function () {\n        self._updatePositionTexture(); // PENDING Performance.\n\n\n        stepsCount += steps; // Sync posiiton every 20 steps.\n\n        if (stepsCount >= syncStepCount) {\n          self._syncNodePosition(seriesModel);\n\n          stepsCount = 0;\n        } // Position texture will been swapped. set every time.\n\n\n        api.getZr().refresh();\n        requestAnimationFrame(function () {\n          doLayout(layoutId);\n        });\n      });\n    };\n\n    requestAnimationFrame(function () {\n      if (self._forceLayoutInstanceToDispose) {\n        self._forceLayoutInstanceToDispose.dispose(viewGL.layer.renderer);\n\n        self._forceLayoutInstanceToDispose = null;\n      }\n\n      doLayout(layoutId);\n    });\n    this._layouting = true;\n  },\n  stopLayout: function (seriesModel, ecModel, api, payload) {\n    if (payload && payload.from != null && payload.from !== this.uid) {\n      return;\n    }\n\n    this._layoutId = 0;\n    this.groupGL.remove(this._forceEdgesMesh);\n    this.groupGL.add(this._edgesMesh);\n\n    if (!this._forceLayoutInstance) {\n      return;\n    }\n\n    if (!this.viewGL.layer) {\n      return;\n    }\n\n    if (!(payload && payload.beforeLayout)) {\n      this._syncNodePosition(seriesModel);\n\n      this._updateAfterLayout(seriesModel, ecModel, api);\n    }\n\n    this._api.getZr().refresh();\n\n    this._layouting = false;\n  },\n  _syncNodePosition: function (seriesModel) {\n    var points = this._forceLayoutInstance.getNodePosition(this.viewGL.layer.renderer);\n\n    seriesModel.getData().setLayout('points', points);\n    seriesModel.setNodePosition(points);\n  },\n  _updateAfterLayout: function (seriesModel, ecModel, api) {\n    this._updateMeshLinesGeometry();\n\n    this._pointsBuilder.removePositionTexture();\n\n    this._pointsBuilder.updateLayout(seriesModel, ecModel, api);\n\n    this._pointsBuilder.updateView(this.viewGL.camera);\n\n    this._pointsBuilder.updateLabels();\n\n    this._pointsBuilder.showLabels();\n  },\n  focusNodeAdjacency: function (seriesModel, ecModel, api, payload) {\n    var data = this._model.getData();\n\n    this._downplayAll();\n\n    var dataIndex = payload.dataIndex;\n    var graph = data.graph;\n    var focusNodes = [];\n    var node = graph.getNodeByIndex(dataIndex);\n    focusNodes.push(node);\n    node.edges.forEach(function (edge) {\n      if (edge.dataIndex < 0) {\n        return;\n      }\n\n      edge.node1 !== node && focusNodes.push(edge.node1);\n      edge.node2 !== node && focusNodes.push(edge.node2);\n    }, this);\n\n    this._pointsBuilder.fadeOutAll(0.05);\n\n    this._fadeOutEdgesAll(0.05);\n\n    focusNodes.forEach(function (node) {\n      this._pointsBuilder.highlight(data, node.dataIndex);\n    }, this);\n\n    this._pointsBuilder.updateLabels(focusNodes.map(function (node) {\n      return node.dataIndex;\n    }));\n\n    var focusEdges = [];\n    node.edges.forEach(function (edge) {\n      if (edge.dataIndex >= 0) {\n        this._highlightEdge(edge.dataIndex);\n\n        focusEdges.push(edge);\n      }\n    }, this);\n    this._focusNodes = focusNodes;\n    this._focusEdges = focusEdges;\n  },\n  unfocusNodeAdjacency: function (seriesModel, ecModel, api, payload) {\n    this._downplayAll();\n\n    this._pointsBuilder.fadeInAll();\n\n    this._fadeInEdgesAll();\n\n    this._pointsBuilder.updateLabels();\n  },\n  _highlightEdge: function (dataIndex) {\n    var itemModel = this._model.getEdgeData().getItemModel(dataIndex);\n\n    var emphasisColor = graphicGL.parseColor(itemModel.get('emphasis.lineStyle.color') || itemModel.get('lineStyle.color'));\n    var emphasisOpacity = retrieve.firstNotNull(itemModel.get('emphasis.lineStyle.opacity'), itemModel.get('lineStyle.opacity'), 1);\n    emphasisColor[3] *= emphasisOpacity;\n\n    this._edgesMesh.geometry.setItemColor(this._edgeIndicesMap[dataIndex], emphasisColor);\n  },\n  _downplayAll: function () {\n    if (this._focusNodes) {\n      this._focusNodes.forEach(function (node) {\n        this._pointsBuilder.downplay(this._model.getData(), node.dataIndex);\n      }, this);\n    }\n\n    if (this._focusEdges) {\n      this._focusEdges.forEach(function (edge) {\n        this._downplayEdge(edge.dataIndex);\n      }, this);\n    }\n  },\n  _downplayEdge: function (dataIndex) {\n    var color = this._getColor(dataIndex, []);\n\n    this._edgesMesh.geometry.setItemColor(this._edgeIndicesMap[dataIndex], color);\n  },\n  _setEdgeFade: function () {\n    var color = [];\n    return function (dataIndex, percent) {\n      this._getColor(dataIndex, color);\n\n      color[3] *= percent;\n\n      this._edgesMesh.geometry.setItemColor(this._edgeIndicesMap[dataIndex], color);\n    };\n  }(),\n  _getColor: function (dataIndex, out) {\n    for (var i = 0; i < 4; i++) {\n      out[i] = this._originalEdgeColors[dataIndex * 4 + i];\n    }\n\n    return out;\n  },\n  _fadeOutEdgesAll: function (percent) {\n    var graph = this._model.getData().graph;\n\n    graph.eachEdge(function (edge) {\n      this._setEdgeFade(edge.dataIndex, percent);\n    }, this);\n  },\n  _fadeInEdgesAll: function () {\n    this._fadeOutEdgesAll(1);\n  },\n  _updateCamera: function (seriesModel, api) {\n    this.viewGL.setViewport(0, 0, api.getWidth(), api.getHeight(), api.getDevicePixelRatio());\n    var camera = this.viewGL.camera;\n    var nodeData = seriesModel.getData();\n    var points = nodeData.getLayout('points');\n    var min = vec2.create(Infinity, Infinity);\n    var max = vec2.create(-Infinity, -Infinity);\n    var pt = [];\n\n    for (var i = 0; i < points.length;) {\n      pt[0] = points[i++];\n      pt[1] = points[i++];\n      vec2.min(min, min, pt);\n      vec2.max(max, max, pt);\n    }\n\n    var cy = (max[1] + min[1]) / 2;\n    var cx = (max[0] + min[0]) / 2; // Only fit the camera when graph is not in the center.\n    // PENDING\n\n    if (cx > camera.left && cx < camera.right && cy < camera.bottom && cy > camera.top) {\n      return;\n    } // Scale a bit\n\n\n    var width = Math.max(max[0] - min[0], 10); // Keep aspect\n\n    var height = width / api.getWidth() * api.getHeight();\n    width *= 1.4;\n    height *= 1.4;\n    min[0] -= width * 0.2;\n    camera.left = min[0];\n    camera.top = cy - height / 2;\n    camera.bottom = cy + height / 2;\n    camera.right = width + min[0];\n    camera.near = 0;\n    camera.far = 100;\n  },\n  dispose: function () {\n    var renderer = this.viewGL.layer.renderer;\n\n    if (this._forceLayoutInstance) {\n      this._forceLayoutInstance.dispose(renderer);\n    }\n\n    this.groupGL.removeAll(); // Stop layout.\n\n    this._layoutId = -1;\n\n    this._pointsBuilder.dispose();\n  },\n  remove: function () {\n    this.groupGL.removeAll();\n\n    this._control.dispose();\n  }\n});"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}