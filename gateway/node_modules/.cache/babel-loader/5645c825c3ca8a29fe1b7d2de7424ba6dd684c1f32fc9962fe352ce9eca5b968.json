{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport * as echarts from 'echarts/lib/echarts';\nimport Graph from 'echarts/lib/data/Graph';\nimport linkList from 'echarts/lib/data/helper/linkList';\nimport retrieve from '../../util/retrieve';\nexport default function (nodes, edges, hostModel, directed, beforeLink) {\n  var graph = new Graph(directed);\n  for (var i = 0; i < nodes.length; i++) {\n    graph.addNode(retrieve.firstNotNull(\n    // Id, name, dataIndex\n    nodes[i].id, nodes[i].name, i), i);\n  }\n  var linkNameList = [];\n  var validEdges = [];\n  var linkCount = 0;\n  for (var i = 0; i < edges.length; i++) {\n    var link = edges[i];\n    var source = link.source;\n    var target = link.target; // addEdge may fail when source or target not exists\n\n    if (graph.addEdge(source, target, linkCount)) {\n      validEdges.push(link);\n      linkNameList.push(retrieve.firstNotNull(link.id, source + ' > ' + target));\n      linkCount++;\n    }\n  }\n  var nodeData; // FIXME, support more coordinate systems.\n\n  var dimensionNames = echarts.helper.createDimensions(nodes, {\n    coordDimensions: ['value']\n  });\n  nodeData = new echarts.List(dimensionNames, hostModel);\n  nodeData.initData(nodes);\n  var edgeData = new echarts.List(['value'], hostModel);\n  edgeData.initData(validEdges, linkNameList);\n  beforeLink && beforeLink(nodeData, edgeData);\n  linkList({\n    mainData: nodeData,\n    struct: graph,\n    structAttr: 'graph',\n    datas: {\n      node: nodeData,\n      edge: edgeData\n    },\n    datasAttr: {\n      node: 'data',\n      edge: 'edgeData'\n    }\n  }); // Update dataIndex of nodes and edges because invalid edge may be removed\n\n  graph.update();\n  return graph;\n}\n;","map":{"version":3,"names":["echarts","Graph","linkList","retrieve","nodes","edges","hostModel","directed","beforeLink","graph","i","length","addNode","firstNotNull","id","name","linkNameList","validEdges","linkCount","link","source","target","addEdge","push","nodeData","dimensionNames","helper","createDimensions","coordDimensions","List","initData","edgeData","mainData","struct","structAttr","datas","node","edge","datasAttr","update"],"sources":["E:/mytest/node_modules/echarts-gl/lib/chart/graphGL/createGraphFromNodeEdge.js"],"sourcesContent":["import * as echarts from 'echarts/lib/echarts';\nimport Graph from 'echarts/lib/data/Graph';\nimport linkList from 'echarts/lib/data/helper/linkList';\nimport retrieve from '../../util/retrieve';\nexport default function (nodes, edges, hostModel, directed, beforeLink) {\n  var graph = new Graph(directed);\n\n  for (var i = 0; i < nodes.length; i++) {\n    graph.addNode(retrieve.firstNotNull( // Id, name, dataIndex\n    nodes[i].id, nodes[i].name, i), i);\n  }\n\n  var linkNameList = [];\n  var validEdges = [];\n  var linkCount = 0;\n\n  for (var i = 0; i < edges.length; i++) {\n    var link = edges[i];\n    var source = link.source;\n    var target = link.target; // addEdge may fail when source or target not exists\n\n    if (graph.addEdge(source, target, linkCount)) {\n      validEdges.push(link);\n      linkNameList.push(retrieve.firstNotNull(link.id, source + ' > ' + target));\n      linkCount++;\n    }\n  }\n\n  var nodeData; // FIXME, support more coordinate systems.\n\n  var dimensionNames = echarts.helper.createDimensions(nodes, {\n    coordDimensions: ['value']\n  });\n  nodeData = new echarts.List(dimensionNames, hostModel);\n  nodeData.initData(nodes);\n  var edgeData = new echarts.List(['value'], hostModel);\n  edgeData.initData(validEdges, linkNameList);\n  beforeLink && beforeLink(nodeData, edgeData);\n  linkList({\n    mainData: nodeData,\n    struct: graph,\n    structAttr: 'graph',\n    datas: {\n      node: nodeData,\n      edge: edgeData\n    },\n    datasAttr: {\n      node: 'data',\n      edge: 'edgeData'\n    }\n  }); // Update dataIndex of nodes and edges because invalid edge may be removed\n\n  graph.update();\n  return graph;\n}\n;"],"mappings":";AAAA,OAAO,KAAKA,OAAO,MAAM,qBAAqB;AAC9C,OAAOC,KAAK,MAAM,wBAAwB;AAC1C,OAAOC,QAAQ,MAAM,kCAAkC;AACvD,OAAOC,QAAQ,MAAM,qBAAqB;AAC1C,eAAe,UAAUC,KAAK,EAAEC,KAAK,EAAEC,SAAS,EAAEC,QAAQ,EAAEC,UAAU,EAAE;EACtE,IAAIC,KAAK,GAAG,IAAIR,KAAK,CAACM,QAAQ,CAAC;EAE/B,KAAK,IAAIG,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGN,KAAK,CAACO,MAAM,EAAED,CAAC,EAAE,EAAE;IACrCD,KAAK,CAACG,OAAO,CAACT,QAAQ,CAACU,YAAY;IAAE;IACrCT,KAAK,CAACM,CAAC,CAAC,CAACI,EAAE,EAAEV,KAAK,CAACM,CAAC,CAAC,CAACK,IAAI,EAAEL,CAAC,CAAC,EAAEA,CAAC,CAAC;EACpC;EAEA,IAAIM,YAAY,GAAG,EAAE;EACrB,IAAIC,UAAU,GAAG,EAAE;EACnB,IAAIC,SAAS,GAAG,CAAC;EAEjB,KAAK,IAAIR,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGL,KAAK,CAACM,MAAM,EAAED,CAAC,EAAE,EAAE;IACrC,IAAIS,IAAI,GAAGd,KAAK,CAACK,CAAC,CAAC;IACnB,IAAIU,MAAM,GAAGD,IAAI,CAACC,MAAM;IACxB,IAAIC,MAAM,GAAGF,IAAI,CAACE,MAAM,CAAC,CAAC;;IAE1B,IAAIZ,KAAK,CAACa,OAAO,CAACF,MAAM,EAAEC,MAAM,EAAEH,SAAS,CAAC,EAAE;MAC5CD,UAAU,CAACM,IAAI,CAACJ,IAAI,CAAC;MACrBH,YAAY,CAACO,IAAI,CAACpB,QAAQ,CAACU,YAAY,CAACM,IAAI,CAACL,EAAE,EAAEM,MAAM,GAAG,KAAK,GAAGC,MAAM,CAAC,CAAC;MAC1EH,SAAS,EAAE;IACb;EACF;EAEA,IAAIM,QAAQ,CAAC,CAAC;;EAEd,IAAIC,cAAc,GAAGzB,OAAO,CAAC0B,MAAM,CAACC,gBAAgB,CAACvB,KAAK,EAAE;IAC1DwB,eAAe,EAAE,CAAC,OAAO;EAC3B,CAAC,CAAC;EACFJ,QAAQ,GAAG,IAAIxB,OAAO,CAAC6B,IAAI,CAACJ,cAAc,EAAEnB,SAAS,CAAC;EACtDkB,QAAQ,CAACM,QAAQ,CAAC1B,KAAK,CAAC;EACxB,IAAI2B,QAAQ,GAAG,IAAI/B,OAAO,CAAC6B,IAAI,CAAC,CAAC,OAAO,CAAC,EAAEvB,SAAS,CAAC;EACrDyB,QAAQ,CAACD,QAAQ,CAACb,UAAU,EAAED,YAAY,CAAC;EAC3CR,UAAU,IAAIA,UAAU,CAACgB,QAAQ,EAAEO,QAAQ,CAAC;EAC5C7B,QAAQ,CAAC;IACP8B,QAAQ,EAAER,QAAQ;IAClBS,MAAM,EAAExB,KAAK;IACbyB,UAAU,EAAE,OAAO;IACnBC,KAAK,EAAE;MACLC,IAAI,EAAEZ,QAAQ;MACda,IAAI,EAAEN;IACR,CAAC;IACDO,SAAS,EAAE;MACTF,IAAI,EAAE,MAAM;MACZC,IAAI,EAAE;IACR;EACF,CAAC,CAAC,CAAC,CAAC;;EAEJ5B,KAAK,CAAC8B,MAAM,CAAC,CAAC;EACd,OAAO9B,KAAK;AACd;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}