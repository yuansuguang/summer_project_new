{"ast":null,"code":"import \"core-js/modules/es.array-buffer.detached.js\";\nimport \"core-js/modules/es.array-buffer.transfer.js\";\nimport \"core-js/modules/es.array-buffer.transfer-to-fixed-length.js\";\nimport \"core-js/modules/es.typed-array.to-reversed.js\";\nimport \"core-js/modules/es.typed-array.to-sorted.js\";\nimport \"core-js/modules/es.typed-array.with.js\";\n/**\n * Geometry collecting sprites\n *\n * @module echarts-gl/util/geometry/Sprites\n * @author Yi Shen(https://github.com/pissang)\n */\nimport * as echarts from 'echarts/lib/echarts';\nimport Geometry from 'claygl/src/Geometry';\nimport dynamicConvertMixin from './dynamicConvertMixin';\nvar squareTriangles = [0, 1, 2, 0, 2, 3];\nvar SpritesGeometry = Geometry.extend(function () {\n  return {\n    attributes: {\n      position: new Geometry.Attribute('position', 'float', 3, 'POSITION'),\n      texcoord: new Geometry.Attribute('texcoord', 'float', 2, 'TEXCOORD_0'),\n      offset: new Geometry.Attribute('offset', 'float', 2),\n      color: new Geometry.Attribute('color', 'float', 4, 'COLOR')\n    }\n  };\n}, {\n  resetOffset: function () {\n    this._vertexOffset = 0;\n    this._faceOffset = 0;\n  },\n  setSpriteCount: function (spriteCount) {\n    this._spriteCount = spriteCount;\n    var vertexCount = spriteCount * 4;\n    var triangleCount = spriteCount * 2;\n    if (this.vertexCount !== vertexCount) {\n      this.attributes.position.init(vertexCount);\n      this.attributes.offset.init(vertexCount);\n      this.attributes.color.init(vertexCount);\n    }\n    if (this.triangleCount !== triangleCount) {\n      this.indices = vertexCount > 0xffff ? new Uint32Array(triangleCount * 3) : new Uint16Array(triangleCount * 3);\n    }\n  },\n  setSpriteAlign: function (spriteOffset, size, align, verticalAlign, margin) {\n    if (align == null) {\n      align = 'left';\n    }\n    if (verticalAlign == null) {\n      verticalAlign = 'top';\n    }\n    var leftOffset, topOffset, rightOffset, bottomOffset;\n    margin = margin || 0;\n    switch (align) {\n      case 'left':\n        leftOffset = margin;\n        rightOffset = size[0] + margin;\n        break;\n      case 'center':\n      case 'middle':\n        leftOffset = -size[0] / 2;\n        rightOffset = size[0] / 2;\n        break;\n      case 'right':\n        leftOffset = -size[0] - margin;\n        rightOffset = -margin;\n        break;\n    }\n    switch (verticalAlign) {\n      case 'bottom':\n        topOffset = margin;\n        bottomOffset = size[1] + margin;\n        break;\n      case 'middle':\n        topOffset = -size[1] / 2;\n        bottomOffset = size[1] / 2;\n        break;\n      case 'top':\n        topOffset = -size[1] - margin;\n        bottomOffset = -margin;\n        break;\n    } // 3----2\n    // 0----1\n\n    var vertexOffset = spriteOffset * 4;\n    var offsetAttr = this.attributes.offset;\n    offsetAttr.set(vertexOffset, [leftOffset, bottomOffset]);\n    offsetAttr.set(vertexOffset + 1, [rightOffset, bottomOffset]);\n    offsetAttr.set(vertexOffset + 2, [rightOffset, topOffset]);\n    offsetAttr.set(vertexOffset + 3, [leftOffset, topOffset]);\n  },\n  /**\n   * Add sprite\n   * @param {Array.<number>} position\n   * @param {Array.<number>} size [width, height]\n   * @param {Array.<Array>} coords [leftBottom, rightTop]\n   * @param {string} [align='left'] 'left' 'center' 'right'\n   * @param {string} [verticalAlign='top'] 'top' 'middle' 'bottom'\n   * @param {number} [screenMargin=0]\n   */\n  addSprite: function (position, size, coords, align, verticalAlign, screenMargin) {\n    var vertexOffset = this._vertexOffset;\n    this.setSprite(this._vertexOffset / 4, position, size, coords, align, verticalAlign, screenMargin);\n    for (var i = 0; i < squareTriangles.length; i++) {\n      this.indices[this._faceOffset * 3 + i] = squareTriangles[i] + vertexOffset;\n    }\n    this._faceOffset += 2;\n    this._vertexOffset += 4;\n    return vertexOffset / 4;\n  },\n  setSprite: function (spriteOffset, position, size, coords, align, verticalAlign, screenMargin) {\n    var vertexOffset = spriteOffset * 4;\n    var attributes = this.attributes;\n    for (var i = 0; i < 4; i++) {\n      attributes.position.set(vertexOffset + i, position);\n    } // 3----2\n    // 0----1\n\n    var texcoordAttr = attributes.texcoord;\n    texcoordAttr.set(vertexOffset, [coords[0][0], coords[0][1]]);\n    texcoordAttr.set(vertexOffset + 1, [coords[1][0], coords[0][1]]);\n    texcoordAttr.set(vertexOffset + 2, [coords[1][0], coords[1][1]]);\n    texcoordAttr.set(vertexOffset + 3, [coords[0][0], coords[1][1]]);\n    this.setSpriteAlign(spriteOffset, size, align, verticalAlign, screenMargin);\n  }\n});\necharts.util.defaults(SpritesGeometry.prototype, dynamicConvertMixin);\nexport default SpritesGeometry;","map":{"version":3,"names":["echarts","Geometry","dynamicConvertMixin","squareTriangles","SpritesGeometry","extend","attributes","position","Attribute","texcoord","offset","color","resetOffset","_vertexOffset","_faceOffset","setSpriteCount","spriteCount","_spriteCount","vertexCount","triangleCount","init","indices","Uint32Array","Uint16Array","setSpriteAlign","spriteOffset","size","align","verticalAlign","margin","leftOffset","topOffset","rightOffset","bottomOffset","vertexOffset","offsetAttr","set","addSprite","coords","screenMargin","setSprite","i","length","texcoordAttr","util","defaults","prototype"],"sources":["E:/mytest/node_modules/echarts-gl/lib/util/geometry/Sprites.js"],"sourcesContent":["/**\n * Geometry collecting sprites\n *\n * @module echarts-gl/util/geometry/Sprites\n * @author Yi Shen(https://github.com/pissang)\n */\nimport * as echarts from 'echarts/lib/echarts';\nimport Geometry from 'claygl/src/Geometry';\nimport dynamicConvertMixin from './dynamicConvertMixin';\nvar squareTriangles = [0, 1, 2, 0, 2, 3];\nvar SpritesGeometry = Geometry.extend(function () {\n  return {\n    attributes: {\n      position: new Geometry.Attribute('position', 'float', 3, 'POSITION'),\n      texcoord: new Geometry.Attribute('texcoord', 'float', 2, 'TEXCOORD_0'),\n      offset: new Geometry.Attribute('offset', 'float', 2),\n      color: new Geometry.Attribute('color', 'float', 4, 'COLOR')\n    }\n  };\n}, {\n  resetOffset: function () {\n    this._vertexOffset = 0;\n    this._faceOffset = 0;\n  },\n  setSpriteCount: function (spriteCount) {\n    this._spriteCount = spriteCount;\n    var vertexCount = spriteCount * 4;\n    var triangleCount = spriteCount * 2;\n\n    if (this.vertexCount !== vertexCount) {\n      this.attributes.position.init(vertexCount);\n      this.attributes.offset.init(vertexCount);\n      this.attributes.color.init(vertexCount);\n    }\n\n    if (this.triangleCount !== triangleCount) {\n      this.indices = vertexCount > 0xffff ? new Uint32Array(triangleCount * 3) : new Uint16Array(triangleCount * 3);\n    }\n  },\n  setSpriteAlign: function (spriteOffset, size, align, verticalAlign, margin) {\n    if (align == null) {\n      align = 'left';\n    }\n\n    if (verticalAlign == null) {\n      verticalAlign = 'top';\n    }\n\n    var leftOffset, topOffset, rightOffset, bottomOffset;\n    margin = margin || 0;\n\n    switch (align) {\n      case 'left':\n        leftOffset = margin;\n        rightOffset = size[0] + margin;\n        break;\n\n      case 'center':\n      case 'middle':\n        leftOffset = -size[0] / 2;\n        rightOffset = size[0] / 2;\n        break;\n\n      case 'right':\n        leftOffset = -size[0] - margin;\n        rightOffset = -margin;\n        break;\n    }\n\n    switch (verticalAlign) {\n      case 'bottom':\n        topOffset = margin;\n        bottomOffset = size[1] + margin;\n        break;\n\n      case 'middle':\n        topOffset = -size[1] / 2;\n        bottomOffset = size[1] / 2;\n        break;\n\n      case 'top':\n        topOffset = -size[1] - margin;\n        bottomOffset = -margin;\n        break;\n    } // 3----2\n    // 0----1\n\n\n    var vertexOffset = spriteOffset * 4;\n    var offsetAttr = this.attributes.offset;\n    offsetAttr.set(vertexOffset, [leftOffset, bottomOffset]);\n    offsetAttr.set(vertexOffset + 1, [rightOffset, bottomOffset]);\n    offsetAttr.set(vertexOffset + 2, [rightOffset, topOffset]);\n    offsetAttr.set(vertexOffset + 3, [leftOffset, topOffset]);\n  },\n\n  /**\n   * Add sprite\n   * @param {Array.<number>} position\n   * @param {Array.<number>} size [width, height]\n   * @param {Array.<Array>} coords [leftBottom, rightTop]\n   * @param {string} [align='left'] 'left' 'center' 'right'\n   * @param {string} [verticalAlign='top'] 'top' 'middle' 'bottom'\n   * @param {number} [screenMargin=0]\n   */\n  addSprite: function (position, size, coords, align, verticalAlign, screenMargin) {\n    var vertexOffset = this._vertexOffset;\n    this.setSprite(this._vertexOffset / 4, position, size, coords, align, verticalAlign, screenMargin);\n\n    for (var i = 0; i < squareTriangles.length; i++) {\n      this.indices[this._faceOffset * 3 + i] = squareTriangles[i] + vertexOffset;\n    }\n\n    this._faceOffset += 2;\n    this._vertexOffset += 4;\n    return vertexOffset / 4;\n  },\n  setSprite: function (spriteOffset, position, size, coords, align, verticalAlign, screenMargin) {\n    var vertexOffset = spriteOffset * 4;\n    var attributes = this.attributes;\n\n    for (var i = 0; i < 4; i++) {\n      attributes.position.set(vertexOffset + i, position);\n    } // 3----2\n    // 0----1\n\n\n    var texcoordAttr = attributes.texcoord;\n    texcoordAttr.set(vertexOffset, [coords[0][0], coords[0][1]]);\n    texcoordAttr.set(vertexOffset + 1, [coords[1][0], coords[0][1]]);\n    texcoordAttr.set(vertexOffset + 2, [coords[1][0], coords[1][1]]);\n    texcoordAttr.set(vertexOffset + 3, [coords[0][0], coords[1][1]]);\n    this.setSpriteAlign(spriteOffset, size, align, verticalAlign, screenMargin);\n  }\n});\necharts.util.defaults(SpritesGeometry.prototype, dynamicConvertMixin);\nexport default SpritesGeometry;"],"mappings":";;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,KAAKA,OAAO,MAAM,qBAAqB;AAC9C,OAAOC,QAAQ,MAAM,qBAAqB;AAC1C,OAAOC,mBAAmB,MAAM,uBAAuB;AACvD,IAAIC,eAAe,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;AACxC,IAAIC,eAAe,GAAGH,QAAQ,CAACI,MAAM,CAAC,YAAY;EAChD,OAAO;IACLC,UAAU,EAAE;MACVC,QAAQ,EAAE,IAAIN,QAAQ,CAACO,SAAS,CAAC,UAAU,EAAE,OAAO,EAAE,CAAC,EAAE,UAAU,CAAC;MACpEC,QAAQ,EAAE,IAAIR,QAAQ,CAACO,SAAS,CAAC,UAAU,EAAE,OAAO,EAAE,CAAC,EAAE,YAAY,CAAC;MACtEE,MAAM,EAAE,IAAIT,QAAQ,CAACO,SAAS,CAAC,QAAQ,EAAE,OAAO,EAAE,CAAC,CAAC;MACpDG,KAAK,EAAE,IAAIV,QAAQ,CAACO,SAAS,CAAC,OAAO,EAAE,OAAO,EAAE,CAAC,EAAE,OAAO;IAC5D;EACF,CAAC;AACH,CAAC,EAAE;EACDI,WAAW,EAAE,SAAAA,CAAA,EAAY;IACvB,IAAI,CAACC,aAAa,GAAG,CAAC;IACtB,IAAI,CAACC,WAAW,GAAG,CAAC;EACtB,CAAC;EACDC,cAAc,EAAE,SAAAA,CAAUC,WAAW,EAAE;IACrC,IAAI,CAACC,YAAY,GAAGD,WAAW;IAC/B,IAAIE,WAAW,GAAGF,WAAW,GAAG,CAAC;IACjC,IAAIG,aAAa,GAAGH,WAAW,GAAG,CAAC;IAEnC,IAAI,IAAI,CAACE,WAAW,KAAKA,WAAW,EAAE;MACpC,IAAI,CAACZ,UAAU,CAACC,QAAQ,CAACa,IAAI,CAACF,WAAW,CAAC;MAC1C,IAAI,CAACZ,UAAU,CAACI,MAAM,CAACU,IAAI,CAACF,WAAW,CAAC;MACxC,IAAI,CAACZ,UAAU,CAACK,KAAK,CAACS,IAAI,CAACF,WAAW,CAAC;IACzC;IAEA,IAAI,IAAI,CAACC,aAAa,KAAKA,aAAa,EAAE;MACxC,IAAI,CAACE,OAAO,GAAGH,WAAW,GAAG,MAAM,GAAG,IAAII,WAAW,CAACH,aAAa,GAAG,CAAC,CAAC,GAAG,IAAII,WAAW,CAACJ,aAAa,GAAG,CAAC,CAAC;IAC/G;EACF,CAAC;EACDK,cAAc,EAAE,SAAAA,CAAUC,YAAY,EAAEC,IAAI,EAAEC,KAAK,EAAEC,aAAa,EAAEC,MAAM,EAAE;IAC1E,IAAIF,KAAK,IAAI,IAAI,EAAE;MACjBA,KAAK,GAAG,MAAM;IAChB;IAEA,IAAIC,aAAa,IAAI,IAAI,EAAE;MACzBA,aAAa,GAAG,KAAK;IACvB;IAEA,IAAIE,UAAU,EAAEC,SAAS,EAAEC,WAAW,EAAEC,YAAY;IACpDJ,MAAM,GAAGA,MAAM,IAAI,CAAC;IAEpB,QAAQF,KAAK;MACX,KAAK,MAAM;QACTG,UAAU,GAAGD,MAAM;QACnBG,WAAW,GAAGN,IAAI,CAAC,CAAC,CAAC,GAAGG,MAAM;QAC9B;MAEF,KAAK,QAAQ;MACb,KAAK,QAAQ;QACXC,UAAU,GAAG,CAACJ,IAAI,CAAC,CAAC,CAAC,GAAG,CAAC;QACzBM,WAAW,GAAGN,IAAI,CAAC,CAAC,CAAC,GAAG,CAAC;QACzB;MAEF,KAAK,OAAO;QACVI,UAAU,GAAG,CAACJ,IAAI,CAAC,CAAC,CAAC,GAAGG,MAAM;QAC9BG,WAAW,GAAG,CAACH,MAAM;QACrB;IACJ;IAEA,QAAQD,aAAa;MACnB,KAAK,QAAQ;QACXG,SAAS,GAAGF,MAAM;QAClBI,YAAY,GAAGP,IAAI,CAAC,CAAC,CAAC,GAAGG,MAAM;QAC/B;MAEF,KAAK,QAAQ;QACXE,SAAS,GAAG,CAACL,IAAI,CAAC,CAAC,CAAC,GAAG,CAAC;QACxBO,YAAY,GAAGP,IAAI,CAAC,CAAC,CAAC,GAAG,CAAC;QAC1B;MAEF,KAAK,KAAK;QACRK,SAAS,GAAG,CAACL,IAAI,CAAC,CAAC,CAAC,GAAGG,MAAM;QAC7BI,YAAY,GAAG,CAACJ,MAAM;QACtB;IACJ,CAAC,CAAC;IACF;;IAGA,IAAIK,YAAY,GAAGT,YAAY,GAAG,CAAC;IACnC,IAAIU,UAAU,GAAG,IAAI,CAAC7B,UAAU,CAACI,MAAM;IACvCyB,UAAU,CAACC,GAAG,CAACF,YAAY,EAAE,CAACJ,UAAU,EAAEG,YAAY,CAAC,CAAC;IACxDE,UAAU,CAACC,GAAG,CAACF,YAAY,GAAG,CAAC,EAAE,CAACF,WAAW,EAAEC,YAAY,CAAC,CAAC;IAC7DE,UAAU,CAACC,GAAG,CAACF,YAAY,GAAG,CAAC,EAAE,CAACF,WAAW,EAAED,SAAS,CAAC,CAAC;IAC1DI,UAAU,CAACC,GAAG,CAACF,YAAY,GAAG,CAAC,EAAE,CAACJ,UAAU,EAAEC,SAAS,CAAC,CAAC;EAC3D,CAAC;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEM,SAAS,EAAE,SAAAA,CAAU9B,QAAQ,EAAEmB,IAAI,EAAEY,MAAM,EAAEX,KAAK,EAAEC,aAAa,EAAEW,YAAY,EAAE;IAC/E,IAAIL,YAAY,GAAG,IAAI,CAACrB,aAAa;IACrC,IAAI,CAAC2B,SAAS,CAAC,IAAI,CAAC3B,aAAa,GAAG,CAAC,EAAEN,QAAQ,EAAEmB,IAAI,EAAEY,MAAM,EAAEX,KAAK,EAAEC,aAAa,EAAEW,YAAY,CAAC;IAElG,KAAK,IAAIE,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGtC,eAAe,CAACuC,MAAM,EAAED,CAAC,EAAE,EAAE;MAC/C,IAAI,CAACpB,OAAO,CAAC,IAAI,CAACP,WAAW,GAAG,CAAC,GAAG2B,CAAC,CAAC,GAAGtC,eAAe,CAACsC,CAAC,CAAC,GAAGP,YAAY;IAC5E;IAEA,IAAI,CAACpB,WAAW,IAAI,CAAC;IACrB,IAAI,CAACD,aAAa,IAAI,CAAC;IACvB,OAAOqB,YAAY,GAAG,CAAC;EACzB,CAAC;EACDM,SAAS,EAAE,SAAAA,CAAUf,YAAY,EAAElB,QAAQ,EAAEmB,IAAI,EAAEY,MAAM,EAAEX,KAAK,EAAEC,aAAa,EAAEW,YAAY,EAAE;IAC7F,IAAIL,YAAY,GAAGT,YAAY,GAAG,CAAC;IACnC,IAAInB,UAAU,GAAG,IAAI,CAACA,UAAU;IAEhC,KAAK,IAAImC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,CAAC,EAAEA,CAAC,EAAE,EAAE;MAC1BnC,UAAU,CAACC,QAAQ,CAAC6B,GAAG,CAACF,YAAY,GAAGO,CAAC,EAAElC,QAAQ,CAAC;IACrD,CAAC,CAAC;IACF;;IAGA,IAAIoC,YAAY,GAAGrC,UAAU,CAACG,QAAQ;IACtCkC,YAAY,CAACP,GAAG,CAACF,YAAY,EAAE,CAACI,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAEA,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IAC5DK,YAAY,CAACP,GAAG,CAACF,YAAY,GAAG,CAAC,EAAE,CAACI,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAEA,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IAChEK,YAAY,CAACP,GAAG,CAACF,YAAY,GAAG,CAAC,EAAE,CAACI,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAEA,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IAChEK,YAAY,CAACP,GAAG,CAACF,YAAY,GAAG,CAAC,EAAE,CAACI,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAEA,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IAChE,IAAI,CAACd,cAAc,CAACC,YAAY,EAAEC,IAAI,EAAEC,KAAK,EAAEC,aAAa,EAAEW,YAAY,CAAC;EAC7E;AACF,CAAC,CAAC;AACFvC,OAAO,CAAC4C,IAAI,CAACC,QAAQ,CAACzC,eAAe,CAAC0C,SAAS,EAAE5C,mBAAmB,CAAC;AACrE,eAAeE,eAAe","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}