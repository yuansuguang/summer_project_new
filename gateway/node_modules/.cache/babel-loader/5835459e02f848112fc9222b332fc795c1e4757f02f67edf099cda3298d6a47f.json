{"ast":null,"code":"import util from './core/util';\nimport Compositor from './compositor/Compositor';\nimport CompoSceneNode from './compositor/SceneNode';\nimport CompoTextureNode from './compositor/TextureNode';\nimport CompoFilterNode from './compositor/FilterNode';\nimport Shader from './Shader';\nimport Texture from './Texture';\nimport Texture2D from './Texture2D';\nimport TextureCube from './TextureCube';\nimport registerBuiltinCompositor from './shader/registerBuiltinCompositor';\nregisterBuiltinCompositor(Shader);\nvar shaderSourceReg = /^#source\\((.*?)\\)/;\n\n/**\n * @name clay.createCompositor\n * @function\n * @param {Object} json\n * @param {Object} [opts]\n * @return {clay.compositor.Compositor}\n */\nfunction createCompositor(json, opts) {\n  var compositor = new Compositor();\n  opts = opts || {};\n  var lib = {\n    textures: {},\n    parameters: {}\n  };\n  var afterLoad = function (shaderLib, textureLib) {\n    for (var i = 0; i < json.nodes.length; i++) {\n      var nodeInfo = json.nodes[i];\n      var node = createNode(nodeInfo, lib, opts);\n      if (node) {\n        compositor.addNode(node);\n      }\n    }\n  };\n  for (var name in json.parameters) {\n    var paramInfo = json.parameters[name];\n    lib.parameters[name] = convertParameter(paramInfo);\n  }\n  // TODO load texture asynchronous\n  loadTextures(json, lib, opts, function (textureLib) {\n    lib.textures = textureLib;\n    afterLoad();\n  });\n  return compositor;\n}\nfunction createNode(nodeInfo, lib, opts) {\n  var type = nodeInfo.type || 'filter';\n  var shaderSource;\n  var inputs;\n  var outputs;\n  if (type === 'filter') {\n    var shaderExp = nodeInfo.shader.trim();\n    var res = shaderSourceReg.exec(shaderExp);\n    if (res) {\n      shaderSource = Shader.source(res[1].trim());\n    } else if (shaderExp.charAt(0) === '#') {\n      shaderSource = lib.shaders[shaderExp.substr(1)];\n    }\n    if (!shaderSource) {\n      shaderSource = shaderExp;\n    }\n    if (!shaderSource) {\n      return;\n    }\n  }\n  if (nodeInfo.inputs) {\n    inputs = {};\n    for (var name in nodeInfo.inputs) {\n      if (typeof nodeInfo.inputs[name] === 'string') {\n        inputs[name] = nodeInfo.inputs[name];\n      } else {\n        inputs[name] = {\n          node: nodeInfo.inputs[name].node,\n          pin: nodeInfo.inputs[name].pin\n        };\n      }\n    }\n  }\n  if (nodeInfo.outputs) {\n    outputs = {};\n    for (var name in nodeInfo.outputs) {\n      var outputInfo = nodeInfo.outputs[name];\n      outputs[name] = {};\n      if (outputInfo.attachment != null) {\n        outputs[name].attachment = outputInfo.attachment;\n      }\n      if (outputInfo.keepLastFrame != null) {\n        outputs[name].keepLastFrame = outputInfo.keepLastFrame;\n      }\n      if (outputInfo.outputLastFrame != null) {\n        outputs[name].outputLastFrame = outputInfo.outputLastFrame;\n      }\n      if (outputInfo.parameters) {\n        outputs[name].parameters = convertParameter(outputInfo.parameters);\n      }\n    }\n  }\n  var node;\n  if (type === 'scene') {\n    node = new CompoSceneNode({\n      name: nodeInfo.name,\n      scene: opts.scene,\n      camera: opts.camera,\n      outputs: outputs\n    });\n  } else if (type === 'texture') {\n    node = new CompoTextureNode({\n      name: nodeInfo.name,\n      outputs: outputs\n    });\n  }\n  // Default is filter\n  else {\n    node = new CompoFilterNode({\n      name: nodeInfo.name,\n      shader: shaderSource,\n      inputs: inputs,\n      outputs: outputs\n    });\n  }\n  if (node) {\n    if (nodeInfo.parameters) {\n      for (var name in nodeInfo.parameters) {\n        var val = nodeInfo.parameters[name];\n        if (typeof val === 'string') {\n          val = val.trim();\n          if (val.charAt(0) === '#') {\n            val = lib.textures[val.substr(1)];\n          } else {\n            node.on('beforerender', createSizeSetHandler(name, tryConvertExpr(val)));\n          }\n        } else if (typeof val === 'function') {\n          node.on('beforerender', val);\n        }\n        node.setParameter(name, val);\n      }\n    }\n    if (nodeInfo.defines && node.pass) {\n      for (var name in nodeInfo.defines) {\n        var val = nodeInfo.defines[name];\n        node.pass.material.define('fragment', name, val);\n      }\n    }\n  }\n  return node;\n}\nfunction defaultWidthFunc(width, height) {\n  return width;\n}\nfunction defaultHeightFunc(width, height) {\n  return height;\n}\nfunction convertParameter(paramInfo) {\n  var param = {};\n  if (!paramInfo) {\n    return param;\n  }\n  ['type', 'minFilter', 'magFilter', 'wrapS', 'wrapT', 'flipY', 'useMipmap'].forEach(function (name) {\n    var val = paramInfo[name];\n    if (val != null) {\n      // Convert string to enum\n      if (typeof val === 'string') {\n        val = Texture[val];\n      }\n      param[name] = val;\n    }\n  });\n  var sizeScale = paramInfo.scale || 1;\n  ['width', 'height'].forEach(function (name) {\n    if (paramInfo[name] != null) {\n      var val = paramInfo[name];\n      if (typeof val === 'string') {\n        val = val.trim();\n        param[name] = createSizeParser(name, tryConvertExpr(val), sizeScale);\n      } else {\n        param[name] = val;\n      }\n    }\n  });\n  if (!param.width) {\n    param.width = defaultWidthFunc;\n  }\n  if (!param.height) {\n    param.height = defaultHeightFunc;\n  }\n  if (paramInfo.useMipmap != null) {\n    param.useMipmap = paramInfo.useMipmap;\n  }\n  return param;\n}\nfunction loadTextures(json, lib, opts, callback) {\n  if (!json.textures) {\n    callback({});\n    return;\n  }\n  var textures = {};\n  var loading = 0;\n  var cbd = false;\n  var textureRootPath = opts.textureRootPath;\n  util.each(json.textures, function (textureInfo, name) {\n    var texture;\n    var path = textureInfo.path;\n    var parameters = convertParameter(textureInfo.parameters);\n    if (Array.isArray(path) && path.length === 6) {\n      if (textureRootPath) {\n        path = path.map(function (item) {\n          return util.relative2absolute(item, textureRootPath);\n        });\n      }\n      texture = new TextureCube(parameters);\n    } else if (typeof path === 'string') {\n      if (textureRootPath) {\n        path = util.relative2absolute(path, textureRootPath);\n      }\n      texture = new Texture2D(parameters);\n    } else {\n      return;\n    }\n    texture.load(path);\n    loading++;\n    texture.once('success', function () {\n      textures[name] = texture;\n      loading--;\n      if (loading === 0) {\n        callback(textures);\n        cbd = true;\n      }\n    });\n  });\n  if (loading === 0 && !cbd) {\n    callback(textures);\n  }\n}\nfunction createSizeSetHandler(name, exprFunc) {\n  return function (renderer) {\n    // PENDING viewport size or window size\n    var dpr = renderer.getDevicePixelRatio();\n    // PENDING If multiply dpr ?\n    var width = renderer.getWidth();\n    var height = renderer.getHeight();\n    var result = exprFunc(width, height, dpr);\n    this.setParameter(name, result);\n  };\n}\nfunction createSizeParser(name, exprFunc, scale) {\n  scale = scale || 1;\n  return function (renderer) {\n    var dpr = renderer.getDevicePixelRatio();\n    var width = renderer.getWidth() * scale;\n    var height = renderer.getHeight() * scale;\n    return exprFunc(width, height, dpr);\n  };\n}\nfunction tryConvertExpr(string) {\n  // PENDING\n  var exprRes = /^expr\\((.*)\\)$/.exec(string);\n  if (exprRes) {\n    try {\n      var func = new Function('width', 'height', 'dpr', 'return ' + exprRes[1]);\n      // Try run t\n      func(1, 1);\n      return func;\n    } catch (e) {\n      throw new Error('Invalid expression.');\n    }\n  }\n}\nexport default createCompositor;","map":{"version":3,"names":["util","Compositor","CompoSceneNode","CompoTextureNode","CompoFilterNode","Shader","Texture","Texture2D","TextureCube","registerBuiltinCompositor","shaderSourceReg","createCompositor","json","opts","compositor","lib","textures","parameters","afterLoad","shaderLib","textureLib","i","nodes","length","nodeInfo","node","createNode","addNode","name","paramInfo","convertParameter","loadTextures","type","shaderSource","inputs","outputs","shaderExp","shader","trim","res","exec","source","charAt","shaders","substr","pin","outputInfo","attachment","keepLastFrame","outputLastFrame","scene","camera","val","on","createSizeSetHandler","tryConvertExpr","setParameter","defines","pass","material","define","defaultWidthFunc","width","height","defaultHeightFunc","param","forEach","sizeScale","scale","createSizeParser","useMipmap","callback","loading","cbd","textureRootPath","each","textureInfo","texture","path","Array","isArray","map","item","relative2absolute","load","once","exprFunc","renderer","dpr","getDevicePixelRatio","getWidth","getHeight","result","string","exprRes","func","Function","e","Error"],"sources":["E:/mytest/node_modules/claygl/src/createCompositor.js"],"sourcesContent":["import util from './core/util';\nimport Compositor from './compositor/Compositor';\nimport CompoSceneNode from './compositor/SceneNode';\nimport CompoTextureNode from './compositor/TextureNode';\nimport CompoFilterNode from './compositor/FilterNode';\nimport Shader from './Shader';\nimport Texture from './Texture';\nimport Texture2D from './Texture2D';\nimport TextureCube from './TextureCube';\n\nimport registerBuiltinCompositor from './shader/registerBuiltinCompositor';\n\nregisterBuiltinCompositor(Shader);\n\nvar shaderSourceReg = /^#source\\((.*?)\\)/;\n\n/**\n * @name clay.createCompositor\n * @function\n * @param {Object} json\n * @param {Object} [opts]\n * @return {clay.compositor.Compositor}\n */\nfunction createCompositor(json, opts) {\n    var compositor = new Compositor();\n    opts = opts || {};\n\n    var lib = {\n        textures: {},\n        parameters: {}\n    };\n    var afterLoad = function(shaderLib, textureLib) {\n        for (var i = 0; i < json.nodes.length; i++) {\n            var nodeInfo = json.nodes[i];\n            var node = createNode(nodeInfo, lib, opts);\n            if (node) {\n                compositor.addNode(node);\n            }\n        }\n    };\n\n    for (var name in json.parameters) {\n        var paramInfo = json.parameters[name];\n        lib.parameters[name] = convertParameter(paramInfo);\n    }\n    // TODO load texture asynchronous\n    loadTextures(json, lib, opts, function(textureLib) {\n        lib.textures = textureLib;\n        afterLoad();\n    });\n\n    return compositor;\n}\n\nfunction createNode(nodeInfo, lib, opts) {\n    var type = nodeInfo.type || 'filter';\n    var shaderSource;\n    var inputs;\n    var outputs;\n\n    if (type === 'filter') {\n        var shaderExp = nodeInfo.shader.trim();\n        var res = shaderSourceReg.exec(shaderExp);\n        if (res) {\n            shaderSource = Shader.source(res[1].trim());\n        }\n        else if (shaderExp.charAt(0) === '#') {\n            shaderSource = lib.shaders[shaderExp.substr(1)];\n        }\n        if (!shaderSource) {\n            shaderSource = shaderExp;\n        }\n        if (!shaderSource) {\n            return;\n        }\n    }\n\n    if (nodeInfo.inputs) {\n        inputs = {};\n        for (var name in nodeInfo.inputs) {\n            if (typeof nodeInfo.inputs[name] === 'string') {\n                inputs[name] = nodeInfo.inputs[name];\n            }\n            else {\n                inputs[name] = {\n                    node: nodeInfo.inputs[name].node,\n                    pin: nodeInfo.inputs[name].pin\n                };\n            }\n        }\n    }\n    if (nodeInfo.outputs) {\n        outputs = {};\n        for (var name in nodeInfo.outputs) {\n            var outputInfo = nodeInfo.outputs[name];\n            outputs[name] = {};\n            if (outputInfo.attachment != null) {\n                outputs[name].attachment = outputInfo.attachment;\n            }\n            if (outputInfo.keepLastFrame != null) {\n                outputs[name].keepLastFrame = outputInfo.keepLastFrame;\n            }\n            if (outputInfo.outputLastFrame != null) {\n                outputs[name].outputLastFrame = outputInfo.outputLastFrame;\n            }\n            if (outputInfo.parameters) {\n                outputs[name].parameters = convertParameter(outputInfo.parameters);\n            }\n        }\n    }\n    var node;\n    if (type === 'scene') {\n        node = new CompoSceneNode({\n            name: nodeInfo.name,\n            scene: opts.scene,\n            camera: opts.camera,\n            outputs: outputs\n        });\n    }\n    else if (type === 'texture') {\n        node = new CompoTextureNode({\n            name: nodeInfo.name,\n            outputs: outputs\n        });\n    }\n    // Default is filter\n    else {\n        node = new CompoFilterNode({\n            name: nodeInfo.name,\n            shader: shaderSource,\n            inputs: inputs,\n            outputs: outputs\n        });\n    }\n    if (node) {\n        if (nodeInfo.parameters) {\n            for (var name in nodeInfo.parameters) {\n                var val = nodeInfo.parameters[name];\n                if (typeof val === 'string') {\n                    val = val.trim();\n                    if (val.charAt(0) === '#') {\n                        val = lib.textures[val.substr(1)];\n                    }\n                    else {\n                        node.on(\n                            'beforerender', createSizeSetHandler(\n                                name, tryConvertExpr(val)\n                            )\n                        );\n                    }\n                }\n                else if (typeof val === 'function') {\n                    node.on('beforerender', val);\n                }\n                node.setParameter(name, val);\n            }\n        }\n        if (nodeInfo.defines && node.pass) {\n            for (var name in nodeInfo.defines) {\n                var val = nodeInfo.defines[name];\n                node.pass.material.define('fragment', name, val);\n            }\n        }\n    }\n    return node;\n}\n\nfunction defaultWidthFunc(width, height) {\n    return width;\n}\nfunction defaultHeightFunc(width, height) {\n    return height;\n}\n\nfunction convertParameter(paramInfo) {\n    var param = {};\n    if (!paramInfo) {\n        return param;\n    }\n    ['type', 'minFilter', 'magFilter', 'wrapS', 'wrapT', 'flipY', 'useMipmap']\n        .forEach(function(name) {\n            var val = paramInfo[name];\n            if (val != null) {\n                // Convert string to enum\n                if (typeof val === 'string') {\n                    val = Texture[val];\n                }\n                param[name] = val;\n            }\n        });\n\n    var sizeScale = paramInfo.scale || 1;\n    ['width', 'height']\n        .forEach(function(name) {\n            if (paramInfo[name] != null) {\n                var val = paramInfo[name];\n                if (typeof val === 'string') {\n                    val = val.trim();\n                    param[name] = createSizeParser(\n                        name, tryConvertExpr(val), sizeScale\n                    );\n                }\n                else {\n                    param[name] = val;\n                }\n            }\n        });\n    if (!param.width) {\n        param.width = defaultWidthFunc;\n    }\n    if (!param.height) {\n        param.height = defaultHeightFunc;\n    }\n\n    if (paramInfo.useMipmap != null) {\n        param.useMipmap = paramInfo.useMipmap;\n    }\n    return param;\n}\n\nfunction loadTextures(json, lib, opts, callback) {\n    if (!json.textures) {\n        callback({});\n        return;\n    }\n    var textures = {};\n    var loading = 0;\n\n    var cbd = false;\n    var textureRootPath = opts.textureRootPath;\n    util.each(json.textures, function(textureInfo, name) {\n        var texture;\n        var path = textureInfo.path;\n        var parameters = convertParameter(textureInfo.parameters);\n        if (Array.isArray(path) && path.length === 6) {\n            if (textureRootPath) {\n                path = path.map(function(item) {\n                    return util.relative2absolute(item, textureRootPath);\n                });\n            }\n            texture = new TextureCube(parameters);\n        }\n        else if(typeof path === 'string') {\n            if (textureRootPath) {\n                path = util.relative2absolute(path, textureRootPath);\n            }\n            texture = new Texture2D(parameters);\n        }\n        else {\n            return;\n        }\n\n        texture.load(path);\n        loading++;\n        texture.once('success', function() {\n            textures[name] = texture;\n            loading--;\n            if (loading === 0) {\n                callback(textures);\n                cbd = true;\n            }\n        });\n    });\n\n    if (loading === 0 && !cbd) {\n        callback(textures);\n    }\n}\n\nfunction createSizeSetHandler(name, exprFunc) {\n    return function (renderer) {\n        // PENDING viewport size or window size\n        var dpr = renderer.getDevicePixelRatio();\n        // PENDING If multiply dpr ?\n        var width = renderer.getWidth();\n        var height = renderer.getHeight();\n        var result = exprFunc(width, height, dpr);\n        this.setParameter(name, result);\n    };\n}\n\nfunction createSizeParser(name, exprFunc, scale) {\n    scale = scale || 1;\n    return function (renderer) {\n        var dpr = renderer.getDevicePixelRatio();\n        var width = renderer.getWidth() * scale;\n        var height = renderer.getHeight() * scale;\n        return exprFunc(width, height, dpr);\n    };\n}\n\nfunction tryConvertExpr(string) {\n    // PENDING\n    var exprRes = /^expr\\((.*)\\)$/.exec(string);\n    if (exprRes) {\n        try {\n            var func = new Function('width', 'height', 'dpr', 'return ' + exprRes[1]);\n            // Try run t\n            func(1, 1);\n\n            return func;\n        }\n        catch (e) {\n            throw new Error('Invalid expression.');\n        }\n    }\n}\n\nexport default createCompositor;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}