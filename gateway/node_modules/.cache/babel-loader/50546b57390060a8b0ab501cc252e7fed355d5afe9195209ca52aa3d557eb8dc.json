{"ast":null,"code":"import VantaBase from './_base.js';\nexport { VANTA } from './_base.js';\nconst win = typeof window == 'object';\nlet THREE = win && window.THREE;\nexport default class ShaderBase extends VantaBase {\n  constructor(userOptions) {\n    THREE = userOptions.THREE || THREE;\n    THREE.Color.prototype.toVector = function () {\n      return new THREE.Vector3(this.r, this.g, this.b);\n    };\n    super(userOptions);\n    this.updateUniforms = this.updateUniforms.bind(this);\n  }\n  init() {\n    this.mode = 'shader';\n    this.uniforms = {\n      iTime: {\n        type: \"f\",\n        value: 1.0\n      },\n      iResolution: {\n        type: \"v2\",\n        value: new THREE.Vector2(1, 1)\n      },\n      iDpr: {\n        type: \"f\",\n        value: window.devicePixelRatio || 1\n      },\n      iMouse: {\n        type: \"v2\",\n        value: new THREE.Vector2(this.mouseX || 0, this.mouseY || 0)\n      }\n    };\n    super.init();\n    if (this.fragmentShader) {\n      this.initBasicShader();\n    }\n  }\n  setOptions(userOptions) {\n    super.setOptions(userOptions);\n    this.updateUniforms();\n  }\n  initBasicShader(fragmentShader = this.fragmentShader, vertexShader = this.vertexShader) {\n    if (!vertexShader) {\n      vertexShader = \"uniform float uTime;\\nuniform vec2 uResolution;\\nvoid main() {\\n  gl_Position = vec4( position, 1.0 );\\n}\";\n    }\n    this.updateUniforms();\n    if (typeof this.valuesChanger === \"function\") {\n      this.valuesChanger(); // Some effects define this themselves\n    }\n    const material = new THREE.ShaderMaterial({\n      uniforms: this.uniforms,\n      vertexShader: vertexShader,\n      fragmentShader: fragmentShader\n    });\n    const texPath = this.options.texturePath;\n    if (texPath) {\n      this.uniforms.iTex = {\n        type: \"t\",\n        value: new THREE.TextureLoader().load(texPath)\n      };\n    }\n    const mesh = new THREE.Mesh(new THREE.PlaneGeometry(2, 2), material);\n    this.scene.add(mesh);\n    this.camera = new THREE.Camera();\n    this.camera.position.z = 1;\n  }\n  updateUniforms() {\n    const newUniforms = {};\n    let k, v;\n    for (k in this.options) {\n      v = this.options[k];\n      if (k.toLowerCase().indexOf('color') !== -1) {\n        newUniforms[k] = {\n          type: \"v3\",\n          value: new THREE.Color(v).toVector()\n        };\n      } else if (typeof v === 'number') {\n        newUniforms[k] = {\n          type: \"f\",\n          value: v\n        };\n      }\n    }\n    return Object.assign(this.uniforms, newUniforms);\n  }\n  resize() {\n    super.resize();\n    this.uniforms.iResolution.value.x = this.width / this.scale;\n    this.uniforms.iResolution.value.y = this.height / this.scale;\n  }\n}","map":{"version":3,"names":["VantaBase","VANTA","win","window","THREE","ShaderBase","constructor","userOptions","Color","prototype","toVector","Vector3","r","g","b","updateUniforms","bind","init","mode","uniforms","iTime","type","value","iResolution","Vector2","iDpr","devicePixelRatio","iMouse","mouseX","mouseY","fragmentShader","initBasicShader","setOptions","vertexShader","valuesChanger","material","ShaderMaterial","texPath","options","texturePath","iTex","TextureLoader","load","mesh","Mesh","PlaneGeometry","scene","add","camera","Camera","position","z","newUniforms","k","v","toLowerCase","indexOf","Object","assign","resize","x","width","scale","y","height"],"sources":["E:/mytest/node_modules/vanta/src/_shaderBase.js"],"sourcesContent":["import VantaBase from './_base.js'\r\nexport {VANTA} from './_base.js'\r\n\r\nconst win = typeof window == 'object'\r\nlet THREE = win && window.THREE\r\n\r\nexport default class ShaderBase extends VantaBase {\r\n  constructor(userOptions) {\r\n    THREE = userOptions.THREE || THREE\r\n    THREE.Color.prototype.toVector = function(){\r\n      return new THREE.Vector3(this.r, this.g, this.b)\r\n    }\r\n    super(userOptions)\r\n    this.updateUniforms = this.updateUniforms.bind(this)\r\n  }\r\n  init(){\r\n    this.mode = 'shader'\r\n    this.uniforms = {\r\n      iTime: {\r\n        type: \"f\",\r\n        value: 1.0\r\n      },\r\n      iResolution: {\r\n        type: \"v2\",\r\n        value: new THREE.Vector2(1, 1)\r\n      },\r\n      iDpr: {\r\n        type: \"f\",\r\n        value: window.devicePixelRatio || 1\r\n      },\r\n      iMouse: {\r\n        type: \"v2\",\r\n        value: new THREE.Vector2(this.mouseX || 0, this.mouseY || 0)\r\n      }\r\n    }\r\n    super.init()\r\n    if (this.fragmentShader) {\r\n      this.initBasicShader()\r\n    }\r\n  }\r\n  setOptions(userOptions){\r\n    super.setOptions(userOptions)\r\n    this.updateUniforms()\r\n  }\r\n  initBasicShader(fragmentShader = this.fragmentShader, vertexShader = this.vertexShader) {\r\n    if (!vertexShader) {\r\n      vertexShader = \"uniform float uTime;\\nuniform vec2 uResolution;\\nvoid main() {\\n  gl_Position = vec4( position, 1.0 );\\n}\"\r\n    }\r\n    this.updateUniforms()\r\n    if (typeof this.valuesChanger === \"function\") {\r\n      this.valuesChanger() // Some effects define this themselves\r\n    }\r\n    const material = new THREE.ShaderMaterial({\r\n      uniforms: this.uniforms,\r\n      vertexShader: vertexShader,\r\n      fragmentShader: fragmentShader\r\n    })\r\n    const texPath = this.options.texturePath\r\n    if (texPath) {\r\n      this.uniforms.iTex = {\r\n        type: \"t\",\r\n        value: new THREE.TextureLoader().load(texPath)\r\n      }\r\n    }\r\n    const mesh = new THREE.Mesh(new THREE.PlaneGeometry(2, 2), material)\r\n    this.scene.add(mesh)\r\n    this.camera = new THREE.Camera()\r\n    this.camera.position.z = 1\r\n  }\r\n\r\n  updateUniforms() {\r\n    const newUniforms = {}\r\n    let k, v\r\n    for (k in this.options) {\r\n      v = this.options[k]\r\n      if (k.toLowerCase().indexOf('color') !== -1) {\r\n        newUniforms[k] = {\r\n          type: \"v3\",\r\n          value: new THREE.Color(v).toVector()\r\n        }\r\n      } else if (typeof v === 'number') {\r\n        newUniforms[k] = {\r\n          type: \"f\",\r\n          value: v\r\n        }\r\n      }\r\n    }\r\n    return Object.assign(this.uniforms, newUniforms)\r\n  }\r\n  resize(){\r\n    super.resize()\r\n    this.uniforms.iResolution.value.x = this.width / this.scale\r\n    this.uniforms.iResolution.value.y = this.height / this.scale\r\n  }\r\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}