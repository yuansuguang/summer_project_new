{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport * as echarts from 'echarts/lib/echarts';\nimport componentViewControlMixin from '../common/componentViewControlMixin';\nimport componentPostEffectMixin from '../common/componentPostEffectMixin';\nimport componentLightMixin from '../common/componentLightMixin';\nimport componentShadingMixin from '../common/componentShadingMixin';\nfunction defaultId(option, idx) {\n  option.id = option.id || option.name || idx + '';\n}\nvar GlobeModel = echarts.ComponentModel.extend({\n  type: 'globe',\n  layoutMode: 'box',\n  coordinateSystem: null,\n  init: function () {\n    GlobeModel.superApply(this, 'init', arguments);\n    echarts.util.each(this.option.layers, function (layerOption, idx) {\n      echarts.util.merge(layerOption, this.defaultLayerOption);\n      defaultId(layerOption, idx);\n    }, this);\n  },\n  mergeOption: function (option) {\n    // TODO test\n    var oldLayers = this.option.layers;\n    this.option.layers = null;\n    GlobeModel.superApply(this, 'mergeOption', arguments);\n    function createLayerMap(layers) {\n      return echarts.util.reduce(layers, function (obj, layerOption, idx) {\n        defaultId(layerOption, idx);\n        obj[layerOption.id] = layerOption;\n        return obj;\n      }, {});\n    }\n    if (oldLayers && oldLayers.length) {\n      var newLayerMap = createLayerMap(option.layers);\n      var oldLayerMap = createLayerMap(oldLayers);\n      for (var id in newLayerMap) {\n        if (oldLayerMap[id]) {\n          echarts.util.merge(oldLayerMap[id], newLayerMap[id], true);\n        } else {\n          oldLayers.push(option.layers[id]);\n        }\n      } // Copy back\n\n      this.option.layers = oldLayers;\n    } // else overwrite\n    // Set default\n\n    echarts.util.each(this.option.layers, function (layerOption) {\n      echarts.util.merge(layerOption, this.defaultLayerOption);\n    }, this);\n  },\n  optionUpdated: function () {\n    this.updateDisplacementHash();\n  },\n  defaultLayerOption: {\n    show: true,\n    type: 'overlay'\n  },\n  defaultOption: {\n    show: true,\n    zlevel: -10,\n    // Layout used for viewport\n    left: 0,\n    top: 0,\n    width: '100%',\n    height: '100%',\n    environment: 'auto',\n    baseColor: '#fff',\n    // Base albedo texture\n    baseTexture: '',\n    // Height texture for bump mapping and vertex displacement\n    heightTexture: '',\n    // Texture for vertex displacement, default use heightTexture\n    displacementTexture: '',\n    // Scale of vertex displacement, available only if displacementTexture is set.\n    displacementScale: 0,\n    // Detail of displacement. 'low', 'medium', 'high', 'ultra'\n    displacementQuality: 'medium',\n    // Globe radius\n    globeRadius: 100,\n    // Globe outer radius. Which is max of altitude.\n    globeOuterRadius: 150,\n    // Shading of globe\n    shading: 'lambert',\n    // Extend light\n    light: {\n      // Main sun light\n      main: {\n        // Time, default it will use system time\n        time: ''\n      }\n    },\n    // atmosphere\n    atmosphere: {\n      show: false,\n      offset: 5,\n      color: '#ffffff',\n      glowPower: 6.0,\n      innerGlowPower: 2.0\n    },\n    // light\n    // postEffect\n    // temporalSuperSampling\n    viewControl: {\n      autoRotate: true,\n      panSensitivity: 0,\n      targetCoord: null\n    },\n    // {\n    //     show: true,\n    //     name: 'cloud',\n    //     type: 'overlay',\n    //     shading: 'lambert',\n    //     distance: 10,\n    //     texture: ''\n    // }\n    // {\n    //     type: 'blend',\n    //     blendTo: 'albedo'\n    //     blendType: 'source-over'\n    // }\n    layers: []\n  },\n  setDisplacementData: function (data, width, height) {\n    this.displacementData = data;\n    this.displacementWidth = width;\n    this.displacementHeight = height;\n  },\n  getDisplacementTexture: function () {\n    return this.get('displacementTexture') || this.get('heightTexture');\n  },\n  getDisplacemenScale: function () {\n    var displacementTexture = this.getDisplacementTexture();\n    var displacementScale = this.get('displacementScale');\n    if (!displacementTexture || displacementTexture === 'none') {\n      displacementScale = 0;\n    }\n    return displacementScale;\n  },\n  hasDisplacement: function () {\n    return this.getDisplacemenScale() > 0;\n  },\n  _displacementChanged: true,\n  _displacementScale: 0,\n  updateDisplacementHash: function () {\n    var displacementTexture = this.getDisplacementTexture();\n    var displacementScale = this.getDisplacemenScale();\n    this._displacementChanged = this._displacementTexture !== displacementTexture || this._displacementScale !== displacementScale;\n    this._displacementTexture = displacementTexture;\n    this._displacementScale = displacementScale;\n  },\n  isDisplacementChanged: function () {\n    return this._displacementChanged;\n  }\n});\necharts.util.merge(GlobeModel.prototype, componentViewControlMixin);\necharts.util.merge(GlobeModel.prototype, componentPostEffectMixin);\necharts.util.merge(GlobeModel.prototype, componentLightMixin);\necharts.util.merge(GlobeModel.prototype, componentShadingMixin);\nexport default GlobeModel;","map":{"version":3,"names":["echarts","componentViewControlMixin","componentPostEffectMixin","componentLightMixin","componentShadingMixin","defaultId","option","idx","id","name","GlobeModel","ComponentModel","extend","type","layoutMode","coordinateSystem","init","superApply","arguments","util","each","layers","layerOption","merge","defaultLayerOption","mergeOption","oldLayers","createLayerMap","reduce","obj","length","newLayerMap","oldLayerMap","push","optionUpdated","updateDisplacementHash","show","defaultOption","zlevel","left","top","width","height","environment","baseColor","baseTexture","heightTexture","displacementTexture","displacementScale","displacementQuality","globeRadius","globeOuterRadius","shading","light","main","time","atmosphere","offset","color","glowPower","innerGlowPower","viewControl","autoRotate","panSensitivity","targetCoord","setDisplacementData","data","displacementData","displacementWidth","displacementHeight","getDisplacementTexture","get","getDisplacemenScale","hasDisplacement","_displacementChanged","_displacementScale","_displacementTexture","isDisplacementChanged","prototype"],"sources":["E:/mytest/node_modules/echarts-gl/lib/component/globe/GlobeModel.js"],"sourcesContent":["import * as echarts from 'echarts/lib/echarts';\nimport componentViewControlMixin from '../common/componentViewControlMixin';\nimport componentPostEffectMixin from '../common/componentPostEffectMixin';\nimport componentLightMixin from '../common/componentLightMixin';\nimport componentShadingMixin from '../common/componentShadingMixin';\n\nfunction defaultId(option, idx) {\n  option.id = option.id || option.name || idx + '';\n}\n\nvar GlobeModel = echarts.ComponentModel.extend({\n  type: 'globe',\n  layoutMode: 'box',\n  coordinateSystem: null,\n  init: function () {\n    GlobeModel.superApply(this, 'init', arguments);\n    echarts.util.each(this.option.layers, function (layerOption, idx) {\n      echarts.util.merge(layerOption, this.defaultLayerOption);\n      defaultId(layerOption, idx);\n    }, this);\n  },\n  mergeOption: function (option) {\n    // TODO test\n    var oldLayers = this.option.layers;\n    this.option.layers = null;\n    GlobeModel.superApply(this, 'mergeOption', arguments);\n\n    function createLayerMap(layers) {\n      return echarts.util.reduce(layers, function (obj, layerOption, idx) {\n        defaultId(layerOption, idx);\n        obj[layerOption.id] = layerOption;\n        return obj;\n      }, {});\n    }\n\n    if (oldLayers && oldLayers.length) {\n      var newLayerMap = createLayerMap(option.layers);\n      var oldLayerMap = createLayerMap(oldLayers);\n\n      for (var id in newLayerMap) {\n        if (oldLayerMap[id]) {\n          echarts.util.merge(oldLayerMap[id], newLayerMap[id], true);\n        } else {\n          oldLayers.push(option.layers[id]);\n        }\n      } // Copy back\n\n\n      this.option.layers = oldLayers;\n    } // else overwrite\n    // Set default\n\n\n    echarts.util.each(this.option.layers, function (layerOption) {\n      echarts.util.merge(layerOption, this.defaultLayerOption);\n    }, this);\n  },\n  optionUpdated: function () {\n    this.updateDisplacementHash();\n  },\n  defaultLayerOption: {\n    show: true,\n    type: 'overlay'\n  },\n  defaultOption: {\n    show: true,\n    zlevel: -10,\n    // Layout used for viewport\n    left: 0,\n    top: 0,\n    width: '100%',\n    height: '100%',\n    environment: 'auto',\n    baseColor: '#fff',\n    // Base albedo texture\n    baseTexture: '',\n    // Height texture for bump mapping and vertex displacement\n    heightTexture: '',\n    // Texture for vertex displacement, default use heightTexture\n    displacementTexture: '',\n    // Scale of vertex displacement, available only if displacementTexture is set.\n    displacementScale: 0,\n    // Detail of displacement. 'low', 'medium', 'high', 'ultra'\n    displacementQuality: 'medium',\n    // Globe radius\n    globeRadius: 100,\n    // Globe outer radius. Which is max of altitude.\n    globeOuterRadius: 150,\n    // Shading of globe\n    shading: 'lambert',\n    // Extend light\n    light: {\n      // Main sun light\n      main: {\n        // Time, default it will use system time\n        time: ''\n      }\n    },\n    // atmosphere\n    atmosphere: {\n      show: false,\n      offset: 5,\n      color: '#ffffff',\n      glowPower: 6.0,\n      innerGlowPower: 2.0\n    },\n    // light\n    // postEffect\n    // temporalSuperSampling\n    viewControl: {\n      autoRotate: true,\n      panSensitivity: 0,\n      targetCoord: null\n    },\n    // {\n    //     show: true,\n    //     name: 'cloud',\n    //     type: 'overlay',\n    //     shading: 'lambert',\n    //     distance: 10,\n    //     texture: ''\n    // }\n    // {\n    //     type: 'blend',\n    //     blendTo: 'albedo'\n    //     blendType: 'source-over'\n    // }\n    layers: []\n  },\n  setDisplacementData: function (data, width, height) {\n    this.displacementData = data;\n    this.displacementWidth = width;\n    this.displacementHeight = height;\n  },\n  getDisplacementTexture: function () {\n    return this.get('displacementTexture') || this.get('heightTexture');\n  },\n  getDisplacemenScale: function () {\n    var displacementTexture = this.getDisplacementTexture();\n    var displacementScale = this.get('displacementScale');\n\n    if (!displacementTexture || displacementTexture === 'none') {\n      displacementScale = 0;\n    }\n\n    return displacementScale;\n  },\n  hasDisplacement: function () {\n    return this.getDisplacemenScale() > 0;\n  },\n  _displacementChanged: true,\n  _displacementScale: 0,\n  updateDisplacementHash: function () {\n    var displacementTexture = this.getDisplacementTexture();\n    var displacementScale = this.getDisplacemenScale();\n    this._displacementChanged = this._displacementTexture !== displacementTexture || this._displacementScale !== displacementScale;\n    this._displacementTexture = displacementTexture;\n    this._displacementScale = displacementScale;\n  },\n  isDisplacementChanged: function () {\n    return this._displacementChanged;\n  }\n});\necharts.util.merge(GlobeModel.prototype, componentViewControlMixin);\necharts.util.merge(GlobeModel.prototype, componentPostEffectMixin);\necharts.util.merge(GlobeModel.prototype, componentLightMixin);\necharts.util.merge(GlobeModel.prototype, componentShadingMixin);\nexport default GlobeModel;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}