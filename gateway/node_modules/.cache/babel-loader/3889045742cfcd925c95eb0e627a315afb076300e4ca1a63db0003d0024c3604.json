{"ast":null,"code":"import \"core-js/modules/es.array-buffer.detached.js\";\nimport \"core-js/modules/es.array-buffer.transfer.js\";\nimport \"core-js/modules/es.array-buffer.transfer-to-fixed-length.js\";\nimport \"core-js/modules/es.typed-array.to-reversed.js\";\nimport \"core-js/modules/es.typed-array.to-sorted.js\";\nimport \"core-js/modules/es.typed-array.with.js\";\n// TODO ECharts GL must be imported whatever component,charts is imported.\nimport '../../echarts-gl';\nimport Scatter3DSeries from './Scatter3DSeries';\nimport Scatter3DView from './Scatter3DView';\nexport function install(registers) {\n  registers.registerChartView(Scatter3DView);\n  registers.registerSeriesModel(Scatter3DSeries);\n  registers.registerLayout({\n    seriesType: 'scatter3D',\n    reset: function (seriesModel) {\n      var coordSys = seriesModel.coordinateSystem;\n      if (coordSys) {\n        var coordDims = coordSys.dimensions;\n        if (coordDims.length < 3) {\n          if (process.env.NODE_ENV !== 'production') {\n            console.error('scatter3D needs 3D coordinateSystem');\n          }\n          return;\n        }\n        var dims = coordDims.map(function (coordDim) {\n          return seriesModel.coordDimToDataDim(coordDim)[0];\n        });\n        var item = [];\n        var out = [];\n        return {\n          progress: function (params, data) {\n            var points = new Float32Array((params.end - params.start) * 3);\n            for (var idx = params.start; idx < params.end; idx++) {\n              var idx3 = (idx - params.start) * 3;\n              item[0] = data.get(dims[0], idx);\n              item[1] = data.get(dims[1], idx);\n              item[2] = data.get(dims[2], idx);\n              coordSys.dataToPoint(item, out);\n              points[idx3] = out[0];\n              points[idx3 + 1] = out[1];\n              points[idx3 + 2] = out[2];\n            }\n            data.setLayout('points', points);\n          }\n        };\n      }\n    }\n  });\n}","map":{"version":3,"names":["Scatter3DSeries","Scatter3DView","install","registers","registerChartView","registerSeriesModel","registerLayout","seriesType","reset","seriesModel","coordSys","coordinateSystem","coordDims","dimensions","length","process","env","NODE_ENV","console","error","dims","map","coordDim","coordDimToDataDim","item","out","progress","params","data","points","Float32Array","end","start","idx","idx3","get","dataToPoint","setLayout"],"sources":["E:/QuestionairePlanet_Fronted/mytest/node_modules/echarts-gl/lib/chart/scatter3D/install.js"],"sourcesContent":["// TODO ECharts GL must be imported whatever component,charts is imported.\nimport '../../echarts-gl';\nimport Scatter3DSeries from './Scatter3DSeries';\nimport Scatter3DView from './Scatter3DView';\nexport function install(registers) {\n  registers.registerChartView(Scatter3DView);\n  registers.registerSeriesModel(Scatter3DSeries);\n  registers.registerLayout({\n    seriesType: 'scatter3D',\n    reset: function (seriesModel) {\n      var coordSys = seriesModel.coordinateSystem;\n\n      if (coordSys) {\n        var coordDims = coordSys.dimensions;\n\n        if (coordDims.length < 3) {\n          if (process.env.NODE_ENV !== 'production') {\n            console.error('scatter3D needs 3D coordinateSystem');\n          }\n\n          return;\n        }\n\n        var dims = coordDims.map(function (coordDim) {\n          return seriesModel.coordDimToDataDim(coordDim)[0];\n        });\n        var item = [];\n        var out = [];\n        return {\n          progress: function (params, data) {\n            var points = new Float32Array((params.end - params.start) * 3);\n\n            for (var idx = params.start; idx < params.end; idx++) {\n              var idx3 = (idx - params.start) * 3;\n              item[0] = data.get(dims[0], idx);\n              item[1] = data.get(dims[1], idx);\n              item[2] = data.get(dims[2], idx);\n              coordSys.dataToPoint(item, out);\n              points[idx3] = out[0];\n              points[idx3 + 1] = out[1];\n              points[idx3 + 2] = out[2];\n            }\n\n            data.setLayout('points', points);\n          }\n        };\n      }\n    }\n  });\n}"],"mappings":";;;;;;AAAA;AACA,OAAO,kBAAkB;AACzB,OAAOA,eAAe,MAAM,mBAAmB;AAC/C,OAAOC,aAAa,MAAM,iBAAiB;AAC3C,OAAO,SAASC,OAAOA,CAACC,SAAS,EAAE;EACjCA,SAAS,CAACC,iBAAiB,CAACH,aAAa,CAAC;EAC1CE,SAAS,CAACE,mBAAmB,CAACL,eAAe,CAAC;EAC9CG,SAAS,CAACG,cAAc,CAAC;IACvBC,UAAU,EAAE,WAAW;IACvBC,KAAK,EAAE,SAAAA,CAAUC,WAAW,EAAE;MAC5B,IAAIC,QAAQ,GAAGD,WAAW,CAACE,gBAAgB;MAE3C,IAAID,QAAQ,EAAE;QACZ,IAAIE,SAAS,GAAGF,QAAQ,CAACG,UAAU;QAEnC,IAAID,SAAS,CAACE,MAAM,GAAG,CAAC,EAAE;UACxB,IAAIC,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,YAAY,EAAE;YACzCC,OAAO,CAACC,KAAK,CAAC,qCAAqC,CAAC;UACtD;UAEA;QACF;QAEA,IAAIC,IAAI,GAAGR,SAAS,CAACS,GAAG,CAAC,UAAUC,QAAQ,EAAE;UAC3C,OAAOb,WAAW,CAACc,iBAAiB,CAACD,QAAQ,CAAC,CAAC,CAAC,CAAC;QACnD,CAAC,CAAC;QACF,IAAIE,IAAI,GAAG,EAAE;QACb,IAAIC,GAAG,GAAG,EAAE;QACZ,OAAO;UACLC,QAAQ,EAAE,SAAAA,CAAUC,MAAM,EAAEC,IAAI,EAAE;YAChC,IAAIC,MAAM,GAAG,IAAIC,YAAY,CAAC,CAACH,MAAM,CAACI,GAAG,GAAGJ,MAAM,CAACK,KAAK,IAAI,CAAC,CAAC;YAE9D,KAAK,IAAIC,GAAG,GAAGN,MAAM,CAACK,KAAK,EAAEC,GAAG,GAAGN,MAAM,CAACI,GAAG,EAAEE,GAAG,EAAE,EAAE;cACpD,IAAIC,IAAI,GAAG,CAACD,GAAG,GAAGN,MAAM,CAACK,KAAK,IAAI,CAAC;cACnCR,IAAI,CAAC,CAAC,CAAC,GAAGI,IAAI,CAACO,GAAG,CAACf,IAAI,CAAC,CAAC,CAAC,EAAEa,GAAG,CAAC;cAChCT,IAAI,CAAC,CAAC,CAAC,GAAGI,IAAI,CAACO,GAAG,CAACf,IAAI,CAAC,CAAC,CAAC,EAAEa,GAAG,CAAC;cAChCT,IAAI,CAAC,CAAC,CAAC,GAAGI,IAAI,CAACO,GAAG,CAACf,IAAI,CAAC,CAAC,CAAC,EAAEa,GAAG,CAAC;cAChCvB,QAAQ,CAAC0B,WAAW,CAACZ,IAAI,EAAEC,GAAG,CAAC;cAC/BI,MAAM,CAACK,IAAI,CAAC,GAAGT,GAAG,CAAC,CAAC,CAAC;cACrBI,MAAM,CAACK,IAAI,GAAG,CAAC,CAAC,GAAGT,GAAG,CAAC,CAAC,CAAC;cACzBI,MAAM,CAACK,IAAI,GAAG,CAAC,CAAC,GAAGT,GAAG,CAAC,CAAC,CAAC;YAC3B;YAEAG,IAAI,CAACS,SAAS,CAAC,QAAQ,EAAER,MAAM,CAAC;UAClC;QACF,CAAC;MACH;IACF;EACF,CAAC,CAAC;AACJ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}