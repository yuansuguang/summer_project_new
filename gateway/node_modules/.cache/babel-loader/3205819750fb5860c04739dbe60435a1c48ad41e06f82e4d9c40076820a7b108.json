{"ast":null,"code":"import \"core-js/modules/es.array-buffer.detached.js\";\nimport \"core-js/modules/es.array-buffer.transfer.js\";\nimport \"core-js/modules/es.array-buffer.transfer-to-fixed-length.js\";\nimport \"core-js/modules/es.typed-array.to-reversed.js\";\nimport \"core-js/modules/es.typed-array.to-sorted.js\";\nimport \"core-js/modules/es.typed-array.with.js\";\nimport Pass from 'claygl/src/compositor/Pass';\nimport Geometry from 'claygl/src/Geometry';\nimport Mesh from 'claygl/src/Mesh';\nimport Material from 'claygl/src/Material';\nimport Shader from 'claygl/src/Shader';\nimport Texture2D from 'claygl/src/Texture2D';\nimport Texture from 'claygl/src/Texture';\nimport OrthoCamera from 'claygl/src/camera/Orthographic';\nimport PlaneGeometry from 'claygl/src/geometry/Plane';\nimport FrameBuffer from 'claygl/src/FrameBuffer';\nimport Line2DGeometry from './Line2D'; // import TemporalSS from '../../effect/TemporalSuperSampling';\n\nimport vectorFieldParticleGLSL from './vectorFieldParticle.glsl.js';\nShader['import'](vectorFieldParticleGLSL);\nfunction createSpriteCanvas(size) {\n  var canvas = document.createElement('canvas');\n  canvas.width = canvas.height = size;\n  var ctx = canvas.getContext('2d');\n  ctx.fillStyle = '#fff';\n  ctx.arc(size / 2, size / 2, size / 2, 0, Math.PI * 2);\n  ctx.fill();\n  return canvas;\n} // import spriteUtil from '../../util/sprite';\n\nvar VectorFieldParticleSurface = function () {\n  /**\n   * @type {number}\n   */\n  this.motionBlurFactor = 0.99;\n  /**\n   * Vector field lookup image\n   * @type {clay.Texture2D}\n   */\n\n  this.vectorFieldTexture = new Texture2D({\n    type: Texture.FLOAT,\n    // minFilter: Texture.NEAREST,\n    // magFilter: Texture.NEAREST,\n    flipY: false\n  });\n  /**\n   * Particle life range\n   * @type {Array.<number>}\n   */\n\n  this.particleLife = [5, 20];\n  this._particleType = 'point';\n  /**\n   * @type {number}\n   */\n\n  this._particleSize = 1;\n  /**\n   * @type {Array.<number>}\n   */\n\n  this.particleColor = [1, 1, 1, 1];\n  /**\n   * @type {number}\n   */\n\n  this.particleSpeedScaling = 1.0;\n  /**\n   * @type {clay.Texture2D}\n   */\n\n  this._thisFrameTexture = null;\n  this._particlePass = null;\n  this._spawnTexture = null;\n  this._particleTexture0 = null;\n  this._particleTexture1 = null;\n  this._particlePointsMesh = null;\n  this._surfaceFrameBuffer = null;\n  this._elapsedTime = 0.0;\n  this._scene = null;\n  this._camera = null;\n  this._lastFrameTexture = null; // this._temporalSS = new TemporalSS(50);\n  // this._antialising = false;\n\n  this._supersampling = 1;\n  this._downsampleTextures = [];\n  this._width = 512;\n  this._height = 512;\n  this.init();\n};\nVectorFieldParticleSurface.prototype = {\n  constructor: VectorFieldParticleSurface,\n  init: function () {\n    var parameters = {\n      type: Texture.FLOAT,\n      minFilter: Texture.NEAREST,\n      magFilter: Texture.NEAREST,\n      useMipmap: false\n    };\n    this._spawnTexture = new Texture2D(parameters);\n    this._particleTexture0 = new Texture2D(parameters);\n    this._particleTexture1 = new Texture2D(parameters);\n    this._frameBuffer = new FrameBuffer({\n      depthBuffer: false\n    });\n    this._particlePass = new Pass({\n      fragment: Shader.source('ecgl.vfParticle.particle.fragment')\n    });\n    this._particlePass.setUniform('velocityTexture', this.vectorFieldTexture);\n    this._particlePass.setUniform('spawnTexture', this._spawnTexture);\n    this._downsamplePass = new Pass({\n      fragment: Shader.source('clay.compositor.downsample')\n    });\n    var particlePointsMesh = new Mesh({\n      // Render after last frame full quad\n      renderOrder: 10,\n      material: new Material({\n        shader: new Shader(Shader.source('ecgl.vfParticle.renderPoints.vertex'), Shader.source('ecgl.vfParticle.renderPoints.fragment'))\n      }),\n      mode: Mesh.POINTS,\n      geometry: new Geometry({\n        dynamic: true,\n        mainAttribute: 'texcoord0'\n      })\n    });\n    var particleLinesMesh = new Mesh({\n      // Render after last frame full quad\n      renderOrder: 10,\n      material: new Material({\n        shader: new Shader(Shader.source('ecgl.vfParticle.renderLines.vertex'), Shader.source('ecgl.vfParticle.renderLines.fragment'))\n      }),\n      geometry: new Line2DGeometry(),\n      culling: false\n    });\n    var lastFrameFullQuad = new Mesh({\n      material: new Material({\n        shader: new Shader(Shader.source('ecgl.color.vertex'), Shader.source('ecgl.color.fragment')) // DO NOT BLEND Blend will multiply alpha\n        // transparent: true\n      }),\n      geometry: new PlaneGeometry()\n    });\n    lastFrameFullQuad.material.enableTexture('diffuseMap');\n    this._particlePointsMesh = particlePointsMesh;\n    this._particleLinesMesh = particleLinesMesh;\n    this._lastFrameFullQuadMesh = lastFrameFullQuad;\n    this._camera = new OrthoCamera();\n    this._thisFrameTexture = new Texture2D();\n    this._lastFrameTexture = new Texture2D();\n  },\n  setParticleDensity: function (width, height) {\n    var nVertex = width * height;\n    var spawnTextureData = new Float32Array(nVertex * 4);\n    var off = 0;\n    var lifeRange = this.particleLife;\n    for (var i = 0; i < width; i++) {\n      for (var j = 0; j < height; j++, off++) {\n        // x position, range [0 - 1]\n        spawnTextureData[off * 4] = Math.random(); // y position, range [0 - 1]\n\n        spawnTextureData[off * 4 + 1] = Math.random(); // Some property\n\n        spawnTextureData[off * 4 + 2] = Math.random();\n        var life = (lifeRange[1] - lifeRange[0]) * Math.random() + lifeRange[0]; // Particle life\n\n        spawnTextureData[off * 4 + 3] = life;\n      }\n    }\n    if (this._particleType === 'line') {\n      this._setLineGeometry(width, height);\n    } else {\n      this._setPointsGeometry(width, height);\n    }\n    this._spawnTexture.width = width;\n    this._spawnTexture.height = height;\n    this._spawnTexture.pixels = spawnTextureData;\n    this._particleTexture0.width = this._particleTexture1.width = width;\n    this._particleTexture0.height = this._particleTexture1.height = height;\n    this._particlePass.setUniform('textureSize', [width, height]);\n  },\n  _setPointsGeometry: function (width, height) {\n    var nVertex = width * height;\n    var geometry = this._particlePointsMesh.geometry;\n    var attributes = geometry.attributes;\n    attributes.texcoord0.init(nVertex);\n    var off = 0;\n    for (var i = 0; i < width; i++) {\n      for (var j = 0; j < height; j++, off++) {\n        attributes.texcoord0.value[off * 2] = i / width;\n        attributes.texcoord0.value[off * 2 + 1] = j / height;\n      }\n    }\n    geometry.dirty();\n  },\n  _setLineGeometry: function (width, height) {\n    var nLine = width * height;\n    var geometry = this._getParticleMesh().geometry;\n    geometry.setLineCount(nLine);\n    geometry.resetOffset();\n    for (var i = 0; i < width; i++) {\n      for (var j = 0; j < height; j++) {\n        geometry.addLine([i / width, j / height]);\n      }\n    }\n    geometry.dirty();\n  },\n  _getParticleMesh: function () {\n    return this._particleType === 'line' ? this._particleLinesMesh : this._particlePointsMesh;\n  },\n  update: function (renderer, api, deltaTime, firstFrame) {\n    var particleMesh = this._getParticleMesh();\n    var frameBuffer = this._frameBuffer;\n    var particlePass = this._particlePass;\n    if (firstFrame) {\n      this._updateDownsampleTextures(renderer, api);\n    }\n    particleMesh.material.set('size', this._particleSize * this._supersampling);\n    particleMesh.material.set('color', this.particleColor);\n    particlePass.setUniform('speedScaling', this.particleSpeedScaling);\n    frameBuffer.attach(this._particleTexture1);\n    particlePass.setUniform('firstFrameTime', firstFrame ? (this.particleLife[1] + this.particleLife[0]) / 2 : 0);\n    particlePass.setUniform('particleTexture', this._particleTexture0);\n    particlePass.setUniform('deltaTime', deltaTime);\n    particlePass.setUniform('elapsedTime', this._elapsedTime);\n    particlePass.render(renderer, frameBuffer);\n    particleMesh.material.set('particleTexture', this._particleTexture1);\n    particleMesh.material.set('prevParticleTexture', this._particleTexture0);\n    frameBuffer.attach(this._thisFrameTexture);\n    frameBuffer.bind(renderer);\n    renderer.gl.clear(renderer.gl.DEPTH_BUFFER_BIT | renderer.gl.COLOR_BUFFER_BIT);\n    var lastFrameFullQuad = this._lastFrameFullQuadMesh;\n    lastFrameFullQuad.material.set('diffuseMap', this._lastFrameTexture);\n    lastFrameFullQuad.material.set('color', [1, 1, 1, this.motionBlurFactor]);\n    this._camera.update(true);\n    renderer.renderPass([lastFrameFullQuad, particleMesh], this._camera);\n    frameBuffer.unbind(renderer);\n    this._downsample(renderer);\n    this._swapTexture();\n    this._elapsedTime += deltaTime;\n  },\n  _downsample: function (renderer) {\n    var downsampleTextures = this._downsampleTextures;\n    if (downsampleTextures.length === 0) {\n      return;\n    }\n    var current = 0;\n    var sourceTexture = this._thisFrameTexture;\n    var targetTexture = downsampleTextures[current];\n    while (targetTexture) {\n      this._frameBuffer.attach(targetTexture);\n      this._downsamplePass.setUniform('texture', sourceTexture);\n      this._downsamplePass.setUniform('textureSize', [sourceTexture.width, sourceTexture.height]);\n      this._downsamplePass.render(renderer, this._frameBuffer);\n      sourceTexture = targetTexture;\n      targetTexture = downsampleTextures[++current];\n    }\n  },\n  getSurfaceTexture: function () {\n    var downsampleTextures = this._downsampleTextures;\n    return downsampleTextures.length > 0 ? downsampleTextures[downsampleTextures.length - 1] : this._lastFrameTexture;\n  },\n  setRegion: function (region) {\n    this._particlePass.setUniform('region', region);\n  },\n  resize: function (width, height) {\n    this._lastFrameTexture.width = width * this._supersampling;\n    this._lastFrameTexture.height = height * this._supersampling;\n    this._thisFrameTexture.width = width * this._supersampling;\n    this._thisFrameTexture.height = height * this._supersampling;\n    this._width = width;\n    this._height = height;\n  },\n  setParticleSize: function (size) {\n    var particleMesh = this._getParticleMesh();\n    if (size <= 2) {\n      particleMesh.material.disableTexture('spriteTexture');\n      particleMesh.material.transparent = false;\n      return;\n    }\n    if (!this._spriteTexture) {\n      this._spriteTexture = new Texture2D();\n    }\n    if (!this._spriteTexture.image || this._spriteTexture.image.width !== size) {\n      this._spriteTexture.image = createSpriteCanvas(size);\n      this._spriteTexture.dirty();\n    }\n    particleMesh.material.transparent = true;\n    particleMesh.material.enableTexture('spriteTexture');\n    particleMesh.material.set('spriteTexture', this._spriteTexture);\n    this._particleSize = size;\n  },\n  setGradientTexture: function (gradientTexture) {\n    var material = this._getParticleMesh().material;\n    material[gradientTexture ? 'enableTexture' : 'disableTexture']('gradientTexture');\n    material.setUniform('gradientTexture', gradientTexture);\n  },\n  setColorTextureImage: function (colorTextureImg, api) {\n    var material = this._getParticleMesh().material;\n    material.setTextureImage('colorTexture', colorTextureImg, api, {\n      flipY: true\n    });\n  },\n  setParticleType: function (type) {\n    this._particleType = type;\n  },\n  clearFrame: function (renderer) {\n    var frameBuffer = this._frameBuffer;\n    frameBuffer.attach(this._lastFrameTexture);\n    frameBuffer.bind(renderer);\n    renderer.gl.clear(renderer.gl.DEPTH_BUFFER_BIT | renderer.gl.COLOR_BUFFER_BIT);\n    frameBuffer.unbind(renderer);\n  },\n  setSupersampling: function (supersampling) {\n    this._supersampling = supersampling;\n    this.resize(this._width, this._height);\n  },\n  _updateDownsampleTextures: function (renderer, api) {\n    var downsampleTextures = this._downsampleTextures;\n    var upScale = Math.max(Math.floor(Math.log(this._supersampling / api.getDevicePixelRatio()) / Math.log(2)), 0);\n    var scale = 2;\n    var width = this._width * this._supersampling;\n    var height = this._height * this._supersampling;\n    for (var i = 0; i < upScale; i++) {\n      downsampleTextures[i] = downsampleTextures[i] || new Texture2D();\n      downsampleTextures[i].width = width / scale;\n      downsampleTextures[i].height = height / scale;\n      scale *= 2;\n    }\n    for (; i < downsampleTextures.length; i++) {\n      downsampleTextures[i].dispose(renderer);\n    }\n    downsampleTextures.length = upScale;\n  },\n  _swapTexture: function () {\n    var tmp = this._particleTexture0;\n    this._particleTexture0 = this._particleTexture1;\n    this._particleTexture1 = tmp;\n    var tmp = this._thisFrameTexture;\n    this._thisFrameTexture = this._lastFrameTexture;\n    this._lastFrameTexture = tmp;\n  },\n  dispose: function (renderer) {\n    renderer.disposeFrameBuffer(this._frameBuffer); // Dispose textures\n\n    renderer.disposeTexture(this.vectorFieldTexture);\n    renderer.disposeTexture(this._spawnTexture);\n    renderer.disposeTexture(this._particleTexture0);\n    renderer.disposeTexture(this._particleTexture1);\n    renderer.disposeTexture(this._thisFrameTexture);\n    renderer.disposeTexture(this._lastFrameTexture);\n    renderer.disposeGeometry(this._particleLinesMesh.geometry);\n    renderer.disposeGeometry(this._particlePointsMesh.geometry);\n    renderer.disposeGeometry(this._lastFrameFullQuadMesh.geometry);\n    if (this._spriteTexture) {\n      renderer.disposeTexture(this._spriteTexture);\n    }\n    this._particlePass.dispose(renderer);\n    this._downsamplePass.dispose(renderer);\n    this._downsampleTextures.forEach(function (texture) {\n      texture.dispose(renderer);\n    });\n  }\n};\nexport default VectorFieldParticleSurface;","map":{"version":3,"names":["Pass","Geometry","Mesh","Material","Shader","Texture2D","Texture","OrthoCamera","PlaneGeometry","FrameBuffer","Line2DGeometry","vectorFieldParticleGLSL","createSpriteCanvas","size","canvas","document","createElement","width","height","ctx","getContext","fillStyle","arc","Math","PI","fill","VectorFieldParticleSurface","motionBlurFactor","vectorFieldTexture","type","FLOAT","flipY","particleLife","_particleType","_particleSize","particleColor","particleSpeedScaling","_thisFrameTexture","_particlePass","_spawnTexture","_particleTexture0","_particleTexture1","_particlePointsMesh","_surfaceFrameBuffer","_elapsedTime","_scene","_camera","_lastFrameTexture","_supersampling","_downsampleTextures","_width","_height","init","prototype","constructor","parameters","minFilter","NEAREST","magFilter","useMipmap","_frameBuffer","depthBuffer","fragment","source","setUniform","_downsamplePass","particlePointsMesh","renderOrder","material","shader","mode","POINTS","geometry","dynamic","mainAttribute","particleLinesMesh","culling","lastFrameFullQuad","enableTexture","_particleLinesMesh","_lastFrameFullQuadMesh","setParticleDensity","nVertex","spawnTextureData","Float32Array","off","lifeRange","i","j","random","life","_setLineGeometry","_setPointsGeometry","pixels","attributes","texcoord0","value","dirty","nLine","_getParticleMesh","setLineCount","resetOffset","addLine","update","renderer","api","deltaTime","firstFrame","particleMesh","frameBuffer","particlePass","_updateDownsampleTextures","set","attach","render","bind","gl","clear","DEPTH_BUFFER_BIT","COLOR_BUFFER_BIT","renderPass","unbind","_downsample","_swapTexture","downsampleTextures","length","current","sourceTexture","targetTexture","getSurfaceTexture","setRegion","region","resize","setParticleSize","disableTexture","transparent","_spriteTexture","image","setGradientTexture","gradientTexture","setColorTextureImage","colorTextureImg","setTextureImage","setParticleType","clearFrame","setSupersampling","supersampling","upScale","max","floor","log","getDevicePixelRatio","scale","dispose","tmp","disposeFrameBuffer","disposeTexture","disposeGeometry","forEach","texture"],"sources":["E:/mytest/node_modules/echarts-gl/lib/chart/flowGL/VectorFieldParticleSurface.js"],"sourcesContent":["import Pass from 'claygl/src/compositor/Pass';\nimport Geometry from 'claygl/src/Geometry';\nimport Mesh from 'claygl/src/Mesh';\nimport Material from 'claygl/src/Material';\nimport Shader from 'claygl/src/Shader';\nimport Texture2D from 'claygl/src/Texture2D';\nimport Texture from 'claygl/src/Texture';\nimport OrthoCamera from 'claygl/src/camera/Orthographic';\nimport PlaneGeometry from 'claygl/src/geometry/Plane';\nimport FrameBuffer from 'claygl/src/FrameBuffer';\nimport Line2DGeometry from './Line2D'; // import TemporalSS from '../../effect/TemporalSuperSampling';\n\nimport vectorFieldParticleGLSL from './vectorFieldParticle.glsl.js';\nShader['import'](vectorFieldParticleGLSL);\n\nfunction createSpriteCanvas(size) {\n  var canvas = document.createElement('canvas');\n  canvas.width = canvas.height = size;\n  var ctx = canvas.getContext('2d');\n  ctx.fillStyle = '#fff';\n  ctx.arc(size / 2, size / 2, size / 2, 0, Math.PI * 2);\n  ctx.fill();\n  return canvas;\n} // import spriteUtil from '../../util/sprite';\n\n\nvar VectorFieldParticleSurface = function () {\n  /**\n   * @type {number}\n   */\n  this.motionBlurFactor = 0.99;\n  /**\n   * Vector field lookup image\n   * @type {clay.Texture2D}\n   */\n\n  this.vectorFieldTexture = new Texture2D({\n    type: Texture.FLOAT,\n    // minFilter: Texture.NEAREST,\n    // magFilter: Texture.NEAREST,\n    flipY: false\n  });\n  /**\n   * Particle life range\n   * @type {Array.<number>}\n   */\n\n  this.particleLife = [5, 20];\n  this._particleType = 'point';\n  /**\n   * @type {number}\n   */\n\n  this._particleSize = 1;\n  /**\n   * @type {Array.<number>}\n   */\n\n  this.particleColor = [1, 1, 1, 1];\n  /**\n   * @type {number}\n   */\n\n  this.particleSpeedScaling = 1.0;\n  /**\n   * @type {clay.Texture2D}\n   */\n\n  this._thisFrameTexture = null;\n  this._particlePass = null;\n  this._spawnTexture = null;\n  this._particleTexture0 = null;\n  this._particleTexture1 = null;\n  this._particlePointsMesh = null;\n  this._surfaceFrameBuffer = null;\n  this._elapsedTime = 0.0;\n  this._scene = null;\n  this._camera = null;\n  this._lastFrameTexture = null; // this._temporalSS = new TemporalSS(50);\n  // this._antialising = false;\n\n  this._supersampling = 1;\n  this._downsampleTextures = [];\n  this._width = 512;\n  this._height = 512;\n  this.init();\n};\n\nVectorFieldParticleSurface.prototype = {\n  constructor: VectorFieldParticleSurface,\n  init: function () {\n    var parameters = {\n      type: Texture.FLOAT,\n      minFilter: Texture.NEAREST,\n      magFilter: Texture.NEAREST,\n      useMipmap: false\n    };\n    this._spawnTexture = new Texture2D(parameters);\n    this._particleTexture0 = new Texture2D(parameters);\n    this._particleTexture1 = new Texture2D(parameters);\n    this._frameBuffer = new FrameBuffer({\n      depthBuffer: false\n    });\n    this._particlePass = new Pass({\n      fragment: Shader.source('ecgl.vfParticle.particle.fragment')\n    });\n\n    this._particlePass.setUniform('velocityTexture', this.vectorFieldTexture);\n\n    this._particlePass.setUniform('spawnTexture', this._spawnTexture);\n\n    this._downsamplePass = new Pass({\n      fragment: Shader.source('clay.compositor.downsample')\n    });\n    var particlePointsMesh = new Mesh({\n      // Render after last frame full quad\n      renderOrder: 10,\n      material: new Material({\n        shader: new Shader(Shader.source('ecgl.vfParticle.renderPoints.vertex'), Shader.source('ecgl.vfParticle.renderPoints.fragment'))\n      }),\n      mode: Mesh.POINTS,\n      geometry: new Geometry({\n        dynamic: true,\n        mainAttribute: 'texcoord0'\n      })\n    });\n    var particleLinesMesh = new Mesh({\n      // Render after last frame full quad\n      renderOrder: 10,\n      material: new Material({\n        shader: new Shader(Shader.source('ecgl.vfParticle.renderLines.vertex'), Shader.source('ecgl.vfParticle.renderLines.fragment'))\n      }),\n      geometry: new Line2DGeometry(),\n      culling: false\n    });\n    var lastFrameFullQuad = new Mesh({\n      material: new Material({\n        shader: new Shader(Shader.source('ecgl.color.vertex'), Shader.source('ecgl.color.fragment')) // DO NOT BLEND Blend will multiply alpha\n        // transparent: true\n\n      }),\n      geometry: new PlaneGeometry()\n    });\n    lastFrameFullQuad.material.enableTexture('diffuseMap');\n    this._particlePointsMesh = particlePointsMesh;\n    this._particleLinesMesh = particleLinesMesh;\n    this._lastFrameFullQuadMesh = lastFrameFullQuad;\n    this._camera = new OrthoCamera();\n    this._thisFrameTexture = new Texture2D();\n    this._lastFrameTexture = new Texture2D();\n  },\n  setParticleDensity: function (width, height) {\n    var nVertex = width * height;\n    var spawnTextureData = new Float32Array(nVertex * 4);\n    var off = 0;\n    var lifeRange = this.particleLife;\n\n    for (var i = 0; i < width; i++) {\n      for (var j = 0; j < height; j++, off++) {\n        // x position, range [0 - 1]\n        spawnTextureData[off * 4] = Math.random(); // y position, range [0 - 1]\n\n        spawnTextureData[off * 4 + 1] = Math.random(); // Some property\n\n        spawnTextureData[off * 4 + 2] = Math.random();\n        var life = (lifeRange[1] - lifeRange[0]) * Math.random() + lifeRange[0]; // Particle life\n\n        spawnTextureData[off * 4 + 3] = life;\n      }\n    }\n\n    if (this._particleType === 'line') {\n      this._setLineGeometry(width, height);\n    } else {\n      this._setPointsGeometry(width, height);\n    }\n\n    this._spawnTexture.width = width;\n    this._spawnTexture.height = height;\n    this._spawnTexture.pixels = spawnTextureData;\n    this._particleTexture0.width = this._particleTexture1.width = width;\n    this._particleTexture0.height = this._particleTexture1.height = height;\n\n    this._particlePass.setUniform('textureSize', [width, height]);\n  },\n  _setPointsGeometry: function (width, height) {\n    var nVertex = width * height;\n    var geometry = this._particlePointsMesh.geometry;\n    var attributes = geometry.attributes;\n    attributes.texcoord0.init(nVertex);\n    var off = 0;\n\n    for (var i = 0; i < width; i++) {\n      for (var j = 0; j < height; j++, off++) {\n        attributes.texcoord0.value[off * 2] = i / width;\n        attributes.texcoord0.value[off * 2 + 1] = j / height;\n      }\n    }\n\n    geometry.dirty();\n  },\n  _setLineGeometry: function (width, height) {\n    var nLine = width * height;\n\n    var geometry = this._getParticleMesh().geometry;\n\n    geometry.setLineCount(nLine);\n    geometry.resetOffset();\n\n    for (var i = 0; i < width; i++) {\n      for (var j = 0; j < height; j++) {\n        geometry.addLine([i / width, j / height]);\n      }\n    }\n\n    geometry.dirty();\n  },\n  _getParticleMesh: function () {\n    return this._particleType === 'line' ? this._particleLinesMesh : this._particlePointsMesh;\n  },\n  update: function (renderer, api, deltaTime, firstFrame) {\n    var particleMesh = this._getParticleMesh();\n\n    var frameBuffer = this._frameBuffer;\n    var particlePass = this._particlePass;\n\n    if (firstFrame) {\n      this._updateDownsampleTextures(renderer, api);\n    }\n\n    particleMesh.material.set('size', this._particleSize * this._supersampling);\n    particleMesh.material.set('color', this.particleColor);\n    particlePass.setUniform('speedScaling', this.particleSpeedScaling);\n    frameBuffer.attach(this._particleTexture1);\n    particlePass.setUniform('firstFrameTime', firstFrame ? (this.particleLife[1] + this.particleLife[0]) / 2 : 0);\n    particlePass.setUniform('particleTexture', this._particleTexture0);\n    particlePass.setUniform('deltaTime', deltaTime);\n    particlePass.setUniform('elapsedTime', this._elapsedTime);\n    particlePass.render(renderer, frameBuffer);\n    particleMesh.material.set('particleTexture', this._particleTexture1);\n    particleMesh.material.set('prevParticleTexture', this._particleTexture0);\n    frameBuffer.attach(this._thisFrameTexture);\n    frameBuffer.bind(renderer);\n    renderer.gl.clear(renderer.gl.DEPTH_BUFFER_BIT | renderer.gl.COLOR_BUFFER_BIT);\n    var lastFrameFullQuad = this._lastFrameFullQuadMesh;\n    lastFrameFullQuad.material.set('diffuseMap', this._lastFrameTexture);\n    lastFrameFullQuad.material.set('color', [1, 1, 1, this.motionBlurFactor]);\n\n    this._camera.update(true);\n\n    renderer.renderPass([lastFrameFullQuad, particleMesh], this._camera);\n    frameBuffer.unbind(renderer);\n\n    this._downsample(renderer);\n\n    this._swapTexture();\n\n    this._elapsedTime += deltaTime;\n  },\n  _downsample: function (renderer) {\n    var downsampleTextures = this._downsampleTextures;\n\n    if (downsampleTextures.length === 0) {\n      return;\n    }\n\n    var current = 0;\n    var sourceTexture = this._thisFrameTexture;\n    var targetTexture = downsampleTextures[current];\n\n    while (targetTexture) {\n      this._frameBuffer.attach(targetTexture);\n\n      this._downsamplePass.setUniform('texture', sourceTexture);\n\n      this._downsamplePass.setUniform('textureSize', [sourceTexture.width, sourceTexture.height]);\n\n      this._downsamplePass.render(renderer, this._frameBuffer);\n\n      sourceTexture = targetTexture;\n      targetTexture = downsampleTextures[++current];\n    }\n  },\n  getSurfaceTexture: function () {\n    var downsampleTextures = this._downsampleTextures;\n    return downsampleTextures.length > 0 ? downsampleTextures[downsampleTextures.length - 1] : this._lastFrameTexture;\n  },\n  setRegion: function (region) {\n    this._particlePass.setUniform('region', region);\n  },\n  resize: function (width, height) {\n    this._lastFrameTexture.width = width * this._supersampling;\n    this._lastFrameTexture.height = height * this._supersampling;\n    this._thisFrameTexture.width = width * this._supersampling;\n    this._thisFrameTexture.height = height * this._supersampling;\n    this._width = width;\n    this._height = height;\n  },\n  setParticleSize: function (size) {\n    var particleMesh = this._getParticleMesh();\n\n    if (size <= 2) {\n      particleMesh.material.disableTexture('spriteTexture');\n      particleMesh.material.transparent = false;\n      return;\n    }\n\n    if (!this._spriteTexture) {\n      this._spriteTexture = new Texture2D();\n    }\n\n    if (!this._spriteTexture.image || this._spriteTexture.image.width !== size) {\n      this._spriteTexture.image = createSpriteCanvas(size);\n\n      this._spriteTexture.dirty();\n    }\n\n    particleMesh.material.transparent = true;\n    particleMesh.material.enableTexture('spriteTexture');\n    particleMesh.material.set('spriteTexture', this._spriteTexture);\n    this._particleSize = size;\n  },\n  setGradientTexture: function (gradientTexture) {\n    var material = this._getParticleMesh().material;\n\n    material[gradientTexture ? 'enableTexture' : 'disableTexture']('gradientTexture');\n    material.setUniform('gradientTexture', gradientTexture);\n  },\n  setColorTextureImage: function (colorTextureImg, api) {\n    var material = this._getParticleMesh().material;\n\n    material.setTextureImage('colorTexture', colorTextureImg, api, {\n      flipY: true\n    });\n  },\n  setParticleType: function (type) {\n    this._particleType = type;\n  },\n  clearFrame: function (renderer) {\n    var frameBuffer = this._frameBuffer;\n    frameBuffer.attach(this._lastFrameTexture);\n    frameBuffer.bind(renderer);\n    renderer.gl.clear(renderer.gl.DEPTH_BUFFER_BIT | renderer.gl.COLOR_BUFFER_BIT);\n    frameBuffer.unbind(renderer);\n  },\n  setSupersampling: function (supersampling) {\n    this._supersampling = supersampling;\n    this.resize(this._width, this._height);\n  },\n  _updateDownsampleTextures: function (renderer, api) {\n    var downsampleTextures = this._downsampleTextures;\n    var upScale = Math.max(Math.floor(Math.log(this._supersampling / api.getDevicePixelRatio()) / Math.log(2)), 0);\n    var scale = 2;\n    var width = this._width * this._supersampling;\n    var height = this._height * this._supersampling;\n\n    for (var i = 0; i < upScale; i++) {\n      downsampleTextures[i] = downsampleTextures[i] || new Texture2D();\n      downsampleTextures[i].width = width / scale;\n      downsampleTextures[i].height = height / scale;\n      scale *= 2;\n    }\n\n    for (; i < downsampleTextures.length; i++) {\n      downsampleTextures[i].dispose(renderer);\n    }\n\n    downsampleTextures.length = upScale;\n  },\n  _swapTexture: function () {\n    var tmp = this._particleTexture0;\n    this._particleTexture0 = this._particleTexture1;\n    this._particleTexture1 = tmp;\n    var tmp = this._thisFrameTexture;\n    this._thisFrameTexture = this._lastFrameTexture;\n    this._lastFrameTexture = tmp;\n  },\n  dispose: function (renderer) {\n    renderer.disposeFrameBuffer(this._frameBuffer); // Dispose textures\n\n    renderer.disposeTexture(this.vectorFieldTexture);\n    renderer.disposeTexture(this._spawnTexture);\n    renderer.disposeTexture(this._particleTexture0);\n    renderer.disposeTexture(this._particleTexture1);\n    renderer.disposeTexture(this._thisFrameTexture);\n    renderer.disposeTexture(this._lastFrameTexture);\n    renderer.disposeGeometry(this._particleLinesMesh.geometry);\n    renderer.disposeGeometry(this._particlePointsMesh.geometry);\n    renderer.disposeGeometry(this._lastFrameFullQuadMesh.geometry);\n\n    if (this._spriteTexture) {\n      renderer.disposeTexture(this._spriteTexture);\n    }\n\n    this._particlePass.dispose(renderer);\n\n    this._downsamplePass.dispose(renderer);\n\n    this._downsampleTextures.forEach(function (texture) {\n      texture.dispose(renderer);\n    });\n  }\n};\nexport default VectorFieldParticleSurface;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}