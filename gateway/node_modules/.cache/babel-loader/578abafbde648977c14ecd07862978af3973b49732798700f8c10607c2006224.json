{"ast":null,"code":"import \"core-js/modules/es.array-buffer.detached.js\";\nimport \"core-js/modules/es.array-buffer.transfer.js\";\nimport \"core-js/modules/es.array-buffer.transfer-to-fixed-length.js\";\nimport \"core-js/modules/es.typed-array.to-reversed.js\";\nimport \"core-js/modules/es.typed-array.to-sorted.js\";\nimport \"core-js/modules/es.typed-array.with.js\";\nexport default function (data, dimX, dimY) {\n  var xExtent = data.getDataExtent(dimX);\n  var yExtent = data.getDataExtent(dimY); // TODO Handle one data situation\n\n  var xSpan = xExtent[1] - xExtent[0] || xExtent[0];\n  var ySpan = yExtent[1] - yExtent[0] || yExtent[0];\n  var dimSize = 50;\n  var tmp = new Uint8Array(dimSize * dimSize);\n  for (var i = 0; i < data.count(); i++) {\n    var x = data.get(dimX, i);\n    var y = data.get(dimY, i);\n    var xIdx = Math.floor((x - xExtent[0]) / xSpan * (dimSize - 1));\n    var yIdx = Math.floor((y - yExtent[0]) / ySpan * (dimSize - 1));\n    var idx = yIdx * dimSize + xIdx;\n    tmp[idx] = tmp[idx] || 1;\n  }\n  var filledCount = 0;\n  for (var i = 0; i < tmp.length; i++) {\n    if (tmp[i]) {\n      filledCount++;\n    }\n  }\n  return filledCount / tmp.length;\n}\n;","map":{"version":3,"names":["data","dimX","dimY","xExtent","getDataExtent","yExtent","xSpan","ySpan","dimSize","tmp","Uint8Array","i","count","x","get","y","xIdx","Math","floor","yIdx","idx","filledCount","length"],"sources":["E:/mytest/node_modules/echarts-gl/lib/chart/bar3D/evaluateBarSparseness.js"],"sourcesContent":["export default function (data, dimX, dimY) {\n  var xExtent = data.getDataExtent(dimX);\n  var yExtent = data.getDataExtent(dimY); // TODO Handle one data situation\n\n  var xSpan = xExtent[1] - xExtent[0] || xExtent[0];\n  var ySpan = yExtent[1] - yExtent[0] || yExtent[0];\n  var dimSize = 50;\n  var tmp = new Uint8Array(dimSize * dimSize);\n\n  for (var i = 0; i < data.count(); i++) {\n    var x = data.get(dimX, i);\n    var y = data.get(dimY, i);\n    var xIdx = Math.floor((x - xExtent[0]) / xSpan * (dimSize - 1));\n    var yIdx = Math.floor((y - yExtent[0]) / ySpan * (dimSize - 1));\n    var idx = yIdx * dimSize + xIdx;\n    tmp[idx] = tmp[idx] || 1;\n  }\n\n  var filledCount = 0;\n\n  for (var i = 0; i < tmp.length; i++) {\n    if (tmp[i]) {\n      filledCount++;\n    }\n  }\n\n  return filledCount / tmp.length;\n}\n;"],"mappings":";;;;;;AAAA,eAAe,UAAUA,IAAI,EAAEC,IAAI,EAAEC,IAAI,EAAE;EACzC,IAAIC,OAAO,GAAGH,IAAI,CAACI,aAAa,CAACH,IAAI,CAAC;EACtC,IAAII,OAAO,GAAGL,IAAI,CAACI,aAAa,CAACF,IAAI,CAAC,CAAC,CAAC;;EAExC,IAAII,KAAK,GAAGH,OAAO,CAAC,CAAC,CAAC,GAAGA,OAAO,CAAC,CAAC,CAAC,IAAIA,OAAO,CAAC,CAAC,CAAC;EACjD,IAAII,KAAK,GAAGF,OAAO,CAAC,CAAC,CAAC,GAAGA,OAAO,CAAC,CAAC,CAAC,IAAIA,OAAO,CAAC,CAAC,CAAC;EACjD,IAAIG,OAAO,GAAG,EAAE;EAChB,IAAIC,GAAG,GAAG,IAAIC,UAAU,CAACF,OAAO,GAAGA,OAAO,CAAC;EAE3C,KAAK,IAAIG,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGX,IAAI,CAACY,KAAK,CAAC,CAAC,EAAED,CAAC,EAAE,EAAE;IACrC,IAAIE,CAAC,GAAGb,IAAI,CAACc,GAAG,CAACb,IAAI,EAAEU,CAAC,CAAC;IACzB,IAAII,CAAC,GAAGf,IAAI,CAACc,GAAG,CAACZ,IAAI,EAAES,CAAC,CAAC;IACzB,IAAIK,IAAI,GAAGC,IAAI,CAACC,KAAK,CAAC,CAACL,CAAC,GAAGV,OAAO,CAAC,CAAC,CAAC,IAAIG,KAAK,IAAIE,OAAO,GAAG,CAAC,CAAC,CAAC;IAC/D,IAAIW,IAAI,GAAGF,IAAI,CAACC,KAAK,CAAC,CAACH,CAAC,GAAGV,OAAO,CAAC,CAAC,CAAC,IAAIE,KAAK,IAAIC,OAAO,GAAG,CAAC,CAAC,CAAC;IAC/D,IAAIY,GAAG,GAAGD,IAAI,GAAGX,OAAO,GAAGQ,IAAI;IAC/BP,GAAG,CAACW,GAAG,CAAC,GAAGX,GAAG,CAACW,GAAG,CAAC,IAAI,CAAC;EAC1B;EAEA,IAAIC,WAAW,GAAG,CAAC;EAEnB,KAAK,IAAIV,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,GAAG,CAACa,MAAM,EAAEX,CAAC,EAAE,EAAE;IACnC,IAAIF,GAAG,CAACE,CAAC,CAAC,EAAE;MACVU,WAAW,EAAE;IACf;EACF;EAEA,OAAOA,WAAW,GAAGZ,GAAG,CAACa,MAAM;AACjC;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}