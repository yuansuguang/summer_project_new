{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport Chart from 'chart.js/auto';\nimport * as XLSX from 'xlsx';\nimport html2canvas from 'html2canvas';\nimport jsPDF from 'jspdf';\nimport 'element-plus/dist/index.css';\nexport default {\n  props: {\n    correctAnswer: {\n      // 接收正确答案\n      type: String,\n      default: ''\n    }\n  },\n  data() {\n    return {\n      options: [],\n      // 选项统计数据，包括名称、人数、占比\n      showChart: false,\n      // 是否显示图表\n      chartType: '',\n      // 图表类型\n      chartData: null,\n      // 图表数据\n      chartLabels: [],\n      // 图表标签\n      correctRate: 0 // 本题正确率\n    };\n  },\n  mounted() {\n    // 假设从后端获取的数据\n    this.options = this.calculatePercentage(this.getData());\n    this.calculateCorrectRate();\n    //this.generateChart();\n  },\n  methods: {\n    exportToExcel() {\n      const tableData = this.getTableData(); // 获取表格数据\n      const wb = XLSX.utils.book_new();\n      const ws = XLSX.utils.json_to_sheet(tableData);\n      XLSX.utils.book_append_sheet(wb, ws, 'Sheet1');\n      XLSX.writeFile(wb, 'table_data.xlsx');\n    },\n    getTableData() {\n      const tableData = this.options.map(option => ({\n        name: option.name,\n        count: option.count,\n        percentage: option.percentage\n      }));\n      tableData.push({\n        name: '本题正确率',\n        count: this.correctRate,\n        percentage: this.correctRate\n      });\n      return tableData;\n    },\n    exportToWordAndPDF() {\n      const exportContent = document.getElementById('export-content');\n      html2canvas(exportContent).then(canvas => {\n        const imgData = canvas.toDataURL('image/png');\n        const pdf = new jsPDF();\n        pdf.addImage(imgData, 'PNG', 10, 10, 180, 150);\n        pdf.save('table_and_chart.pdf');\n      });\n    },\n    getData() {\n      // 获取后端数据的方法\n      return [{\n        name: '选项1',\n        count: 10\n      }, {\n        name: '选项2',\n        count: 15\n      }, {\n        name: '选项3',\n        count: 300\n      }, {\n        name: '选项4',\n        count: 8\n      }, {\n        name: '选项5',\n        count: 10\n      }];\n    },\n    calculatePercentage(data) {\n      // 计算占比\n      const total = data.reduce((sum, option) => sum + option.count, 0);\n      return data.map(option => ({\n        ...option,\n        percentage: (option.count / total * 100).toFixed(2)\n      }));\n    },\n    calculateCorrectRate() {\n      // 计算本题正确率\n      const totalResponses = this.options.reduce((sum, option) => sum + option.count, 0);\n      const correctResponses = this.options.find(option => option.name === this.correctAnswer)?.count || 0;\n      this.correctRate = (correctResponses / totalResponses * 100).toFixed(2);\n    },\n    toggleChart(type) {\n      if (this.chartType === type) {\n        // 如果当前已经显示该类型的图表，则收起图表\n        this.showChart = false;\n        this.chartType = '';\n        // 销毁当前的图表实例\n        if (this.chartData) {\n          this.chartData.destroy();\n          this.chartData = null;\n        }\n      } else {\n        // 否则，显示对应类型的图表\n        this.showChart = true;\n        this.chartType = type;\n        this.$nextTick(() => {\n          this.generateChart();\n        });\n      }\n    },\n    generateChart() {\n      // 生成图表\n      if (this.chartData) {\n        // 销毁当前图表实例\n        this.chartData.destroy();\n      }\n      const ctx = this.$refs.chartCanvas.getContext('2d');\n      const labels = this.options.map(option => option.name);\n      const percentages = this.options.map(option => parseFloat(option.percentage));\n\n      // 使用数据数量来确定背景色和边框色数组的大小\n      const colors = this.generateColors(labels.length);\n      const data = {\n        labels,\n        datasets: [{\n          label: '占比',\n          data: percentages,\n          backgroundColor: colors.background,\n          borderColor: colors.border,\n          borderWidth: 1\n        }]\n      };\n      const options = {\n        scales: {\n          y: {\n            beginAtZero: true\n          }\n        }\n      };\n\n      // 只有在确实需要时才创建新的图表实例\n      if (ctx && this.chartType) {\n        this.chartData = new Chart(ctx, {\n          type: this.chartType,\n          data,\n          options\n        });\n      }\n    },\n    // 添加新方法用于生成颜色数组\n    generateColors(numOptions) {\n      const baseColors = ['rgba(255, 99, 132, 0.2)', 'rgba(54, 162, 235, 0.2)', 'rgba(255, 206, 86, 0.2)', 'rgba(255, 80, 192, 0.2)', 'rgba(75, 255, 192, 0.2)', 'rgba(130, 20, 255, 0.2)'];\n\n      // 循环生成颜色数组，如果选项数量超过预定义颜色数量，则循环使用这些颜色\n      const colors = {\n        background: [],\n        border: []\n      };\n      for (let i = 0; i < numOptions; i++) {\n        const index = i % baseColors.length;\n        colors.background.push(baseColors[index]);\n        colors.border.push(baseColors[index].replace('0.2)', '1)')); // 将透明度从0.2改为1\n      }\n      return colors;\n    }\n  }\n};","map":{"version":3,"names":["Chart","XLSX","html2canvas","jsPDF","props","correctAnswer","type","String","default","data","options","showChart","chartType","chartData","chartLabels","correctRate","mounted","calculatePercentage","getData","calculateCorrectRate","methods","exportToExcel","tableData","getTableData","wb","utils","book_new","ws","json_to_sheet","book_append_sheet","writeFile","map","option","name","count","percentage","push","exportToWordAndPDF","exportContent","document","getElementById","then","canvas","imgData","toDataURL","pdf","addImage","save","total","reduce","sum","toFixed","totalResponses","correctResponses","find","toggleChart","destroy","$nextTick","generateChart","ctx","$refs","chartCanvas","getContext","labels","percentages","parseFloat","colors","generateColors","length","datasets","label","backgroundColor","background","borderColor","border","borderWidth","scales","y","beginAtZero","numOptions","baseColors","i","index","replace"],"sources":["E:\\mytest\\src\\views\\qn-data\\qnDataview.vue"],"sourcesContent":["<template>\r\n  <div class=\"common-layout\">\r\n    <el-container>\r\n      <el-header></el-header>\r\n      <el-main>\r\n        <div class=\"mytable\">\r\n          <h2>选项统计</h2>\r\n          <el-table :data=\"options\" style=\"width: 50%\" height=\"250\" stripe fit size=\"large\">\r\n            <el-table-column fixed prop=\"name\" label=\"选项\" />\r\n            <el-table-column prop=\"count\" label=\"选择人数\" />\r\n            <el-table-column label=\"占比\" >\r\n              <template #default=\"scope\">\r\n                <el-progress :percentage=\"parseFloat(scope.row.percentage)\" /> <!-- 注意：将占比转换成数值类型 -->\r\n              </template>              \r\n            </el-table-column>\r\n          </el-table>\r\n\r\n          <div style=\"margin-top: 0px; margin-bottom: -30px; display: flex; justify-content: space-around; align-items: center; width: 50%;\">\r\n            <div>本题正确率:</div>\r\n            <div style=\"flex-shrink: 0; margin-right: 10px;\">{{ Math.round(correctRate) }} 人正确</div>\r\n            <el-progress :percentage=\"correctRate\" style=\"width: 100%; max-width: 300px;\"></el-progress>\r\n          </div>\r\n\r\n          <!-- 图表展示按钮 -->\r\n          <div class=\"chart-buttons\">\r\n            <el-button type=\"primary\" @click=\"toggleChart('bar')\">柱状图</el-button>\r\n            <el-button type=\"primary\" @click=\"toggleChart('line')\">折线图</el-button>\r\n            <el-button type=\"primary\" @click=\"toggleChart('pie')\">饼状图</el-button>\r\n            <el-button type=\"primary\" @click=\"exportToExcel\">导出为 Excel</el-button>\r\n            <el-button type=\"primary\" @click=\"exportToWordAndPDF\">导出为 PDF</el-button>\r\n          </div>\r\n\r\n          <!-- 图表展示区域 -->\r\n          <div id=\"export-content\" v-if=\"showChart\" class=\"chart-container\">\r\n            <canvas ref=\"chartCanvas\"></canvas>\r\n          </div>\r\n\r\n        </div>\r\n      </el-main>\r\n    </el-container>\r\n  </div>\r\n  \r\n</template>\r\n\r\n<script >\r\nimport Chart from 'chart.js/auto';\r\nimport * as XLSX from 'xlsx';\r\nimport html2canvas from 'html2canvas';\r\nimport jsPDF from 'jspdf';\r\nimport 'element-plus/dist/index.css';\r\n\r\nexport default {\r\n  props: {\r\n    correctAnswer: { // 接收正确答案\r\n      type: String,\r\n      default: ''\r\n    }\r\n  },\r\n  data() {\r\n    return {\r\n      options: [], // 选项统计数据，包括名称、人数、占比\r\n      showChart: false, // 是否显示图表\r\n      chartType: '', // 图表类型\r\n      chartData: null, // 图表数据\r\n      chartLabels: [], // 图表标签\r\n      correctRate: 0 // 本题正确率\r\n    };\r\n  },\r\n  mounted() {\r\n    // 假设从后端获取的数据\r\n    this.options = this.calculatePercentage(this.getData());\r\n    this.calculateCorrectRate();\r\n    //this.generateChart();\r\n  },\r\n  methods: {\r\n    exportToExcel() {\r\n      const tableData = this.getTableData(); // 获取表格数据\r\n      const wb = XLSX.utils.book_new();\r\n      const ws = XLSX.utils.json_to_sheet(tableData);\r\n      XLSX.utils.book_append_sheet(wb, ws, 'Sheet1');\r\n      XLSX.writeFile(wb, 'table_data.xlsx');\r\n    },\r\n    getTableData() {\r\n      const tableData = this.options.map(option => ({\r\n        name: option.name,\r\n        count: option.count,\r\n        percentage: option.percentage,\r\n      }));\r\n      tableData.push({ name: '本题正确率', count: this.correctRate, percentage: this.correctRate });\r\n      return tableData;\r\n    },\r\n    exportToWordAndPDF() {\r\n      const exportContent = document.getElementById('export-content');\r\n      html2canvas(exportContent).then(canvas => {\r\n        const imgData = canvas.toDataURL('image/png');\r\n        const pdf = new jsPDF();\r\n        pdf.addImage(imgData, 'PNG', 10, 10, 180, 150);\r\n        pdf.save('table_and_chart.pdf');\r\n      });\r\n    },\r\n    getData() {\r\n      // 获取后端数据的方法\r\n      return [{ name: '选项1', count: 10 }, { name: '选项2', count: 15 }, { name: '选项3', count: 300 }, { name: '选项4', count: 8 }, { name: '选项5', count: 10 }];\r\n    },\r\n    calculatePercentage(data) {\r\n      // 计算占比\r\n      const total = data.reduce((sum, option) => sum + option.count, 0);\r\n      return data.map(option => ({\r\n        ...option,\r\n        percentage: ((option.count / total) * 100).toFixed(2)\r\n      }));\r\n    },\r\n    calculateCorrectRate() {\r\n      // 计算本题正确率\r\n      const totalResponses = this.options.reduce((sum, option) => sum + option.count, 0);\r\n      const correctResponses = this.options.find(option => option.name === this.correctAnswer)?.count || 0;\r\n      this.correctRate = ((correctResponses / totalResponses) * 100).toFixed(2);\r\n    },\r\n    toggleChart(type) {\r\n      if (this.chartType === type) {\r\n        // 如果当前已经显示该类型的图表，则收起图表\r\n        this.showChart = false;\r\n        this.chartType = '';\r\n        // 销毁当前的图表实例\r\n        if (this.chartData) {\r\n          this.chartData.destroy();\r\n          this.chartData = null;\r\n        }\r\n      } else {\r\n        // 否则，显示对应类型的图表\r\n        this.showChart = true;\r\n        this.chartType = type;\r\n        this.$nextTick(() => {\r\n          this.generateChart();\r\n        });\r\n      }\r\n    },\r\n    generateChart() {\r\n      // 生成图表\r\n      if (this.chartData) {\r\n        // 销毁当前图表实例\r\n        this.chartData.destroy();\r\n      }\r\n\r\n      const ctx = this.$refs.chartCanvas.getContext('2d');\r\n      const labels = this.options.map(option => option.name);\r\n      const percentages = this.options.map(option => parseFloat(option.percentage));\r\n\r\n      // 使用数据数量来确定背景色和边框色数组的大小\r\n      const colors = this.generateColors(labels.length);\r\n\r\n      const data = {\r\n        labels,\r\n        datasets: [{\r\n          label: '占比',\r\n          data: percentages,\r\n          backgroundColor: colors.background,\r\n          borderColor: colors.border,\r\n          borderWidth: 1\r\n        }]\r\n      };\r\n\r\n      const options = {\r\n        scales: {\r\n          y: {\r\n            beginAtZero: true\r\n          }\r\n        }\r\n      };\r\n\r\n      // 只有在确实需要时才创建新的图表实例\r\n      if (ctx && this.chartType) {\r\n        this.chartData = new Chart(ctx, {\r\n          type: this.chartType,\r\n          data,\r\n          options\r\n        });\r\n      }\r\n    },\r\n    \r\n// 添加新方法用于生成颜色数组\r\n    generateColors(numOptions) {\r\n      const baseColors = [\r\n        'rgba(255, 99, 132, 0.2)',\r\n        'rgba(54, 162, 235, 0.2)',\r\n        'rgba(255, 206, 86, 0.2)',\r\n        'rgba(255, 80, 192, 0.2)',\r\n        'rgba(75, 255, 192, 0.2)',\r\n        'rgba(130, 20, 255, 0.2)',\r\n      ];\r\n\r\n      // 循环生成颜色数组，如果选项数量超过预定义颜色数量，则循环使用这些颜色\r\n      const colors = {\r\n        background: [],\r\n        border: []\r\n      };\r\n      for (let i = 0; i < numOptions; i++) {\r\n        const index = i % baseColors.length;\r\n        colors.background.push(baseColors[index]);\r\n        colors.border.push(baseColors[index].replace('0.2)', '1)')); // 将透明度从0.2改为1\r\n      }\r\n      return colors;\r\n    },\r\n  }\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.common-layout {\r\n  display: flex;\r\n  flex-direction: column;\r\n  min-height: 100vh; /* 使得父容器至少有一个视窗的高度 */\r\n}\r\n\r\nel-header, el-main, el-container {\r\n  display: flex;\r\n  flex-direction: column;\r\n}\r\n\r\nel-main {\r\n  flex: 1;\r\n  display: flex;\r\n  justify-content: center; /* 在垂直方向上居中内容 */\r\n  align-items: center; /* 在水平方向上居中内容 */\r\n}\r\n\r\n.mytable {\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  padding: 20px;\r\n  background-color: #f9f9f9;\r\n  /* Added styles */\r\n  margin: 0 auto; /* 水平居中 */\r\n  max-width: 80%; /* 限制最大宽度，让内容不会过于分散 */\r\n  box-shadow: 0px 2px 15px rgba(0, 0, 0, 0.3);\r\n  border-radius: 5px;\r\n  overflow: hidden; /* 隐藏溢出的内容 */\r\n  border: 1px solid #d8d8d8;\r\n  border-bottom: 2px solid #d8d8d8;\r\n  border-radius: 5px;\r\n  background-color: #fff;\r\n  color: #565a5c;\r\n  font-family: \"Open Sans\", sans-serif;\r\n  font-weight: 400;\r\n  text-shadow: none;\r\n  box-sizing: border-box;\r\n  font-size: 12px;\r\n  line-height: 32px;\r\n  font-size: 1rem;\r\n  line-height: 6rem;\r\n  font-weight: 400;\r\n}\r\n.chart-container {\r\n  width: 600px; /* 调整为你希望的宽度 */\r\n  height: 400px; /* 调整为你希望的高度 */\r\n  margin: 0 auto; /* 水平居中 */\r\n  padding: 20px;\r\n  max-width: 80%; /* 限制最大宽度，让内容不会过于分散 */\r\n}\r\n</style>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}