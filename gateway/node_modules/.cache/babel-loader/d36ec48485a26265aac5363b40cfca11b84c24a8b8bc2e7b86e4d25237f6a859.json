{"ast":null,"code":"import Texture2D from '../Texture2D';\nimport TextureCube from '../TextureCube';\nimport vendor from '../core/vendor';\nimport EnvironmentMapPass from '../prePass/EnvironmentMap';\nimport Skydome from '../plugin/Skydome';\nimport Scene from '../Scene';\nimport dds from './dds';\nimport hdr from './hdr';\n\n/**\n * @alias clay.util.texture\n */\nvar textureUtil = {\n  /**\n   * @param  {string|object} path\n   * @param  {object} [option]\n   * @param  {Function} [onsuccess]\n   * @param  {Function} [onerror]\n   * @return {clay.Texture}\n   */\n  loadTexture: function (path, option, onsuccess, onerror) {\n    var texture;\n    if (typeof option === 'function') {\n      onsuccess = option;\n      onerror = onsuccess;\n      option = {};\n    } else {\n      option = option || {};\n    }\n    if (typeof path === 'string') {\n      if (path.match(/.hdr$/) || option.fileType === 'hdr') {\n        texture = new Texture2D({\n          width: 0,\n          height: 0,\n          sRGB: false\n        });\n        textureUtil._fetchTexture(path, function (data) {\n          hdr.parseRGBE(data, texture, option.exposure);\n          texture.dirty();\n          onsuccess && onsuccess(texture);\n        }, onerror);\n        return texture;\n      } else if (path.match(/.dds$/) || option.fileType === 'dds') {\n        texture = new Texture2D({\n          width: 0,\n          height: 0\n        });\n        textureUtil._fetchTexture(path, function (data) {\n          dds.parse(data, texture);\n          texture.dirty();\n          onsuccess && onsuccess(texture);\n        }, onerror);\n      } else {\n        texture = new Texture2D();\n        texture.load(path);\n        texture.success(onsuccess);\n        texture.error(onerror);\n      }\n    } else if (typeof path === 'object' && typeof path.px !== 'undefined') {\n      texture = new TextureCube();\n      texture.load(path);\n      texture.success(onsuccess);\n      texture.error(onerror);\n    }\n    return texture;\n  },\n  /**\n   * Load a panorama texture and render it to a cube map\n   * @param  {clay.Renderer} renderer\n   * @param  {string} path\n   * @param  {clay.TextureCube} cubeMap\n   * @param  {object} [option]\n   * @param  {boolean} [option.encodeRGBM]\n   * @param  {number} [option.exposure]\n   * @param  {Function} [onsuccess]\n   * @param  {Function} [onerror]\n   */\n  loadPanorama: function (renderer, path, cubeMap, option, onsuccess, onerror) {\n    var self = this;\n    if (typeof option === 'function') {\n      onsuccess = option;\n      onerror = onsuccess;\n      option = {};\n    } else {\n      option = option || {};\n    }\n    textureUtil.loadTexture(path, option, function (texture) {\n      // PENDING\n      texture.flipY = option.flipY || false;\n      self.panoramaToCubeMap(renderer, texture, cubeMap, option);\n      texture.dispose(renderer);\n      onsuccess && onsuccess(cubeMap);\n    }, onerror);\n  },\n  /**\n   * Render a panorama texture to a cube map\n   * @param  {clay.Renderer} renderer\n   * @param  {clay.Texture2D} panoramaMap\n   * @param  {clay.TextureCube} cubeMap\n   * @param  {Object} option\n   * @param  {boolean} [option.encodeRGBM]\n   */\n  panoramaToCubeMap: function (renderer, panoramaMap, cubeMap, option) {\n    var environmentMapPass = new EnvironmentMapPass();\n    var skydome = new Skydome({\n      scene: new Scene()\n    });\n    skydome.setEnvironmentMap(panoramaMap);\n    option = option || {};\n    if (option.encodeRGBM) {\n      skydome.material.define('fragment', 'RGBM_ENCODE');\n    }\n\n    // Share sRGB\n    cubeMap.sRGB = panoramaMap.sRGB;\n    environmentMapPass.texture = cubeMap;\n    environmentMapPass.render(renderer, skydome.scene);\n    environmentMapPass.texture = null;\n    environmentMapPass.dispose(renderer);\n    return cubeMap;\n  },\n  /**\n   * Convert height map to normal map\n   * @param {HTMLImageElement|HTMLCanvasElement} image\n   * @param {boolean} [checkBump=false]\n   * @return {HTMLCanvasElement}\n   */\n  heightToNormal: function (image, checkBump) {\n    var canvas = document.createElement('canvas');\n    var width = canvas.width = image.width;\n    var height = canvas.height = image.height;\n    var ctx = canvas.getContext('2d');\n    ctx.drawImage(image, 0, 0, width, height);\n    checkBump = checkBump || false;\n    var srcData = ctx.getImageData(0, 0, width, height);\n    var dstData = ctx.createImageData(width, height);\n    for (var i = 0; i < srcData.data.length; i += 4) {\n      if (checkBump) {\n        var r = srcData.data[i];\n        var g = srcData.data[i + 1];\n        var b = srcData.data[i + 2];\n        var diff = Math.abs(r - g) + Math.abs(g - b);\n        if (diff > 20) {\n          console.warn('Given image is not a height map');\n          return image;\n        }\n      }\n      // Modified from http://mrdoob.com/lab/javascript/height2normal/\n      var x1, y1, x2, y2;\n      if (i % (width * 4) === 0) {\n        // left edge\n        x1 = srcData.data[i];\n        x2 = srcData.data[i + 4];\n      } else if (i % (width * 4) === (width - 1) * 4) {\n        // right edge\n        x1 = srcData.data[i - 4];\n        x2 = srcData.data[i];\n      } else {\n        x1 = srcData.data[i - 4];\n        x2 = srcData.data[i + 4];\n      }\n      if (i < width * 4) {\n        // top edge\n        y1 = srcData.data[i];\n        y2 = srcData.data[i + width * 4];\n      } else if (i > width * (height - 1) * 4) {\n        // bottom edge\n        y1 = srcData.data[i - width * 4];\n        y2 = srcData.data[i];\n      } else {\n        y1 = srcData.data[i - width * 4];\n        y2 = srcData.data[i + width * 4];\n      }\n      dstData.data[i] = x1 - x2 + 127;\n      dstData.data[i + 1] = y1 - y2 + 127;\n      dstData.data[i + 2] = 255;\n      dstData.data[i + 3] = 255;\n    }\n    ctx.putImageData(dstData, 0, 0);\n    return canvas;\n  },\n  /**\n   * Convert height map to normal map\n   * @param {HTMLImageElement|HTMLCanvasElement} image\n   * @param {boolean} [checkBump=false]\n   * @param {number} [threshold=20]\n   * @return {HTMLCanvasElement}\n   */\n  isHeightImage: function (img, downScaleSize, threshold) {\n    if (!img || !img.width || !img.height) {\n      return false;\n    }\n    var canvas = document.createElement('canvas');\n    var ctx = canvas.getContext('2d');\n    var size = downScaleSize || 32;\n    threshold = threshold || 20;\n    canvas.width = canvas.height = size;\n    ctx.drawImage(img, 0, 0, size, size);\n    var srcData = ctx.getImageData(0, 0, size, size);\n    for (var i = 0; i < srcData.data.length; i += 4) {\n      var r = srcData.data[i];\n      var g = srcData.data[i + 1];\n      var b = srcData.data[i + 2];\n      var diff = Math.abs(r - g) + Math.abs(g - b);\n      if (diff > threshold) {\n        return false;\n      }\n    }\n    return true;\n  },\n  _fetchTexture: function (path, onsuccess, onerror) {\n    vendor.request.get({\n      url: path,\n      responseType: 'arraybuffer',\n      onload: onsuccess,\n      onerror: onerror\n    });\n  },\n  /**\n   * Create a chessboard texture\n   * @param  {number} [size]\n   * @param  {number} [unitSize]\n   * @param  {string} [color1]\n   * @param  {string} [color2]\n   * @return {clay.Texture2D}\n   */\n  createChessboard: function (size, unitSize, color1, color2) {\n    size = size || 512;\n    unitSize = unitSize || 64;\n    color1 = color1 || 'black';\n    color2 = color2 || 'white';\n    var repeat = Math.ceil(size / unitSize);\n    var canvas = document.createElement('canvas');\n    canvas.width = size;\n    canvas.height = size;\n    var ctx = canvas.getContext('2d');\n    ctx.fillStyle = color2;\n    ctx.fillRect(0, 0, size, size);\n    ctx.fillStyle = color1;\n    for (var i = 0; i < repeat; i++) {\n      for (var j = 0; j < repeat; j++) {\n        var isFill = j % 2 ? i % 2 : i % 2 - 1;\n        if (isFill) {\n          ctx.fillRect(i * unitSize, j * unitSize, unitSize, unitSize);\n        }\n      }\n    }\n    var texture = new Texture2D({\n      image: canvas,\n      anisotropic: 8\n    });\n    return texture;\n  },\n  /**\n   * Create a blank pure color 1x1 texture\n   * @param  {string} color\n   * @return {clay.Texture2D}\n   */\n  createBlank: function (color) {\n    var canvas = document.createElement('canvas');\n    canvas.width = 1;\n    canvas.height = 1;\n    var ctx = canvas.getContext('2d');\n    ctx.fillStyle = color;\n    ctx.fillRect(0, 0, 1, 1);\n    var texture = new Texture2D({\n      image: canvas\n    });\n    return texture;\n  }\n};\nexport default textureUtil;","map":{"version":3,"names":["Texture2D","TextureCube","vendor","EnvironmentMapPass","Skydome","Scene","dds","hdr","textureUtil","loadTexture","path","option","onsuccess","onerror","texture","match","fileType","width","height","sRGB","_fetchTexture","data","parseRGBE","exposure","dirty","parse","load","success","error","px","loadPanorama","renderer","cubeMap","self","flipY","panoramaToCubeMap","dispose","panoramaMap","environmentMapPass","skydome","scene","setEnvironmentMap","encodeRGBM","material","define","render","heightToNormal","image","checkBump","canvas","document","createElement","ctx","getContext","drawImage","srcData","getImageData","dstData","createImageData","i","length","r","g","b","diff","Math","abs","console","warn","x1","y1","x2","y2","putImageData","isHeightImage","img","downScaleSize","threshold","size","request","get","url","responseType","onload","createChessboard","unitSize","color1","color2","repeat","ceil","fillStyle","fillRect","j","isFill","anisotropic","createBlank","color"],"sources":["E:/QuestionairePlanet_Fronted/mytest/node_modules/claygl/src/util/texture.js"],"sourcesContent":["import Texture2D from '../Texture2D';\nimport TextureCube from '../TextureCube';\nimport vendor from '../core/vendor';\nimport EnvironmentMapPass from '../prePass/EnvironmentMap';\nimport Skydome from '../plugin/Skydome';\nimport Scene from '../Scene';\n\nimport dds from './dds';\nimport hdr from './hdr';\n\n/**\n * @alias clay.util.texture\n */\nvar textureUtil = {\n    /**\n     * @param  {string|object} path\n     * @param  {object} [option]\n     * @param  {Function} [onsuccess]\n     * @param  {Function} [onerror]\n     * @return {clay.Texture}\n     */\n    loadTexture: function (path, option, onsuccess, onerror) {\n        var texture;\n        if (typeof(option) === 'function') {\n            onsuccess = option;\n            onerror = onsuccess;\n            option = {};\n        }\n        else {\n            option = option || {};\n        }\n        if (typeof(path) === 'string') {\n            if (path.match(/.hdr$/) || option.fileType === 'hdr') {\n                texture = new Texture2D({\n                    width: 0,\n                    height: 0,\n                    sRGB: false\n                });\n                textureUtil._fetchTexture(\n                    path,\n                    function (data) {\n                        hdr.parseRGBE(data, texture, option.exposure);\n                        texture.dirty();\n                        onsuccess && onsuccess(texture);\n                    },\n                    onerror\n                );\n                return texture;\n            }\n            else if (path.match(/.dds$/) || option.fileType === 'dds') {\n                texture = new Texture2D({\n                    width: 0,\n                    height: 0\n                });\n                textureUtil._fetchTexture(\n                    path,\n                    function (data) {\n                        dds.parse(data, texture);\n                        texture.dirty();\n                        onsuccess && onsuccess(texture);\n                    },\n                    onerror\n                );\n            }\n            else {\n                texture = new Texture2D();\n                texture.load(path);\n                texture.success(onsuccess);\n                texture.error(onerror);\n            }\n        }\n        else if (typeof path === 'object' && typeof(path.px) !== 'undefined') {\n            texture = new TextureCube();\n            texture.load(path);\n            texture.success(onsuccess);\n            texture.error(onerror);\n        }\n        return texture;\n    },\n\n    /**\n     * Load a panorama texture and render it to a cube map\n     * @param  {clay.Renderer} renderer\n     * @param  {string} path\n     * @param  {clay.TextureCube} cubeMap\n     * @param  {object} [option]\n     * @param  {boolean} [option.encodeRGBM]\n     * @param  {number} [option.exposure]\n     * @param  {Function} [onsuccess]\n     * @param  {Function} [onerror]\n     */\n    loadPanorama: function (renderer, path, cubeMap, option, onsuccess, onerror) {\n        var self = this;\n\n        if (typeof(option) === 'function') {\n            onsuccess = option;\n            onerror = onsuccess;\n            option = {};\n        }\n        else {\n            option = option || {};\n        }\n\n        textureUtil.loadTexture(path, option, function (texture) {\n            // PENDING\n            texture.flipY = option.flipY || false;\n            self.panoramaToCubeMap(renderer, texture, cubeMap, option);\n            texture.dispose(renderer);\n            onsuccess && onsuccess(cubeMap);\n        }, onerror);\n    },\n\n    /**\n     * Render a panorama texture to a cube map\n     * @param  {clay.Renderer} renderer\n     * @param  {clay.Texture2D} panoramaMap\n     * @param  {clay.TextureCube} cubeMap\n     * @param  {Object} option\n     * @param  {boolean} [option.encodeRGBM]\n     */\n    panoramaToCubeMap: function (renderer, panoramaMap, cubeMap, option) {\n        var environmentMapPass = new EnvironmentMapPass();\n        var skydome = new Skydome({\n            scene: new Scene()\n        });\n        skydome.setEnvironmentMap(panoramaMap);\n\n        option = option || {};\n        if (option.encodeRGBM) {\n            skydome.material.define('fragment', 'RGBM_ENCODE');\n        }\n\n        // Share sRGB\n        cubeMap.sRGB = panoramaMap.sRGB;\n\n        environmentMapPass.texture = cubeMap;\n        environmentMapPass.render(renderer, skydome.scene);\n        environmentMapPass.texture = null;\n        environmentMapPass.dispose(renderer);\n        return cubeMap;\n    },\n\n    /**\n     * Convert height map to normal map\n     * @param {HTMLImageElement|HTMLCanvasElement} image\n     * @param {boolean} [checkBump=false]\n     * @return {HTMLCanvasElement}\n     */\n    heightToNormal: function (image, checkBump) {\n        var canvas = document.createElement('canvas');\n        var width = canvas.width = image.width;\n        var height = canvas.height = image.height;\n        var ctx = canvas.getContext('2d');\n        ctx.drawImage(image, 0, 0, width, height);\n        checkBump = checkBump || false;\n        var srcData = ctx.getImageData(0, 0, width, height);\n        var dstData = ctx.createImageData(width, height);\n        for (var i = 0; i < srcData.data.length; i += 4) {\n            if (checkBump) {\n                var r = srcData.data[i];\n                var g = srcData.data[i + 1];\n                var b = srcData.data[i + 2];\n                var diff = Math.abs(r - g) + Math.abs(g - b);\n                if (diff > 20) {\n                    console.warn('Given image is not a height map');\n                    return image;\n                }\n            }\n            // Modified from http://mrdoob.com/lab/javascript/height2normal/\n            var x1, y1, x2, y2;\n            if (i % (width * 4) === 0) {\n                // left edge\n                x1 = srcData.data[i];\n                x2 = srcData.data[i + 4];\n            }\n            else if (i % (width * 4) === (width - 1) * 4) {\n                // right edge\n                x1 = srcData.data[i - 4];\n                x2 = srcData.data[i];\n            }\n            else {\n                x1 = srcData.data[i - 4];\n                x2 = srcData.data[i + 4];\n            }\n\n            if (i < width * 4) {\n                // top edge\n                y1 = srcData.data[i];\n                y2 = srcData.data[i + width * 4];\n            }\n            else if (i > width * (height - 1) * 4) {\n                // bottom edge\n                y1 = srcData.data[i - width * 4];\n                y2 = srcData.data[i];\n            }\n            else {\n                y1 = srcData.data[i - width * 4];\n                y2 = srcData.data[i + width * 4];\n            }\n\n            dstData.data[i] = (x1 - x2) + 127;\n            dstData.data[i + 1] = (y1 - y2) + 127;\n            dstData.data[i + 2] = 255;\n            dstData.data[i + 3] = 255;\n        }\n        ctx.putImageData(dstData, 0, 0);\n        return canvas;\n    },\n\n    /**\n     * Convert height map to normal map\n     * @param {HTMLImageElement|HTMLCanvasElement} image\n     * @param {boolean} [checkBump=false]\n     * @param {number} [threshold=20]\n     * @return {HTMLCanvasElement}\n     */\n    isHeightImage: function (img, downScaleSize, threshold) {\n        if (!img || !img.width || !img.height) {\n            return false;\n        }\n\n        var canvas = document.createElement('canvas');\n        var ctx = canvas.getContext('2d');\n        var size = downScaleSize || 32;\n        threshold = threshold || 20;\n        canvas.width = canvas.height = size;\n        ctx.drawImage(img, 0, 0, size, size);\n        var srcData = ctx.getImageData(0, 0, size, size);\n        for (var i = 0; i < srcData.data.length; i += 4) {\n            var r = srcData.data[i];\n            var g = srcData.data[i + 1];\n            var b = srcData.data[i + 2];\n            var diff = Math.abs(r - g) + Math.abs(g - b);\n            if (diff > threshold) {\n                return false;\n            }\n        }\n        return true;\n    },\n\n    _fetchTexture: function (path, onsuccess, onerror) {\n        vendor.request.get({\n            url: path,\n            responseType: 'arraybuffer',\n            onload: onsuccess,\n            onerror: onerror\n        });\n    },\n\n    /**\n     * Create a chessboard texture\n     * @param  {number} [size]\n     * @param  {number} [unitSize]\n     * @param  {string} [color1]\n     * @param  {string} [color2]\n     * @return {clay.Texture2D}\n     */\n    createChessboard: function (size, unitSize, color1, color2) {\n        size = size || 512;\n        unitSize = unitSize || 64;\n        color1 = color1 || 'black';\n        color2 = color2 || 'white';\n\n        var repeat = Math.ceil(size / unitSize);\n\n        var canvas = document.createElement('canvas');\n        canvas.width = size;\n        canvas.height = size;\n        var ctx = canvas.getContext('2d');\n        ctx.fillStyle = color2;\n        ctx.fillRect(0, 0, size, size);\n\n        ctx.fillStyle = color1;\n        for (var i = 0; i < repeat; i++) {\n            for (var j = 0; j < repeat; j++) {\n                var isFill = j % 2 ? (i % 2) : (i % 2 - 1);\n                if (isFill) {\n                    ctx.fillRect(i * unitSize, j * unitSize, unitSize, unitSize);\n                }\n            }\n        }\n\n        var texture = new Texture2D({\n            image: canvas,\n            anisotropic: 8\n        });\n\n        return texture;\n    },\n\n    /**\n     * Create a blank pure color 1x1 texture\n     * @param  {string} color\n     * @return {clay.Texture2D}\n     */\n    createBlank: function (color) {\n        var canvas = document.createElement('canvas');\n        canvas.width = 1;\n        canvas.height = 1;\n        var ctx = canvas.getContext('2d');\n        ctx.fillStyle = color;\n        ctx.fillRect(0, 0, 1, 1);\n\n        var texture = new Texture2D({\n            image: canvas\n        });\n\n        return texture;\n    }\n};\n\nexport default textureUtil;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}