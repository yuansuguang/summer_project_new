{"ast":null,"code":"import * as echarts from 'echarts/lib/echarts';\nimport Geo3DBuilder from '../../component/common/Geo3DBuilder';\nimport graphicGL from '../../util/graphicGL';\nexport default echarts.ChartView.extend({\n  type: 'polygons3D',\n  __ecgl__: true,\n  init: function (ecModel, api) {\n    this.groupGL = new graphicGL.Node();\n    this._geo3DBuilderList = [];\n    this._currentStep = 0;\n  },\n  render: function (seriesModel, ecModel, api) {\n    this.groupGL.removeAll();\n    var coordSys = seriesModel.coordinateSystem;\n    if (coordSys && coordSys.viewGL) {\n      coordSys.viewGL.add(this.groupGL);\n    }\n    var geo3DBuilder = this._geo3DBuilderList[0];\n    if (!geo3DBuilder) {\n      geo3DBuilder = new Geo3DBuilder(api);\n      geo3DBuilder.extrudeY = coordSys.type !== 'mapbox3D' && coordSys.type !== 'maptalks3D';\n      this._geo3DBuilderList[0] = geo3DBuilder;\n    }\n    this._updateShaderDefines(coordSys, geo3DBuilder);\n    geo3DBuilder.update(seriesModel, ecModel, api);\n    this._geo3DBuilderList.length = 1;\n    this.groupGL.add(geo3DBuilder.rootNode);\n  },\n  incrementalPrepareRender: function (seriesModel, ecModel, api) {\n    this.groupGL.removeAll();\n    var coordSys = seriesModel.coordinateSystem;\n    if (coordSys && coordSys.viewGL) {\n      coordSys.viewGL.add(this.groupGL);\n    }\n    this._currentStep = 0;\n  },\n  incrementalRender: function (params, seriesModel, ecModel, api) {\n    var geo3DBuilder = this._geo3DBuilderList[this._currentStep];\n    var coordSys = seriesModel.coordinateSystem;\n    if (!geo3DBuilder) {\n      geo3DBuilder = new Geo3DBuilder(api);\n      geo3DBuilder.extrudeY = coordSys.type !== 'mapbox3D' && coordSys.type !== 'maptalks3D';\n      this._geo3DBuilderList[this._currentStep] = geo3DBuilder;\n    }\n    geo3DBuilder.update(seriesModel, ecModel, api, params.start, params.end);\n    this.groupGL.add(geo3DBuilder.rootNode);\n    this._updateShaderDefines(coordSys, geo3DBuilder);\n    this._currentStep++;\n  },\n  _updateShaderDefines: function (coordSys, geo3DBuilder) {\n    var methodName = coordSys.viewGL.isLinearSpace() ? 'define' : 'undefine';\n    geo3DBuilder.rootNode.traverse(function (mesh) {\n      if (mesh.material) {\n        mesh.material[methodName]('fragment', 'SRGB_DECODE'); // FIXME\n\n        if (coordSys.type === 'mapbox3D' || coordSys.type === 'maptalks3D') {\n          mesh.material.define('fragment', 'NORMAL_UP_AXIS', 2);\n          mesh.material.define('fragment', 'NORMAL_FRONT_AXIS', 1);\n        }\n      }\n    });\n  },\n  remove: function () {\n    this.groupGL.removeAll();\n  },\n  dispose: function () {\n    this.groupGL.removeAll();\n    this._geo3DBuilderList.forEach(function (geo3DBuilder) {\n      geo3DBuilder.dispose();\n    });\n  }\n});","map":{"version":3,"names":["echarts","Geo3DBuilder","graphicGL","ChartView","extend","type","__ecgl__","init","ecModel","api","groupGL","Node","_geo3DBuilderList","_currentStep","render","seriesModel","removeAll","coordSys","coordinateSystem","viewGL","add","geo3DBuilder","extrudeY","_updateShaderDefines","update","length","rootNode","incrementalPrepareRender","incrementalRender","params","start","end","methodName","isLinearSpace","traverse","mesh","material","define","remove","dispose","forEach"],"sources":["E:/QuestionairePlanet_Fronted/mytest/node_modules/echarts-gl/lib/chart/polygons3D/Polygons3DView.js"],"sourcesContent":["import * as echarts from 'echarts/lib/echarts';\nimport Geo3DBuilder from '../../component/common/Geo3DBuilder';\nimport graphicGL from '../../util/graphicGL';\nexport default echarts.ChartView.extend({\n  type: 'polygons3D',\n  __ecgl__: true,\n  init: function (ecModel, api) {\n    this.groupGL = new graphicGL.Node();\n    this._geo3DBuilderList = [];\n    this._currentStep = 0;\n  },\n  render: function (seriesModel, ecModel, api) {\n    this.groupGL.removeAll();\n    var coordSys = seriesModel.coordinateSystem;\n\n    if (coordSys && coordSys.viewGL) {\n      coordSys.viewGL.add(this.groupGL);\n    }\n\n    var geo3DBuilder = this._geo3DBuilderList[0];\n\n    if (!geo3DBuilder) {\n      geo3DBuilder = new Geo3DBuilder(api);\n      geo3DBuilder.extrudeY = coordSys.type !== 'mapbox3D' && coordSys.type !== 'maptalks3D';\n      this._geo3DBuilderList[0] = geo3DBuilder;\n    }\n\n    this._updateShaderDefines(coordSys, geo3DBuilder);\n\n    geo3DBuilder.update(seriesModel, ecModel, api);\n    this._geo3DBuilderList.length = 1;\n    this.groupGL.add(geo3DBuilder.rootNode);\n  },\n  incrementalPrepareRender: function (seriesModel, ecModel, api) {\n    this.groupGL.removeAll();\n    var coordSys = seriesModel.coordinateSystem;\n\n    if (coordSys && coordSys.viewGL) {\n      coordSys.viewGL.add(this.groupGL);\n    }\n\n    this._currentStep = 0;\n  },\n  incrementalRender: function (params, seriesModel, ecModel, api) {\n    var geo3DBuilder = this._geo3DBuilderList[this._currentStep];\n    var coordSys = seriesModel.coordinateSystem;\n\n    if (!geo3DBuilder) {\n      geo3DBuilder = new Geo3DBuilder(api);\n      geo3DBuilder.extrudeY = coordSys.type !== 'mapbox3D' && coordSys.type !== 'maptalks3D';\n      this._geo3DBuilderList[this._currentStep] = geo3DBuilder;\n    }\n\n    geo3DBuilder.update(seriesModel, ecModel, api, params.start, params.end);\n    this.groupGL.add(geo3DBuilder.rootNode);\n\n    this._updateShaderDefines(coordSys, geo3DBuilder);\n\n    this._currentStep++;\n  },\n  _updateShaderDefines: function (coordSys, geo3DBuilder) {\n    var methodName = coordSys.viewGL.isLinearSpace() ? 'define' : 'undefine';\n    geo3DBuilder.rootNode.traverse(function (mesh) {\n      if (mesh.material) {\n        mesh.material[methodName]('fragment', 'SRGB_DECODE'); // FIXME\n\n        if (coordSys.type === 'mapbox3D' || coordSys.type === 'maptalks3D') {\n          mesh.material.define('fragment', 'NORMAL_UP_AXIS', 2);\n          mesh.material.define('fragment', 'NORMAL_FRONT_AXIS', 1);\n        }\n      }\n    });\n  },\n  remove: function () {\n    this.groupGL.removeAll();\n  },\n  dispose: function () {\n    this.groupGL.removeAll();\n\n    this._geo3DBuilderList.forEach(function (geo3DBuilder) {\n      geo3DBuilder.dispose();\n    });\n  }\n});"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}