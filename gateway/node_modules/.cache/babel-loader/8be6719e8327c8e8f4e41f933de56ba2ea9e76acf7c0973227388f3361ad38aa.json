{"ast":null,"code":"import \"core-js/modules/es.array-buffer.detached.js\";\nimport \"core-js/modules/es.array-buffer.transfer.js\";\nimport \"core-js/modules/es.array-buffer.transfer-to-fixed-length.js\";\nimport \"core-js/modules/es.typed-array.to-reversed.js\";\nimport \"core-js/modules/es.typed-array.to-sorted.js\";\nimport \"core-js/modules/es.typed-array.with.js\";\nimport Matrix4 from 'claygl/src/math/Matrix4';\nimport Vector3 from 'claygl/src/math/Vector3';\nimport Texture2D from 'claygl/src/Texture2D';\nimport Texture from 'claygl/src/Texture';\nimport Pass from 'claygl/src/compositor/Pass';\nimport Shader from 'claygl/src/Shader';\nimport FrameBuffer from 'claygl/src/FrameBuffer';\nimport halton from './halton';\nimport SSAOGLSL from './SSAO.glsl.js';\nShader.import(SSAOGLSL);\nfunction generateNoiseData(size) {\n  var data = new Uint8Array(size * size * 4);\n  var n = 0;\n  var v3 = new Vector3();\n  for (var i = 0; i < size; i++) {\n    for (var j = 0; j < size; j++) {\n      v3.set(Math.random() * 2 - 1, Math.random() * 2 - 1, 0).normalize();\n      data[n++] = (v3.x * 0.5 + 0.5) * 255;\n      data[n++] = (v3.y * 0.5 + 0.5) * 255;\n      data[n++] = 0;\n      data[n++] = 255;\n    }\n  }\n  return data;\n}\nfunction generateNoiseTexture(size) {\n  return new Texture2D({\n    pixels: generateNoiseData(size),\n    wrapS: Texture.REPEAT,\n    wrapT: Texture.REPEAT,\n    width: size,\n    height: size\n  });\n}\nfunction generateKernel(size, offset, hemisphere) {\n  var kernel = new Float32Array(size * 3);\n  offset = offset || 0;\n  for (var i = 0; i < size; i++) {\n    var phi = halton(i + offset, 2) * (hemisphere ? 1 : 2) * Math.PI;\n    var theta = halton(i + offset, 3) * Math.PI;\n    var r = Math.random();\n    var x = Math.cos(phi) * Math.sin(theta) * r;\n    var y = Math.cos(theta) * r;\n    var z = Math.sin(phi) * Math.sin(theta) * r;\n    kernel[i * 3] = x;\n    kernel[i * 3 + 1] = y;\n    kernel[i * 3 + 2] = z;\n  }\n  return kernel; // var kernel = new Float32Array(size * 3);\n  // var v3 = new Vector3();\n  // for (var i = 0; i < size; i++) {\n  //     v3.set(Math.random() * 2 - 1, Math.random() * 2 - 1, Math.random())\n  //         .normalize().scale(Math.random());\n  //     kernel[i * 3] = v3.x;\n  //     kernel[i * 3 + 1] = v3.y;\n  //     kernel[i * 3 + 2] = v3.z;\n  // }\n  // return kernel;\n}\nfunction SSAOPass(opt) {\n  opt = opt || {};\n  this._ssaoPass = new Pass({\n    fragment: Shader.source('ecgl.ssao.estimate')\n  });\n  this._blurPass = new Pass({\n    fragment: Shader.source('ecgl.ssao.blur')\n  });\n  this._framebuffer = new FrameBuffer({\n    depthBuffer: false\n  });\n  this._ssaoTexture = new Texture2D();\n  this._blurTexture = new Texture2D();\n  this._blurTexture2 = new Texture2D();\n  this._depthTex = opt.depthTexture;\n  this._normalTex = opt.normalTexture;\n  this.setNoiseSize(4);\n  this.setKernelSize(opt.kernelSize || 12);\n  if (opt.radius != null) {\n    this.setParameter('radius', opt.radius);\n  }\n  if (opt.power != null) {\n    this.setParameter('power', opt.power);\n  }\n  if (!this._normalTex) {\n    this._ssaoPass.material.disableTexture('normalTex');\n    this._blurPass.material.disableTexture('normalTex');\n  }\n  if (!this._depthTex) {\n    this._blurPass.material.disableTexture('depthTex');\n  }\n  this._blurPass.material.setUniform('normalTex', this._normalTex);\n  this._blurPass.material.setUniform('depthTex', this._depthTex);\n}\nSSAOPass.prototype.setDepthTexture = function (depthTex) {\n  this._depthTex = depthTex;\n};\nSSAOPass.prototype.setNormalTexture = function (normalTex) {\n  this._normalTex = normalTex;\n  this._ssaoPass.material[normalTex ? 'enableTexture' : 'disableTexture']('normalTex'); // Switch between hemisphere and shere kernel.\n\n  this.setKernelSize(this._kernelSize);\n};\nSSAOPass.prototype.update = function (renderer, camera, frame) {\n  var width = renderer.getWidth();\n  var height = renderer.getHeight();\n  var ssaoPass = this._ssaoPass;\n  var blurPass = this._blurPass;\n  ssaoPass.setUniform('kernel', this._kernels[frame % this._kernels.length]);\n  ssaoPass.setUniform('depthTex', this._depthTex);\n  if (this._normalTex != null) {\n    ssaoPass.setUniform('normalTex', this._normalTex);\n  }\n  ssaoPass.setUniform('depthTexSize', [this._depthTex.width, this._depthTex.height]);\n  var viewInverseTranspose = new Matrix4();\n  Matrix4.transpose(viewInverseTranspose, camera.worldTransform);\n  ssaoPass.setUniform('projection', camera.projectionMatrix.array);\n  ssaoPass.setUniform('projectionInv', camera.invProjectionMatrix.array);\n  ssaoPass.setUniform('viewInverseTranspose', viewInverseTranspose.array);\n  var ssaoTexture = this._ssaoTexture;\n  var blurTexture = this._blurTexture;\n  var blurTexture2 = this._blurTexture2;\n  ssaoTexture.width = width / 2;\n  ssaoTexture.height = height / 2;\n  blurTexture.width = width;\n  blurTexture.height = height;\n  blurTexture2.width = width;\n  blurTexture2.height = height;\n  this._framebuffer.attach(ssaoTexture);\n  this._framebuffer.bind(renderer);\n  renderer.gl.clearColor(1, 1, 1, 1);\n  renderer.gl.clear(renderer.gl.COLOR_BUFFER_BIT);\n  ssaoPass.render(renderer);\n  blurPass.setUniform('textureSize', [width / 2, height / 2]);\n  blurPass.setUniform('projection', camera.projectionMatrix.array);\n  this._framebuffer.attach(blurTexture);\n  blurPass.setUniform('direction', 0);\n  blurPass.setUniform('ssaoTexture', ssaoTexture);\n  blurPass.render(renderer);\n  this._framebuffer.attach(blurTexture2);\n  blurPass.setUniform('textureSize', [width, height]);\n  blurPass.setUniform('direction', 1);\n  blurPass.setUniform('ssaoTexture', blurTexture);\n  blurPass.render(renderer);\n  this._framebuffer.unbind(renderer); // Restore clear\n\n  var clearColor = renderer.clearColor;\n  renderer.gl.clearColor(clearColor[0], clearColor[1], clearColor[2], clearColor[3]);\n};\nSSAOPass.prototype.getTargetTexture = function () {\n  return this._blurTexture2;\n};\nSSAOPass.prototype.setParameter = function (name, val) {\n  if (name === 'noiseTexSize') {\n    this.setNoiseSize(val);\n  } else if (name === 'kernelSize') {\n    this.setKernelSize(val);\n  } else if (name === 'intensity') {\n    this._ssaoPass.material.set('intensity', val);\n  } else {\n    this._ssaoPass.setUniform(name, val);\n  }\n};\nSSAOPass.prototype.setKernelSize = function (size) {\n  this._kernelSize = size;\n  this._ssaoPass.material.define('fragment', 'KERNEL_SIZE', size);\n  this._kernels = this._kernels || [];\n  for (var i = 0; i < 30; i++) {\n    this._kernels[i] = generateKernel(size, i * size, !!this._normalTex);\n  }\n};\nSSAOPass.prototype.setNoiseSize = function (size) {\n  var texture = this._ssaoPass.getUniform('noiseTex');\n  if (!texture) {\n    texture = generateNoiseTexture(size);\n    this._ssaoPass.setUniform('noiseTex', generateNoiseTexture(size));\n  } else {\n    texture.data = generateNoiseData(size);\n    texture.width = texture.height = size;\n    texture.dirty();\n  }\n  this._ssaoPass.setUniform('noiseTexSize', [size, size]);\n};\nSSAOPass.prototype.dispose = function (renderer) {\n  this._blurTexture.dispose(renderer);\n  this._ssaoTexture.dispose(renderer);\n  this._blurTexture2.dispose(renderer);\n};\nexport default SSAOPass;","map":{"version":3,"names":["Matrix4","Vector3","Texture2D","Texture","Pass","Shader","FrameBuffer","halton","SSAOGLSL","import","generateNoiseData","size","data","Uint8Array","n","v3","i","j","set","Math","random","normalize","x","y","generateNoiseTexture","pixels","wrapS","REPEAT","wrapT","width","height","generateKernel","offset","hemisphere","kernel","Float32Array","phi","PI","theta","r","cos","sin","z","SSAOPass","opt","_ssaoPass","fragment","source","_blurPass","_framebuffer","depthBuffer","_ssaoTexture","_blurTexture","_blurTexture2","_depthTex","depthTexture","_normalTex","normalTexture","setNoiseSize","setKernelSize","kernelSize","radius","setParameter","power","material","disableTexture","setUniform","prototype","setDepthTexture","depthTex","setNormalTexture","normalTex","_kernelSize","update","renderer","camera","frame","getWidth","getHeight","ssaoPass","blurPass","_kernels","length","viewInverseTranspose","transpose","worldTransform","projectionMatrix","array","invProjectionMatrix","ssaoTexture","blurTexture","blurTexture2","attach","bind","gl","clearColor","clear","COLOR_BUFFER_BIT","render","unbind","getTargetTexture","name","val","define","texture","getUniform","dirty","dispose"],"sources":["E:/mytest/node_modules/echarts-gl/lib/effect/SSAOPass.js"],"sourcesContent":["import Matrix4 from 'claygl/src/math/Matrix4';\nimport Vector3 from 'claygl/src/math/Vector3';\nimport Texture2D from 'claygl/src/Texture2D';\nimport Texture from 'claygl/src/Texture';\nimport Pass from 'claygl/src/compositor/Pass';\nimport Shader from 'claygl/src/Shader';\nimport FrameBuffer from 'claygl/src/FrameBuffer';\nimport halton from './halton';\nimport SSAOGLSL from './SSAO.glsl.js';\nShader.import(SSAOGLSL);\n\nfunction generateNoiseData(size) {\n  var data = new Uint8Array(size * size * 4);\n  var n = 0;\n  var v3 = new Vector3();\n\n  for (var i = 0; i < size; i++) {\n    for (var j = 0; j < size; j++) {\n      v3.set(Math.random() * 2 - 1, Math.random() * 2 - 1, 0).normalize();\n      data[n++] = (v3.x * 0.5 + 0.5) * 255;\n      data[n++] = (v3.y * 0.5 + 0.5) * 255;\n      data[n++] = 0;\n      data[n++] = 255;\n    }\n  }\n\n  return data;\n}\n\nfunction generateNoiseTexture(size) {\n  return new Texture2D({\n    pixels: generateNoiseData(size),\n    wrapS: Texture.REPEAT,\n    wrapT: Texture.REPEAT,\n    width: size,\n    height: size\n  });\n}\n\nfunction generateKernel(size, offset, hemisphere) {\n  var kernel = new Float32Array(size * 3);\n  offset = offset || 0;\n\n  for (var i = 0; i < size; i++) {\n    var phi = halton(i + offset, 2) * (hemisphere ? 1 : 2) * Math.PI;\n    var theta = halton(i + offset, 3) * Math.PI;\n    var r = Math.random();\n    var x = Math.cos(phi) * Math.sin(theta) * r;\n    var y = Math.cos(theta) * r;\n    var z = Math.sin(phi) * Math.sin(theta) * r;\n    kernel[i * 3] = x;\n    kernel[i * 3 + 1] = y;\n    kernel[i * 3 + 2] = z;\n  }\n\n  return kernel; // var kernel = new Float32Array(size * 3);\n  // var v3 = new Vector3();\n  // for (var i = 0; i < size; i++) {\n  //     v3.set(Math.random() * 2 - 1, Math.random() * 2 - 1, Math.random())\n  //         .normalize().scale(Math.random());\n  //     kernel[i * 3] = v3.x;\n  //     kernel[i * 3 + 1] = v3.y;\n  //     kernel[i * 3 + 2] = v3.z;\n  // }\n  // return kernel;\n}\n\nfunction SSAOPass(opt) {\n  opt = opt || {};\n  this._ssaoPass = new Pass({\n    fragment: Shader.source('ecgl.ssao.estimate')\n  });\n  this._blurPass = new Pass({\n    fragment: Shader.source('ecgl.ssao.blur')\n  });\n  this._framebuffer = new FrameBuffer({\n    depthBuffer: false\n  });\n  this._ssaoTexture = new Texture2D();\n  this._blurTexture = new Texture2D();\n  this._blurTexture2 = new Texture2D();\n  this._depthTex = opt.depthTexture;\n  this._normalTex = opt.normalTexture;\n  this.setNoiseSize(4);\n  this.setKernelSize(opt.kernelSize || 12);\n\n  if (opt.radius != null) {\n    this.setParameter('radius', opt.radius);\n  }\n\n  if (opt.power != null) {\n    this.setParameter('power', opt.power);\n  }\n\n  if (!this._normalTex) {\n    this._ssaoPass.material.disableTexture('normalTex');\n\n    this._blurPass.material.disableTexture('normalTex');\n  }\n\n  if (!this._depthTex) {\n    this._blurPass.material.disableTexture('depthTex');\n  }\n\n  this._blurPass.material.setUniform('normalTex', this._normalTex);\n\n  this._blurPass.material.setUniform('depthTex', this._depthTex);\n}\n\nSSAOPass.prototype.setDepthTexture = function (depthTex) {\n  this._depthTex = depthTex;\n};\n\nSSAOPass.prototype.setNormalTexture = function (normalTex) {\n  this._normalTex = normalTex;\n\n  this._ssaoPass.material[normalTex ? 'enableTexture' : 'disableTexture']('normalTex'); // Switch between hemisphere and shere kernel.\n\n\n  this.setKernelSize(this._kernelSize);\n};\n\nSSAOPass.prototype.update = function (renderer, camera, frame) {\n  var width = renderer.getWidth();\n  var height = renderer.getHeight();\n  var ssaoPass = this._ssaoPass;\n  var blurPass = this._blurPass;\n  ssaoPass.setUniform('kernel', this._kernels[frame % this._kernels.length]);\n  ssaoPass.setUniform('depthTex', this._depthTex);\n\n  if (this._normalTex != null) {\n    ssaoPass.setUniform('normalTex', this._normalTex);\n  }\n\n  ssaoPass.setUniform('depthTexSize', [this._depthTex.width, this._depthTex.height]);\n  var viewInverseTranspose = new Matrix4();\n  Matrix4.transpose(viewInverseTranspose, camera.worldTransform);\n  ssaoPass.setUniform('projection', camera.projectionMatrix.array);\n  ssaoPass.setUniform('projectionInv', camera.invProjectionMatrix.array);\n  ssaoPass.setUniform('viewInverseTranspose', viewInverseTranspose.array);\n  var ssaoTexture = this._ssaoTexture;\n  var blurTexture = this._blurTexture;\n  var blurTexture2 = this._blurTexture2;\n  ssaoTexture.width = width / 2;\n  ssaoTexture.height = height / 2;\n  blurTexture.width = width;\n  blurTexture.height = height;\n  blurTexture2.width = width;\n  blurTexture2.height = height;\n\n  this._framebuffer.attach(ssaoTexture);\n\n  this._framebuffer.bind(renderer);\n\n  renderer.gl.clearColor(1, 1, 1, 1);\n  renderer.gl.clear(renderer.gl.COLOR_BUFFER_BIT);\n  ssaoPass.render(renderer);\n  blurPass.setUniform('textureSize', [width / 2, height / 2]);\n  blurPass.setUniform('projection', camera.projectionMatrix.array);\n\n  this._framebuffer.attach(blurTexture);\n\n  blurPass.setUniform('direction', 0);\n  blurPass.setUniform('ssaoTexture', ssaoTexture);\n  blurPass.render(renderer);\n\n  this._framebuffer.attach(blurTexture2);\n\n  blurPass.setUniform('textureSize', [width, height]);\n  blurPass.setUniform('direction', 1);\n  blurPass.setUniform('ssaoTexture', blurTexture);\n  blurPass.render(renderer);\n\n  this._framebuffer.unbind(renderer); // Restore clear\n\n\n  var clearColor = renderer.clearColor;\n  renderer.gl.clearColor(clearColor[0], clearColor[1], clearColor[2], clearColor[3]);\n};\n\nSSAOPass.prototype.getTargetTexture = function () {\n  return this._blurTexture2;\n};\n\nSSAOPass.prototype.setParameter = function (name, val) {\n  if (name === 'noiseTexSize') {\n    this.setNoiseSize(val);\n  } else if (name === 'kernelSize') {\n    this.setKernelSize(val);\n  } else if (name === 'intensity') {\n    this._ssaoPass.material.set('intensity', val);\n  } else {\n    this._ssaoPass.setUniform(name, val);\n  }\n};\n\nSSAOPass.prototype.setKernelSize = function (size) {\n  this._kernelSize = size;\n\n  this._ssaoPass.material.define('fragment', 'KERNEL_SIZE', size);\n\n  this._kernels = this._kernels || [];\n\n  for (var i = 0; i < 30; i++) {\n    this._kernels[i] = generateKernel(size, i * size, !!this._normalTex);\n  }\n};\n\nSSAOPass.prototype.setNoiseSize = function (size) {\n  var texture = this._ssaoPass.getUniform('noiseTex');\n\n  if (!texture) {\n    texture = generateNoiseTexture(size);\n\n    this._ssaoPass.setUniform('noiseTex', generateNoiseTexture(size));\n  } else {\n    texture.data = generateNoiseData(size);\n    texture.width = texture.height = size;\n    texture.dirty();\n  }\n\n  this._ssaoPass.setUniform('noiseTexSize', [size, size]);\n};\n\nSSAOPass.prototype.dispose = function (renderer) {\n  this._blurTexture.dispose(renderer);\n\n  this._ssaoTexture.dispose(renderer);\n\n  this._blurTexture2.dispose(renderer);\n};\n\nexport default SSAOPass;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}