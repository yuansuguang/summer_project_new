{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport CompositorNode from './CompositorNode';\nimport glenum from '../core/glenum';\nimport FrameBuffer from '../FrameBuffer';\n\n/**\n * @constructor clay.compositor.SceneNode\n * @extends clay.compositor.CompositorNode\n */\nvar SceneNode = CompositorNode.extend( /** @lends clay.compositor.SceneNode# */\n{\n  name: 'scene',\n  /**\n   * @type {clay.Scene}\n   */\n  scene: null,\n  /**\n   * @type {clay.Camera}\n   */\n  camera: null,\n  /**\n   * @type {boolean}\n   */\n  autoUpdateScene: true,\n  /**\n   * @type {boolean}\n   */\n  preZ: false\n}, function () {\n  this.frameBuffer = new FrameBuffer();\n}, {\n  render: function (renderer) {\n    this._rendering = true;\n    var _gl = renderer.gl;\n    this.trigger('beforerender');\n    var renderInfo;\n    if (!this.outputs) {\n      renderInfo = renderer.render(this.scene, this.camera, !this.autoUpdateScene, this.preZ);\n    } else {\n      var frameBuffer = this.frameBuffer;\n      for (var name in this.outputs) {\n        var parameters = this.updateParameter(name, renderer);\n        var outputInfo = this.outputs[name];\n        var texture = this._compositor.allocateTexture(parameters);\n        this._outputTextures[name] = texture;\n        var attachment = outputInfo.attachment || _gl.COLOR_ATTACHMENT0;\n        if (typeof attachment == 'string') {\n          attachment = _gl[attachment];\n        }\n        frameBuffer.attach(texture, attachment);\n      }\n      frameBuffer.bind(renderer);\n\n      // MRT Support in chrome\n      // https://www.khronos.org/registry/webgl/sdk/tests/conformance/extensions/ext-draw-buffers.html\n      var ext = renderer.getGLExtension('EXT_draw_buffers');\n      if (ext) {\n        var bufs = [];\n        for (var attachment in this.outputs) {\n          attachment = parseInt(attachment);\n          if (attachment >= _gl.COLOR_ATTACHMENT0 && attachment <= _gl.COLOR_ATTACHMENT0 + 8) {\n            bufs.push(attachment);\n          }\n        }\n        ext.drawBuffersEXT(bufs);\n      }\n\n      // Always clear\n      // PENDING\n      renderer.saveClear();\n      renderer.clearBit = glenum.DEPTH_BUFFER_BIT | glenum.COLOR_BUFFER_BIT;\n      renderInfo = renderer.render(this.scene, this.camera, !this.autoUpdateScene, this.preZ);\n      renderer.restoreClear();\n      frameBuffer.unbind(renderer);\n    }\n    this.trigger('afterrender', renderInfo);\n    this._rendering = false;\n    this._rendered = true;\n  }\n});\nexport default SceneNode;","map":{"version":3,"names":["CompositorNode","glenum","FrameBuffer","SceneNode","extend","name","scene","camera","autoUpdateScene","preZ","frameBuffer","render","renderer","_rendering","_gl","gl","trigger","renderInfo","outputs","parameters","updateParameter","outputInfo","texture","_compositor","allocateTexture","_outputTextures","attachment","COLOR_ATTACHMENT0","attach","bind","ext","getGLExtension","bufs","parseInt","push","drawBuffersEXT","saveClear","clearBit","DEPTH_BUFFER_BIT","COLOR_BUFFER_BIT","restoreClear","unbind","_rendered"],"sources":["E:/QuestionairePlanet_Fronted/mytest/node_modules/claygl/src/compositor/SceneNode.js"],"sourcesContent":["import CompositorNode from './CompositorNode';\nimport glenum from '../core/glenum';\nimport FrameBuffer from '../FrameBuffer';\n\n/**\n * @constructor clay.compositor.SceneNode\n * @extends clay.compositor.CompositorNode\n */\nvar SceneNode = CompositorNode.extend(\n/** @lends clay.compositor.SceneNode# */\n{\n    name: 'scene',\n    /**\n     * @type {clay.Scene}\n     */\n    scene: null,\n    /**\n     * @type {clay.Camera}\n     */\n    camera: null,\n    /**\n     * @type {boolean}\n     */\n    autoUpdateScene: true,\n    /**\n     * @type {boolean}\n     */\n    preZ: false\n\n}, function() {\n    this.frameBuffer = new FrameBuffer();\n}, {\n    render: function(renderer) {\n\n        this._rendering = true;\n        var _gl = renderer.gl;\n\n        this.trigger('beforerender');\n\n        var renderInfo;\n\n        if (!this.outputs) {\n\n            renderInfo = renderer.render(this.scene, this.camera, !this.autoUpdateScene, this.preZ);\n\n        }\n        else {\n\n            var frameBuffer = this.frameBuffer;\n            for (var name in this.outputs) {\n                var parameters = this.updateParameter(name, renderer);\n                var outputInfo = this.outputs[name];\n                var texture = this._compositor.allocateTexture(parameters);\n                this._outputTextures[name] = texture;\n\n                var attachment = outputInfo.attachment || _gl.COLOR_ATTACHMENT0;\n                if (typeof(attachment) == 'string') {\n                    attachment = _gl[attachment];\n                }\n                frameBuffer.attach(texture, attachment);\n            }\n            frameBuffer.bind(renderer);\n\n            // MRT Support in chrome\n            // https://www.khronos.org/registry/webgl/sdk/tests/conformance/extensions/ext-draw-buffers.html\n            var ext = renderer.getGLExtension('EXT_draw_buffers');\n            if (ext) {\n                var bufs = [];\n                for (var attachment in this.outputs) {\n                    attachment = parseInt(attachment);\n                    if (attachment >= _gl.COLOR_ATTACHMENT0 && attachment <= _gl.COLOR_ATTACHMENT0 + 8) {\n                        bufs.push(attachment);\n                    }\n                }\n                ext.drawBuffersEXT(bufs);\n            }\n\n            // Always clear\n            // PENDING\n            renderer.saveClear();\n            renderer.clearBit = glenum.DEPTH_BUFFER_BIT | glenum.COLOR_BUFFER_BIT;\n            renderInfo = renderer.render(this.scene, this.camera, !this.autoUpdateScene, this.preZ);\n            renderer.restoreClear();\n\n            frameBuffer.unbind(renderer);\n        }\n\n        this.trigger('afterrender', renderInfo);\n\n        this._rendering = false;\n        this._rendered = true;\n    }\n});\n\nexport default SceneNode;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}