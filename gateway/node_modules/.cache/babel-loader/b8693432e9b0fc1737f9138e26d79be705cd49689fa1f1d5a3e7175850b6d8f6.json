{"ast":null,"code":"// https://docs.unrealengine.com/latest/INT/Engine/Rendering/LightingAndShadows/AmbientCubemap/\nimport Light from '../Light';\nimport cubemapUtil from '../util/cubemap';\n\n/**\n * Ambient cubemap light provides specular parts of Image Based Lighting.\n * Which is a basic requirement for Physically Based Rendering\n * @constructor clay.light.AmbientCubemap\n * @extends clay.Light\n */\nvar AmbientCubemapLight = Light.extend({\n  /**\n   * @type {clay.TextureCube}\n   * @memberOf clay.light.AmbientCubemap#\n   */\n  cubemap: null,\n  // TODO\n  // range: 100,\n\n  castShadow: false,\n  _normalDistribution: null,\n  _brdfLookup: null\n}, /** @lends clay.light.AmbientCubemap# */{\n  type: 'AMBIENT_CUBEMAP_LIGHT',\n  /**\n   * Do prefitering the cubemap\n   * @param {clay.Renderer} renderer\n   * @param {number} [size=32]\n   */\n  prefilter: function (renderer, size) {\n    if (!renderer.getGLExtension('EXT_shader_texture_lod')) {\n      console.warn('Device not support textureCubeLodEXT');\n      return;\n    }\n    if (!this._brdfLookup) {\n      this._normalDistribution = cubemapUtil.generateNormalDistribution();\n      this._brdfLookup = cubemapUtil.integrateBRDF(renderer, this._normalDistribution);\n    }\n    var cubemap = this.cubemap;\n    if (cubemap.__prefiltered) {\n      return;\n    }\n    var result = cubemapUtil.prefilterEnvironmentMap(renderer, cubemap, {\n      encodeRGBM: true,\n      width: size,\n      height: size\n    }, this._normalDistribution, this._brdfLookup);\n    this.cubemap = result.environmentMap;\n    this.cubemap.__prefiltered = true;\n    cubemap.dispose(renderer);\n  },\n  getBRDFLookup: function () {\n    return this._brdfLookup;\n  },\n  uniformTemplates: {\n    ambientCubemapLightColor: {\n      type: '3f',\n      value: function (instance) {\n        var color = instance.color;\n        var intensity = instance.intensity;\n        return [color[0] * intensity, color[1] * intensity, color[2] * intensity];\n      }\n    },\n    ambientCubemapLightCubemap: {\n      type: 't',\n      value: function (instance) {\n        return instance.cubemap;\n      }\n    },\n    ambientCubemapLightBRDFLookup: {\n      type: 't',\n      value: function (instance) {\n        return instance._brdfLookup;\n      }\n    }\n  }\n  /**\n   * @function\n   * @name clone\n   * @return {clay.light.AmbientCubemap}\n   * @memberOf clay.light.AmbientCubemap.prototype\n   */\n});\nexport default AmbientCubemapLight;","map":{"version":3,"names":["Light","cubemapUtil","AmbientCubemapLight","extend","cubemap","castShadow","_normalDistribution","_brdfLookup","type","prefilter","renderer","size","getGLExtension","console","warn","generateNormalDistribution","integrateBRDF","__prefiltered","result","prefilterEnvironmentMap","encodeRGBM","width","height","environmentMap","dispose","getBRDFLookup","uniformTemplates","ambientCubemapLightColor","value","instance","color","intensity","ambientCubemapLightCubemap","ambientCubemapLightBRDFLookup"],"sources":["E:/QuestionairePlanet_Fronted/mytest/node_modules/claygl/src/light/AmbientCubemap.js"],"sourcesContent":["// https://docs.unrealengine.com/latest/INT/Engine/Rendering/LightingAndShadows/AmbientCubemap/\nimport Light from '../Light';\nimport cubemapUtil from '../util/cubemap';\n\n/**\n * Ambient cubemap light provides specular parts of Image Based Lighting.\n * Which is a basic requirement for Physically Based Rendering\n * @constructor clay.light.AmbientCubemap\n * @extends clay.Light\n */\nvar AmbientCubemapLight = Light.extend({\n\n    /**\n     * @type {clay.TextureCube}\n     * @memberOf clay.light.AmbientCubemap#\n     */\n    cubemap: null,\n\n    // TODO\n    // range: 100,\n\n    castShadow: false,\n\n    _normalDistribution: null,\n    _brdfLookup: null\n\n}, /** @lends clay.light.AmbientCubemap# */ {\n\n    type: 'AMBIENT_CUBEMAP_LIGHT',\n\n    /**\n     * Do prefitering the cubemap\n     * @param {clay.Renderer} renderer\n     * @param {number} [size=32]\n     */\n    prefilter: function (renderer, size) {\n        if (!renderer.getGLExtension('EXT_shader_texture_lod')) {\n            console.warn('Device not support textureCubeLodEXT');\n            return;\n        }\n        if (!this._brdfLookup) {\n            this._normalDistribution = cubemapUtil.generateNormalDistribution();\n            this._brdfLookup = cubemapUtil.integrateBRDF(renderer, this._normalDistribution);\n        }\n        var cubemap = this.cubemap;\n        if (cubemap.__prefiltered) {\n            return;\n        }\n\n        var result = cubemapUtil.prefilterEnvironmentMap(\n            renderer, cubemap, {\n                encodeRGBM: true,\n                width: size,\n                height: size\n            }, this._normalDistribution, this._brdfLookup\n        );\n        this.cubemap = result.environmentMap;\n        this.cubemap.__prefiltered = true;\n\n        cubemap.dispose(renderer);\n    },\n\n    getBRDFLookup: function () {\n        return this._brdfLookup;\n    },\n\n    uniformTemplates: {\n        ambientCubemapLightColor: {\n            type: '3f',\n            value: function (instance) {\n                var color = instance.color;\n                var intensity = instance.intensity;\n                return [color[0]*intensity, color[1]*intensity, color[2]*intensity];\n            }\n        },\n\n        ambientCubemapLightCubemap: {\n            type: 't',\n            value: function (instance) {\n                return instance.cubemap;\n            }\n        },\n\n        ambientCubemapLightBRDFLookup: {\n            type: 't',\n            value: function (instance) {\n                return instance._brdfLookup;\n            }\n        }\n    }\n    /**\n     * @function\n     * @name clone\n     * @return {clay.light.AmbientCubemap}\n     * @memberOf clay.light.AmbientCubemap.prototype\n     */\n});\n\nexport default AmbientCubemapLight;\n"],"mappings":"AAAA;AACA,OAAOA,KAAK,MAAM,UAAU;AAC5B,OAAOC,WAAW,MAAM,iBAAiB;;AAEzC;AACA;AACA;AACA;AACA;AACA;AACA,IAAIC,mBAAmB,GAAGF,KAAK,CAACG,MAAM,CAAC;EAEnC;AACJ;AACA;AACA;EACIC,OAAO,EAAE,IAAI;EAEb;EACA;;EAEAC,UAAU,EAAE,KAAK;EAEjBC,mBAAmB,EAAE,IAAI;EACzBC,WAAW,EAAE;AAEjB,CAAC,EAAE,wCAAyC;EAExCC,IAAI,EAAE,uBAAuB;EAE7B;AACJ;AACA;AACA;AACA;EACIC,SAAS,EAAE,SAAAA,CAAUC,QAAQ,EAAEC,IAAI,EAAE;IACjC,IAAI,CAACD,QAAQ,CAACE,cAAc,CAAC,wBAAwB,CAAC,EAAE;MACpDC,OAAO,CAACC,IAAI,CAAC,sCAAsC,CAAC;MACpD;IACJ;IACA,IAAI,CAAC,IAAI,CAACP,WAAW,EAAE;MACnB,IAAI,CAACD,mBAAmB,GAAGL,WAAW,CAACc,0BAA0B,CAAC,CAAC;MACnE,IAAI,CAACR,WAAW,GAAGN,WAAW,CAACe,aAAa,CAACN,QAAQ,EAAE,IAAI,CAACJ,mBAAmB,CAAC;IACpF;IACA,IAAIF,OAAO,GAAG,IAAI,CAACA,OAAO;IAC1B,IAAIA,OAAO,CAACa,aAAa,EAAE;MACvB;IACJ;IAEA,IAAIC,MAAM,GAAGjB,WAAW,CAACkB,uBAAuB,CAC5CT,QAAQ,EAAEN,OAAO,EAAE;MACfgB,UAAU,EAAE,IAAI;MAChBC,KAAK,EAAEV,IAAI;MACXW,MAAM,EAAEX;IACZ,CAAC,EAAE,IAAI,CAACL,mBAAmB,EAAE,IAAI,CAACC,WACtC,CAAC;IACD,IAAI,CAACH,OAAO,GAAGc,MAAM,CAACK,cAAc;IACpC,IAAI,CAACnB,OAAO,CAACa,aAAa,GAAG,IAAI;IAEjCb,OAAO,CAACoB,OAAO,CAACd,QAAQ,CAAC;EAC7B,CAAC;EAEDe,aAAa,EAAE,SAAAA,CAAA,EAAY;IACvB,OAAO,IAAI,CAAClB,WAAW;EAC3B,CAAC;EAEDmB,gBAAgB,EAAE;IACdC,wBAAwB,EAAE;MACtBnB,IAAI,EAAE,IAAI;MACVoB,KAAK,EAAE,SAAAA,CAAUC,QAAQ,EAAE;QACvB,IAAIC,KAAK,GAAGD,QAAQ,CAACC,KAAK;QAC1B,IAAIC,SAAS,GAAGF,QAAQ,CAACE,SAAS;QAClC,OAAO,CAACD,KAAK,CAAC,CAAC,CAAC,GAACC,SAAS,EAAED,KAAK,CAAC,CAAC,CAAC,GAACC,SAAS,EAAED,KAAK,CAAC,CAAC,CAAC,GAACC,SAAS,CAAC;MACvE;IACJ,CAAC;IAEDC,0BAA0B,EAAE;MACxBxB,IAAI,EAAE,GAAG;MACToB,KAAK,EAAE,SAAAA,CAAUC,QAAQ,EAAE;QACvB,OAAOA,QAAQ,CAACzB,OAAO;MAC3B;IACJ,CAAC;IAED6B,6BAA6B,EAAE;MAC3BzB,IAAI,EAAE,GAAG;MACToB,KAAK,EAAE,SAAAA,CAAUC,QAAQ,EAAE;QACvB,OAAOA,QAAQ,CAACtB,WAAW;MAC/B;IACJ;EACJ;EACA;AACJ;AACA;AACA;AACA;AACA;AACA,CAAC,CAAC;AAEF,eAAeL,mBAAmB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}