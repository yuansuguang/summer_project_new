{"ast":null,"code":"import \"core-js/modules/es.array-buffer.detached.js\";\nimport \"core-js/modules/es.array-buffer.transfer.js\";\nimport \"core-js/modules/es.array-buffer.transfer-to-fixed-length.js\";\nimport \"core-js/modules/es.typed-array.to-reversed.js\";\nimport \"core-js/modules/es.typed-array.to-sorted.js\";\nimport \"core-js/modules/es.typed-array.with.js\";\n// TODO ECharts GL must be imported whatever component,charts is imported.\nimport '../../echarts-gl';\nimport Line3DSeries from './Line3DSeries';\nimport Line3DView from './Line3DView';\nexport function install(registers) {\n  registers.registerChartView(Line3DView);\n  registers.registerSeriesModel(Line3DSeries);\n  registers.registerLayout(function (ecModel, api) {\n    ecModel.eachSeriesByType('line3D', function (seriesModel) {\n      var data = seriesModel.getData();\n      var coordSys = seriesModel.coordinateSystem;\n      if (coordSys) {\n        if (coordSys.type !== 'cartesian3D') {\n          if (process.env.NODE_ENV !== 'production') {\n            console.error('line3D needs cartesian3D coordinateSystem');\n          }\n          return;\n        }\n        var points = new Float32Array(data.count() * 3);\n        var item = [];\n        var out = [];\n        var coordDims = coordSys.dimensions;\n        var dims = coordDims.map(function (coordDim) {\n          return seriesModel.coordDimToDataDim(coordDim)[0];\n        });\n        if (coordSys) {\n          data.each(dims, function (x, y, z, idx) {\n            item[0] = x;\n            item[1] = y;\n            item[2] = z;\n            coordSys.dataToPoint(item, out);\n            points[idx * 3] = out[0];\n            points[idx * 3 + 1] = out[1];\n            points[idx * 3 + 2] = out[2];\n          });\n        }\n        data.setLayout('points', points);\n      }\n    });\n  });\n}","map":{"version":3,"names":["Line3DSeries","Line3DView","install","registers","registerChartView","registerSeriesModel","registerLayout","ecModel","api","eachSeriesByType","seriesModel","data","getData","coordSys","coordinateSystem","type","process","env","NODE_ENV","console","error","points","Float32Array","count","item","out","coordDims","dimensions","dims","map","coordDim","coordDimToDataDim","each","x","y","z","idx","dataToPoint","setLayout"],"sources":["E:/QuestionairePlanet_Fronted/mytest/node_modules/echarts-gl/lib/chart/line3D/install.js"],"sourcesContent":["// TODO ECharts GL must be imported whatever component,charts is imported.\nimport '../../echarts-gl';\nimport Line3DSeries from './Line3DSeries';\nimport Line3DView from './Line3DView';\nexport function install(registers) {\n  registers.registerChartView(Line3DView);\n  registers.registerSeriesModel(Line3DSeries);\n  registers.registerLayout(function (ecModel, api) {\n    ecModel.eachSeriesByType('line3D', function (seriesModel) {\n      var data = seriesModel.getData();\n      var coordSys = seriesModel.coordinateSystem;\n\n      if (coordSys) {\n        if (coordSys.type !== 'cartesian3D') {\n          if (process.env.NODE_ENV !== 'production') {\n            console.error('line3D needs cartesian3D coordinateSystem');\n          }\n\n          return;\n        }\n\n        var points = new Float32Array(data.count() * 3);\n        var item = [];\n        var out = [];\n        var coordDims = coordSys.dimensions;\n        var dims = coordDims.map(function (coordDim) {\n          return seriesModel.coordDimToDataDim(coordDim)[0];\n        });\n\n        if (coordSys) {\n          data.each(dims, function (x, y, z, idx) {\n            item[0] = x;\n            item[1] = y;\n            item[2] = z;\n            coordSys.dataToPoint(item, out);\n            points[idx * 3] = out[0];\n            points[idx * 3 + 1] = out[1];\n            points[idx * 3 + 2] = out[2];\n          });\n        }\n\n        data.setLayout('points', points);\n      }\n    });\n  });\n}"],"mappings":";;;;;;AAAA;AACA,OAAO,kBAAkB;AACzB,OAAOA,YAAY,MAAM,gBAAgB;AACzC,OAAOC,UAAU,MAAM,cAAc;AACrC,OAAO,SAASC,OAAOA,CAACC,SAAS,EAAE;EACjCA,SAAS,CAACC,iBAAiB,CAACH,UAAU,CAAC;EACvCE,SAAS,CAACE,mBAAmB,CAACL,YAAY,CAAC;EAC3CG,SAAS,CAACG,cAAc,CAAC,UAAUC,OAAO,EAAEC,GAAG,EAAE;IAC/CD,OAAO,CAACE,gBAAgB,CAAC,QAAQ,EAAE,UAAUC,WAAW,EAAE;MACxD,IAAIC,IAAI,GAAGD,WAAW,CAACE,OAAO,CAAC,CAAC;MAChC,IAAIC,QAAQ,GAAGH,WAAW,CAACI,gBAAgB;MAE3C,IAAID,QAAQ,EAAE;QACZ,IAAIA,QAAQ,CAACE,IAAI,KAAK,aAAa,EAAE;UACnC,IAAIC,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,YAAY,EAAE;YACzCC,OAAO,CAACC,KAAK,CAAC,2CAA2C,CAAC;UAC5D;UAEA;QACF;QAEA,IAAIC,MAAM,GAAG,IAAIC,YAAY,CAACX,IAAI,CAACY,KAAK,CAAC,CAAC,GAAG,CAAC,CAAC;QAC/C,IAAIC,IAAI,GAAG,EAAE;QACb,IAAIC,GAAG,GAAG,EAAE;QACZ,IAAIC,SAAS,GAAGb,QAAQ,CAACc,UAAU;QACnC,IAAIC,IAAI,GAAGF,SAAS,CAACG,GAAG,CAAC,UAAUC,QAAQ,EAAE;UAC3C,OAAOpB,WAAW,CAACqB,iBAAiB,CAACD,QAAQ,CAAC,CAAC,CAAC,CAAC;QACnD,CAAC,CAAC;QAEF,IAAIjB,QAAQ,EAAE;UACZF,IAAI,CAACqB,IAAI,CAACJ,IAAI,EAAE,UAAUK,CAAC,EAAEC,CAAC,EAAEC,CAAC,EAAEC,GAAG,EAAE;YACtCZ,IAAI,CAAC,CAAC,CAAC,GAAGS,CAAC;YACXT,IAAI,CAAC,CAAC,CAAC,GAAGU,CAAC;YACXV,IAAI,CAAC,CAAC,CAAC,GAAGW,CAAC;YACXtB,QAAQ,CAACwB,WAAW,CAACb,IAAI,EAAEC,GAAG,CAAC;YAC/BJ,MAAM,CAACe,GAAG,GAAG,CAAC,CAAC,GAAGX,GAAG,CAAC,CAAC,CAAC;YACxBJ,MAAM,CAACe,GAAG,GAAG,CAAC,GAAG,CAAC,CAAC,GAAGX,GAAG,CAAC,CAAC,CAAC;YAC5BJ,MAAM,CAACe,GAAG,GAAG,CAAC,GAAG,CAAC,CAAC,GAAGX,GAAG,CAAC,CAAC,CAAC;UAC9B,CAAC,CAAC;QACJ;QAEAd,IAAI,CAAC2B,SAAS,CAAC,QAAQ,EAAEjB,MAAM,CAAC;MAClC;IACF,CAAC,CAAC;EACJ,CAAC,CAAC;AACJ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}