{"ast":null,"code":"import * as echarts from 'echarts/lib/echarts';\nimport graphicGL from '../../util/graphicGL';\nimport LinesGeometry from '../../util/geometry/Lines3D'; // import TrailMesh from './TrailMesh';\n\nimport TrailMesh2 from './TrailMesh2';\nimport { getItemVisualColor, getItemVisualOpacity } from '../../util/visual';\nimport lines3DGLSL from '../../util/shader/lines3D.glsl.js';\ngraphicGL.Shader.import(lines3DGLSL);\nfunction getCoordSysSize(coordSys) {\n  if (coordSys.radius != null) {\n    return coordSys.radius;\n  }\n  if (coordSys.size != null) {\n    return Math.max(coordSys.size[0], coordSys.size[1], coordSys.size[2]);\n  } else {\n    return 100;\n  }\n}\nexport default echarts.ChartView.extend({\n  type: 'lines3D',\n  __ecgl__: true,\n  init: function (ecModel, api) {\n    this.groupGL = new graphicGL.Node();\n    this._meshLinesMaterial = new graphicGL.Material({\n      shader: graphicGL.createShader('ecgl.meshLines3D'),\n      transparent: true,\n      depthMask: false\n    });\n    this._linesMesh = new graphicGL.Mesh({\n      geometry: new LinesGeometry(),\n      material: this._meshLinesMaterial,\n      $ignorePicking: true\n    }); // this._trailMesh = new TrailMesh();\n\n    this._trailMesh = new TrailMesh2();\n  },\n  render: function (seriesModel, ecModel, api) {\n    this.groupGL.add(this._linesMesh);\n    var coordSys = seriesModel.coordinateSystem;\n    var data = seriesModel.getData();\n    if (coordSys && coordSys.viewGL) {\n      var viewGL = coordSys.viewGL;\n      viewGL.add(this.groupGL);\n      this._updateLines(seriesModel, ecModel, api);\n      var methodName = coordSys.viewGL.isLinearSpace() ? 'define' : 'undefine';\n      this._linesMesh.material[methodName]('fragment', 'SRGB_DECODE');\n      this._trailMesh.material[methodName]('fragment', 'SRGB_DECODE');\n    }\n    var trailMesh = this._trailMesh;\n    trailMesh.stopAnimation();\n    if (seriesModel.get('effect.show')) {\n      this.groupGL.add(trailMesh);\n      trailMesh.updateData(data, api, this._linesMesh.geometry);\n      trailMesh.__time = trailMesh.__time || 0;\n      var time = 3600 * 1000; // 1hour\n\n      this._curveEffectsAnimator = trailMesh.animate('', {\n        loop: true\n      }).when(time, {\n        __time: time\n      }).during(function () {\n        trailMesh.setAnimationTime(trailMesh.__time);\n      }).start();\n    } else {\n      this.groupGL.remove(trailMesh);\n      this._curveEffectsAnimator = null;\n    }\n    this._linesMesh.material.blend = this._trailMesh.material.blend = seriesModel.get('blendMode') === 'lighter' ? graphicGL.additiveBlend : null;\n  },\n  pauseEffect: function () {\n    if (this._curveEffectsAnimator) {\n      this._curveEffectsAnimator.pause();\n    }\n  },\n  resumeEffect: function () {\n    if (this._curveEffectsAnimator) {\n      this._curveEffectsAnimator.resume();\n    }\n  },\n  toggleEffect: function () {\n    var animator = this._curveEffectsAnimator;\n    if (animator) {\n      animator.isPaused() ? animator.resume() : animator.pause();\n    }\n  },\n  _updateLines: function (seriesModel, ecModel, api) {\n    var data = seriesModel.getData();\n    var coordSys = seriesModel.coordinateSystem;\n    var geometry = this._linesMesh.geometry;\n    var isPolyline = seriesModel.get('polyline');\n    geometry.expandLine = true;\n    var size = getCoordSysSize(coordSys);\n    geometry.segmentScale = size / 20;\n    var lineWidthQueryPath = 'lineStyle.width'.split('.');\n    var dpr = api.getDevicePixelRatio();\n    var maxLineWidth = 0;\n    data.each(function (idx) {\n      var itemModel = data.getItemModel(idx);\n      var lineWidth = itemModel.get(lineWidthQueryPath);\n      if (lineWidth == null) {\n        lineWidth = 1;\n      }\n      data.setItemVisual(idx, 'lineWidth', lineWidth);\n      maxLineWidth = Math.max(lineWidth, maxLineWidth);\n    }); // Must set useNativeLine before calling any other methods\n\n    geometry.useNativeLine = false;\n    var nVertex = 0;\n    var nTriangle = 0;\n    data.each(function (idx) {\n      var pts = data.getItemLayout(idx);\n      if (isPolyline) {\n        nVertex += geometry.getPolylineVertexCount(pts);\n        nTriangle += geometry.getPolylineTriangleCount(pts);\n      } else {\n        nVertex += geometry.getCubicCurveVertexCount(pts[0], pts[1], pts[2], pts[3]);\n        nTriangle += geometry.getCubicCurveTriangleCount(pts[0], pts[1], pts[2], pts[3]);\n      }\n    });\n    geometry.setVertexCount(nVertex);\n    geometry.setTriangleCount(nTriangle);\n    geometry.resetOffset();\n    var colorArr = [];\n    data.each(function (idx) {\n      var pts = data.getItemLayout(idx);\n      var color = getItemVisualColor(data, idx);\n      var opacity = getItemVisualOpacity(data, idx);\n      var lineWidth = data.getItemVisual(idx, 'lineWidth') * dpr;\n      if (opacity == null) {\n        opacity = 1;\n      }\n      colorArr = graphicGL.parseColor(color, colorArr);\n      colorArr[3] *= opacity;\n      if (isPolyline) {\n        geometry.addPolyline(pts, colorArr, lineWidth);\n      } else {\n        geometry.addCubicCurve(pts[0], pts[1], pts[2], pts[3], colorArr, lineWidth);\n      }\n    });\n    geometry.dirty();\n  },\n  remove: function () {\n    this.groupGL.removeAll();\n  },\n  dispose: function () {\n    this.groupGL.removeAll();\n  }\n});","map":{"version":3,"names":["echarts","graphicGL","LinesGeometry","TrailMesh2","getItemVisualColor","getItemVisualOpacity","lines3DGLSL","Shader","import","getCoordSysSize","coordSys","radius","size","Math","max","ChartView","extend","type","__ecgl__","init","ecModel","api","groupGL","Node","_meshLinesMaterial","Material","shader","createShader","transparent","depthMask","_linesMesh","Mesh","geometry","material","$ignorePicking","_trailMesh","render","seriesModel","add","coordinateSystem","data","getData","viewGL","_updateLines","methodName","isLinearSpace","trailMesh","stopAnimation","get","updateData","__time","time","_curveEffectsAnimator","animate","loop","when","during","setAnimationTime","start","remove","blend","additiveBlend","pauseEffect","pause","resumeEffect","resume","toggleEffect","animator","isPaused","isPolyline","expandLine","segmentScale","lineWidthQueryPath","split","dpr","getDevicePixelRatio","maxLineWidth","each","idx","itemModel","getItemModel","lineWidth","setItemVisual","useNativeLine","nVertex","nTriangle","pts","getItemLayout","getPolylineVertexCount","getPolylineTriangleCount","getCubicCurveVertexCount","getCubicCurveTriangleCount","setVertexCount","setTriangleCount","resetOffset","colorArr","color","opacity","getItemVisual","parseColor","addPolyline","addCubicCurve","dirty","removeAll","dispose"],"sources":["E:/mytest/node_modules/echarts-gl/lib/chart/lines3D/Lines3DView.js"],"sourcesContent":["import * as echarts from 'echarts/lib/echarts';\nimport graphicGL from '../../util/graphicGL';\nimport LinesGeometry from '../../util/geometry/Lines3D'; // import TrailMesh from './TrailMesh';\n\nimport TrailMesh2 from './TrailMesh2';\nimport { getItemVisualColor, getItemVisualOpacity } from '../../util/visual';\nimport lines3DGLSL from '../../util/shader/lines3D.glsl.js';\ngraphicGL.Shader.import(lines3DGLSL);\n\nfunction getCoordSysSize(coordSys) {\n  if (coordSys.radius != null) {\n    return coordSys.radius;\n  }\n\n  if (coordSys.size != null) {\n    return Math.max(coordSys.size[0], coordSys.size[1], coordSys.size[2]);\n  } else {\n    return 100;\n  }\n}\n\nexport default echarts.ChartView.extend({\n  type: 'lines3D',\n  __ecgl__: true,\n  init: function (ecModel, api) {\n    this.groupGL = new graphicGL.Node();\n    this._meshLinesMaterial = new graphicGL.Material({\n      shader: graphicGL.createShader('ecgl.meshLines3D'),\n      transparent: true,\n      depthMask: false\n    });\n    this._linesMesh = new graphicGL.Mesh({\n      geometry: new LinesGeometry(),\n      material: this._meshLinesMaterial,\n      $ignorePicking: true\n    }); // this._trailMesh = new TrailMesh();\n\n    this._trailMesh = new TrailMesh2();\n  },\n  render: function (seriesModel, ecModel, api) {\n    this.groupGL.add(this._linesMesh);\n    var coordSys = seriesModel.coordinateSystem;\n    var data = seriesModel.getData();\n\n    if (coordSys && coordSys.viewGL) {\n      var viewGL = coordSys.viewGL;\n      viewGL.add(this.groupGL);\n\n      this._updateLines(seriesModel, ecModel, api);\n\n      var methodName = coordSys.viewGL.isLinearSpace() ? 'define' : 'undefine';\n\n      this._linesMesh.material[methodName]('fragment', 'SRGB_DECODE');\n\n      this._trailMesh.material[methodName]('fragment', 'SRGB_DECODE');\n    }\n\n    var trailMesh = this._trailMesh;\n    trailMesh.stopAnimation();\n\n    if (seriesModel.get('effect.show')) {\n      this.groupGL.add(trailMesh);\n      trailMesh.updateData(data, api, this._linesMesh.geometry);\n      trailMesh.__time = trailMesh.__time || 0;\n      var time = 3600 * 1000; // 1hour\n\n      this._curveEffectsAnimator = trailMesh.animate('', {\n        loop: true\n      }).when(time, {\n        __time: time\n      }).during(function () {\n        trailMesh.setAnimationTime(trailMesh.__time);\n      }).start();\n    } else {\n      this.groupGL.remove(trailMesh);\n      this._curveEffectsAnimator = null;\n    }\n\n    this._linesMesh.material.blend = this._trailMesh.material.blend = seriesModel.get('blendMode') === 'lighter' ? graphicGL.additiveBlend : null;\n  },\n  pauseEffect: function () {\n    if (this._curveEffectsAnimator) {\n      this._curveEffectsAnimator.pause();\n    }\n  },\n  resumeEffect: function () {\n    if (this._curveEffectsAnimator) {\n      this._curveEffectsAnimator.resume();\n    }\n  },\n  toggleEffect: function () {\n    var animator = this._curveEffectsAnimator;\n\n    if (animator) {\n      animator.isPaused() ? animator.resume() : animator.pause();\n    }\n  },\n  _updateLines: function (seriesModel, ecModel, api) {\n    var data = seriesModel.getData();\n    var coordSys = seriesModel.coordinateSystem;\n    var geometry = this._linesMesh.geometry;\n    var isPolyline = seriesModel.get('polyline');\n    geometry.expandLine = true;\n    var size = getCoordSysSize(coordSys);\n    geometry.segmentScale = size / 20;\n    var lineWidthQueryPath = 'lineStyle.width'.split('.');\n    var dpr = api.getDevicePixelRatio();\n    var maxLineWidth = 0;\n    data.each(function (idx) {\n      var itemModel = data.getItemModel(idx);\n      var lineWidth = itemModel.get(lineWidthQueryPath);\n\n      if (lineWidth == null) {\n        lineWidth = 1;\n      }\n\n      data.setItemVisual(idx, 'lineWidth', lineWidth);\n      maxLineWidth = Math.max(lineWidth, maxLineWidth);\n    }); // Must set useNativeLine before calling any other methods\n\n    geometry.useNativeLine = false;\n    var nVertex = 0;\n    var nTriangle = 0;\n    data.each(function (idx) {\n      var pts = data.getItemLayout(idx);\n\n      if (isPolyline) {\n        nVertex += geometry.getPolylineVertexCount(pts);\n        nTriangle += geometry.getPolylineTriangleCount(pts);\n      } else {\n        nVertex += geometry.getCubicCurveVertexCount(pts[0], pts[1], pts[2], pts[3]);\n        nTriangle += geometry.getCubicCurveTriangleCount(pts[0], pts[1], pts[2], pts[3]);\n      }\n    });\n    geometry.setVertexCount(nVertex);\n    geometry.setTriangleCount(nTriangle);\n    geometry.resetOffset();\n    var colorArr = [];\n    data.each(function (idx) {\n      var pts = data.getItemLayout(idx);\n      var color = getItemVisualColor(data, idx);\n      var opacity = getItemVisualOpacity(data, idx);\n      var lineWidth = data.getItemVisual(idx, 'lineWidth') * dpr;\n\n      if (opacity == null) {\n        opacity = 1;\n      }\n\n      colorArr = graphicGL.parseColor(color, colorArr);\n      colorArr[3] *= opacity;\n\n      if (isPolyline) {\n        geometry.addPolyline(pts, colorArr, lineWidth);\n      } else {\n        geometry.addCubicCurve(pts[0], pts[1], pts[2], pts[3], colorArr, lineWidth);\n      }\n    });\n    geometry.dirty();\n  },\n  remove: function () {\n    this.groupGL.removeAll();\n  },\n  dispose: function () {\n    this.groupGL.removeAll();\n  }\n});"],"mappings":"AAAA,OAAO,KAAKA,OAAO,MAAM,qBAAqB;AAC9C,OAAOC,SAAS,MAAM,sBAAsB;AAC5C,OAAOC,aAAa,MAAM,6BAA6B,CAAC,CAAC;;AAEzD,OAAOC,UAAU,MAAM,cAAc;AACrC,SAASC,kBAAkB,EAAEC,oBAAoB,QAAQ,mBAAmB;AAC5E,OAAOC,WAAW,MAAM,mCAAmC;AAC3DL,SAAS,CAACM,MAAM,CAACC,MAAM,CAACF,WAAW,CAAC;AAEpC,SAASG,eAAeA,CAACC,QAAQ,EAAE;EACjC,IAAIA,QAAQ,CAACC,MAAM,IAAI,IAAI,EAAE;IAC3B,OAAOD,QAAQ,CAACC,MAAM;EACxB;EAEA,IAAID,QAAQ,CAACE,IAAI,IAAI,IAAI,EAAE;IACzB,OAAOC,IAAI,CAACC,GAAG,CAACJ,QAAQ,CAACE,IAAI,CAAC,CAAC,CAAC,EAAEF,QAAQ,CAACE,IAAI,CAAC,CAAC,CAAC,EAAEF,QAAQ,CAACE,IAAI,CAAC,CAAC,CAAC,CAAC;EACvE,CAAC,MAAM;IACL,OAAO,GAAG;EACZ;AACF;AAEA,eAAeZ,OAAO,CAACe,SAAS,CAACC,MAAM,CAAC;EACtCC,IAAI,EAAE,SAAS;EACfC,QAAQ,EAAE,IAAI;EACdC,IAAI,EAAE,SAAAA,CAAUC,OAAO,EAAEC,GAAG,EAAE;IAC5B,IAAI,CAACC,OAAO,GAAG,IAAIrB,SAAS,CAACsB,IAAI,CAAC,CAAC;IACnC,IAAI,CAACC,kBAAkB,GAAG,IAAIvB,SAAS,CAACwB,QAAQ,CAAC;MAC/CC,MAAM,EAAEzB,SAAS,CAAC0B,YAAY,CAAC,kBAAkB,CAAC;MAClDC,WAAW,EAAE,IAAI;MACjBC,SAAS,EAAE;IACb,CAAC,CAAC;IACF,IAAI,CAACC,UAAU,GAAG,IAAI7B,SAAS,CAAC8B,IAAI,CAAC;MACnCC,QAAQ,EAAE,IAAI9B,aAAa,CAAC,CAAC;MAC7B+B,QAAQ,EAAE,IAAI,CAACT,kBAAkB;MACjCU,cAAc,EAAE;IAClB,CAAC,CAAC,CAAC,CAAC;;IAEJ,IAAI,CAACC,UAAU,GAAG,IAAIhC,UAAU,CAAC,CAAC;EACpC,CAAC;EACDiC,MAAM,EAAE,SAAAA,CAAUC,WAAW,EAAEjB,OAAO,EAAEC,GAAG,EAAE;IAC3C,IAAI,CAACC,OAAO,CAACgB,GAAG,CAAC,IAAI,CAACR,UAAU,CAAC;IACjC,IAAIpB,QAAQ,GAAG2B,WAAW,CAACE,gBAAgB;IAC3C,IAAIC,IAAI,GAAGH,WAAW,CAACI,OAAO,CAAC,CAAC;IAEhC,IAAI/B,QAAQ,IAAIA,QAAQ,CAACgC,MAAM,EAAE;MAC/B,IAAIA,MAAM,GAAGhC,QAAQ,CAACgC,MAAM;MAC5BA,MAAM,CAACJ,GAAG,CAAC,IAAI,CAAChB,OAAO,CAAC;MAExB,IAAI,CAACqB,YAAY,CAACN,WAAW,EAAEjB,OAAO,EAAEC,GAAG,CAAC;MAE5C,IAAIuB,UAAU,GAAGlC,QAAQ,CAACgC,MAAM,CAACG,aAAa,CAAC,CAAC,GAAG,QAAQ,GAAG,UAAU;MAExE,IAAI,CAACf,UAAU,CAACG,QAAQ,CAACW,UAAU,CAAC,CAAC,UAAU,EAAE,aAAa,CAAC;MAE/D,IAAI,CAACT,UAAU,CAACF,QAAQ,CAACW,UAAU,CAAC,CAAC,UAAU,EAAE,aAAa,CAAC;IACjE;IAEA,IAAIE,SAAS,GAAG,IAAI,CAACX,UAAU;IAC/BW,SAAS,CAACC,aAAa,CAAC,CAAC;IAEzB,IAAIV,WAAW,CAACW,GAAG,CAAC,aAAa,CAAC,EAAE;MAClC,IAAI,CAAC1B,OAAO,CAACgB,GAAG,CAACQ,SAAS,CAAC;MAC3BA,SAAS,CAACG,UAAU,CAACT,IAAI,EAAEnB,GAAG,EAAE,IAAI,CAACS,UAAU,CAACE,QAAQ,CAAC;MACzDc,SAAS,CAACI,MAAM,GAAGJ,SAAS,CAACI,MAAM,IAAI,CAAC;MACxC,IAAIC,IAAI,GAAG,IAAI,GAAG,IAAI,CAAC,CAAC;;MAExB,IAAI,CAACC,qBAAqB,GAAGN,SAAS,CAACO,OAAO,CAAC,EAAE,EAAE;QACjDC,IAAI,EAAE;MACR,CAAC,CAAC,CAACC,IAAI,CAACJ,IAAI,EAAE;QACZD,MAAM,EAAEC;MACV,CAAC,CAAC,CAACK,MAAM,CAAC,YAAY;QACpBV,SAAS,CAACW,gBAAgB,CAACX,SAAS,CAACI,MAAM,CAAC;MAC9C,CAAC,CAAC,CAACQ,KAAK,CAAC,CAAC;IACZ,CAAC,MAAM;MACL,IAAI,CAACpC,OAAO,CAACqC,MAAM,CAACb,SAAS,CAAC;MAC9B,IAAI,CAACM,qBAAqB,GAAG,IAAI;IACnC;IAEA,IAAI,CAACtB,UAAU,CAACG,QAAQ,CAAC2B,KAAK,GAAG,IAAI,CAACzB,UAAU,CAACF,QAAQ,CAAC2B,KAAK,GAAGvB,WAAW,CAACW,GAAG,CAAC,WAAW,CAAC,KAAK,SAAS,GAAG/C,SAAS,CAAC4D,aAAa,GAAG,IAAI;EAC/I,CAAC;EACDC,WAAW,EAAE,SAAAA,CAAA,EAAY;IACvB,IAAI,IAAI,CAACV,qBAAqB,EAAE;MAC9B,IAAI,CAACA,qBAAqB,CAACW,KAAK,CAAC,CAAC;IACpC;EACF,CAAC;EACDC,YAAY,EAAE,SAAAA,CAAA,EAAY;IACxB,IAAI,IAAI,CAACZ,qBAAqB,EAAE;MAC9B,IAAI,CAACA,qBAAqB,CAACa,MAAM,CAAC,CAAC;IACrC;EACF,CAAC;EACDC,YAAY,EAAE,SAAAA,CAAA,EAAY;IACxB,IAAIC,QAAQ,GAAG,IAAI,CAACf,qBAAqB;IAEzC,IAAIe,QAAQ,EAAE;MACZA,QAAQ,CAACC,QAAQ,CAAC,CAAC,GAAGD,QAAQ,CAACF,MAAM,CAAC,CAAC,GAAGE,QAAQ,CAACJ,KAAK,CAAC,CAAC;IAC5D;EACF,CAAC;EACDpB,YAAY,EAAE,SAAAA,CAAUN,WAAW,EAAEjB,OAAO,EAAEC,GAAG,EAAE;IACjD,IAAImB,IAAI,GAAGH,WAAW,CAACI,OAAO,CAAC,CAAC;IAChC,IAAI/B,QAAQ,GAAG2B,WAAW,CAACE,gBAAgB;IAC3C,IAAIP,QAAQ,GAAG,IAAI,CAACF,UAAU,CAACE,QAAQ;IACvC,IAAIqC,UAAU,GAAGhC,WAAW,CAACW,GAAG,CAAC,UAAU,CAAC;IAC5ChB,QAAQ,CAACsC,UAAU,GAAG,IAAI;IAC1B,IAAI1D,IAAI,GAAGH,eAAe,CAACC,QAAQ,CAAC;IACpCsB,QAAQ,CAACuC,YAAY,GAAG3D,IAAI,GAAG,EAAE;IACjC,IAAI4D,kBAAkB,GAAG,iBAAiB,CAACC,KAAK,CAAC,GAAG,CAAC;IACrD,IAAIC,GAAG,GAAGrD,GAAG,CAACsD,mBAAmB,CAAC,CAAC;IACnC,IAAIC,YAAY,GAAG,CAAC;IACpBpC,IAAI,CAACqC,IAAI,CAAC,UAAUC,GAAG,EAAE;MACvB,IAAIC,SAAS,GAAGvC,IAAI,CAACwC,YAAY,CAACF,GAAG,CAAC;MACtC,IAAIG,SAAS,GAAGF,SAAS,CAAC/B,GAAG,CAACwB,kBAAkB,CAAC;MAEjD,IAAIS,SAAS,IAAI,IAAI,EAAE;QACrBA,SAAS,GAAG,CAAC;MACf;MAEAzC,IAAI,CAAC0C,aAAa,CAACJ,GAAG,EAAE,WAAW,EAAEG,SAAS,CAAC;MAC/CL,YAAY,GAAG/D,IAAI,CAACC,GAAG,CAACmE,SAAS,EAAEL,YAAY,CAAC;IAClD,CAAC,CAAC,CAAC,CAAC;;IAEJ5C,QAAQ,CAACmD,aAAa,GAAG,KAAK;IAC9B,IAAIC,OAAO,GAAG,CAAC;IACf,IAAIC,SAAS,GAAG,CAAC;IACjB7C,IAAI,CAACqC,IAAI,CAAC,UAAUC,GAAG,EAAE;MACvB,IAAIQ,GAAG,GAAG9C,IAAI,CAAC+C,aAAa,CAACT,GAAG,CAAC;MAEjC,IAAIT,UAAU,EAAE;QACde,OAAO,IAAIpD,QAAQ,CAACwD,sBAAsB,CAACF,GAAG,CAAC;QAC/CD,SAAS,IAAIrD,QAAQ,CAACyD,wBAAwB,CAACH,GAAG,CAAC;MACrD,CAAC,MAAM;QACLF,OAAO,IAAIpD,QAAQ,CAAC0D,wBAAwB,CAACJ,GAAG,CAAC,CAAC,CAAC,EAAEA,GAAG,CAAC,CAAC,CAAC,EAAEA,GAAG,CAAC,CAAC,CAAC,EAAEA,GAAG,CAAC,CAAC,CAAC,CAAC;QAC5ED,SAAS,IAAIrD,QAAQ,CAAC2D,0BAA0B,CAACL,GAAG,CAAC,CAAC,CAAC,EAAEA,GAAG,CAAC,CAAC,CAAC,EAAEA,GAAG,CAAC,CAAC,CAAC,EAAEA,GAAG,CAAC,CAAC,CAAC,CAAC;MAClF;IACF,CAAC,CAAC;IACFtD,QAAQ,CAAC4D,cAAc,CAACR,OAAO,CAAC;IAChCpD,QAAQ,CAAC6D,gBAAgB,CAACR,SAAS,CAAC;IACpCrD,QAAQ,CAAC8D,WAAW,CAAC,CAAC;IACtB,IAAIC,QAAQ,GAAG,EAAE;IACjBvD,IAAI,CAACqC,IAAI,CAAC,UAAUC,GAAG,EAAE;MACvB,IAAIQ,GAAG,GAAG9C,IAAI,CAAC+C,aAAa,CAACT,GAAG,CAAC;MACjC,IAAIkB,KAAK,GAAG5F,kBAAkB,CAACoC,IAAI,EAAEsC,GAAG,CAAC;MACzC,IAAImB,OAAO,GAAG5F,oBAAoB,CAACmC,IAAI,EAAEsC,GAAG,CAAC;MAC7C,IAAIG,SAAS,GAAGzC,IAAI,CAAC0D,aAAa,CAACpB,GAAG,EAAE,WAAW,CAAC,GAAGJ,GAAG;MAE1D,IAAIuB,OAAO,IAAI,IAAI,EAAE;QACnBA,OAAO,GAAG,CAAC;MACb;MAEAF,QAAQ,GAAG9F,SAAS,CAACkG,UAAU,CAACH,KAAK,EAAED,QAAQ,CAAC;MAChDA,QAAQ,CAAC,CAAC,CAAC,IAAIE,OAAO;MAEtB,IAAI5B,UAAU,EAAE;QACdrC,QAAQ,CAACoE,WAAW,CAACd,GAAG,EAAES,QAAQ,EAAEd,SAAS,CAAC;MAChD,CAAC,MAAM;QACLjD,QAAQ,CAACqE,aAAa,CAACf,GAAG,CAAC,CAAC,CAAC,EAAEA,GAAG,CAAC,CAAC,CAAC,EAAEA,GAAG,CAAC,CAAC,CAAC,EAAEA,GAAG,CAAC,CAAC,CAAC,EAAES,QAAQ,EAAEd,SAAS,CAAC;MAC7E;IACF,CAAC,CAAC;IACFjD,QAAQ,CAACsE,KAAK,CAAC,CAAC;EAClB,CAAC;EACD3C,MAAM,EAAE,SAAAA,CAAA,EAAY;IAClB,IAAI,CAACrC,OAAO,CAACiF,SAAS,CAAC,CAAC;EAC1B,CAAC;EACDC,OAAO,EAAE,SAAAA,CAAA,EAAY;IACnB,IAAI,CAAClF,OAAO,CAACiF,SAAS,CAAC,CAAC;EAC1B;AACF,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}