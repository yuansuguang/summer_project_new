{"ast":null,"code":"/* Copyright (c) 2013, Brandon Jones, Colin MacKenzie IV. All rights reserved.\n\nRedistribution and use in source and binary forms, with or without modification,\nare permitted provided that the following conditions are met:\n\n  * Redistributions of source code must retain the above copyright notice, this\n    list of conditions and the following disclaimer.\n  * Redistributions in binary form must reproduce the above copyright notice,\n    this list of conditions and the following disclaimer in the documentation\n    and/or other materials provided with the distribution.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\nANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\nWARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR\nANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\nLOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\nANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\nSOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. */\n\nimport { GLMAT_EPSILON, GLMAT_ARRAY_TYPE } from './common';\n\n/**\n * @class 4x4 Matrix\n * @name mat4\n */\n\nvar mat4 = {};\n\n/**\n * Creates a new identity mat4\n *\n * @returns {mat4} a new 4x4 matrix\n */\nmat4.create = function () {\n  var out = new GLMAT_ARRAY_TYPE(16);\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = 1;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 1;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n};\n\n/**\n * Creates a new mat4 initialized with values from an existing matrix\n *\n * @param {mat4} a matrix to clone\n * @returns {mat4} a new 4x4 matrix\n */\nmat4.clone = function (a) {\n  var out = new GLMAT_ARRAY_TYPE(16);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  out[9] = a[9];\n  out[10] = a[10];\n  out[11] = a[11];\n  out[12] = a[12];\n  out[13] = a[13];\n  out[14] = a[14];\n  out[15] = a[15];\n  return out;\n};\n\n/**\n * Copy the values from one mat4 to another\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the source matrix\n * @returns {mat4} out\n */\nmat4.copy = function (out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  out[9] = a[9];\n  out[10] = a[10];\n  out[11] = a[11];\n  out[12] = a[12];\n  out[13] = a[13];\n  out[14] = a[14];\n  out[15] = a[15];\n  return out;\n};\n\n/**\n * Set a mat4 to the identity matrix\n *\n * @param {mat4} out the receiving matrix\n * @returns {mat4} out\n */\nmat4.identity = function (out) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = 1;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 1;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n};\n\n/**\n * Transpose the values of a mat4\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the source matrix\n * @returns {mat4} out\n */\nmat4.transpose = function (out, a) {\n  // If we are transposing ourselves we can skip a few steps but have to cache some values\n  if (out === a) {\n    var a01 = a[1],\n      a02 = a[2],\n      a03 = a[3],\n      a12 = a[6],\n      a13 = a[7],\n      a23 = a[11];\n    out[1] = a[4];\n    out[2] = a[8];\n    out[3] = a[12];\n    out[4] = a01;\n    out[6] = a[9];\n    out[7] = a[13];\n    out[8] = a02;\n    out[9] = a12;\n    out[11] = a[14];\n    out[12] = a03;\n    out[13] = a13;\n    out[14] = a23;\n  } else {\n    out[0] = a[0];\n    out[1] = a[4];\n    out[2] = a[8];\n    out[3] = a[12];\n    out[4] = a[1];\n    out[5] = a[5];\n    out[6] = a[9];\n    out[7] = a[13];\n    out[8] = a[2];\n    out[9] = a[6];\n    out[10] = a[10];\n    out[11] = a[14];\n    out[12] = a[3];\n    out[13] = a[7];\n    out[14] = a[11];\n    out[15] = a[15];\n  }\n  return out;\n};\n\n/**\n * Inverts a mat4\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the source matrix\n * @returns {mat4} out\n */\nmat4.invert = function (out, a) {\n  var a00 = a[0],\n    a01 = a[1],\n    a02 = a[2],\n    a03 = a[3],\n    a10 = a[4],\n    a11 = a[5],\n    a12 = a[6],\n    a13 = a[7],\n    a20 = a[8],\n    a21 = a[9],\n    a22 = a[10],\n    a23 = a[11],\n    a30 = a[12],\n    a31 = a[13],\n    a32 = a[14],\n    a33 = a[15],\n    b00 = a00 * a11 - a01 * a10,\n    b01 = a00 * a12 - a02 * a10,\n    b02 = a00 * a13 - a03 * a10,\n    b03 = a01 * a12 - a02 * a11,\n    b04 = a01 * a13 - a03 * a11,\n    b05 = a02 * a13 - a03 * a12,\n    b06 = a20 * a31 - a21 * a30,\n    b07 = a20 * a32 - a22 * a30,\n    b08 = a20 * a33 - a23 * a30,\n    b09 = a21 * a32 - a22 * a31,\n    b10 = a21 * a33 - a23 * a31,\n    b11 = a22 * a33 - a23 * a32,\n    // Calculate the determinant\n    det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n  if (!det) {\n    return null;\n  }\n  det = 1.0 / det;\n  out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;\n  out[1] = (a02 * b10 - a01 * b11 - a03 * b09) * det;\n  out[2] = (a31 * b05 - a32 * b04 + a33 * b03) * det;\n  out[3] = (a22 * b04 - a21 * b05 - a23 * b03) * det;\n  out[4] = (a12 * b08 - a10 * b11 - a13 * b07) * det;\n  out[5] = (a00 * b11 - a02 * b08 + a03 * b07) * det;\n  out[6] = (a32 * b02 - a30 * b05 - a33 * b01) * det;\n  out[7] = (a20 * b05 - a22 * b02 + a23 * b01) * det;\n  out[8] = (a10 * b10 - a11 * b08 + a13 * b06) * det;\n  out[9] = (a01 * b08 - a00 * b10 - a03 * b06) * det;\n  out[10] = (a30 * b04 - a31 * b02 + a33 * b00) * det;\n  out[11] = (a21 * b02 - a20 * b04 - a23 * b00) * det;\n  out[12] = (a11 * b07 - a10 * b09 - a12 * b06) * det;\n  out[13] = (a00 * b09 - a01 * b07 + a02 * b06) * det;\n  out[14] = (a31 * b01 - a30 * b03 - a32 * b00) * det;\n  out[15] = (a20 * b03 - a21 * b01 + a22 * b00) * det;\n  return out;\n};\n\n/**\n * Calculates the adjugate of a mat4\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the source matrix\n * @returns {mat4} out\n */\nmat4.adjoint = function (out, a) {\n  var a00 = a[0],\n    a01 = a[1],\n    a02 = a[2],\n    a03 = a[3],\n    a10 = a[4],\n    a11 = a[5],\n    a12 = a[6],\n    a13 = a[7],\n    a20 = a[8],\n    a21 = a[9],\n    a22 = a[10],\n    a23 = a[11],\n    a30 = a[12],\n    a31 = a[13],\n    a32 = a[14],\n    a33 = a[15];\n  out[0] = a11 * (a22 * a33 - a23 * a32) - a21 * (a12 * a33 - a13 * a32) + a31 * (a12 * a23 - a13 * a22);\n  out[1] = -(a01 * (a22 * a33 - a23 * a32) - a21 * (a02 * a33 - a03 * a32) + a31 * (a02 * a23 - a03 * a22));\n  out[2] = a01 * (a12 * a33 - a13 * a32) - a11 * (a02 * a33 - a03 * a32) + a31 * (a02 * a13 - a03 * a12);\n  out[3] = -(a01 * (a12 * a23 - a13 * a22) - a11 * (a02 * a23 - a03 * a22) + a21 * (a02 * a13 - a03 * a12));\n  out[4] = -(a10 * (a22 * a33 - a23 * a32) - a20 * (a12 * a33 - a13 * a32) + a30 * (a12 * a23 - a13 * a22));\n  out[5] = a00 * (a22 * a33 - a23 * a32) - a20 * (a02 * a33 - a03 * a32) + a30 * (a02 * a23 - a03 * a22);\n  out[6] = -(a00 * (a12 * a33 - a13 * a32) - a10 * (a02 * a33 - a03 * a32) + a30 * (a02 * a13 - a03 * a12));\n  out[7] = a00 * (a12 * a23 - a13 * a22) - a10 * (a02 * a23 - a03 * a22) + a20 * (a02 * a13 - a03 * a12);\n  out[8] = a10 * (a21 * a33 - a23 * a31) - a20 * (a11 * a33 - a13 * a31) + a30 * (a11 * a23 - a13 * a21);\n  out[9] = -(a00 * (a21 * a33 - a23 * a31) - a20 * (a01 * a33 - a03 * a31) + a30 * (a01 * a23 - a03 * a21));\n  out[10] = a00 * (a11 * a33 - a13 * a31) - a10 * (a01 * a33 - a03 * a31) + a30 * (a01 * a13 - a03 * a11);\n  out[11] = -(a00 * (a11 * a23 - a13 * a21) - a10 * (a01 * a23 - a03 * a21) + a20 * (a01 * a13 - a03 * a11));\n  out[12] = -(a10 * (a21 * a32 - a22 * a31) - a20 * (a11 * a32 - a12 * a31) + a30 * (a11 * a22 - a12 * a21));\n  out[13] = a00 * (a21 * a32 - a22 * a31) - a20 * (a01 * a32 - a02 * a31) + a30 * (a01 * a22 - a02 * a21);\n  out[14] = -(a00 * (a11 * a32 - a12 * a31) - a10 * (a01 * a32 - a02 * a31) + a30 * (a01 * a12 - a02 * a11));\n  out[15] = a00 * (a11 * a22 - a12 * a21) - a10 * (a01 * a22 - a02 * a21) + a20 * (a01 * a12 - a02 * a11);\n  return out;\n};\n\n/**\n * Calculates the determinant of a mat4\n *\n * @param {mat4} a the source matrix\n * @returns {Number} determinant of a\n */\nmat4.determinant = function (a) {\n  var a00 = a[0],\n    a01 = a[1],\n    a02 = a[2],\n    a03 = a[3],\n    a10 = a[4],\n    a11 = a[5],\n    a12 = a[6],\n    a13 = a[7],\n    a20 = a[8],\n    a21 = a[9],\n    a22 = a[10],\n    a23 = a[11],\n    a30 = a[12],\n    a31 = a[13],\n    a32 = a[14],\n    a33 = a[15],\n    b00 = a00 * a11 - a01 * a10,\n    b01 = a00 * a12 - a02 * a10,\n    b02 = a00 * a13 - a03 * a10,\n    b03 = a01 * a12 - a02 * a11,\n    b04 = a01 * a13 - a03 * a11,\n    b05 = a02 * a13 - a03 * a12,\n    b06 = a20 * a31 - a21 * a30,\n    b07 = a20 * a32 - a22 * a30,\n    b08 = a20 * a33 - a23 * a30,\n    b09 = a21 * a32 - a22 * a31,\n    b10 = a21 * a33 - a23 * a31,\n    b11 = a22 * a33 - a23 * a32;\n\n  // Calculate the determinant\n  return b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n};\n\n/**\n * Multiplies two mat4's\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the first operand\n * @param {mat4} b the second operand\n * @returns {mat4} out\n */\nmat4.multiply = function (out, a, b) {\n  var a00 = a[0],\n    a01 = a[1],\n    a02 = a[2],\n    a03 = a[3],\n    a10 = a[4],\n    a11 = a[5],\n    a12 = a[6],\n    a13 = a[7],\n    a20 = a[8],\n    a21 = a[9],\n    a22 = a[10],\n    a23 = a[11],\n    a30 = a[12],\n    a31 = a[13],\n    a32 = a[14],\n    a33 = a[15];\n\n  // Cache only the current line of the second matrix\n  var b0 = b[0],\n    b1 = b[1],\n    b2 = b[2],\n    b3 = b[3];\n  out[0] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[1] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[2] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[3] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  b0 = b[4];\n  b1 = b[5];\n  b2 = b[6];\n  b3 = b[7];\n  out[4] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[5] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[6] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[7] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  b0 = b[8];\n  b1 = b[9];\n  b2 = b[10];\n  b3 = b[11];\n  out[8] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[9] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[10] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[11] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  b0 = b[12];\n  b1 = b[13];\n  b2 = b[14];\n  b3 = b[15];\n  out[12] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[13] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[14] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[15] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  return out;\n};\n\n/**\n * Multiplies two affine mat4's\n * Add by https://github.com/pissang\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the first operand\n * @param {mat4} b the second operand\n * @returns {mat4} out\n */\nmat4.multiplyAffine = function (out, a, b) {\n  var a00 = a[0],\n    a01 = a[1],\n    a02 = a[2],\n    a10 = a[4],\n    a11 = a[5],\n    a12 = a[6],\n    a20 = a[8],\n    a21 = a[9],\n    a22 = a[10],\n    a30 = a[12],\n    a31 = a[13],\n    a32 = a[14];\n\n  // Cache only the current line of the second matrix\n  var b0 = b[0],\n    b1 = b[1],\n    b2 = b[2];\n  out[0] = b0 * a00 + b1 * a10 + b2 * a20;\n  out[1] = b0 * a01 + b1 * a11 + b2 * a21;\n  out[2] = b0 * a02 + b1 * a12 + b2 * a22;\n  // out[3] = 0;\n\n  b0 = b[4];\n  b1 = b[5];\n  b2 = b[6];\n  out[4] = b0 * a00 + b1 * a10 + b2 * a20;\n  out[5] = b0 * a01 + b1 * a11 + b2 * a21;\n  out[6] = b0 * a02 + b1 * a12 + b2 * a22;\n  // out[7] = 0;\n\n  b0 = b[8];\n  b1 = b[9];\n  b2 = b[10];\n  out[8] = b0 * a00 + b1 * a10 + b2 * a20;\n  out[9] = b0 * a01 + b1 * a11 + b2 * a21;\n  out[10] = b0 * a02 + b1 * a12 + b2 * a22;\n  // out[11] = 0;\n\n  b0 = b[12];\n  b1 = b[13];\n  b2 = b[14];\n  out[12] = b0 * a00 + b1 * a10 + b2 * a20 + a30;\n  out[13] = b0 * a01 + b1 * a11 + b2 * a21 + a31;\n  out[14] = b0 * a02 + b1 * a12 + b2 * a22 + a32;\n  // out[15] = 1;\n  return out;\n};\n\n/**\n * Alias for {@link mat4.multiply}\n * @function\n */\nmat4.mul = mat4.multiply;\n\n/**\n * Alias for {@link mat4.multiplyAffine}\n * @function\n */\nmat4.mulAffine = mat4.multiplyAffine;\n/**\n * Translate a mat4 by the given vector\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the matrix to translate\n * @param {vec3} v vector to translate by\n * @returns {mat4} out\n */\nmat4.translate = function (out, a, v) {\n  var x = v[0],\n    y = v[1],\n    z = v[2],\n    a00,\n    a01,\n    a02,\n    a03,\n    a10,\n    a11,\n    a12,\n    a13,\n    a20,\n    a21,\n    a22,\n    a23;\n  if (a === out) {\n    out[12] = a[0] * x + a[4] * y + a[8] * z + a[12];\n    out[13] = a[1] * x + a[5] * y + a[9] * z + a[13];\n    out[14] = a[2] * x + a[6] * y + a[10] * z + a[14];\n    out[15] = a[3] * x + a[7] * y + a[11] * z + a[15];\n  } else {\n    a00 = a[0];\n    a01 = a[1];\n    a02 = a[2];\n    a03 = a[3];\n    a10 = a[4];\n    a11 = a[5];\n    a12 = a[6];\n    a13 = a[7];\n    a20 = a[8];\n    a21 = a[9];\n    a22 = a[10];\n    a23 = a[11];\n    out[0] = a00;\n    out[1] = a01;\n    out[2] = a02;\n    out[3] = a03;\n    out[4] = a10;\n    out[5] = a11;\n    out[6] = a12;\n    out[7] = a13;\n    out[8] = a20;\n    out[9] = a21;\n    out[10] = a22;\n    out[11] = a23;\n    out[12] = a00 * x + a10 * y + a20 * z + a[12];\n    out[13] = a01 * x + a11 * y + a21 * z + a[13];\n    out[14] = a02 * x + a12 * y + a22 * z + a[14];\n    out[15] = a03 * x + a13 * y + a23 * z + a[15];\n  }\n  return out;\n};\n\n/**\n * Scales the mat4 by the dimensions in the given vec3\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the matrix to scale\n * @param {vec3} v the vec3 to scale the matrix by\n * @returns {mat4} out\n **/\nmat4.scale = function (out, a, v) {\n  var x = v[0],\n    y = v[1],\n    z = v[2];\n  out[0] = a[0] * x;\n  out[1] = a[1] * x;\n  out[2] = a[2] * x;\n  out[3] = a[3] * x;\n  out[4] = a[4] * y;\n  out[5] = a[5] * y;\n  out[6] = a[6] * y;\n  out[7] = a[7] * y;\n  out[8] = a[8] * z;\n  out[9] = a[9] * z;\n  out[10] = a[10] * z;\n  out[11] = a[11] * z;\n  out[12] = a[12];\n  out[13] = a[13];\n  out[14] = a[14];\n  out[15] = a[15];\n  return out;\n};\n\n/**\n * Rotates a mat4 by the given angle\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @param {vec3} axis the axis to rotate around\n * @returns {mat4} out\n */\nmat4.rotate = function (out, a, rad, axis) {\n  var x = axis[0],\n    y = axis[1],\n    z = axis[2],\n    len = Math.sqrt(x * x + y * y + z * z),\n    s,\n    c,\n    t,\n    a00,\n    a01,\n    a02,\n    a03,\n    a10,\n    a11,\n    a12,\n    a13,\n    a20,\n    a21,\n    a22,\n    a23,\n    b00,\n    b01,\n    b02,\n    b10,\n    b11,\n    b12,\n    b20,\n    b21,\n    b22;\n  if (Math.abs(len) < GLMAT_EPSILON) {\n    return null;\n  }\n  len = 1 / len;\n  x *= len;\n  y *= len;\n  z *= len;\n  s = Math.sin(rad);\n  c = Math.cos(rad);\n  t = 1 - c;\n  a00 = a[0];\n  a01 = a[1];\n  a02 = a[2];\n  a03 = a[3];\n  a10 = a[4];\n  a11 = a[5];\n  a12 = a[6];\n  a13 = a[7];\n  a20 = a[8];\n  a21 = a[9];\n  a22 = a[10];\n  a23 = a[11];\n\n  // Construct the elements of the rotation matrix\n  b00 = x * x * t + c;\n  b01 = y * x * t + z * s;\n  b02 = z * x * t - y * s;\n  b10 = x * y * t - z * s;\n  b11 = y * y * t + c;\n  b12 = z * y * t + x * s;\n  b20 = x * z * t + y * s;\n  b21 = y * z * t - x * s;\n  b22 = z * z * t + c;\n\n  // Perform rotation-specific matrix multiplication\n  out[0] = a00 * b00 + a10 * b01 + a20 * b02;\n  out[1] = a01 * b00 + a11 * b01 + a21 * b02;\n  out[2] = a02 * b00 + a12 * b01 + a22 * b02;\n  out[3] = a03 * b00 + a13 * b01 + a23 * b02;\n  out[4] = a00 * b10 + a10 * b11 + a20 * b12;\n  out[5] = a01 * b10 + a11 * b11 + a21 * b12;\n  out[6] = a02 * b10 + a12 * b11 + a22 * b12;\n  out[7] = a03 * b10 + a13 * b11 + a23 * b12;\n  out[8] = a00 * b20 + a10 * b21 + a20 * b22;\n  out[9] = a01 * b20 + a11 * b21 + a21 * b22;\n  out[10] = a02 * b20 + a12 * b21 + a22 * b22;\n  out[11] = a03 * b20 + a13 * b21 + a23 * b22;\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged last row\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  }\n  return out;\n};\n\n/**\n * Rotates a matrix by the given angle around the X axis\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\nmat4.rotateX = function (out, a, rad) {\n  var s = Math.sin(rad),\n    c = Math.cos(rad),\n    a10 = a[4],\n    a11 = a[5],\n    a12 = a[6],\n    a13 = a[7],\n    a20 = a[8],\n    a21 = a[9],\n    a22 = a[10],\n    a23 = a[11];\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged rows\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    out[3] = a[3];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  }\n\n  // Perform axis-specific matrix multiplication\n  out[4] = a10 * c + a20 * s;\n  out[5] = a11 * c + a21 * s;\n  out[6] = a12 * c + a22 * s;\n  out[7] = a13 * c + a23 * s;\n  out[8] = a20 * c - a10 * s;\n  out[9] = a21 * c - a11 * s;\n  out[10] = a22 * c - a12 * s;\n  out[11] = a23 * c - a13 * s;\n  return out;\n};\n\n/**\n * Rotates a matrix by the given angle around the Y axis\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\nmat4.rotateY = function (out, a, rad) {\n  var s = Math.sin(rad),\n    c = Math.cos(rad),\n    a00 = a[0],\n    a01 = a[1],\n    a02 = a[2],\n    a03 = a[3],\n    a20 = a[8],\n    a21 = a[9],\n    a22 = a[10],\n    a23 = a[11];\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged rows\n    out[4] = a[4];\n    out[5] = a[5];\n    out[6] = a[6];\n    out[7] = a[7];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  }\n\n  // Perform axis-specific matrix multiplication\n  out[0] = a00 * c - a20 * s;\n  out[1] = a01 * c - a21 * s;\n  out[2] = a02 * c - a22 * s;\n  out[3] = a03 * c - a23 * s;\n  out[8] = a00 * s + a20 * c;\n  out[9] = a01 * s + a21 * c;\n  out[10] = a02 * s + a22 * c;\n  out[11] = a03 * s + a23 * c;\n  return out;\n};\n\n/**\n * Rotates a matrix by the given angle around the Z axis\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\nmat4.rotateZ = function (out, a, rad) {\n  var s = Math.sin(rad),\n    c = Math.cos(rad),\n    a00 = a[0],\n    a01 = a[1],\n    a02 = a[2],\n    a03 = a[3],\n    a10 = a[4],\n    a11 = a[5],\n    a12 = a[6],\n    a13 = a[7];\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged last row\n    out[8] = a[8];\n    out[9] = a[9];\n    out[10] = a[10];\n    out[11] = a[11];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  }\n\n  // Perform axis-specific matrix multiplication\n  out[0] = a00 * c + a10 * s;\n  out[1] = a01 * c + a11 * s;\n  out[2] = a02 * c + a12 * s;\n  out[3] = a03 * c + a13 * s;\n  out[4] = a10 * c - a00 * s;\n  out[5] = a11 * c - a01 * s;\n  out[6] = a12 * c - a02 * s;\n  out[7] = a13 * c - a03 * s;\n  return out;\n};\n\n/**\n * Creates a matrix from a quaternion rotation and vector translation\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.translate(dest, vec);\n *     var quatMat = mat4.create();\n *     quat4.toMat4(quat, quatMat);\n *     mat4.multiply(dest, quatMat);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {quat4} q Rotation quaternion\n * @param {vec3} v Translation vector\n * @returns {mat4} out\n */\nmat4.fromRotationTranslation = function (out, q, v) {\n  // Quaternion math\n  var x = q[0],\n    y = q[1],\n    z = q[2],\n    w = q[3],\n    x2 = x + x,\n    y2 = y + y,\n    z2 = z + z,\n    xx = x * x2,\n    xy = x * y2,\n    xz = x * z2,\n    yy = y * y2,\n    yz = y * z2,\n    zz = z * z2,\n    wx = w * x2,\n    wy = w * y2,\n    wz = w * z2;\n  out[0] = 1 - (yy + zz);\n  out[1] = xy + wz;\n  out[2] = xz - wy;\n  out[3] = 0;\n  out[4] = xy - wz;\n  out[5] = 1 - (xx + zz);\n  out[6] = yz + wx;\n  out[7] = 0;\n  out[8] = xz + wy;\n  out[9] = yz - wx;\n  out[10] = 1 - (xx + yy);\n  out[11] = 0;\n  out[12] = v[0];\n  out[13] = v[1];\n  out[14] = v[2];\n  out[15] = 1;\n  return out;\n};\nmat4.fromQuat = function (out, q) {\n  var x = q[0],\n    y = q[1],\n    z = q[2],\n    w = q[3],\n    x2 = x + x,\n    y2 = y + y,\n    z2 = z + z,\n    xx = x * x2,\n    yx = y * x2,\n    yy = y * y2,\n    zx = z * x2,\n    zy = z * y2,\n    zz = z * z2,\n    wx = w * x2,\n    wy = w * y2,\n    wz = w * z2;\n  out[0] = 1 - yy - zz;\n  out[1] = yx + wz;\n  out[2] = zx - wy;\n  out[3] = 0;\n  out[4] = yx - wz;\n  out[5] = 1 - xx - zz;\n  out[6] = zy + wx;\n  out[7] = 0;\n  out[8] = zx + wy;\n  out[9] = zy - wx;\n  out[10] = 1 - xx - yy;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n};\n\n/**\n * Generates a frustum matrix with the given bounds\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {Number} left Left bound of the frustum\n * @param {Number} right Right bound of the frustum\n * @param {Number} bottom Bottom bound of the frustum\n * @param {Number} top Top bound of the frustum\n * @param {Number} near Near bound of the frustum\n * @param {Number} far Far bound of the frustum\n * @returns {mat4} out\n */\nmat4.frustum = function (out, left, right, bottom, top, near, far) {\n  var rl = 1 / (right - left),\n    tb = 1 / (top - bottom),\n    nf = 1 / (near - far);\n  out[0] = near * 2 * rl;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = near * 2 * tb;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = (right + left) * rl;\n  out[9] = (top + bottom) * tb;\n  out[10] = (far + near) * nf;\n  out[11] = -1;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = far * near * 2 * nf;\n  out[15] = 0;\n  return out;\n};\n\n/**\n * Generates a perspective projection matrix with the given bounds\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {number} fovy Vertical field of view in radians\n * @param {number} aspect Aspect ratio. typically viewport width/height\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum\n * @returns {mat4} out\n */\nmat4.perspective = function (out, fovy, aspect, near, far) {\n  var f = 1.0 / Math.tan(fovy / 2),\n    nf = 1 / (near - far);\n  out[0] = f / aspect;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = f;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = (far + near) * nf;\n  out[11] = -1;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 2 * far * near * nf;\n  out[15] = 0;\n  return out;\n};\n\n/**\n * Generates a orthogonal projection matrix with the given bounds\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {number} left Left bound of the frustum\n * @param {number} right Right bound of the frustum\n * @param {number} bottom Bottom bound of the frustum\n * @param {number} top Top bound of the frustum\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum\n * @returns {mat4} out\n */\nmat4.ortho = function (out, left, right, bottom, top, near, far) {\n  var lr = 1 / (left - right),\n    bt = 1 / (bottom - top),\n    nf = 1 / (near - far);\n  out[0] = -2 * lr;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = -2 * bt;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 2 * nf;\n  out[11] = 0;\n  out[12] = (left + right) * lr;\n  out[13] = (top + bottom) * bt;\n  out[14] = (far + near) * nf;\n  out[15] = 1;\n  return out;\n};\n\n/**\n * Generates a look-at matrix with the given eye position, focal point, and up axis\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {vec3} eye Position of the viewer\n * @param {vec3} center Point the viewer is looking at\n * @param {vec3} up vec3 pointing up\n * @returns {mat4} out\n */\nmat4.lookAt = function (out, eye, center, up) {\n  var x0,\n    x1,\n    x2,\n    y0,\n    y1,\n    y2,\n    z0,\n    z1,\n    z2,\n    len,\n    eyex = eye[0],\n    eyey = eye[1],\n    eyez = eye[2],\n    upx = up[0],\n    upy = up[1],\n    upz = up[2],\n    centerx = center[0],\n    centery = center[1],\n    centerz = center[2];\n  if (Math.abs(eyex - centerx) < GLMAT_EPSILON && Math.abs(eyey - centery) < GLMAT_EPSILON && Math.abs(eyez - centerz) < GLMAT_EPSILON) {\n    return mat4.identity(out);\n  }\n  z0 = eyex - centerx;\n  z1 = eyey - centery;\n  z2 = eyez - centerz;\n  len = 1 / Math.sqrt(z0 * z0 + z1 * z1 + z2 * z2);\n  z0 *= len;\n  z1 *= len;\n  z2 *= len;\n  x0 = upy * z2 - upz * z1;\n  x1 = upz * z0 - upx * z2;\n  x2 = upx * z1 - upy * z0;\n  len = Math.sqrt(x0 * x0 + x1 * x1 + x2 * x2);\n  if (!len) {\n    x0 = 0;\n    x1 = 0;\n    x2 = 0;\n  } else {\n    len = 1 / len;\n    x0 *= len;\n    x1 *= len;\n    x2 *= len;\n  }\n  y0 = z1 * x2 - z2 * x1;\n  y1 = z2 * x0 - z0 * x2;\n  y2 = z0 * x1 - z1 * x0;\n  len = Math.sqrt(y0 * y0 + y1 * y1 + y2 * y2);\n  if (!len) {\n    y0 = 0;\n    y1 = 0;\n    y2 = 0;\n  } else {\n    len = 1 / len;\n    y0 *= len;\n    y1 *= len;\n    y2 *= len;\n  }\n  out[0] = x0;\n  out[1] = y0;\n  out[2] = z0;\n  out[3] = 0;\n  out[4] = x1;\n  out[5] = y1;\n  out[6] = z1;\n  out[7] = 0;\n  out[8] = x2;\n  out[9] = y2;\n  out[10] = z2;\n  out[11] = 0;\n  out[12] = -(x0 * eyex + x1 * eyey + x2 * eyez);\n  out[13] = -(y0 * eyex + y1 * eyey + y2 * eyez);\n  out[14] = -(z0 * eyex + z1 * eyey + z2 * eyez);\n  out[15] = 1;\n  return out;\n};\n\n/**\n * Returns Frobenius norm of a mat4\n *\n * @param {mat4} a the matrix to calculate Frobenius norm of\n * @returns {Number} Frobenius norm\n */\nmat4.frob = function (a) {\n  return Math.sqrt(Math.pow(a[0], 2) + Math.pow(a[1], 2) + Math.pow(a[2], 2) + Math.pow(a[3], 2) + Math.pow(a[4], 2) + Math.pow(a[5], 2) + Math.pow(a[6], 2) + Math.pow(a[7], 2) + Math.pow(a[8], 2) + Math.pow(a[9], 2) + Math.pow(a[10], 2) + Math.pow(a[11], 2) + Math.pow(a[12], 2) + Math.pow(a[13], 2) + Math.pow(a[14], 2) + Math.pow(a[15], 2));\n};\nexport default mat4;","map":{"version":3,"names":["GLMAT_EPSILON","GLMAT_ARRAY_TYPE","mat4","create","out","clone","a","copy","identity","transpose","a01","a02","a03","a12","a13","a23","invert","a00","a10","a11","a20","a21","a22","a30","a31","a32","a33","b00","b01","b02","b03","b04","b05","b06","b07","b08","b09","b10","b11","det","adjoint","determinant","multiply","b","b0","b1","b2","b3","multiplyAffine","mul","mulAffine","translate","v","x","y","z","scale","rotate","rad","axis","len","Math","sqrt","s","c","t","b12","b20","b21","b22","abs","sin","cos","rotateX","rotateY","rotateZ","fromRotationTranslation","q","w","x2","y2","z2","xx","xy","xz","yy","yz","zz","wx","wy","wz","fromQuat","yx","zx","zy","frustum","left","right","bottom","top","near","far","rl","tb","nf","perspective","fovy","aspect","f","tan","ortho","lr","bt","lookAt","eye","center","up","x0","x1","y0","y1","z0","z1","eyex","eyey","eyez","upx","upy","upz","centerx","centery","centerz","frob","pow"],"sources":["E:/mytest/node_modules/claygl/src/glmatrix/mat4.js"],"sourcesContent":["\n/* Copyright (c) 2013, Brandon Jones, Colin MacKenzie IV. All rights reserved.\n\nRedistribution and use in source and binary forms, with or without modification,\nare permitted provided that the following conditions are met:\n\n  * Redistributions of source code must retain the above copyright notice, this\n    list of conditions and the following disclaimer.\n  * Redistributions in binary form must reproduce the above copyright notice,\n    this list of conditions and the following disclaimer in the documentation\n    and/or other materials provided with the distribution.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\nANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\nWARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR\nANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\nLOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\nANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\nSOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. */\n\nimport {GLMAT_EPSILON, GLMAT_ARRAY_TYPE } from './common';\n\n/**\n * @class 4x4 Matrix\n * @name mat4\n */\n\nvar mat4 = {};\n\n/**\n * Creates a new identity mat4\n *\n * @returns {mat4} a new 4x4 matrix\n */\nmat4.create = function() {\n    var out = new GLMAT_ARRAY_TYPE(16);\n    out[0] = 1;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = 0;\n    out[5] = 1;\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = 0;\n    out[9] = 0;\n    out[10] = 1;\n    out[11] = 0;\n    out[12] = 0;\n    out[13] = 0;\n    out[14] = 0;\n    out[15] = 1;\n    return out;\n};\n\n/**\n * Creates a new mat4 initialized with values from an existing matrix\n *\n * @param {mat4} a matrix to clone\n * @returns {mat4} a new 4x4 matrix\n */\nmat4.clone = function(a) {\n    var out = new GLMAT_ARRAY_TYPE(16);\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    out[3] = a[3];\n    out[4] = a[4];\n    out[5] = a[5];\n    out[6] = a[6];\n    out[7] = a[7];\n    out[8] = a[8];\n    out[9] = a[9];\n    out[10] = a[10];\n    out[11] = a[11];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n    return out;\n};\n\n/**\n * Copy the values from one mat4 to another\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the source matrix\n * @returns {mat4} out\n */\nmat4.copy = function(out, a) {\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    out[3] = a[3];\n    out[4] = a[4];\n    out[5] = a[5];\n    out[6] = a[6];\n    out[7] = a[7];\n    out[8] = a[8];\n    out[9] = a[9];\n    out[10] = a[10];\n    out[11] = a[11];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n    return out;\n};\n\n/**\n * Set a mat4 to the identity matrix\n *\n * @param {mat4} out the receiving matrix\n * @returns {mat4} out\n */\nmat4.identity = function(out) {\n    out[0] = 1;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = 0;\n    out[5] = 1;\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = 0;\n    out[9] = 0;\n    out[10] = 1;\n    out[11] = 0;\n    out[12] = 0;\n    out[13] = 0;\n    out[14] = 0;\n    out[15] = 1;\n    return out;\n};\n\n/**\n * Transpose the values of a mat4\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the source matrix\n * @returns {mat4} out\n */\nmat4.transpose = function(out, a) {\n    // If we are transposing ourselves we can skip a few steps but have to cache some values\n    if (out === a) {\n        var a01 = a[1], a02 = a[2], a03 = a[3],\n            a12 = a[6], a13 = a[7],\n            a23 = a[11];\n\n        out[1] = a[4];\n        out[2] = a[8];\n        out[3] = a[12];\n        out[4] = a01;\n        out[6] = a[9];\n        out[7] = a[13];\n        out[8] = a02;\n        out[9] = a12;\n        out[11] = a[14];\n        out[12] = a03;\n        out[13] = a13;\n        out[14] = a23;\n    } else {\n        out[0] = a[0];\n        out[1] = a[4];\n        out[2] = a[8];\n        out[3] = a[12];\n        out[4] = a[1];\n        out[5] = a[5];\n        out[6] = a[9];\n        out[7] = a[13];\n        out[8] = a[2];\n        out[9] = a[6];\n        out[10] = a[10];\n        out[11] = a[14];\n        out[12] = a[3];\n        out[13] = a[7];\n        out[14] = a[11];\n        out[15] = a[15];\n    }\n\n    return out;\n};\n\n/**\n * Inverts a mat4\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the source matrix\n * @returns {mat4} out\n */\nmat4.invert = function(out, a) {\n    var a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3],\n        a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7],\n        a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11],\n        a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15],\n\n        b00 = a00 * a11 - a01 * a10,\n        b01 = a00 * a12 - a02 * a10,\n        b02 = a00 * a13 - a03 * a10,\n        b03 = a01 * a12 - a02 * a11,\n        b04 = a01 * a13 - a03 * a11,\n        b05 = a02 * a13 - a03 * a12,\n        b06 = a20 * a31 - a21 * a30,\n        b07 = a20 * a32 - a22 * a30,\n        b08 = a20 * a33 - a23 * a30,\n        b09 = a21 * a32 - a22 * a31,\n        b10 = a21 * a33 - a23 * a31,\n        b11 = a22 * a33 - a23 * a32,\n\n        // Calculate the determinant\n        det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n\n    if (!det) {\n        return null;\n    }\n    det = 1.0 / det;\n\n    out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;\n    out[1] = (a02 * b10 - a01 * b11 - a03 * b09) * det;\n    out[2] = (a31 * b05 - a32 * b04 + a33 * b03) * det;\n    out[3] = (a22 * b04 - a21 * b05 - a23 * b03) * det;\n    out[4] = (a12 * b08 - a10 * b11 - a13 * b07) * det;\n    out[5] = (a00 * b11 - a02 * b08 + a03 * b07) * det;\n    out[6] = (a32 * b02 - a30 * b05 - a33 * b01) * det;\n    out[7] = (a20 * b05 - a22 * b02 + a23 * b01) * det;\n    out[8] = (a10 * b10 - a11 * b08 + a13 * b06) * det;\n    out[9] = (a01 * b08 - a00 * b10 - a03 * b06) * det;\n    out[10] = (a30 * b04 - a31 * b02 + a33 * b00) * det;\n    out[11] = (a21 * b02 - a20 * b04 - a23 * b00) * det;\n    out[12] = (a11 * b07 - a10 * b09 - a12 * b06) * det;\n    out[13] = (a00 * b09 - a01 * b07 + a02 * b06) * det;\n    out[14] = (a31 * b01 - a30 * b03 - a32 * b00) * det;\n    out[15] = (a20 * b03 - a21 * b01 + a22 * b00) * det;\n\n    return out;\n};\n\n/**\n * Calculates the adjugate of a mat4\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the source matrix\n * @returns {mat4} out\n */\nmat4.adjoint = function(out, a) {\n    var a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3],\n        a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7],\n        a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11],\n        a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15];\n\n    out[0]  =  (a11 * (a22 * a33 - a23 * a32) - a21 * (a12 * a33 - a13 * a32) + a31 * (a12 * a23 - a13 * a22));\n    out[1]  = -(a01 * (a22 * a33 - a23 * a32) - a21 * (a02 * a33 - a03 * a32) + a31 * (a02 * a23 - a03 * a22));\n    out[2]  =  (a01 * (a12 * a33 - a13 * a32) - a11 * (a02 * a33 - a03 * a32) + a31 * (a02 * a13 - a03 * a12));\n    out[3]  = -(a01 * (a12 * a23 - a13 * a22) - a11 * (a02 * a23 - a03 * a22) + a21 * (a02 * a13 - a03 * a12));\n    out[4]  = -(a10 * (a22 * a33 - a23 * a32) - a20 * (a12 * a33 - a13 * a32) + a30 * (a12 * a23 - a13 * a22));\n    out[5]  =  (a00 * (a22 * a33 - a23 * a32) - a20 * (a02 * a33 - a03 * a32) + a30 * (a02 * a23 - a03 * a22));\n    out[6]  = -(a00 * (a12 * a33 - a13 * a32) - a10 * (a02 * a33 - a03 * a32) + a30 * (a02 * a13 - a03 * a12));\n    out[7]  =  (a00 * (a12 * a23 - a13 * a22) - a10 * (a02 * a23 - a03 * a22) + a20 * (a02 * a13 - a03 * a12));\n    out[8]  =  (a10 * (a21 * a33 - a23 * a31) - a20 * (a11 * a33 - a13 * a31) + a30 * (a11 * a23 - a13 * a21));\n    out[9]  = -(a00 * (a21 * a33 - a23 * a31) - a20 * (a01 * a33 - a03 * a31) + a30 * (a01 * a23 - a03 * a21));\n    out[10] =  (a00 * (a11 * a33 - a13 * a31) - a10 * (a01 * a33 - a03 * a31) + a30 * (a01 * a13 - a03 * a11));\n    out[11] = -(a00 * (a11 * a23 - a13 * a21) - a10 * (a01 * a23 - a03 * a21) + a20 * (a01 * a13 - a03 * a11));\n    out[12] = -(a10 * (a21 * a32 - a22 * a31) - a20 * (a11 * a32 - a12 * a31) + a30 * (a11 * a22 - a12 * a21));\n    out[13] =  (a00 * (a21 * a32 - a22 * a31) - a20 * (a01 * a32 - a02 * a31) + a30 * (a01 * a22 - a02 * a21));\n    out[14] = -(a00 * (a11 * a32 - a12 * a31) - a10 * (a01 * a32 - a02 * a31) + a30 * (a01 * a12 - a02 * a11));\n    out[15] =  (a00 * (a11 * a22 - a12 * a21) - a10 * (a01 * a22 - a02 * a21) + a20 * (a01 * a12 - a02 * a11));\n    return out;\n};\n\n/**\n * Calculates the determinant of a mat4\n *\n * @param {mat4} a the source matrix\n * @returns {Number} determinant of a\n */\nmat4.determinant = function (a) {\n    var a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3],\n        a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7],\n        a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11],\n        a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15],\n\n        b00 = a00 * a11 - a01 * a10,\n        b01 = a00 * a12 - a02 * a10,\n        b02 = a00 * a13 - a03 * a10,\n        b03 = a01 * a12 - a02 * a11,\n        b04 = a01 * a13 - a03 * a11,\n        b05 = a02 * a13 - a03 * a12,\n        b06 = a20 * a31 - a21 * a30,\n        b07 = a20 * a32 - a22 * a30,\n        b08 = a20 * a33 - a23 * a30,\n        b09 = a21 * a32 - a22 * a31,\n        b10 = a21 * a33 - a23 * a31,\n        b11 = a22 * a33 - a23 * a32;\n\n    // Calculate the determinant\n    return b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n};\n\n/**\n * Multiplies two mat4's\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the first operand\n * @param {mat4} b the second operand\n * @returns {mat4} out\n */\nmat4.multiply = function (out, a, b) {\n    var a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3],\n        a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7],\n        a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11],\n        a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15];\n\n    // Cache only the current line of the second matrix\n    var b0  = b[0], b1 = b[1], b2 = b[2], b3 = b[3];\n    out[0] = b0*a00 + b1*a10 + b2*a20 + b3*a30;\n    out[1] = b0*a01 + b1*a11 + b2*a21 + b3*a31;\n    out[2] = b0*a02 + b1*a12 + b2*a22 + b3*a32;\n    out[3] = b0*a03 + b1*a13 + b2*a23 + b3*a33;\n\n    b0 = b[4]; b1 = b[5]; b2 = b[6]; b3 = b[7];\n    out[4] = b0*a00 + b1*a10 + b2*a20 + b3*a30;\n    out[5] = b0*a01 + b1*a11 + b2*a21 + b3*a31;\n    out[6] = b0*a02 + b1*a12 + b2*a22 + b3*a32;\n    out[7] = b0*a03 + b1*a13 + b2*a23 + b3*a33;\n\n    b0 = b[8]; b1 = b[9]; b2 = b[10]; b3 = b[11];\n    out[8] = b0*a00 + b1*a10 + b2*a20 + b3*a30;\n    out[9] = b0*a01 + b1*a11 + b2*a21 + b3*a31;\n    out[10] = b0*a02 + b1*a12 + b2*a22 + b3*a32;\n    out[11] = b0*a03 + b1*a13 + b2*a23 + b3*a33;\n\n    b0 = b[12]; b1 = b[13]; b2 = b[14]; b3 = b[15];\n    out[12] = b0*a00 + b1*a10 + b2*a20 + b3*a30;\n    out[13] = b0*a01 + b1*a11 + b2*a21 + b3*a31;\n    out[14] = b0*a02 + b1*a12 + b2*a22 + b3*a32;\n    out[15] = b0*a03 + b1*a13 + b2*a23 + b3*a33;\n    return out;\n};\n\n/**\n * Multiplies two affine mat4's\n * Add by https://github.com/pissang\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the first operand\n * @param {mat4} b the second operand\n * @returns {mat4} out\n */\nmat4.multiplyAffine = function (out, a, b) {\n    var a00 = a[0], a01 = a[1], a02 = a[2],\n        a10 = a[4], a11 = a[5], a12 = a[6],\n        a20 = a[8], a21 = a[9], a22 = a[10],\n        a30 = a[12], a31 = a[13], a32 = a[14];\n\n    // Cache only the current line of the second matrix\n    var b0  = b[0], b1 = b[1], b2 = b[2];\n    out[0] = b0*a00 + b1*a10 + b2*a20;\n    out[1] = b0*a01 + b1*a11 + b2*a21;\n    out[2] = b0*a02 + b1*a12 + b2*a22;\n    // out[3] = 0;\n\n    b0 = b[4]; b1 = b[5]; b2 = b[6];\n    out[4] = b0*a00 + b1*a10 + b2*a20;\n    out[5] = b0*a01 + b1*a11 + b2*a21;\n    out[6] = b0*a02 + b1*a12 + b2*a22;\n    // out[7] = 0;\n\n    b0 = b[8]; b1 = b[9]; b2 = b[10];\n    out[8] = b0*a00 + b1*a10 + b2*a20;\n    out[9] = b0*a01 + b1*a11 + b2*a21;\n    out[10] = b0*a02 + b1*a12 + b2*a22;\n    // out[11] = 0;\n\n    b0 = b[12]; b1 = b[13]; b2 = b[14];\n    out[12] = b0*a00 + b1*a10 + b2*a20 + a30;\n    out[13] = b0*a01 + b1*a11 + b2*a21 + a31;\n    out[14] = b0*a02 + b1*a12 + b2*a22 + a32;\n    // out[15] = 1;\n    return out;\n};\n\n/**\n * Alias for {@link mat4.multiply}\n * @function\n */\nmat4.mul = mat4.multiply;\n\n/**\n * Alias for {@link mat4.multiplyAffine}\n * @function\n */\nmat4.mulAffine = mat4.multiplyAffine;\n/**\n * Translate a mat4 by the given vector\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the matrix to translate\n * @param {vec3} v vector to translate by\n * @returns {mat4} out\n */\nmat4.translate = function (out, a, v) {\n    var x = v[0], y = v[1], z = v[2],\n        a00, a01, a02, a03,\n        a10, a11, a12, a13,\n        a20, a21, a22, a23;\n\n    if (a === out) {\n        out[12] = a[0] * x + a[4] * y + a[8] * z + a[12];\n        out[13] = a[1] * x + a[5] * y + a[9] * z + a[13];\n        out[14] = a[2] * x + a[6] * y + a[10] * z + a[14];\n        out[15] = a[3] * x + a[7] * y + a[11] * z + a[15];\n    } else {\n        a00 = a[0]; a01 = a[1]; a02 = a[2]; a03 = a[3];\n        a10 = a[4]; a11 = a[5]; a12 = a[6]; a13 = a[7];\n        a20 = a[8]; a21 = a[9]; a22 = a[10]; a23 = a[11];\n\n        out[0] = a00; out[1] = a01; out[2] = a02; out[3] = a03;\n        out[4] = a10; out[5] = a11; out[6] = a12; out[7] = a13;\n        out[8] = a20; out[9] = a21; out[10] = a22; out[11] = a23;\n\n        out[12] = a00 * x + a10 * y + a20 * z + a[12];\n        out[13] = a01 * x + a11 * y + a21 * z + a[13];\n        out[14] = a02 * x + a12 * y + a22 * z + a[14];\n        out[15] = a03 * x + a13 * y + a23 * z + a[15];\n    }\n\n    return out;\n};\n\n/**\n * Scales the mat4 by the dimensions in the given vec3\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the matrix to scale\n * @param {vec3} v the vec3 to scale the matrix by\n * @returns {mat4} out\n **/\nmat4.scale = function(out, a, v) {\n    var x = v[0], y = v[1], z = v[2];\n\n    out[0] = a[0] * x;\n    out[1] = a[1] * x;\n    out[2] = a[2] * x;\n    out[3] = a[3] * x;\n    out[4] = a[4] * y;\n    out[5] = a[5] * y;\n    out[6] = a[6] * y;\n    out[7] = a[7] * y;\n    out[8] = a[8] * z;\n    out[9] = a[9] * z;\n    out[10] = a[10] * z;\n    out[11] = a[11] * z;\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n    return out;\n};\n\n/**\n * Rotates a mat4 by the given angle\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @param {vec3} axis the axis to rotate around\n * @returns {mat4} out\n */\nmat4.rotate = function (out, a, rad, axis) {\n    var x = axis[0], y = axis[1], z = axis[2],\n        len = Math.sqrt(x * x + y * y + z * z),\n        s, c, t,\n        a00, a01, a02, a03,\n        a10, a11, a12, a13,\n        a20, a21, a22, a23,\n        b00, b01, b02,\n        b10, b11, b12,\n        b20, b21, b22;\n\n    if (Math.abs(len) < GLMAT_EPSILON) { return null; }\n\n    len = 1 / len;\n    x *= len;\n    y *= len;\n    z *= len;\n\n    s = Math.sin(rad);\n    c = Math.cos(rad);\n    t = 1 - c;\n\n    a00 = a[0]; a01 = a[1]; a02 = a[2]; a03 = a[3];\n    a10 = a[4]; a11 = a[5]; a12 = a[6]; a13 = a[7];\n    a20 = a[8]; a21 = a[9]; a22 = a[10]; a23 = a[11];\n\n    // Construct the elements of the rotation matrix\n    b00 = x * x * t + c; b01 = y * x * t + z * s; b02 = z * x * t - y * s;\n    b10 = x * y * t - z * s; b11 = y * y * t + c; b12 = z * y * t + x * s;\n    b20 = x * z * t + y * s; b21 = y * z * t - x * s; b22 = z * z * t + c;\n\n    // Perform rotation-specific matrix multiplication\n    out[0] = a00 * b00 + a10 * b01 + a20 * b02;\n    out[1] = a01 * b00 + a11 * b01 + a21 * b02;\n    out[2] = a02 * b00 + a12 * b01 + a22 * b02;\n    out[3] = a03 * b00 + a13 * b01 + a23 * b02;\n    out[4] = a00 * b10 + a10 * b11 + a20 * b12;\n    out[5] = a01 * b10 + a11 * b11 + a21 * b12;\n    out[6] = a02 * b10 + a12 * b11 + a22 * b12;\n    out[7] = a03 * b10 + a13 * b11 + a23 * b12;\n    out[8] = a00 * b20 + a10 * b21 + a20 * b22;\n    out[9] = a01 * b20 + a11 * b21 + a21 * b22;\n    out[10] = a02 * b20 + a12 * b21 + a22 * b22;\n    out[11] = a03 * b20 + a13 * b21 + a23 * b22;\n\n    if (a !== out) { // If the source and destination differ, copy the unchanged last row\n        out[12] = a[12];\n        out[13] = a[13];\n        out[14] = a[14];\n        out[15] = a[15];\n    }\n    return out;\n};\n\n/**\n * Rotates a matrix by the given angle around the X axis\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\nmat4.rotateX = function (out, a, rad) {\n    var s = Math.sin(rad),\n        c = Math.cos(rad),\n        a10 = a[4],\n        a11 = a[5],\n        a12 = a[6],\n        a13 = a[7],\n        a20 = a[8],\n        a21 = a[9],\n        a22 = a[10],\n        a23 = a[11];\n\n    if (a !== out) { // If the source and destination differ, copy the unchanged rows\n        out[0]  = a[0];\n        out[1]  = a[1];\n        out[2]  = a[2];\n        out[3]  = a[3];\n        out[12] = a[12];\n        out[13] = a[13];\n        out[14] = a[14];\n        out[15] = a[15];\n    }\n\n    // Perform axis-specific matrix multiplication\n    out[4] = a10 * c + a20 * s;\n    out[5] = a11 * c + a21 * s;\n    out[6] = a12 * c + a22 * s;\n    out[7] = a13 * c + a23 * s;\n    out[8] = a20 * c - a10 * s;\n    out[9] = a21 * c - a11 * s;\n    out[10] = a22 * c - a12 * s;\n    out[11] = a23 * c - a13 * s;\n    return out;\n};\n\n/**\n * Rotates a matrix by the given angle around the Y axis\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\nmat4.rotateY = function (out, a, rad) {\n    var s = Math.sin(rad),\n        c = Math.cos(rad),\n        a00 = a[0],\n        a01 = a[1],\n        a02 = a[2],\n        a03 = a[3],\n        a20 = a[8],\n        a21 = a[9],\n        a22 = a[10],\n        a23 = a[11];\n\n    if (a !== out) { // If the source and destination differ, copy the unchanged rows\n        out[4]  = a[4];\n        out[5]  = a[5];\n        out[6]  = a[6];\n        out[7]  = a[7];\n        out[12] = a[12];\n        out[13] = a[13];\n        out[14] = a[14];\n        out[15] = a[15];\n    }\n\n    // Perform axis-specific matrix multiplication\n    out[0] = a00 * c - a20 * s;\n    out[1] = a01 * c - a21 * s;\n    out[2] = a02 * c - a22 * s;\n    out[3] = a03 * c - a23 * s;\n    out[8] = a00 * s + a20 * c;\n    out[9] = a01 * s + a21 * c;\n    out[10] = a02 * s + a22 * c;\n    out[11] = a03 * s + a23 * c;\n    return out;\n};\n\n/**\n * Rotates a matrix by the given angle around the Z axis\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\nmat4.rotateZ = function (out, a, rad) {\n    var s = Math.sin(rad),\n        c = Math.cos(rad),\n        a00 = a[0],\n        a01 = a[1],\n        a02 = a[2],\n        a03 = a[3],\n        a10 = a[4],\n        a11 = a[5],\n        a12 = a[6],\n        a13 = a[7];\n\n    if (a !== out) { // If the source and destination differ, copy the unchanged last row\n        out[8]  = a[8];\n        out[9]  = a[9];\n        out[10] = a[10];\n        out[11] = a[11];\n        out[12] = a[12];\n        out[13] = a[13];\n        out[14] = a[14];\n        out[15] = a[15];\n    }\n\n    // Perform axis-specific matrix multiplication\n    out[0] = a00 * c + a10 * s;\n    out[1] = a01 * c + a11 * s;\n    out[2] = a02 * c + a12 * s;\n    out[3] = a03 * c + a13 * s;\n    out[4] = a10 * c - a00 * s;\n    out[5] = a11 * c - a01 * s;\n    out[6] = a12 * c - a02 * s;\n    out[7] = a13 * c - a03 * s;\n    return out;\n};\n\n/**\n * Creates a matrix from a quaternion rotation and vector translation\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.translate(dest, vec);\n *     var quatMat = mat4.create();\n *     quat4.toMat4(quat, quatMat);\n *     mat4.multiply(dest, quatMat);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {quat4} q Rotation quaternion\n * @param {vec3} v Translation vector\n * @returns {mat4} out\n */\nmat4.fromRotationTranslation = function (out, q, v) {\n    // Quaternion math\n    var x = q[0], y = q[1], z = q[2], w = q[3],\n        x2 = x + x,\n        y2 = y + y,\n        z2 = z + z,\n\n        xx = x * x2,\n        xy = x * y2,\n        xz = x * z2,\n        yy = y * y2,\n        yz = y * z2,\n        zz = z * z2,\n        wx = w * x2,\n        wy = w * y2,\n        wz = w * z2;\n\n    out[0] = 1 - (yy + zz);\n    out[1] = xy + wz;\n    out[2] = xz - wy;\n    out[3] = 0;\n    out[4] = xy - wz;\n    out[5] = 1 - (xx + zz);\n    out[6] = yz + wx;\n    out[7] = 0;\n    out[8] = xz + wy;\n    out[9] = yz - wx;\n    out[10] = 1 - (xx + yy);\n    out[11] = 0;\n    out[12] = v[0];\n    out[13] = v[1];\n    out[14] = v[2];\n    out[15] = 1;\n\n    return out;\n};\n\nmat4.fromQuat = function (out, q) {\n    var x = q[0], y = q[1], z = q[2], w = q[3],\n        x2 = x + x,\n        y2 = y + y,\n        z2 = z + z,\n\n        xx = x * x2,\n        yx = y * x2,\n        yy = y * y2,\n        zx = z * x2,\n        zy = z * y2,\n        zz = z * z2,\n        wx = w * x2,\n        wy = w * y2,\n        wz = w * z2;\n\n    out[0] = 1 - yy - zz;\n    out[1] = yx + wz;\n    out[2] = zx - wy;\n    out[3] = 0;\n\n    out[4] = yx - wz;\n    out[5] = 1 - xx - zz;\n    out[6] = zy + wx;\n    out[7] = 0;\n\n    out[8] = zx + wy;\n    out[9] = zy - wx;\n    out[10] = 1 - xx - yy;\n    out[11] = 0;\n\n    out[12] = 0;\n    out[13] = 0;\n    out[14] = 0;\n    out[15] = 1;\n\n    return out;\n};\n\n/**\n * Generates a frustum matrix with the given bounds\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {Number} left Left bound of the frustum\n * @param {Number} right Right bound of the frustum\n * @param {Number} bottom Bottom bound of the frustum\n * @param {Number} top Top bound of the frustum\n * @param {Number} near Near bound of the frustum\n * @param {Number} far Far bound of the frustum\n * @returns {mat4} out\n */\nmat4.frustum = function (out, left, right, bottom, top, near, far) {\n    var rl = 1 / (right - left),\n        tb = 1 / (top - bottom),\n        nf = 1 / (near - far);\n    out[0] = (near * 2) * rl;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = 0;\n    out[5] = (near * 2) * tb;\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = (right + left) * rl;\n    out[9] = (top + bottom) * tb;\n    out[10] = (far + near) * nf;\n    out[11] = -1;\n    out[12] = 0;\n    out[13] = 0;\n    out[14] = (far * near * 2) * nf;\n    out[15] = 0;\n    return out;\n};\n\n/**\n * Generates a perspective projection matrix with the given bounds\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {number} fovy Vertical field of view in radians\n * @param {number} aspect Aspect ratio. typically viewport width/height\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum\n * @returns {mat4} out\n */\nmat4.perspective = function (out, fovy, aspect, near, far) {\n    var f = 1.0 / Math.tan(fovy / 2),\n        nf = 1 / (near - far);\n    out[0] = f / aspect;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = 0;\n    out[5] = f;\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = 0;\n    out[9] = 0;\n    out[10] = (far + near) * nf;\n    out[11] = -1;\n    out[12] = 0;\n    out[13] = 0;\n    out[14] = (2 * far * near) * nf;\n    out[15] = 0;\n    return out;\n};\n\n/**\n * Generates a orthogonal projection matrix with the given bounds\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {number} left Left bound of the frustum\n * @param {number} right Right bound of the frustum\n * @param {number} bottom Bottom bound of the frustum\n * @param {number} top Top bound of the frustum\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum\n * @returns {mat4} out\n */\nmat4.ortho = function (out, left, right, bottom, top, near, far) {\n    var lr = 1 / (left - right),\n        bt = 1 / (bottom - top),\n        nf = 1 / (near - far);\n    out[0] = -2 * lr;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = 0;\n    out[5] = -2 * bt;\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = 0;\n    out[9] = 0;\n    out[10] = 2 * nf;\n    out[11] = 0;\n    out[12] = (left + right) * lr;\n    out[13] = (top + bottom) * bt;\n    out[14] = (far + near) * nf;\n    out[15] = 1;\n    return out;\n};\n\n/**\n * Generates a look-at matrix with the given eye position, focal point, and up axis\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {vec3} eye Position of the viewer\n * @param {vec3} center Point the viewer is looking at\n * @param {vec3} up vec3 pointing up\n * @returns {mat4} out\n */\nmat4.lookAt = function (out, eye, center, up) {\n    var x0, x1, x2, y0, y1, y2, z0, z1, z2, len,\n        eyex = eye[0],\n        eyey = eye[1],\n        eyez = eye[2],\n        upx = up[0],\n        upy = up[1],\n        upz = up[2],\n        centerx = center[0],\n        centery = center[1],\n        centerz = center[2];\n\n    if (Math.abs(eyex - centerx) < GLMAT_EPSILON &&\n        Math.abs(eyey - centery) < GLMAT_EPSILON &&\n        Math.abs(eyez - centerz) < GLMAT_EPSILON) {\n        return mat4.identity(out);\n    }\n\n    z0 = eyex - centerx;\n    z1 = eyey - centery;\n    z2 = eyez - centerz;\n\n    len = 1 / Math.sqrt(z0 * z0 + z1 * z1 + z2 * z2);\n    z0 *= len;\n    z1 *= len;\n    z2 *= len;\n\n    x0 = upy * z2 - upz * z1;\n    x1 = upz * z0 - upx * z2;\n    x2 = upx * z1 - upy * z0;\n    len = Math.sqrt(x0 * x0 + x1 * x1 + x2 * x2);\n    if (!len) {\n        x0 = 0;\n        x1 = 0;\n        x2 = 0;\n    } else {\n        len = 1 / len;\n        x0 *= len;\n        x1 *= len;\n        x2 *= len;\n    }\n\n    y0 = z1 * x2 - z2 * x1;\n    y1 = z2 * x0 - z0 * x2;\n    y2 = z0 * x1 - z1 * x0;\n\n    len = Math.sqrt(y0 * y0 + y1 * y1 + y2 * y2);\n    if (!len) {\n        y0 = 0;\n        y1 = 0;\n        y2 = 0;\n    } else {\n        len = 1 / len;\n        y0 *= len;\n        y1 *= len;\n        y2 *= len;\n    }\n\n    out[0] = x0;\n    out[1] = y0;\n    out[2] = z0;\n    out[3] = 0;\n    out[4] = x1;\n    out[5] = y1;\n    out[6] = z1;\n    out[7] = 0;\n    out[8] = x2;\n    out[9] = y2;\n    out[10] = z2;\n    out[11] = 0;\n    out[12] = -(x0 * eyex + x1 * eyey + x2 * eyez);\n    out[13] = -(y0 * eyex + y1 * eyey + y2 * eyez);\n    out[14] = -(z0 * eyex + z1 * eyey + z2 * eyez);\n    out[15] = 1;\n\n    return out;\n};\n\n/**\n * Returns Frobenius norm of a mat4\n *\n * @param {mat4} a the matrix to calculate Frobenius norm of\n * @returns {Number} Frobenius norm\n */\nmat4.frob = function (a) {\n    return(Math.sqrt(Math.pow(a[0], 2) + Math.pow(a[1], 2) + Math.pow(a[2], 2) + Math.pow(a[3], 2) + Math.pow(a[4], 2) + Math.pow(a[5], 2) + Math.pow(a[6], 2) + Math.pow(a[7], 2) + Math.pow(a[8], 2) + Math.pow(a[9], 2) + Math.pow(a[10], 2) + Math.pow(a[11], 2) + Math.pow(a[12], 2) + Math.pow(a[13], 2) + Math.pow(a[14], 2) + Math.pow(a[15], 2) ))\n};\n\nexport default mat4;"],"mappings":"AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAAQA,aAAa,EAAEC,gBAAgB,QAAQ,UAAU;;AAEzD;AACA;AACA;AACA;;AAEA,IAAIC,IAAI,GAAG,CAAC,CAAC;;AAEb;AACA;AACA;AACA;AACA;AACAA,IAAI,CAACC,MAAM,GAAG,YAAW;EACrB,IAAIC,GAAG,GAAG,IAAIH,gBAAgB,CAAC,EAAE,CAAC;EAClCG,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC;EACVA,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC;EACVA,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC;EACVA,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC;EACVA,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC;EACVA,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC;EACVA,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC;EACVA,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC;EACVA,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC;EACVA,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC;EACVA,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC;EACXA,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC;EACXA,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC;EACXA,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC;EACXA,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC;EACXA,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC;EACX,OAAOA,GAAG;AACd,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACAF,IAAI,CAACG,KAAK,GAAG,UAASC,CAAC,EAAE;EACrB,IAAIF,GAAG,GAAG,IAAIH,gBAAgB,CAAC,EAAE,CAAC;EAClCG,GAAG,CAAC,CAAC,CAAC,GAAGE,CAAC,CAAC,CAAC,CAAC;EACbF,GAAG,CAAC,CAAC,CAAC,GAAGE,CAAC,CAAC,CAAC,CAAC;EACbF,GAAG,CAAC,CAAC,CAAC,GAAGE,CAAC,CAAC,CAAC,CAAC;EACbF,GAAG,CAAC,CAAC,CAAC,GAAGE,CAAC,CAAC,CAAC,CAAC;EACbF,GAAG,CAAC,CAAC,CAAC,GAAGE,CAAC,CAAC,CAAC,CAAC;EACbF,GAAG,CAAC,CAAC,CAAC,GAAGE,CAAC,CAAC,CAAC,CAAC;EACbF,GAAG,CAAC,CAAC,CAAC,GAAGE,CAAC,CAAC,CAAC,CAAC;EACbF,GAAG,CAAC,CAAC,CAAC,GAAGE,CAAC,CAAC,CAAC,CAAC;EACbF,GAAG,CAAC,CAAC,CAAC,GAAGE,CAAC,CAAC,CAAC,CAAC;EACbF,GAAG,CAAC,CAAC,CAAC,GAAGE,CAAC,CAAC,CAAC,CAAC;EACbF,GAAG,CAAC,EAAE,CAAC,GAAGE,CAAC,CAAC,EAAE,CAAC;EACfF,GAAG,CAAC,EAAE,CAAC,GAAGE,CAAC,CAAC,EAAE,CAAC;EACfF,GAAG,CAAC,EAAE,CAAC,GAAGE,CAAC,CAAC,EAAE,CAAC;EACfF,GAAG,CAAC,EAAE,CAAC,GAAGE,CAAC,CAAC,EAAE,CAAC;EACfF,GAAG,CAAC,EAAE,CAAC,GAAGE,CAAC,CAAC,EAAE,CAAC;EACfF,GAAG,CAAC,EAAE,CAAC,GAAGE,CAAC,CAAC,EAAE,CAAC;EACf,OAAOF,GAAG;AACd,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACAF,IAAI,CAACK,IAAI,GAAG,UAASH,GAAG,EAAEE,CAAC,EAAE;EACzBF,GAAG,CAAC,CAAC,CAAC,GAAGE,CAAC,CAAC,CAAC,CAAC;EACbF,GAAG,CAAC,CAAC,CAAC,GAAGE,CAAC,CAAC,CAAC,CAAC;EACbF,GAAG,CAAC,CAAC,CAAC,GAAGE,CAAC,CAAC,CAAC,CAAC;EACbF,GAAG,CAAC,CAAC,CAAC,GAAGE,CAAC,CAAC,CAAC,CAAC;EACbF,GAAG,CAAC,CAAC,CAAC,GAAGE,CAAC,CAAC,CAAC,CAAC;EACbF,GAAG,CAAC,CAAC,CAAC,GAAGE,CAAC,CAAC,CAAC,CAAC;EACbF,GAAG,CAAC,CAAC,CAAC,GAAGE,CAAC,CAAC,CAAC,CAAC;EACbF,GAAG,CAAC,CAAC,CAAC,GAAGE,CAAC,CAAC,CAAC,CAAC;EACbF,GAAG,CAAC,CAAC,CAAC,GAAGE,CAAC,CAAC,CAAC,CAAC;EACbF,GAAG,CAAC,CAAC,CAAC,GAAGE,CAAC,CAAC,CAAC,CAAC;EACbF,GAAG,CAAC,EAAE,CAAC,GAAGE,CAAC,CAAC,EAAE,CAAC;EACfF,GAAG,CAAC,EAAE,CAAC,GAAGE,CAAC,CAAC,EAAE,CAAC;EACfF,GAAG,CAAC,EAAE,CAAC,GAAGE,CAAC,CAAC,EAAE,CAAC;EACfF,GAAG,CAAC,EAAE,CAAC,GAAGE,CAAC,CAAC,EAAE,CAAC;EACfF,GAAG,CAAC,EAAE,CAAC,GAAGE,CAAC,CAAC,EAAE,CAAC;EACfF,GAAG,CAAC,EAAE,CAAC,GAAGE,CAAC,CAAC,EAAE,CAAC;EACf,OAAOF,GAAG;AACd,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACAF,IAAI,CAACM,QAAQ,GAAG,UAASJ,GAAG,EAAE;EAC1BA,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC;EACVA,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC;EACVA,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC;EACVA,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC;EACVA,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC;EACVA,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC;EACVA,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC;EACVA,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC;EACVA,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC;EACVA,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC;EACVA,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC;EACXA,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC;EACXA,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC;EACXA,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC;EACXA,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC;EACXA,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC;EACX,OAAOA,GAAG;AACd,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACAF,IAAI,CAACO,SAAS,GAAG,UAASL,GAAG,EAAEE,CAAC,EAAE;EAC9B;EACA,IAAIF,GAAG,KAAKE,CAAC,EAAE;IACX,IAAII,GAAG,GAAGJ,CAAC,CAAC,CAAC,CAAC;MAAEK,GAAG,GAAGL,CAAC,CAAC,CAAC,CAAC;MAAEM,GAAG,GAAGN,CAAC,CAAC,CAAC,CAAC;MAClCO,GAAG,GAAGP,CAAC,CAAC,CAAC,CAAC;MAAEQ,GAAG,GAAGR,CAAC,CAAC,CAAC,CAAC;MACtBS,GAAG,GAAGT,CAAC,CAAC,EAAE,CAAC;IAEfF,GAAG,CAAC,CAAC,CAAC,GAAGE,CAAC,CAAC,CAAC,CAAC;IACbF,GAAG,CAAC,CAAC,CAAC,GAAGE,CAAC,CAAC,CAAC,CAAC;IACbF,GAAG,CAAC,CAAC,CAAC,GAAGE,CAAC,CAAC,EAAE,CAAC;IACdF,GAAG,CAAC,CAAC,CAAC,GAAGM,GAAG;IACZN,GAAG,CAAC,CAAC,CAAC,GAAGE,CAAC,CAAC,CAAC,CAAC;IACbF,GAAG,CAAC,CAAC,CAAC,GAAGE,CAAC,CAAC,EAAE,CAAC;IACdF,GAAG,CAAC,CAAC,CAAC,GAAGO,GAAG;IACZP,GAAG,CAAC,CAAC,CAAC,GAAGS,GAAG;IACZT,GAAG,CAAC,EAAE,CAAC,GAAGE,CAAC,CAAC,EAAE,CAAC;IACfF,GAAG,CAAC,EAAE,CAAC,GAAGQ,GAAG;IACbR,GAAG,CAAC,EAAE,CAAC,GAAGU,GAAG;IACbV,GAAG,CAAC,EAAE,CAAC,GAAGW,GAAG;EACjB,CAAC,MAAM;IACHX,GAAG,CAAC,CAAC,CAAC,GAAGE,CAAC,CAAC,CAAC,CAAC;IACbF,GAAG,CAAC,CAAC,CAAC,GAAGE,CAAC,CAAC,CAAC,CAAC;IACbF,GAAG,CAAC,CAAC,CAAC,GAAGE,CAAC,CAAC,CAAC,CAAC;IACbF,GAAG,CAAC,CAAC,CAAC,GAAGE,CAAC,CAAC,EAAE,CAAC;IACdF,GAAG,CAAC,CAAC,CAAC,GAAGE,CAAC,CAAC,CAAC,CAAC;IACbF,GAAG,CAAC,CAAC,CAAC,GAAGE,CAAC,CAAC,CAAC,CAAC;IACbF,GAAG,CAAC,CAAC,CAAC,GAAGE,CAAC,CAAC,CAAC,CAAC;IACbF,GAAG,CAAC,CAAC,CAAC,GAAGE,CAAC,CAAC,EAAE,CAAC;IACdF,GAAG,CAAC,CAAC,CAAC,GAAGE,CAAC,CAAC,CAAC,CAAC;IACbF,GAAG,CAAC,CAAC,CAAC,GAAGE,CAAC,CAAC,CAAC,CAAC;IACbF,GAAG,CAAC,EAAE,CAAC,GAAGE,CAAC,CAAC,EAAE,CAAC;IACfF,GAAG,CAAC,EAAE,CAAC,GAAGE,CAAC,CAAC,EAAE,CAAC;IACfF,GAAG,CAAC,EAAE,CAAC,GAAGE,CAAC,CAAC,CAAC,CAAC;IACdF,GAAG,CAAC,EAAE,CAAC,GAAGE,CAAC,CAAC,CAAC,CAAC;IACdF,GAAG,CAAC,EAAE,CAAC,GAAGE,CAAC,CAAC,EAAE,CAAC;IACfF,GAAG,CAAC,EAAE,CAAC,GAAGE,CAAC,CAAC,EAAE,CAAC;EACnB;EAEA,OAAOF,GAAG;AACd,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACAF,IAAI,CAACc,MAAM,GAAG,UAASZ,GAAG,EAAEE,CAAC,EAAE;EAC3B,IAAIW,GAAG,GAAGX,CAAC,CAAC,CAAC,CAAC;IAAEI,GAAG,GAAGJ,CAAC,CAAC,CAAC,CAAC;IAAEK,GAAG,GAAGL,CAAC,CAAC,CAAC,CAAC;IAAEM,GAAG,GAAGN,CAAC,CAAC,CAAC,CAAC;IAC9CY,GAAG,GAAGZ,CAAC,CAAC,CAAC,CAAC;IAAEa,GAAG,GAAGb,CAAC,CAAC,CAAC,CAAC;IAAEO,GAAG,GAAGP,CAAC,CAAC,CAAC,CAAC;IAAEQ,GAAG,GAAGR,CAAC,CAAC,CAAC,CAAC;IAC9Cc,GAAG,GAAGd,CAAC,CAAC,CAAC,CAAC;IAAEe,GAAG,GAAGf,CAAC,CAAC,CAAC,CAAC;IAAEgB,GAAG,GAAGhB,CAAC,CAAC,EAAE,CAAC;IAAES,GAAG,GAAGT,CAAC,CAAC,EAAE,CAAC;IAChDiB,GAAG,GAAGjB,CAAC,CAAC,EAAE,CAAC;IAAEkB,GAAG,GAAGlB,CAAC,CAAC,EAAE,CAAC;IAAEmB,GAAG,GAAGnB,CAAC,CAAC,EAAE,CAAC;IAAEoB,GAAG,GAAGpB,CAAC,CAAC,EAAE,CAAC;IAElDqB,GAAG,GAAGV,GAAG,GAAGE,GAAG,GAAGT,GAAG,GAAGQ,GAAG;IAC3BU,GAAG,GAAGX,GAAG,GAAGJ,GAAG,GAAGF,GAAG,GAAGO,GAAG;IAC3BW,GAAG,GAAGZ,GAAG,GAAGH,GAAG,GAAGF,GAAG,GAAGM,GAAG;IAC3BY,GAAG,GAAGpB,GAAG,GAAGG,GAAG,GAAGF,GAAG,GAAGQ,GAAG;IAC3BY,GAAG,GAAGrB,GAAG,GAAGI,GAAG,GAAGF,GAAG,GAAGO,GAAG;IAC3Ba,GAAG,GAAGrB,GAAG,GAAGG,GAAG,GAAGF,GAAG,GAAGC,GAAG;IAC3BoB,GAAG,GAAGb,GAAG,GAAGI,GAAG,GAAGH,GAAG,GAAGE,GAAG;IAC3BW,GAAG,GAAGd,GAAG,GAAGK,GAAG,GAAGH,GAAG,GAAGC,GAAG;IAC3BY,GAAG,GAAGf,GAAG,GAAGM,GAAG,GAAGX,GAAG,GAAGQ,GAAG;IAC3Ba,GAAG,GAAGf,GAAG,GAAGI,GAAG,GAAGH,GAAG,GAAGE,GAAG;IAC3Ba,GAAG,GAAGhB,GAAG,GAAGK,GAAG,GAAGX,GAAG,GAAGS,GAAG;IAC3Bc,GAAG,GAAGhB,GAAG,GAAGI,GAAG,GAAGX,GAAG,GAAGU,GAAG;IAE3B;IACAc,GAAG,GAAGZ,GAAG,GAAGW,GAAG,GAAGV,GAAG,GAAGS,GAAG,GAAGR,GAAG,GAAGO,GAAG,GAAGN,GAAG,GAAGK,GAAG,GAAGJ,GAAG,GAAGG,GAAG,GAAGF,GAAG,GAAGC,GAAG;EAE/E,IAAI,CAACM,GAAG,EAAE;IACN,OAAO,IAAI;EACf;EACAA,GAAG,GAAG,GAAG,GAAGA,GAAG;EAEfnC,GAAG,CAAC,CAAC,CAAC,GAAG,CAACe,GAAG,GAAGmB,GAAG,GAAGzB,GAAG,GAAGwB,GAAG,GAAGvB,GAAG,GAAGsB,GAAG,IAAIG,GAAG;EAClDnC,GAAG,CAAC,CAAC,CAAC,GAAG,CAACO,GAAG,GAAG0B,GAAG,GAAG3B,GAAG,GAAG4B,GAAG,GAAG1B,GAAG,GAAGwB,GAAG,IAAIG,GAAG;EAClDnC,GAAG,CAAC,CAAC,CAAC,GAAG,CAACoB,GAAG,GAAGQ,GAAG,GAAGP,GAAG,GAAGM,GAAG,GAAGL,GAAG,GAAGI,GAAG,IAAIS,GAAG;EAClDnC,GAAG,CAAC,CAAC,CAAC,GAAG,CAACkB,GAAG,GAAGS,GAAG,GAAGV,GAAG,GAAGW,GAAG,GAAGjB,GAAG,GAAGe,GAAG,IAAIS,GAAG;EAClDnC,GAAG,CAAC,CAAC,CAAC,GAAG,CAACS,GAAG,GAAGsB,GAAG,GAAGjB,GAAG,GAAGoB,GAAG,GAAGxB,GAAG,GAAGoB,GAAG,IAAIK,GAAG;EAClDnC,GAAG,CAAC,CAAC,CAAC,GAAG,CAACa,GAAG,GAAGqB,GAAG,GAAG3B,GAAG,GAAGwB,GAAG,GAAGvB,GAAG,GAAGsB,GAAG,IAAIK,GAAG;EAClDnC,GAAG,CAAC,CAAC,CAAC,GAAG,CAACqB,GAAG,GAAGI,GAAG,GAAGN,GAAG,GAAGS,GAAG,GAAGN,GAAG,GAAGE,GAAG,IAAIW,GAAG;EAClDnC,GAAG,CAAC,CAAC,CAAC,GAAG,CAACgB,GAAG,GAAGY,GAAG,GAAGV,GAAG,GAAGO,GAAG,GAAGd,GAAG,GAAGa,GAAG,IAAIW,GAAG;EAClDnC,GAAG,CAAC,CAAC,CAAC,GAAG,CAACc,GAAG,GAAGmB,GAAG,GAAGlB,GAAG,GAAGgB,GAAG,GAAGrB,GAAG,GAAGmB,GAAG,IAAIM,GAAG;EAClDnC,GAAG,CAAC,CAAC,CAAC,GAAG,CAACM,GAAG,GAAGyB,GAAG,GAAGlB,GAAG,GAAGoB,GAAG,GAAGzB,GAAG,GAAGqB,GAAG,IAAIM,GAAG;EAClDnC,GAAG,CAAC,EAAE,CAAC,GAAG,CAACmB,GAAG,GAAGQ,GAAG,GAAGP,GAAG,GAAGK,GAAG,GAAGH,GAAG,GAAGC,GAAG,IAAIY,GAAG;EACnDnC,GAAG,CAAC,EAAE,CAAC,GAAG,CAACiB,GAAG,GAAGQ,GAAG,GAAGT,GAAG,GAAGW,GAAG,GAAGhB,GAAG,GAAGY,GAAG,IAAIY,GAAG;EACnDnC,GAAG,CAAC,EAAE,CAAC,GAAG,CAACe,GAAG,GAAGe,GAAG,GAAGhB,GAAG,GAAGkB,GAAG,GAAGvB,GAAG,GAAGoB,GAAG,IAAIM,GAAG;EACnDnC,GAAG,CAAC,EAAE,CAAC,GAAG,CAACa,GAAG,GAAGmB,GAAG,GAAG1B,GAAG,GAAGwB,GAAG,GAAGvB,GAAG,GAAGsB,GAAG,IAAIM,GAAG;EACnDnC,GAAG,CAAC,EAAE,CAAC,GAAG,CAACoB,GAAG,GAAGI,GAAG,GAAGL,GAAG,GAAGO,GAAG,GAAGL,GAAG,GAAGE,GAAG,IAAIY,GAAG;EACnDnC,GAAG,CAAC,EAAE,CAAC,GAAG,CAACgB,GAAG,GAAGU,GAAG,GAAGT,GAAG,GAAGO,GAAG,GAAGN,GAAG,GAAGK,GAAG,IAAIY,GAAG;EAEnD,OAAOnC,GAAG;AACd,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACAF,IAAI,CAACsC,OAAO,GAAG,UAASpC,GAAG,EAAEE,CAAC,EAAE;EAC5B,IAAIW,GAAG,GAAGX,CAAC,CAAC,CAAC,CAAC;IAAEI,GAAG,GAAGJ,CAAC,CAAC,CAAC,CAAC;IAAEK,GAAG,GAAGL,CAAC,CAAC,CAAC,CAAC;IAAEM,GAAG,GAAGN,CAAC,CAAC,CAAC,CAAC;IAC9CY,GAAG,GAAGZ,CAAC,CAAC,CAAC,CAAC;IAAEa,GAAG,GAAGb,CAAC,CAAC,CAAC,CAAC;IAAEO,GAAG,GAAGP,CAAC,CAAC,CAAC,CAAC;IAAEQ,GAAG,GAAGR,CAAC,CAAC,CAAC,CAAC;IAC9Cc,GAAG,GAAGd,CAAC,CAAC,CAAC,CAAC;IAAEe,GAAG,GAAGf,CAAC,CAAC,CAAC,CAAC;IAAEgB,GAAG,GAAGhB,CAAC,CAAC,EAAE,CAAC;IAAES,GAAG,GAAGT,CAAC,CAAC,EAAE,CAAC;IAChDiB,GAAG,GAAGjB,CAAC,CAAC,EAAE,CAAC;IAAEkB,GAAG,GAAGlB,CAAC,CAAC,EAAE,CAAC;IAAEmB,GAAG,GAAGnB,CAAC,CAAC,EAAE,CAAC;IAAEoB,GAAG,GAAGpB,CAAC,CAAC,EAAE,CAAC;EAEtDF,GAAG,CAAC,CAAC,CAAC,GAAMe,GAAG,IAAIG,GAAG,GAAGI,GAAG,GAAGX,GAAG,GAAGU,GAAG,CAAC,GAAGJ,GAAG,IAAIR,GAAG,GAAGa,GAAG,GAAGZ,GAAG,GAAGW,GAAG,CAAC,GAAGD,GAAG,IAAIX,GAAG,GAAGE,GAAG,GAAGD,GAAG,GAAGQ,GAAG,CAAE;EAC1GlB,GAAG,CAAC,CAAC,CAAC,GAAI,EAAEM,GAAG,IAAIY,GAAG,GAAGI,GAAG,GAAGX,GAAG,GAAGU,GAAG,CAAC,GAAGJ,GAAG,IAAIV,GAAG,GAAGe,GAAG,GAAGd,GAAG,GAAGa,GAAG,CAAC,GAAGD,GAAG,IAAIb,GAAG,GAAGI,GAAG,GAAGH,GAAG,GAAGU,GAAG,CAAC,CAAC;EAC1GlB,GAAG,CAAC,CAAC,CAAC,GAAMM,GAAG,IAAIG,GAAG,GAAGa,GAAG,GAAGZ,GAAG,GAAGW,GAAG,CAAC,GAAGN,GAAG,IAAIR,GAAG,GAAGe,GAAG,GAAGd,GAAG,GAAGa,GAAG,CAAC,GAAGD,GAAG,IAAIb,GAAG,GAAGG,GAAG,GAAGF,GAAG,GAAGC,GAAG,CAAE;EAC1GT,GAAG,CAAC,CAAC,CAAC,GAAI,EAAEM,GAAG,IAAIG,GAAG,GAAGE,GAAG,GAAGD,GAAG,GAAGQ,GAAG,CAAC,GAAGH,GAAG,IAAIR,GAAG,GAAGI,GAAG,GAAGH,GAAG,GAAGU,GAAG,CAAC,GAAGD,GAAG,IAAIV,GAAG,GAAGG,GAAG,GAAGF,GAAG,GAAGC,GAAG,CAAC,CAAC;EAC1GT,GAAG,CAAC,CAAC,CAAC,GAAI,EAAEc,GAAG,IAAII,GAAG,GAAGI,GAAG,GAAGX,GAAG,GAAGU,GAAG,CAAC,GAAGL,GAAG,IAAIP,GAAG,GAAGa,GAAG,GAAGZ,GAAG,GAAGW,GAAG,CAAC,GAAGF,GAAG,IAAIV,GAAG,GAAGE,GAAG,GAAGD,GAAG,GAAGQ,GAAG,CAAC,CAAC;EAC1GlB,GAAG,CAAC,CAAC,CAAC,GAAMa,GAAG,IAAIK,GAAG,GAAGI,GAAG,GAAGX,GAAG,GAAGU,GAAG,CAAC,GAAGL,GAAG,IAAIT,GAAG,GAAGe,GAAG,GAAGd,GAAG,GAAGa,GAAG,CAAC,GAAGF,GAAG,IAAIZ,GAAG,GAAGI,GAAG,GAAGH,GAAG,GAAGU,GAAG,CAAE;EAC1GlB,GAAG,CAAC,CAAC,CAAC,GAAI,EAAEa,GAAG,IAAIJ,GAAG,GAAGa,GAAG,GAAGZ,GAAG,GAAGW,GAAG,CAAC,GAAGP,GAAG,IAAIP,GAAG,GAAGe,GAAG,GAAGd,GAAG,GAAGa,GAAG,CAAC,GAAGF,GAAG,IAAIZ,GAAG,GAAGG,GAAG,GAAGF,GAAG,GAAGC,GAAG,CAAC,CAAC;EAC1GT,GAAG,CAAC,CAAC,CAAC,GAAMa,GAAG,IAAIJ,GAAG,GAAGE,GAAG,GAAGD,GAAG,GAAGQ,GAAG,CAAC,GAAGJ,GAAG,IAAIP,GAAG,GAAGI,GAAG,GAAGH,GAAG,GAAGU,GAAG,CAAC,GAAGF,GAAG,IAAIT,GAAG,GAAGG,GAAG,GAAGF,GAAG,GAAGC,GAAG,CAAE;EAC1GT,GAAG,CAAC,CAAC,CAAC,GAAMc,GAAG,IAAIG,GAAG,GAAGK,GAAG,GAAGX,GAAG,GAAGS,GAAG,CAAC,GAAGJ,GAAG,IAAID,GAAG,GAAGO,GAAG,GAAGZ,GAAG,GAAGU,GAAG,CAAC,GAAGD,GAAG,IAAIJ,GAAG,GAAGJ,GAAG,GAAGD,GAAG,GAAGO,GAAG,CAAE;EAC1GjB,GAAG,CAAC,CAAC,CAAC,GAAI,EAAEa,GAAG,IAAII,GAAG,GAAGK,GAAG,GAAGX,GAAG,GAAGS,GAAG,CAAC,GAAGJ,GAAG,IAAIV,GAAG,GAAGgB,GAAG,GAAGd,GAAG,GAAGY,GAAG,CAAC,GAAGD,GAAG,IAAIb,GAAG,GAAGK,GAAG,GAAGH,GAAG,GAAGS,GAAG,CAAC,CAAC;EAC1GjB,GAAG,CAAC,EAAE,CAAC,GAAKa,GAAG,IAAIE,GAAG,GAAGO,GAAG,GAAGZ,GAAG,GAAGU,GAAG,CAAC,GAAGN,GAAG,IAAIR,GAAG,GAAGgB,GAAG,GAAGd,GAAG,GAAGY,GAAG,CAAC,GAAGD,GAAG,IAAIb,GAAG,GAAGI,GAAG,GAAGF,GAAG,GAAGO,GAAG,CAAE;EAC1Gf,GAAG,CAAC,EAAE,CAAC,GAAG,EAAEa,GAAG,IAAIE,GAAG,GAAGJ,GAAG,GAAGD,GAAG,GAAGO,GAAG,CAAC,GAAGH,GAAG,IAAIR,GAAG,GAAGK,GAAG,GAAGH,GAAG,GAAGS,GAAG,CAAC,GAAGD,GAAG,IAAIV,GAAG,GAAGI,GAAG,GAAGF,GAAG,GAAGO,GAAG,CAAC,CAAC;EAC1Gf,GAAG,CAAC,EAAE,CAAC,GAAG,EAAEc,GAAG,IAAIG,GAAG,GAAGI,GAAG,GAAGH,GAAG,GAAGE,GAAG,CAAC,GAAGJ,GAAG,IAAID,GAAG,GAAGM,GAAG,GAAGZ,GAAG,GAAGW,GAAG,CAAC,GAAGD,GAAG,IAAIJ,GAAG,GAAGG,GAAG,GAAGT,GAAG,GAAGQ,GAAG,CAAC,CAAC;EAC1GjB,GAAG,CAAC,EAAE,CAAC,GAAKa,GAAG,IAAII,GAAG,GAAGI,GAAG,GAAGH,GAAG,GAAGE,GAAG,CAAC,GAAGJ,GAAG,IAAIV,GAAG,GAAGe,GAAG,GAAGd,GAAG,GAAGa,GAAG,CAAC,GAAGD,GAAG,IAAIb,GAAG,GAAGY,GAAG,GAAGX,GAAG,GAAGU,GAAG,CAAE;EAC1GjB,GAAG,CAAC,EAAE,CAAC,GAAG,EAAEa,GAAG,IAAIE,GAAG,GAAGM,GAAG,GAAGZ,GAAG,GAAGW,GAAG,CAAC,GAAGN,GAAG,IAAIR,GAAG,GAAGe,GAAG,GAAGd,GAAG,GAAGa,GAAG,CAAC,GAAGD,GAAG,IAAIb,GAAG,GAAGG,GAAG,GAAGF,GAAG,GAAGQ,GAAG,CAAC,CAAC;EAC1Gf,GAAG,CAAC,EAAE,CAAC,GAAKa,GAAG,IAAIE,GAAG,GAAGG,GAAG,GAAGT,GAAG,GAAGQ,GAAG,CAAC,GAAGH,GAAG,IAAIR,GAAG,GAAGY,GAAG,GAAGX,GAAG,GAAGU,GAAG,CAAC,GAAGD,GAAG,IAAIV,GAAG,GAAGG,GAAG,GAAGF,GAAG,GAAGQ,GAAG,CAAE;EAC1G,OAAOf,GAAG;AACd,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACAF,IAAI,CAACuC,WAAW,GAAG,UAAUnC,CAAC,EAAE;EAC5B,IAAIW,GAAG,GAAGX,CAAC,CAAC,CAAC,CAAC;IAAEI,GAAG,GAAGJ,CAAC,CAAC,CAAC,CAAC;IAAEK,GAAG,GAAGL,CAAC,CAAC,CAAC,CAAC;IAAEM,GAAG,GAAGN,CAAC,CAAC,CAAC,CAAC;IAC9CY,GAAG,GAAGZ,CAAC,CAAC,CAAC,CAAC;IAAEa,GAAG,GAAGb,CAAC,CAAC,CAAC,CAAC;IAAEO,GAAG,GAAGP,CAAC,CAAC,CAAC,CAAC;IAAEQ,GAAG,GAAGR,CAAC,CAAC,CAAC,CAAC;IAC9Cc,GAAG,GAAGd,CAAC,CAAC,CAAC,CAAC;IAAEe,GAAG,GAAGf,CAAC,CAAC,CAAC,CAAC;IAAEgB,GAAG,GAAGhB,CAAC,CAAC,EAAE,CAAC;IAAES,GAAG,GAAGT,CAAC,CAAC,EAAE,CAAC;IAChDiB,GAAG,GAAGjB,CAAC,CAAC,EAAE,CAAC;IAAEkB,GAAG,GAAGlB,CAAC,CAAC,EAAE,CAAC;IAAEmB,GAAG,GAAGnB,CAAC,CAAC,EAAE,CAAC;IAAEoB,GAAG,GAAGpB,CAAC,CAAC,EAAE,CAAC;IAElDqB,GAAG,GAAGV,GAAG,GAAGE,GAAG,GAAGT,GAAG,GAAGQ,GAAG;IAC3BU,GAAG,GAAGX,GAAG,GAAGJ,GAAG,GAAGF,GAAG,GAAGO,GAAG;IAC3BW,GAAG,GAAGZ,GAAG,GAAGH,GAAG,GAAGF,GAAG,GAAGM,GAAG;IAC3BY,GAAG,GAAGpB,GAAG,GAAGG,GAAG,GAAGF,GAAG,GAAGQ,GAAG;IAC3BY,GAAG,GAAGrB,GAAG,GAAGI,GAAG,GAAGF,GAAG,GAAGO,GAAG;IAC3Ba,GAAG,GAAGrB,GAAG,GAAGG,GAAG,GAAGF,GAAG,GAAGC,GAAG;IAC3BoB,GAAG,GAAGb,GAAG,GAAGI,GAAG,GAAGH,GAAG,GAAGE,GAAG;IAC3BW,GAAG,GAAGd,GAAG,GAAGK,GAAG,GAAGH,GAAG,GAAGC,GAAG;IAC3BY,GAAG,GAAGf,GAAG,GAAGM,GAAG,GAAGX,GAAG,GAAGQ,GAAG;IAC3Ba,GAAG,GAAGf,GAAG,GAAGI,GAAG,GAAGH,GAAG,GAAGE,GAAG;IAC3Ba,GAAG,GAAGhB,GAAG,GAAGK,GAAG,GAAGX,GAAG,GAAGS,GAAG;IAC3Bc,GAAG,GAAGhB,GAAG,GAAGI,GAAG,GAAGX,GAAG,GAAGU,GAAG;;EAE/B;EACA,OAAOE,GAAG,GAAGW,GAAG,GAAGV,GAAG,GAAGS,GAAG,GAAGR,GAAG,GAAGO,GAAG,GAAGN,GAAG,GAAGK,GAAG,GAAGJ,GAAG,GAAGG,GAAG,GAAGF,GAAG,GAAGC,GAAG;AAChF,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA/B,IAAI,CAACwC,QAAQ,GAAG,UAAUtC,GAAG,EAAEE,CAAC,EAAEqC,CAAC,EAAE;EACjC,IAAI1B,GAAG,GAAGX,CAAC,CAAC,CAAC,CAAC;IAAEI,GAAG,GAAGJ,CAAC,CAAC,CAAC,CAAC;IAAEK,GAAG,GAAGL,CAAC,CAAC,CAAC,CAAC;IAAEM,GAAG,GAAGN,CAAC,CAAC,CAAC,CAAC;IAC9CY,GAAG,GAAGZ,CAAC,CAAC,CAAC,CAAC;IAAEa,GAAG,GAAGb,CAAC,CAAC,CAAC,CAAC;IAAEO,GAAG,GAAGP,CAAC,CAAC,CAAC,CAAC;IAAEQ,GAAG,GAAGR,CAAC,CAAC,CAAC,CAAC;IAC9Cc,GAAG,GAAGd,CAAC,CAAC,CAAC,CAAC;IAAEe,GAAG,GAAGf,CAAC,CAAC,CAAC,CAAC;IAAEgB,GAAG,GAAGhB,CAAC,CAAC,EAAE,CAAC;IAAES,GAAG,GAAGT,CAAC,CAAC,EAAE,CAAC;IAChDiB,GAAG,GAAGjB,CAAC,CAAC,EAAE,CAAC;IAAEkB,GAAG,GAAGlB,CAAC,CAAC,EAAE,CAAC;IAAEmB,GAAG,GAAGnB,CAAC,CAAC,EAAE,CAAC;IAAEoB,GAAG,GAAGpB,CAAC,CAAC,EAAE,CAAC;;EAEtD;EACA,IAAIsC,EAAE,GAAID,CAAC,CAAC,CAAC,CAAC;IAAEE,EAAE,GAAGF,CAAC,CAAC,CAAC,CAAC;IAAEG,EAAE,GAAGH,CAAC,CAAC,CAAC,CAAC;IAAEI,EAAE,GAAGJ,CAAC,CAAC,CAAC,CAAC;EAC/CvC,GAAG,CAAC,CAAC,CAAC,GAAGwC,EAAE,GAAC3B,GAAG,GAAG4B,EAAE,GAAC3B,GAAG,GAAG4B,EAAE,GAAC1B,GAAG,GAAG2B,EAAE,GAACxB,GAAG;EAC1CnB,GAAG,CAAC,CAAC,CAAC,GAAGwC,EAAE,GAAClC,GAAG,GAAGmC,EAAE,GAAC1B,GAAG,GAAG2B,EAAE,GAACzB,GAAG,GAAG0B,EAAE,GAACvB,GAAG;EAC1CpB,GAAG,CAAC,CAAC,CAAC,GAAGwC,EAAE,GAACjC,GAAG,GAAGkC,EAAE,GAAChC,GAAG,GAAGiC,EAAE,GAACxB,GAAG,GAAGyB,EAAE,GAACtB,GAAG;EAC1CrB,GAAG,CAAC,CAAC,CAAC,GAAGwC,EAAE,GAAChC,GAAG,GAAGiC,EAAE,GAAC/B,GAAG,GAAGgC,EAAE,GAAC/B,GAAG,GAAGgC,EAAE,GAACrB,GAAG;EAE1CkB,EAAE,GAAGD,CAAC,CAAC,CAAC,CAAC;EAAEE,EAAE,GAAGF,CAAC,CAAC,CAAC,CAAC;EAAEG,EAAE,GAAGH,CAAC,CAAC,CAAC,CAAC;EAAEI,EAAE,GAAGJ,CAAC,CAAC,CAAC,CAAC;EAC1CvC,GAAG,CAAC,CAAC,CAAC,GAAGwC,EAAE,GAAC3B,GAAG,GAAG4B,EAAE,GAAC3B,GAAG,GAAG4B,EAAE,GAAC1B,GAAG,GAAG2B,EAAE,GAACxB,GAAG;EAC1CnB,GAAG,CAAC,CAAC,CAAC,GAAGwC,EAAE,GAAClC,GAAG,GAAGmC,EAAE,GAAC1B,GAAG,GAAG2B,EAAE,GAACzB,GAAG,GAAG0B,EAAE,GAACvB,GAAG;EAC1CpB,GAAG,CAAC,CAAC,CAAC,GAAGwC,EAAE,GAACjC,GAAG,GAAGkC,EAAE,GAAChC,GAAG,GAAGiC,EAAE,GAACxB,GAAG,GAAGyB,EAAE,GAACtB,GAAG;EAC1CrB,GAAG,CAAC,CAAC,CAAC,GAAGwC,EAAE,GAAChC,GAAG,GAAGiC,EAAE,GAAC/B,GAAG,GAAGgC,EAAE,GAAC/B,GAAG,GAAGgC,EAAE,GAACrB,GAAG;EAE1CkB,EAAE,GAAGD,CAAC,CAAC,CAAC,CAAC;EAAEE,EAAE,GAAGF,CAAC,CAAC,CAAC,CAAC;EAAEG,EAAE,GAAGH,CAAC,CAAC,EAAE,CAAC;EAAEI,EAAE,GAAGJ,CAAC,CAAC,EAAE,CAAC;EAC5CvC,GAAG,CAAC,CAAC,CAAC,GAAGwC,EAAE,GAAC3B,GAAG,GAAG4B,EAAE,GAAC3B,GAAG,GAAG4B,EAAE,GAAC1B,GAAG,GAAG2B,EAAE,GAACxB,GAAG;EAC1CnB,GAAG,CAAC,CAAC,CAAC,GAAGwC,EAAE,GAAClC,GAAG,GAAGmC,EAAE,GAAC1B,GAAG,GAAG2B,EAAE,GAACzB,GAAG,GAAG0B,EAAE,GAACvB,GAAG;EAC1CpB,GAAG,CAAC,EAAE,CAAC,GAAGwC,EAAE,GAACjC,GAAG,GAAGkC,EAAE,GAAChC,GAAG,GAAGiC,EAAE,GAACxB,GAAG,GAAGyB,EAAE,GAACtB,GAAG;EAC3CrB,GAAG,CAAC,EAAE,CAAC,GAAGwC,EAAE,GAAChC,GAAG,GAAGiC,EAAE,GAAC/B,GAAG,GAAGgC,EAAE,GAAC/B,GAAG,GAAGgC,EAAE,GAACrB,GAAG;EAE3CkB,EAAE,GAAGD,CAAC,CAAC,EAAE,CAAC;EAAEE,EAAE,GAAGF,CAAC,CAAC,EAAE,CAAC;EAAEG,EAAE,GAAGH,CAAC,CAAC,EAAE,CAAC;EAAEI,EAAE,GAAGJ,CAAC,CAAC,EAAE,CAAC;EAC9CvC,GAAG,CAAC,EAAE,CAAC,GAAGwC,EAAE,GAAC3B,GAAG,GAAG4B,EAAE,GAAC3B,GAAG,GAAG4B,EAAE,GAAC1B,GAAG,GAAG2B,EAAE,GAACxB,GAAG;EAC3CnB,GAAG,CAAC,EAAE,CAAC,GAAGwC,EAAE,GAAClC,GAAG,GAAGmC,EAAE,GAAC1B,GAAG,GAAG2B,EAAE,GAACzB,GAAG,GAAG0B,EAAE,GAACvB,GAAG;EAC3CpB,GAAG,CAAC,EAAE,CAAC,GAAGwC,EAAE,GAACjC,GAAG,GAAGkC,EAAE,GAAChC,GAAG,GAAGiC,EAAE,GAACxB,GAAG,GAAGyB,EAAE,GAACtB,GAAG;EAC3CrB,GAAG,CAAC,EAAE,CAAC,GAAGwC,EAAE,GAAChC,GAAG,GAAGiC,EAAE,GAAC/B,GAAG,GAAGgC,EAAE,GAAC/B,GAAG,GAAGgC,EAAE,GAACrB,GAAG;EAC3C,OAAOtB,GAAG;AACd,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAF,IAAI,CAAC8C,cAAc,GAAG,UAAU5C,GAAG,EAAEE,CAAC,EAAEqC,CAAC,EAAE;EACvC,IAAI1B,GAAG,GAAGX,CAAC,CAAC,CAAC,CAAC;IAAEI,GAAG,GAAGJ,CAAC,CAAC,CAAC,CAAC;IAAEK,GAAG,GAAGL,CAAC,CAAC,CAAC,CAAC;IAClCY,GAAG,GAAGZ,CAAC,CAAC,CAAC,CAAC;IAAEa,GAAG,GAAGb,CAAC,CAAC,CAAC,CAAC;IAAEO,GAAG,GAAGP,CAAC,CAAC,CAAC,CAAC;IAClCc,GAAG,GAAGd,CAAC,CAAC,CAAC,CAAC;IAAEe,GAAG,GAAGf,CAAC,CAAC,CAAC,CAAC;IAAEgB,GAAG,GAAGhB,CAAC,CAAC,EAAE,CAAC;IACnCiB,GAAG,GAAGjB,CAAC,CAAC,EAAE,CAAC;IAAEkB,GAAG,GAAGlB,CAAC,CAAC,EAAE,CAAC;IAAEmB,GAAG,GAAGnB,CAAC,CAAC,EAAE,CAAC;;EAEzC;EACA,IAAIsC,EAAE,GAAID,CAAC,CAAC,CAAC,CAAC;IAAEE,EAAE,GAAGF,CAAC,CAAC,CAAC,CAAC;IAAEG,EAAE,GAAGH,CAAC,CAAC,CAAC,CAAC;EACpCvC,GAAG,CAAC,CAAC,CAAC,GAAGwC,EAAE,GAAC3B,GAAG,GAAG4B,EAAE,GAAC3B,GAAG,GAAG4B,EAAE,GAAC1B,GAAG;EACjChB,GAAG,CAAC,CAAC,CAAC,GAAGwC,EAAE,GAAClC,GAAG,GAAGmC,EAAE,GAAC1B,GAAG,GAAG2B,EAAE,GAACzB,GAAG;EACjCjB,GAAG,CAAC,CAAC,CAAC,GAAGwC,EAAE,GAACjC,GAAG,GAAGkC,EAAE,GAAChC,GAAG,GAAGiC,EAAE,GAACxB,GAAG;EACjC;;EAEAsB,EAAE,GAAGD,CAAC,CAAC,CAAC,CAAC;EAAEE,EAAE,GAAGF,CAAC,CAAC,CAAC,CAAC;EAAEG,EAAE,GAAGH,CAAC,CAAC,CAAC,CAAC;EAC/BvC,GAAG,CAAC,CAAC,CAAC,GAAGwC,EAAE,GAAC3B,GAAG,GAAG4B,EAAE,GAAC3B,GAAG,GAAG4B,EAAE,GAAC1B,GAAG;EACjChB,GAAG,CAAC,CAAC,CAAC,GAAGwC,EAAE,GAAClC,GAAG,GAAGmC,EAAE,GAAC1B,GAAG,GAAG2B,EAAE,GAACzB,GAAG;EACjCjB,GAAG,CAAC,CAAC,CAAC,GAAGwC,EAAE,GAACjC,GAAG,GAAGkC,EAAE,GAAChC,GAAG,GAAGiC,EAAE,GAACxB,GAAG;EACjC;;EAEAsB,EAAE,GAAGD,CAAC,CAAC,CAAC,CAAC;EAAEE,EAAE,GAAGF,CAAC,CAAC,CAAC,CAAC;EAAEG,EAAE,GAAGH,CAAC,CAAC,EAAE,CAAC;EAChCvC,GAAG,CAAC,CAAC,CAAC,GAAGwC,EAAE,GAAC3B,GAAG,GAAG4B,EAAE,GAAC3B,GAAG,GAAG4B,EAAE,GAAC1B,GAAG;EACjChB,GAAG,CAAC,CAAC,CAAC,GAAGwC,EAAE,GAAClC,GAAG,GAAGmC,EAAE,GAAC1B,GAAG,GAAG2B,EAAE,GAACzB,GAAG;EACjCjB,GAAG,CAAC,EAAE,CAAC,GAAGwC,EAAE,GAACjC,GAAG,GAAGkC,EAAE,GAAChC,GAAG,GAAGiC,EAAE,GAACxB,GAAG;EAClC;;EAEAsB,EAAE,GAAGD,CAAC,CAAC,EAAE,CAAC;EAAEE,EAAE,GAAGF,CAAC,CAAC,EAAE,CAAC;EAAEG,EAAE,GAAGH,CAAC,CAAC,EAAE,CAAC;EAClCvC,GAAG,CAAC,EAAE,CAAC,GAAGwC,EAAE,GAAC3B,GAAG,GAAG4B,EAAE,GAAC3B,GAAG,GAAG4B,EAAE,GAAC1B,GAAG,GAAGG,GAAG;EACxCnB,GAAG,CAAC,EAAE,CAAC,GAAGwC,EAAE,GAAClC,GAAG,GAAGmC,EAAE,GAAC1B,GAAG,GAAG2B,EAAE,GAACzB,GAAG,GAAGG,GAAG;EACxCpB,GAAG,CAAC,EAAE,CAAC,GAAGwC,EAAE,GAACjC,GAAG,GAAGkC,EAAE,GAAChC,GAAG,GAAGiC,EAAE,GAACxB,GAAG,GAAGG,GAAG;EACxC;EACA,OAAOrB,GAAG;AACd,CAAC;;AAED;AACA;AACA;AACA;AACAF,IAAI,CAAC+C,GAAG,GAAG/C,IAAI,CAACwC,QAAQ;;AAExB;AACA;AACA;AACA;AACAxC,IAAI,CAACgD,SAAS,GAAGhD,IAAI,CAAC8C,cAAc;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA9C,IAAI,CAACiD,SAAS,GAAG,UAAU/C,GAAG,EAAEE,CAAC,EAAE8C,CAAC,EAAE;EAClC,IAAIC,CAAC,GAAGD,CAAC,CAAC,CAAC,CAAC;IAAEE,CAAC,GAAGF,CAAC,CAAC,CAAC,CAAC;IAAEG,CAAC,GAAGH,CAAC,CAAC,CAAC,CAAC;IAC5BnC,GAAG;IAAEP,GAAG;IAAEC,GAAG;IAAEC,GAAG;IAClBM,GAAG;IAAEC,GAAG;IAAEN,GAAG;IAAEC,GAAG;IAClBM,GAAG;IAAEC,GAAG;IAAEC,GAAG;IAAEP,GAAG;EAEtB,IAAIT,CAAC,KAAKF,GAAG,EAAE;IACXA,GAAG,CAAC,EAAE,CAAC,GAAGE,CAAC,CAAC,CAAC,CAAC,GAAG+C,CAAC,GAAG/C,CAAC,CAAC,CAAC,CAAC,GAAGgD,CAAC,GAAGhD,CAAC,CAAC,CAAC,CAAC,GAAGiD,CAAC,GAAGjD,CAAC,CAAC,EAAE,CAAC;IAChDF,GAAG,CAAC,EAAE,CAAC,GAAGE,CAAC,CAAC,CAAC,CAAC,GAAG+C,CAAC,GAAG/C,CAAC,CAAC,CAAC,CAAC,GAAGgD,CAAC,GAAGhD,CAAC,CAAC,CAAC,CAAC,GAAGiD,CAAC,GAAGjD,CAAC,CAAC,EAAE,CAAC;IAChDF,GAAG,CAAC,EAAE,CAAC,GAAGE,CAAC,CAAC,CAAC,CAAC,GAAG+C,CAAC,GAAG/C,CAAC,CAAC,CAAC,CAAC,GAAGgD,CAAC,GAAGhD,CAAC,CAAC,EAAE,CAAC,GAAGiD,CAAC,GAAGjD,CAAC,CAAC,EAAE,CAAC;IACjDF,GAAG,CAAC,EAAE,CAAC,GAAGE,CAAC,CAAC,CAAC,CAAC,GAAG+C,CAAC,GAAG/C,CAAC,CAAC,CAAC,CAAC,GAAGgD,CAAC,GAAGhD,CAAC,CAAC,EAAE,CAAC,GAAGiD,CAAC,GAAGjD,CAAC,CAAC,EAAE,CAAC;EACrD,CAAC,MAAM;IACHW,GAAG,GAAGX,CAAC,CAAC,CAAC,CAAC;IAAEI,GAAG,GAAGJ,CAAC,CAAC,CAAC,CAAC;IAAEK,GAAG,GAAGL,CAAC,CAAC,CAAC,CAAC;IAAEM,GAAG,GAAGN,CAAC,CAAC,CAAC,CAAC;IAC9CY,GAAG,GAAGZ,CAAC,CAAC,CAAC,CAAC;IAAEa,GAAG,GAAGb,CAAC,CAAC,CAAC,CAAC;IAAEO,GAAG,GAAGP,CAAC,CAAC,CAAC,CAAC;IAAEQ,GAAG,GAAGR,CAAC,CAAC,CAAC,CAAC;IAC9Cc,GAAG,GAAGd,CAAC,CAAC,CAAC,CAAC;IAAEe,GAAG,GAAGf,CAAC,CAAC,CAAC,CAAC;IAAEgB,GAAG,GAAGhB,CAAC,CAAC,EAAE,CAAC;IAAES,GAAG,GAAGT,CAAC,CAAC,EAAE,CAAC;IAEhDF,GAAG,CAAC,CAAC,CAAC,GAAGa,GAAG;IAAEb,GAAG,CAAC,CAAC,CAAC,GAAGM,GAAG;IAAEN,GAAG,CAAC,CAAC,CAAC,GAAGO,GAAG;IAAEP,GAAG,CAAC,CAAC,CAAC,GAAGQ,GAAG;IACtDR,GAAG,CAAC,CAAC,CAAC,GAAGc,GAAG;IAAEd,GAAG,CAAC,CAAC,CAAC,GAAGe,GAAG;IAAEf,GAAG,CAAC,CAAC,CAAC,GAAGS,GAAG;IAAET,GAAG,CAAC,CAAC,CAAC,GAAGU,GAAG;IACtDV,GAAG,CAAC,CAAC,CAAC,GAAGgB,GAAG;IAAEhB,GAAG,CAAC,CAAC,CAAC,GAAGiB,GAAG;IAAEjB,GAAG,CAAC,EAAE,CAAC,GAAGkB,GAAG;IAAElB,GAAG,CAAC,EAAE,CAAC,GAAGW,GAAG;IAExDX,GAAG,CAAC,EAAE,CAAC,GAAGa,GAAG,GAAGoC,CAAC,GAAGnC,GAAG,GAAGoC,CAAC,GAAGlC,GAAG,GAAGmC,CAAC,GAAGjD,CAAC,CAAC,EAAE,CAAC;IAC7CF,GAAG,CAAC,EAAE,CAAC,GAAGM,GAAG,GAAG2C,CAAC,GAAGlC,GAAG,GAAGmC,CAAC,GAAGjC,GAAG,GAAGkC,CAAC,GAAGjD,CAAC,CAAC,EAAE,CAAC;IAC7CF,GAAG,CAAC,EAAE,CAAC,GAAGO,GAAG,GAAG0C,CAAC,GAAGxC,GAAG,GAAGyC,CAAC,GAAGhC,GAAG,GAAGiC,CAAC,GAAGjD,CAAC,CAAC,EAAE,CAAC;IAC7CF,GAAG,CAAC,EAAE,CAAC,GAAGQ,GAAG,GAAGyC,CAAC,GAAGvC,GAAG,GAAGwC,CAAC,GAAGvC,GAAG,GAAGwC,CAAC,GAAGjD,CAAC,CAAC,EAAE,CAAC;EACjD;EAEA,OAAOF,GAAG;AACd,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAF,IAAI,CAACsD,KAAK,GAAG,UAASpD,GAAG,EAAEE,CAAC,EAAE8C,CAAC,EAAE;EAC7B,IAAIC,CAAC,GAAGD,CAAC,CAAC,CAAC,CAAC;IAAEE,CAAC,GAAGF,CAAC,CAAC,CAAC,CAAC;IAAEG,CAAC,GAAGH,CAAC,CAAC,CAAC,CAAC;EAEhChD,GAAG,CAAC,CAAC,CAAC,GAAGE,CAAC,CAAC,CAAC,CAAC,GAAG+C,CAAC;EACjBjD,GAAG,CAAC,CAAC,CAAC,GAAGE,CAAC,CAAC,CAAC,CAAC,GAAG+C,CAAC;EACjBjD,GAAG,CAAC,CAAC,CAAC,GAAGE,CAAC,CAAC,CAAC,CAAC,GAAG+C,CAAC;EACjBjD,GAAG,CAAC,CAAC,CAAC,GAAGE,CAAC,CAAC,CAAC,CAAC,GAAG+C,CAAC;EACjBjD,GAAG,CAAC,CAAC,CAAC,GAAGE,CAAC,CAAC,CAAC,CAAC,GAAGgD,CAAC;EACjBlD,GAAG,CAAC,CAAC,CAAC,GAAGE,CAAC,CAAC,CAAC,CAAC,GAAGgD,CAAC;EACjBlD,GAAG,CAAC,CAAC,CAAC,GAAGE,CAAC,CAAC,CAAC,CAAC,GAAGgD,CAAC;EACjBlD,GAAG,CAAC,CAAC,CAAC,GAAGE,CAAC,CAAC,CAAC,CAAC,GAAGgD,CAAC;EACjBlD,GAAG,CAAC,CAAC,CAAC,GAAGE,CAAC,CAAC,CAAC,CAAC,GAAGiD,CAAC;EACjBnD,GAAG,CAAC,CAAC,CAAC,GAAGE,CAAC,CAAC,CAAC,CAAC,GAAGiD,CAAC;EACjBnD,GAAG,CAAC,EAAE,CAAC,GAAGE,CAAC,CAAC,EAAE,CAAC,GAAGiD,CAAC;EACnBnD,GAAG,CAAC,EAAE,CAAC,GAAGE,CAAC,CAAC,EAAE,CAAC,GAAGiD,CAAC;EACnBnD,GAAG,CAAC,EAAE,CAAC,GAAGE,CAAC,CAAC,EAAE,CAAC;EACfF,GAAG,CAAC,EAAE,CAAC,GAAGE,CAAC,CAAC,EAAE,CAAC;EACfF,GAAG,CAAC,EAAE,CAAC,GAAGE,CAAC,CAAC,EAAE,CAAC;EACfF,GAAG,CAAC,EAAE,CAAC,GAAGE,CAAC,CAAC,EAAE,CAAC;EACf,OAAOF,GAAG;AACd,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAF,IAAI,CAACuD,MAAM,GAAG,UAAUrD,GAAG,EAAEE,CAAC,EAAEoD,GAAG,EAAEC,IAAI,EAAE;EACvC,IAAIN,CAAC,GAAGM,IAAI,CAAC,CAAC,CAAC;IAAEL,CAAC,GAAGK,IAAI,CAAC,CAAC,CAAC;IAAEJ,CAAC,GAAGI,IAAI,CAAC,CAAC,CAAC;IACrCC,GAAG,GAAGC,IAAI,CAACC,IAAI,CAACT,CAAC,GAAGA,CAAC,GAAGC,CAAC,GAAGA,CAAC,GAAGC,CAAC,GAAGA,CAAC,CAAC;IACtCQ,CAAC;IAAEC,CAAC;IAAEC,CAAC;IACPhD,GAAG;IAAEP,GAAG;IAAEC,GAAG;IAAEC,GAAG;IAClBM,GAAG;IAAEC,GAAG;IAAEN,GAAG;IAAEC,GAAG;IAClBM,GAAG;IAAEC,GAAG;IAAEC,GAAG;IAAEP,GAAG;IAClBY,GAAG;IAAEC,GAAG;IAAEC,GAAG;IACbQ,GAAG;IAAEC,GAAG;IAAE4B,GAAG;IACbC,GAAG;IAAEC,GAAG;IAAEC,GAAG;EAEjB,IAAIR,IAAI,CAACS,GAAG,CAACV,GAAG,CAAC,GAAG5D,aAAa,EAAE;IAAE,OAAO,IAAI;EAAE;EAElD4D,GAAG,GAAG,CAAC,GAAGA,GAAG;EACbP,CAAC,IAAIO,GAAG;EACRN,CAAC,IAAIM,GAAG;EACRL,CAAC,IAAIK,GAAG;EAERG,CAAC,GAAGF,IAAI,CAACU,GAAG,CAACb,GAAG,CAAC;EACjBM,CAAC,GAAGH,IAAI,CAACW,GAAG,CAACd,GAAG,CAAC;EACjBO,CAAC,GAAG,CAAC,GAAGD,CAAC;EAET/C,GAAG,GAAGX,CAAC,CAAC,CAAC,CAAC;EAAEI,GAAG,GAAGJ,CAAC,CAAC,CAAC,CAAC;EAAEK,GAAG,GAAGL,CAAC,CAAC,CAAC,CAAC;EAAEM,GAAG,GAAGN,CAAC,CAAC,CAAC,CAAC;EAC9CY,GAAG,GAAGZ,CAAC,CAAC,CAAC,CAAC;EAAEa,GAAG,GAAGb,CAAC,CAAC,CAAC,CAAC;EAAEO,GAAG,GAAGP,CAAC,CAAC,CAAC,CAAC;EAAEQ,GAAG,GAAGR,CAAC,CAAC,CAAC,CAAC;EAC9Cc,GAAG,GAAGd,CAAC,CAAC,CAAC,CAAC;EAAEe,GAAG,GAAGf,CAAC,CAAC,CAAC,CAAC;EAAEgB,GAAG,GAAGhB,CAAC,CAAC,EAAE,CAAC;EAAES,GAAG,GAAGT,CAAC,CAAC,EAAE,CAAC;;EAEhD;EACAqB,GAAG,GAAG0B,CAAC,GAAGA,CAAC,GAAGY,CAAC,GAAGD,CAAC;EAAEpC,GAAG,GAAG0B,CAAC,GAAGD,CAAC,GAAGY,CAAC,GAAGV,CAAC,GAAGQ,CAAC;EAAElC,GAAG,GAAG0B,CAAC,GAAGF,CAAC,GAAGY,CAAC,GAAGX,CAAC,GAAGS,CAAC;EACrE1B,GAAG,GAAGgB,CAAC,GAAGC,CAAC,GAAGW,CAAC,GAAGV,CAAC,GAAGQ,CAAC;EAAEzB,GAAG,GAAGgB,CAAC,GAAGA,CAAC,GAAGW,CAAC,GAAGD,CAAC;EAAEE,GAAG,GAAGX,CAAC,GAAGD,CAAC,GAAGW,CAAC,GAAGZ,CAAC,GAAGU,CAAC;EACrEI,GAAG,GAAGd,CAAC,GAAGE,CAAC,GAAGU,CAAC,GAAGX,CAAC,GAAGS,CAAC;EAAEK,GAAG,GAAGd,CAAC,GAAGC,CAAC,GAAGU,CAAC,GAAGZ,CAAC,GAAGU,CAAC;EAAEM,GAAG,GAAGd,CAAC,GAAGA,CAAC,GAAGU,CAAC,GAAGD,CAAC;;EAErE;EACA5D,GAAG,CAAC,CAAC,CAAC,GAAGa,GAAG,GAAGU,GAAG,GAAGT,GAAG,GAAGU,GAAG,GAAGR,GAAG,GAAGS,GAAG;EAC1CzB,GAAG,CAAC,CAAC,CAAC,GAAGM,GAAG,GAAGiB,GAAG,GAAGR,GAAG,GAAGS,GAAG,GAAGP,GAAG,GAAGQ,GAAG;EAC1CzB,GAAG,CAAC,CAAC,CAAC,GAAGO,GAAG,GAAGgB,GAAG,GAAGd,GAAG,GAAGe,GAAG,GAAGN,GAAG,GAAGO,GAAG;EAC1CzB,GAAG,CAAC,CAAC,CAAC,GAAGQ,GAAG,GAAGe,GAAG,GAAGb,GAAG,GAAGc,GAAG,GAAGb,GAAG,GAAGc,GAAG;EAC1CzB,GAAG,CAAC,CAAC,CAAC,GAAGa,GAAG,GAAGoB,GAAG,GAAGnB,GAAG,GAAGoB,GAAG,GAAGlB,GAAG,GAAG8C,GAAG;EAC1C9D,GAAG,CAAC,CAAC,CAAC,GAAGM,GAAG,GAAG2B,GAAG,GAAGlB,GAAG,GAAGmB,GAAG,GAAGjB,GAAG,GAAG6C,GAAG;EAC1C9D,GAAG,CAAC,CAAC,CAAC,GAAGO,GAAG,GAAG0B,GAAG,GAAGxB,GAAG,GAAGyB,GAAG,GAAGhB,GAAG,GAAG4C,GAAG;EAC1C9D,GAAG,CAAC,CAAC,CAAC,GAAGQ,GAAG,GAAGyB,GAAG,GAAGvB,GAAG,GAAGwB,GAAG,GAAGvB,GAAG,GAAGmD,GAAG;EAC1C9D,GAAG,CAAC,CAAC,CAAC,GAAGa,GAAG,GAAGkD,GAAG,GAAGjD,GAAG,GAAGkD,GAAG,GAAGhD,GAAG,GAAGiD,GAAG;EAC1CjE,GAAG,CAAC,CAAC,CAAC,GAAGM,GAAG,GAAGyD,GAAG,GAAGhD,GAAG,GAAGiD,GAAG,GAAG/C,GAAG,GAAGgD,GAAG;EAC1CjE,GAAG,CAAC,EAAE,CAAC,GAAGO,GAAG,GAAGwD,GAAG,GAAGtD,GAAG,GAAGuD,GAAG,GAAG9C,GAAG,GAAG+C,GAAG;EAC3CjE,GAAG,CAAC,EAAE,CAAC,GAAGQ,GAAG,GAAGuD,GAAG,GAAGrD,GAAG,GAAGsD,GAAG,GAAGrD,GAAG,GAAGsD,GAAG;EAE3C,IAAI/D,CAAC,KAAKF,GAAG,EAAE;IAAE;IACbA,GAAG,CAAC,EAAE,CAAC,GAAGE,CAAC,CAAC,EAAE,CAAC;IACfF,GAAG,CAAC,EAAE,CAAC,GAAGE,CAAC,CAAC,EAAE,CAAC;IACfF,GAAG,CAAC,EAAE,CAAC,GAAGE,CAAC,CAAC,EAAE,CAAC;IACfF,GAAG,CAAC,EAAE,CAAC,GAAGE,CAAC,CAAC,EAAE,CAAC;EACnB;EACA,OAAOF,GAAG;AACd,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAF,IAAI,CAACuE,OAAO,GAAG,UAAUrE,GAAG,EAAEE,CAAC,EAAEoD,GAAG,EAAE;EAClC,IAAIK,CAAC,GAAGF,IAAI,CAACU,GAAG,CAACb,GAAG,CAAC;IACjBM,CAAC,GAAGH,IAAI,CAACW,GAAG,CAACd,GAAG,CAAC;IACjBxC,GAAG,GAAGZ,CAAC,CAAC,CAAC,CAAC;IACVa,GAAG,GAAGb,CAAC,CAAC,CAAC,CAAC;IACVO,GAAG,GAAGP,CAAC,CAAC,CAAC,CAAC;IACVQ,GAAG,GAAGR,CAAC,CAAC,CAAC,CAAC;IACVc,GAAG,GAAGd,CAAC,CAAC,CAAC,CAAC;IACVe,GAAG,GAAGf,CAAC,CAAC,CAAC,CAAC;IACVgB,GAAG,GAAGhB,CAAC,CAAC,EAAE,CAAC;IACXS,GAAG,GAAGT,CAAC,CAAC,EAAE,CAAC;EAEf,IAAIA,CAAC,KAAKF,GAAG,EAAE;IAAE;IACbA,GAAG,CAAC,CAAC,CAAC,GAAIE,CAAC,CAAC,CAAC,CAAC;IACdF,GAAG,CAAC,CAAC,CAAC,GAAIE,CAAC,CAAC,CAAC,CAAC;IACdF,GAAG,CAAC,CAAC,CAAC,GAAIE,CAAC,CAAC,CAAC,CAAC;IACdF,GAAG,CAAC,CAAC,CAAC,GAAIE,CAAC,CAAC,CAAC,CAAC;IACdF,GAAG,CAAC,EAAE,CAAC,GAAGE,CAAC,CAAC,EAAE,CAAC;IACfF,GAAG,CAAC,EAAE,CAAC,GAAGE,CAAC,CAAC,EAAE,CAAC;IACfF,GAAG,CAAC,EAAE,CAAC,GAAGE,CAAC,CAAC,EAAE,CAAC;IACfF,GAAG,CAAC,EAAE,CAAC,GAAGE,CAAC,CAAC,EAAE,CAAC;EACnB;;EAEA;EACAF,GAAG,CAAC,CAAC,CAAC,GAAGc,GAAG,GAAG8C,CAAC,GAAG5C,GAAG,GAAG2C,CAAC;EAC1B3D,GAAG,CAAC,CAAC,CAAC,GAAGe,GAAG,GAAG6C,CAAC,GAAG3C,GAAG,GAAG0C,CAAC;EAC1B3D,GAAG,CAAC,CAAC,CAAC,GAAGS,GAAG,GAAGmD,CAAC,GAAG1C,GAAG,GAAGyC,CAAC;EAC1B3D,GAAG,CAAC,CAAC,CAAC,GAAGU,GAAG,GAAGkD,CAAC,GAAGjD,GAAG,GAAGgD,CAAC;EAC1B3D,GAAG,CAAC,CAAC,CAAC,GAAGgB,GAAG,GAAG4C,CAAC,GAAG9C,GAAG,GAAG6C,CAAC;EAC1B3D,GAAG,CAAC,CAAC,CAAC,GAAGiB,GAAG,GAAG2C,CAAC,GAAG7C,GAAG,GAAG4C,CAAC;EAC1B3D,GAAG,CAAC,EAAE,CAAC,GAAGkB,GAAG,GAAG0C,CAAC,GAAGnD,GAAG,GAAGkD,CAAC;EAC3B3D,GAAG,CAAC,EAAE,CAAC,GAAGW,GAAG,GAAGiD,CAAC,GAAGlD,GAAG,GAAGiD,CAAC;EAC3B,OAAO3D,GAAG;AACd,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAF,IAAI,CAACwE,OAAO,GAAG,UAAUtE,GAAG,EAAEE,CAAC,EAAEoD,GAAG,EAAE;EAClC,IAAIK,CAAC,GAAGF,IAAI,CAACU,GAAG,CAACb,GAAG,CAAC;IACjBM,CAAC,GAAGH,IAAI,CAACW,GAAG,CAACd,GAAG,CAAC;IACjBzC,GAAG,GAAGX,CAAC,CAAC,CAAC,CAAC;IACVI,GAAG,GAAGJ,CAAC,CAAC,CAAC,CAAC;IACVK,GAAG,GAAGL,CAAC,CAAC,CAAC,CAAC;IACVM,GAAG,GAAGN,CAAC,CAAC,CAAC,CAAC;IACVc,GAAG,GAAGd,CAAC,CAAC,CAAC,CAAC;IACVe,GAAG,GAAGf,CAAC,CAAC,CAAC,CAAC;IACVgB,GAAG,GAAGhB,CAAC,CAAC,EAAE,CAAC;IACXS,GAAG,GAAGT,CAAC,CAAC,EAAE,CAAC;EAEf,IAAIA,CAAC,KAAKF,GAAG,EAAE;IAAE;IACbA,GAAG,CAAC,CAAC,CAAC,GAAIE,CAAC,CAAC,CAAC,CAAC;IACdF,GAAG,CAAC,CAAC,CAAC,GAAIE,CAAC,CAAC,CAAC,CAAC;IACdF,GAAG,CAAC,CAAC,CAAC,GAAIE,CAAC,CAAC,CAAC,CAAC;IACdF,GAAG,CAAC,CAAC,CAAC,GAAIE,CAAC,CAAC,CAAC,CAAC;IACdF,GAAG,CAAC,EAAE,CAAC,GAAGE,CAAC,CAAC,EAAE,CAAC;IACfF,GAAG,CAAC,EAAE,CAAC,GAAGE,CAAC,CAAC,EAAE,CAAC;IACfF,GAAG,CAAC,EAAE,CAAC,GAAGE,CAAC,CAAC,EAAE,CAAC;IACfF,GAAG,CAAC,EAAE,CAAC,GAAGE,CAAC,CAAC,EAAE,CAAC;EACnB;;EAEA;EACAF,GAAG,CAAC,CAAC,CAAC,GAAGa,GAAG,GAAG+C,CAAC,GAAG5C,GAAG,GAAG2C,CAAC;EAC1B3D,GAAG,CAAC,CAAC,CAAC,GAAGM,GAAG,GAAGsD,CAAC,GAAG3C,GAAG,GAAG0C,CAAC;EAC1B3D,GAAG,CAAC,CAAC,CAAC,GAAGO,GAAG,GAAGqD,CAAC,GAAG1C,GAAG,GAAGyC,CAAC;EAC1B3D,GAAG,CAAC,CAAC,CAAC,GAAGQ,GAAG,GAAGoD,CAAC,GAAGjD,GAAG,GAAGgD,CAAC;EAC1B3D,GAAG,CAAC,CAAC,CAAC,GAAGa,GAAG,GAAG8C,CAAC,GAAG3C,GAAG,GAAG4C,CAAC;EAC1B5D,GAAG,CAAC,CAAC,CAAC,GAAGM,GAAG,GAAGqD,CAAC,GAAG1C,GAAG,GAAG2C,CAAC;EAC1B5D,GAAG,CAAC,EAAE,CAAC,GAAGO,GAAG,GAAGoD,CAAC,GAAGzC,GAAG,GAAG0C,CAAC;EAC3B5D,GAAG,CAAC,EAAE,CAAC,GAAGQ,GAAG,GAAGmD,CAAC,GAAGhD,GAAG,GAAGiD,CAAC;EAC3B,OAAO5D,GAAG;AACd,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAF,IAAI,CAACyE,OAAO,GAAG,UAAUvE,GAAG,EAAEE,CAAC,EAAEoD,GAAG,EAAE;EAClC,IAAIK,CAAC,GAAGF,IAAI,CAACU,GAAG,CAACb,GAAG,CAAC;IACjBM,CAAC,GAAGH,IAAI,CAACW,GAAG,CAACd,GAAG,CAAC;IACjBzC,GAAG,GAAGX,CAAC,CAAC,CAAC,CAAC;IACVI,GAAG,GAAGJ,CAAC,CAAC,CAAC,CAAC;IACVK,GAAG,GAAGL,CAAC,CAAC,CAAC,CAAC;IACVM,GAAG,GAAGN,CAAC,CAAC,CAAC,CAAC;IACVY,GAAG,GAAGZ,CAAC,CAAC,CAAC,CAAC;IACVa,GAAG,GAAGb,CAAC,CAAC,CAAC,CAAC;IACVO,GAAG,GAAGP,CAAC,CAAC,CAAC,CAAC;IACVQ,GAAG,GAAGR,CAAC,CAAC,CAAC,CAAC;EAEd,IAAIA,CAAC,KAAKF,GAAG,EAAE;IAAE;IACbA,GAAG,CAAC,CAAC,CAAC,GAAIE,CAAC,CAAC,CAAC,CAAC;IACdF,GAAG,CAAC,CAAC,CAAC,GAAIE,CAAC,CAAC,CAAC,CAAC;IACdF,GAAG,CAAC,EAAE,CAAC,GAAGE,CAAC,CAAC,EAAE,CAAC;IACfF,GAAG,CAAC,EAAE,CAAC,GAAGE,CAAC,CAAC,EAAE,CAAC;IACfF,GAAG,CAAC,EAAE,CAAC,GAAGE,CAAC,CAAC,EAAE,CAAC;IACfF,GAAG,CAAC,EAAE,CAAC,GAAGE,CAAC,CAAC,EAAE,CAAC;IACfF,GAAG,CAAC,EAAE,CAAC,GAAGE,CAAC,CAAC,EAAE,CAAC;IACfF,GAAG,CAAC,EAAE,CAAC,GAAGE,CAAC,CAAC,EAAE,CAAC;EACnB;;EAEA;EACAF,GAAG,CAAC,CAAC,CAAC,GAAGa,GAAG,GAAG+C,CAAC,GAAG9C,GAAG,GAAG6C,CAAC;EAC1B3D,GAAG,CAAC,CAAC,CAAC,GAAGM,GAAG,GAAGsD,CAAC,GAAG7C,GAAG,GAAG4C,CAAC;EAC1B3D,GAAG,CAAC,CAAC,CAAC,GAAGO,GAAG,GAAGqD,CAAC,GAAGnD,GAAG,GAAGkD,CAAC;EAC1B3D,GAAG,CAAC,CAAC,CAAC,GAAGQ,GAAG,GAAGoD,CAAC,GAAGlD,GAAG,GAAGiD,CAAC;EAC1B3D,GAAG,CAAC,CAAC,CAAC,GAAGc,GAAG,GAAG8C,CAAC,GAAG/C,GAAG,GAAG8C,CAAC;EAC1B3D,GAAG,CAAC,CAAC,CAAC,GAAGe,GAAG,GAAG6C,CAAC,GAAGtD,GAAG,GAAGqD,CAAC;EAC1B3D,GAAG,CAAC,CAAC,CAAC,GAAGS,GAAG,GAAGmD,CAAC,GAAGrD,GAAG,GAAGoD,CAAC;EAC1B3D,GAAG,CAAC,CAAC,CAAC,GAAGU,GAAG,GAAGkD,CAAC,GAAGpD,GAAG,GAAGmD,CAAC;EAC1B,OAAO3D,GAAG;AACd,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAF,IAAI,CAAC0E,uBAAuB,GAAG,UAAUxE,GAAG,EAAEyE,CAAC,EAAEzB,CAAC,EAAE;EAChD;EACA,IAAIC,CAAC,GAAGwB,CAAC,CAAC,CAAC,CAAC;IAAEvB,CAAC,GAAGuB,CAAC,CAAC,CAAC,CAAC;IAAEtB,CAAC,GAAGsB,CAAC,CAAC,CAAC,CAAC;IAAEC,CAAC,GAAGD,CAAC,CAAC,CAAC,CAAC;IACtCE,EAAE,GAAG1B,CAAC,GAAGA,CAAC;IACV2B,EAAE,GAAG1B,CAAC,GAAGA,CAAC;IACV2B,EAAE,GAAG1B,CAAC,GAAGA,CAAC;IAEV2B,EAAE,GAAG7B,CAAC,GAAG0B,EAAE;IACXI,EAAE,GAAG9B,CAAC,GAAG2B,EAAE;IACXI,EAAE,GAAG/B,CAAC,GAAG4B,EAAE;IACXI,EAAE,GAAG/B,CAAC,GAAG0B,EAAE;IACXM,EAAE,GAAGhC,CAAC,GAAG2B,EAAE;IACXM,EAAE,GAAGhC,CAAC,GAAG0B,EAAE;IACXO,EAAE,GAAGV,CAAC,GAAGC,EAAE;IACXU,EAAE,GAAGX,CAAC,GAAGE,EAAE;IACXU,EAAE,GAAGZ,CAAC,GAAGG,EAAE;EAEf7E,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,IAAIiF,EAAE,GAAGE,EAAE,CAAC;EACtBnF,GAAG,CAAC,CAAC,CAAC,GAAG+E,EAAE,GAAGO,EAAE;EAChBtF,GAAG,CAAC,CAAC,CAAC,GAAGgF,EAAE,GAAGK,EAAE;EAChBrF,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC;EACVA,GAAG,CAAC,CAAC,CAAC,GAAG+E,EAAE,GAAGO,EAAE;EAChBtF,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,IAAI8E,EAAE,GAAGK,EAAE,CAAC;EACtBnF,GAAG,CAAC,CAAC,CAAC,GAAGkF,EAAE,GAAGE,EAAE;EAChBpF,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC;EACVA,GAAG,CAAC,CAAC,CAAC,GAAGgF,EAAE,GAAGK,EAAE;EAChBrF,GAAG,CAAC,CAAC,CAAC,GAAGkF,EAAE,GAAGE,EAAE;EAChBpF,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,IAAI8E,EAAE,GAAGG,EAAE,CAAC;EACvBjF,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC;EACXA,GAAG,CAAC,EAAE,CAAC,GAAGgD,CAAC,CAAC,CAAC,CAAC;EACdhD,GAAG,CAAC,EAAE,CAAC,GAAGgD,CAAC,CAAC,CAAC,CAAC;EACdhD,GAAG,CAAC,EAAE,CAAC,GAAGgD,CAAC,CAAC,CAAC,CAAC;EACdhD,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC;EAEX,OAAOA,GAAG;AACd,CAAC;AAEDF,IAAI,CAACyF,QAAQ,GAAG,UAAUvF,GAAG,EAAEyE,CAAC,EAAE;EAC9B,IAAIxB,CAAC,GAAGwB,CAAC,CAAC,CAAC,CAAC;IAAEvB,CAAC,GAAGuB,CAAC,CAAC,CAAC,CAAC;IAAEtB,CAAC,GAAGsB,CAAC,CAAC,CAAC,CAAC;IAAEC,CAAC,GAAGD,CAAC,CAAC,CAAC,CAAC;IACtCE,EAAE,GAAG1B,CAAC,GAAGA,CAAC;IACV2B,EAAE,GAAG1B,CAAC,GAAGA,CAAC;IACV2B,EAAE,GAAG1B,CAAC,GAAGA,CAAC;IAEV2B,EAAE,GAAG7B,CAAC,GAAG0B,EAAE;IACXa,EAAE,GAAGtC,CAAC,GAAGyB,EAAE;IACXM,EAAE,GAAG/B,CAAC,GAAG0B,EAAE;IACXa,EAAE,GAAGtC,CAAC,GAAGwB,EAAE;IACXe,EAAE,GAAGvC,CAAC,GAAGyB,EAAE;IACXO,EAAE,GAAGhC,CAAC,GAAG0B,EAAE;IACXO,EAAE,GAAGV,CAAC,GAAGC,EAAE;IACXU,EAAE,GAAGX,CAAC,GAAGE,EAAE;IACXU,EAAE,GAAGZ,CAAC,GAAGG,EAAE;EAEf7E,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAGiF,EAAE,GAAGE,EAAE;EACpBnF,GAAG,CAAC,CAAC,CAAC,GAAGwF,EAAE,GAAGF,EAAE;EAChBtF,GAAG,CAAC,CAAC,CAAC,GAAGyF,EAAE,GAAGJ,EAAE;EAChBrF,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC;EAEVA,GAAG,CAAC,CAAC,CAAC,GAAGwF,EAAE,GAAGF,EAAE;EAChBtF,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG8E,EAAE,GAAGK,EAAE;EACpBnF,GAAG,CAAC,CAAC,CAAC,GAAG0F,EAAE,GAAGN,EAAE;EAChBpF,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC;EAEVA,GAAG,CAAC,CAAC,CAAC,GAAGyF,EAAE,GAAGJ,EAAE;EAChBrF,GAAG,CAAC,CAAC,CAAC,GAAG0F,EAAE,GAAGN,EAAE;EAChBpF,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,GAAG8E,EAAE,GAAGG,EAAE;EACrBjF,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC;EAEXA,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC;EACXA,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC;EACXA,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC;EACXA,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC;EAEX,OAAOA,GAAG;AACd,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAF,IAAI,CAAC6F,OAAO,GAAG,UAAU3F,GAAG,EAAE4F,IAAI,EAAEC,KAAK,EAAEC,MAAM,EAAEC,GAAG,EAAEC,IAAI,EAAEC,GAAG,EAAE;EAC/D,IAAIC,EAAE,GAAG,CAAC,IAAIL,KAAK,GAAGD,IAAI,CAAC;IACvBO,EAAE,GAAG,CAAC,IAAIJ,GAAG,GAAGD,MAAM,CAAC;IACvBM,EAAE,GAAG,CAAC,IAAIJ,IAAI,GAAGC,GAAG,CAAC;EACzBjG,GAAG,CAAC,CAAC,CAAC,GAAIgG,IAAI,GAAG,CAAC,GAAIE,EAAE;EACxBlG,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC;EACVA,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC;EACVA,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC;EACVA,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC;EACVA,GAAG,CAAC,CAAC,CAAC,GAAIgG,IAAI,GAAG,CAAC,GAAIG,EAAE;EACxBnG,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC;EACVA,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC;EACVA,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC6F,KAAK,GAAGD,IAAI,IAAIM,EAAE;EAC5BlG,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC+F,GAAG,GAAGD,MAAM,IAAIK,EAAE;EAC5BnG,GAAG,CAAC,EAAE,CAAC,GAAG,CAACiG,GAAG,GAAGD,IAAI,IAAII,EAAE;EAC3BpG,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC;EACZA,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC;EACXA,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC;EACXA,GAAG,CAAC,EAAE,CAAC,GAAIiG,GAAG,GAAGD,IAAI,GAAG,CAAC,GAAII,EAAE;EAC/BpG,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC;EACX,OAAOA,GAAG;AACd,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAF,IAAI,CAACuG,WAAW,GAAG,UAAUrG,GAAG,EAAEsG,IAAI,EAAEC,MAAM,EAAEP,IAAI,EAAEC,GAAG,EAAE;EACvD,IAAIO,CAAC,GAAG,GAAG,GAAG/C,IAAI,CAACgD,GAAG,CAACH,IAAI,GAAG,CAAC,CAAC;IAC5BF,EAAE,GAAG,CAAC,IAAIJ,IAAI,GAAGC,GAAG,CAAC;EACzBjG,GAAG,CAAC,CAAC,CAAC,GAAGwG,CAAC,GAAGD,MAAM;EACnBvG,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC;EACVA,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC;EACVA,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC;EACVA,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC;EACVA,GAAG,CAAC,CAAC,CAAC,GAAGwG,CAAC;EACVxG,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC;EACVA,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC;EACVA,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC;EACVA,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC;EACVA,GAAG,CAAC,EAAE,CAAC,GAAG,CAACiG,GAAG,GAAGD,IAAI,IAAII,EAAE;EAC3BpG,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC;EACZA,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC;EACXA,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC;EACXA,GAAG,CAAC,EAAE,CAAC,GAAI,CAAC,GAAGiG,GAAG,GAAGD,IAAI,GAAII,EAAE;EAC/BpG,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC;EACX,OAAOA,GAAG;AACd,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAF,IAAI,CAAC4G,KAAK,GAAG,UAAU1G,GAAG,EAAE4F,IAAI,EAAEC,KAAK,EAAEC,MAAM,EAAEC,GAAG,EAAEC,IAAI,EAAEC,GAAG,EAAE;EAC7D,IAAIU,EAAE,GAAG,CAAC,IAAIf,IAAI,GAAGC,KAAK,CAAC;IACvBe,EAAE,GAAG,CAAC,IAAId,MAAM,GAAGC,GAAG,CAAC;IACvBK,EAAE,GAAG,CAAC,IAAIJ,IAAI,GAAGC,GAAG,CAAC;EACzBjG,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG2G,EAAE;EAChB3G,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC;EACVA,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC;EACVA,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC;EACVA,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC;EACVA,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG4G,EAAE;EAChB5G,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC;EACVA,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC;EACVA,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC;EACVA,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC;EACVA,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,GAAGoG,EAAE;EAChBpG,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC;EACXA,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC4F,IAAI,GAAGC,KAAK,IAAIc,EAAE;EAC7B3G,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC+F,GAAG,GAAGD,MAAM,IAAIc,EAAE;EAC7B5G,GAAG,CAAC,EAAE,CAAC,GAAG,CAACiG,GAAG,GAAGD,IAAI,IAAII,EAAE;EAC3BpG,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC;EACX,OAAOA,GAAG;AACd,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAF,IAAI,CAAC+G,MAAM,GAAG,UAAU7G,GAAG,EAAE8G,GAAG,EAAEC,MAAM,EAAEC,EAAE,EAAE;EAC1C,IAAIC,EAAE;IAAEC,EAAE;IAAEvC,EAAE;IAAEwC,EAAE;IAAEC,EAAE;IAAExC,EAAE;IAAEyC,EAAE;IAAEC,EAAE;IAAEzC,EAAE;IAAErB,GAAG;IACvC+D,IAAI,GAAGT,GAAG,CAAC,CAAC,CAAC;IACbU,IAAI,GAAGV,GAAG,CAAC,CAAC,CAAC;IACbW,IAAI,GAAGX,GAAG,CAAC,CAAC,CAAC;IACbY,GAAG,GAAGV,EAAE,CAAC,CAAC,CAAC;IACXW,GAAG,GAAGX,EAAE,CAAC,CAAC,CAAC;IACXY,GAAG,GAAGZ,EAAE,CAAC,CAAC,CAAC;IACXa,OAAO,GAAGd,MAAM,CAAC,CAAC,CAAC;IACnBe,OAAO,GAAGf,MAAM,CAAC,CAAC,CAAC;IACnBgB,OAAO,GAAGhB,MAAM,CAAC,CAAC,CAAC;EAEvB,IAAItD,IAAI,CAACS,GAAG,CAACqD,IAAI,GAAGM,OAAO,CAAC,GAAGjI,aAAa,IACxC6D,IAAI,CAACS,GAAG,CAACsD,IAAI,GAAGM,OAAO,CAAC,GAAGlI,aAAa,IACxC6D,IAAI,CAACS,GAAG,CAACuD,IAAI,GAAGM,OAAO,CAAC,GAAGnI,aAAa,EAAE;IAC1C,OAAOE,IAAI,CAACM,QAAQ,CAACJ,GAAG,CAAC;EAC7B;EAEAqH,EAAE,GAAGE,IAAI,GAAGM,OAAO;EACnBP,EAAE,GAAGE,IAAI,GAAGM,OAAO;EACnBjD,EAAE,GAAG4C,IAAI,GAAGM,OAAO;EAEnBvE,GAAG,GAAG,CAAC,GAAGC,IAAI,CAACC,IAAI,CAAC2D,EAAE,GAAGA,EAAE,GAAGC,EAAE,GAAGA,EAAE,GAAGzC,EAAE,GAAGA,EAAE,CAAC;EAChDwC,EAAE,IAAI7D,GAAG;EACT8D,EAAE,IAAI9D,GAAG;EACTqB,EAAE,IAAIrB,GAAG;EAETyD,EAAE,GAAGU,GAAG,GAAG9C,EAAE,GAAG+C,GAAG,GAAGN,EAAE;EACxBJ,EAAE,GAAGU,GAAG,GAAGP,EAAE,GAAGK,GAAG,GAAG7C,EAAE;EACxBF,EAAE,GAAG+C,GAAG,GAAGJ,EAAE,GAAGK,GAAG,GAAGN,EAAE;EACxB7D,GAAG,GAAGC,IAAI,CAACC,IAAI,CAACuD,EAAE,GAAGA,EAAE,GAAGC,EAAE,GAAGA,EAAE,GAAGvC,EAAE,GAAGA,EAAE,CAAC;EAC5C,IAAI,CAACnB,GAAG,EAAE;IACNyD,EAAE,GAAG,CAAC;IACNC,EAAE,GAAG,CAAC;IACNvC,EAAE,GAAG,CAAC;EACV,CAAC,MAAM;IACHnB,GAAG,GAAG,CAAC,GAAGA,GAAG;IACbyD,EAAE,IAAIzD,GAAG;IACT0D,EAAE,IAAI1D,GAAG;IACTmB,EAAE,IAAInB,GAAG;EACb;EAEA2D,EAAE,GAAGG,EAAE,GAAG3C,EAAE,GAAGE,EAAE,GAAGqC,EAAE;EACtBE,EAAE,GAAGvC,EAAE,GAAGoC,EAAE,GAAGI,EAAE,GAAG1C,EAAE;EACtBC,EAAE,GAAGyC,EAAE,GAAGH,EAAE,GAAGI,EAAE,GAAGL,EAAE;EAEtBzD,GAAG,GAAGC,IAAI,CAACC,IAAI,CAACyD,EAAE,GAAGA,EAAE,GAAGC,EAAE,GAAGA,EAAE,GAAGxC,EAAE,GAAGA,EAAE,CAAC;EAC5C,IAAI,CAACpB,GAAG,EAAE;IACN2D,EAAE,GAAG,CAAC;IACNC,EAAE,GAAG,CAAC;IACNxC,EAAE,GAAG,CAAC;EACV,CAAC,MAAM;IACHpB,GAAG,GAAG,CAAC,GAAGA,GAAG;IACb2D,EAAE,IAAI3D,GAAG;IACT4D,EAAE,IAAI5D,GAAG;IACToB,EAAE,IAAIpB,GAAG;EACb;EAEAxD,GAAG,CAAC,CAAC,CAAC,GAAGiH,EAAE;EACXjH,GAAG,CAAC,CAAC,CAAC,GAAGmH,EAAE;EACXnH,GAAG,CAAC,CAAC,CAAC,GAAGqH,EAAE;EACXrH,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC;EACVA,GAAG,CAAC,CAAC,CAAC,GAAGkH,EAAE;EACXlH,GAAG,CAAC,CAAC,CAAC,GAAGoH,EAAE;EACXpH,GAAG,CAAC,CAAC,CAAC,GAAGsH,EAAE;EACXtH,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC;EACVA,GAAG,CAAC,CAAC,CAAC,GAAG2E,EAAE;EACX3E,GAAG,CAAC,CAAC,CAAC,GAAG4E,EAAE;EACX5E,GAAG,CAAC,EAAE,CAAC,GAAG6E,EAAE;EACZ7E,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC;EACXA,GAAG,CAAC,EAAE,CAAC,GAAG,EAAEiH,EAAE,GAAGM,IAAI,GAAGL,EAAE,GAAGM,IAAI,GAAG7C,EAAE,GAAG8C,IAAI,CAAC;EAC9CzH,GAAG,CAAC,EAAE,CAAC,GAAG,EAAEmH,EAAE,GAAGI,IAAI,GAAGH,EAAE,GAAGI,IAAI,GAAG5C,EAAE,GAAG6C,IAAI,CAAC;EAC9CzH,GAAG,CAAC,EAAE,CAAC,GAAG,EAAEqH,EAAE,GAAGE,IAAI,GAAGD,EAAE,GAAGE,IAAI,GAAG3C,EAAE,GAAG4C,IAAI,CAAC;EAC9CzH,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC;EAEX,OAAOA,GAAG;AACd,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACAF,IAAI,CAACkI,IAAI,GAAG,UAAU9H,CAAC,EAAE;EACrB,OAAOuD,IAAI,CAACC,IAAI,CAACD,IAAI,CAACwE,GAAG,CAAC/H,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,GAAGuD,IAAI,CAACwE,GAAG,CAAC/H,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,GAAGuD,IAAI,CAACwE,GAAG,CAAC/H,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,GAAGuD,IAAI,CAACwE,GAAG,CAAC/H,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,GAAGuD,IAAI,CAACwE,GAAG,CAAC/H,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,GAAGuD,IAAI,CAACwE,GAAG,CAAC/H,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,GAAGuD,IAAI,CAACwE,GAAG,CAAC/H,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,GAAGuD,IAAI,CAACwE,GAAG,CAAC/H,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,GAAGuD,IAAI,CAACwE,GAAG,CAAC/H,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,GAAGuD,IAAI,CAACwE,GAAG,CAAC/H,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,GAAGuD,IAAI,CAACwE,GAAG,CAAC/H,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,GAAGuD,IAAI,CAACwE,GAAG,CAAC/H,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,GAAGuD,IAAI,CAACwE,GAAG,CAAC/H,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,GAAGuD,IAAI,CAACwE,GAAG,CAAC/H,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,GAAGuD,IAAI,CAACwE,GAAG,CAAC/H,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,GAAGuD,IAAI,CAACwE,GAAG,CAAC/H,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAE,CAAC;AAC1V,CAAC;AAED,eAAeJ,IAAI","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}