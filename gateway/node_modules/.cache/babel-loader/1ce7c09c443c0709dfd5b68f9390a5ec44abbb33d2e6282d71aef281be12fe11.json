{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport Geometry from '../Geometry';\nimport BoundingBox from '../math/BoundingBox';\n\n/**\n * @constructor clay.geometry.Plane\n * @extends clay.Geometry\n * @param {Object} [opt]\n * @param {number} [opt.widthSegments]\n * @param {number} [opt.heightSegments]\n */\nvar Plane = Geometry.extend( /** @lends clay.geometry.Plane# */\n{\n  dynamic: false,\n  /**\n   * @type {number}\n   */\n  widthSegments: 1,\n  /**\n   * @type {number}\n   */\n  heightSegments: 1\n}, function () {\n  this.build();\n}, /** @lends clay.geometry.Plane.prototype */\n{\n  /**\n   * Build plane geometry\n   */\n  build: function () {\n    var heightSegments = this.heightSegments;\n    var widthSegments = this.widthSegments;\n    var attributes = this.attributes;\n    var positions = [];\n    var texcoords = [];\n    var normals = [];\n    var faces = [];\n    for (var y = 0; y <= heightSegments; y++) {\n      var t = y / heightSegments;\n      for (var x = 0; x <= widthSegments; x++) {\n        var s = x / widthSegments;\n        positions.push([2 * s - 1, 2 * t - 1, 0]);\n        if (texcoords) {\n          texcoords.push([s, t]);\n        }\n        if (normals) {\n          normals.push([0, 0, 1]);\n        }\n        if (x < widthSegments && y < heightSegments) {\n          var i = x + y * (widthSegments + 1);\n          faces.push([i, i + 1, i + widthSegments + 1]);\n          faces.push([i + widthSegments + 1, i + 1, i + widthSegments + 2]);\n        }\n      }\n    }\n    attributes.position.fromArray(positions);\n    attributes.texcoord0.fromArray(texcoords);\n    attributes.normal.fromArray(normals);\n    this.initIndicesFromArray(faces);\n    this.boundingBox = new BoundingBox();\n    this.boundingBox.min.set(-1, -1, 0);\n    this.boundingBox.max.set(1, 1, 0);\n  }\n});\nexport default Plane;","map":{"version":3,"names":["Geometry","BoundingBox","Plane","extend","dynamic","widthSegments","heightSegments","build","attributes","positions","texcoords","normals","faces","y","t","x","s","push","i","position","fromArray","texcoord0","normal","initIndicesFromArray","boundingBox","min","set","max"],"sources":["E:/QuestionairePlanet_Fronted/mytest/node_modules/claygl/src/geometry/Plane.js"],"sourcesContent":["import Geometry from '../Geometry';\nimport BoundingBox from '../math/BoundingBox';\n\n/**\n * @constructor clay.geometry.Plane\n * @extends clay.Geometry\n * @param {Object} [opt]\n * @param {number} [opt.widthSegments]\n * @param {number} [opt.heightSegments]\n */\nvar Plane = Geometry.extend(\n/** @lends clay.geometry.Plane# */\n{\n    dynamic: false,\n    /**\n     * @type {number}\n     */\n    widthSegments: 1,\n    /**\n     * @type {number}\n     */\n    heightSegments: 1\n}, function() {\n    this.build();\n},\n/** @lends clay.geometry.Plane.prototype */\n{\n    /**\n     * Build plane geometry\n     */\n    build: function() {\n        var heightSegments = this.heightSegments;\n        var widthSegments = this.widthSegments;\n        var attributes = this.attributes;\n        var positions = [];\n        var texcoords = [];\n        var normals = [];\n        var faces = [];\n\n        for (var y = 0; y <= heightSegments; y++) {\n            var t = y / heightSegments;\n            for (var x = 0; x <= widthSegments; x++) {\n                var s = x / widthSegments;\n\n                positions.push([2 * s - 1, 2 * t - 1, 0]);\n                if (texcoords) {\n                    texcoords.push([s, t]);\n                }\n                if (normals) {\n                    normals.push([0, 0, 1]);\n                }\n                if (x < widthSegments && y < heightSegments) {\n                    var i = x + y * (widthSegments + 1);\n                    faces.push([i, i + 1, i + widthSegments + 1]);\n                    faces.push([i + widthSegments + 1, i + 1, i + widthSegments + 2]);\n                }\n            }\n        }\n\n        attributes.position.fromArray(positions);\n        attributes.texcoord0.fromArray(texcoords);\n        attributes.normal.fromArray(normals);\n\n        this.initIndicesFromArray(faces);\n\n        this.boundingBox = new BoundingBox();\n        this.boundingBox.min.set(-1, -1, 0);\n        this.boundingBox.max.set(1, 1, 0);\n    }\n});\n\nexport default Plane;\n"],"mappings":";AAAA,OAAOA,QAAQ,MAAM,aAAa;AAClC,OAAOC,WAAW,MAAM,qBAAqB;;AAE7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAIC,KAAK,GAAGF,QAAQ,CAACG,MAAM,EAC3B;AACA;EACIC,OAAO,EAAE,KAAK;EACd;AACJ;AACA;EACIC,aAAa,EAAE,CAAC;EAChB;AACJ;AACA;EACIC,cAAc,EAAE;AACpB,CAAC,EAAE,YAAW;EACV,IAAI,CAACC,KAAK,CAAC,CAAC;AAChB,CAAC,EACD;AACA;EACI;AACJ;AACA;EACIA,KAAK,EAAE,SAAAA,CAAA,EAAW;IACd,IAAID,cAAc,GAAG,IAAI,CAACA,cAAc;IACxC,IAAID,aAAa,GAAG,IAAI,CAACA,aAAa;IACtC,IAAIG,UAAU,GAAG,IAAI,CAACA,UAAU;IAChC,IAAIC,SAAS,GAAG,EAAE;IAClB,IAAIC,SAAS,GAAG,EAAE;IAClB,IAAIC,OAAO,GAAG,EAAE;IAChB,IAAIC,KAAK,GAAG,EAAE;IAEd,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,IAAIP,cAAc,EAAEO,CAAC,EAAE,EAAE;MACtC,IAAIC,CAAC,GAAGD,CAAC,GAAGP,cAAc;MAC1B,KAAK,IAAIS,CAAC,GAAG,CAAC,EAAEA,CAAC,IAAIV,aAAa,EAAEU,CAAC,EAAE,EAAE;QACrC,IAAIC,CAAC,GAAGD,CAAC,GAAGV,aAAa;QAEzBI,SAAS,CAACQ,IAAI,CAAC,CAAC,CAAC,GAAGD,CAAC,GAAG,CAAC,EAAE,CAAC,GAAGF,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC;QACzC,IAAIJ,SAAS,EAAE;UACXA,SAAS,CAACO,IAAI,CAAC,CAACD,CAAC,EAAEF,CAAC,CAAC,CAAC;QAC1B;QACA,IAAIH,OAAO,EAAE;UACTA,OAAO,CAACM,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;QAC3B;QACA,IAAIF,CAAC,GAAGV,aAAa,IAAIQ,CAAC,GAAGP,cAAc,EAAE;UACzC,IAAIY,CAAC,GAAGH,CAAC,GAAGF,CAAC,IAAIR,aAAa,GAAG,CAAC,CAAC;UACnCO,KAAK,CAACK,IAAI,CAAC,CAACC,CAAC,EAAEA,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGb,aAAa,GAAG,CAAC,CAAC,CAAC;UAC7CO,KAAK,CAACK,IAAI,CAAC,CAACC,CAAC,GAAGb,aAAa,GAAG,CAAC,EAAEa,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGb,aAAa,GAAG,CAAC,CAAC,CAAC;QACrE;MACJ;IACJ;IAEAG,UAAU,CAACW,QAAQ,CAACC,SAAS,CAACX,SAAS,CAAC;IACxCD,UAAU,CAACa,SAAS,CAACD,SAAS,CAACV,SAAS,CAAC;IACzCF,UAAU,CAACc,MAAM,CAACF,SAAS,CAACT,OAAO,CAAC;IAEpC,IAAI,CAACY,oBAAoB,CAACX,KAAK,CAAC;IAEhC,IAAI,CAACY,WAAW,GAAG,IAAIvB,WAAW,CAAC,CAAC;IACpC,IAAI,CAACuB,WAAW,CAACC,GAAG,CAACC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC;IACnC,IAAI,CAACF,WAAW,CAACG,GAAG,CAACD,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;EACrC;AACJ,CAAC,CAAC;AAEF,eAAexB,KAAK","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}