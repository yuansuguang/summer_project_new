{"ast":null,"code":"import quat from '../glmatrix/quat';\nimport mat3 from '../glmatrix/mat3';\n\n/**\n * @constructor\n * @alias clay.Quaternion\n * @param {number} x\n * @param {number} y\n * @param {number} z\n * @param {number} w\n */\nvar Quaternion = function (x, y, z, w) {\n  x = x || 0;\n  y = y || 0;\n  z = z || 0;\n  w = w === undefined ? 1 : w;\n\n  /**\n   * Storage of Quaternion, read and write of x, y, z, w will change the values in array\n   * All methods also operate on the array instead of x, y, z, w components\n   * @name array\n   * @type {Float32Array}\n   * @memberOf clay.Quaternion#\n   */\n  this.array = quat.fromValues(x, y, z, w);\n\n  /**\n   * Dirty flag is used by the Node to determine\n   * if the matrix is updated to latest\n   * @name _dirty\n   * @type {boolean}\n   * @memberOf clay.Quaternion#\n   */\n  this._dirty = true;\n};\nQuaternion.prototype = {\n  constructor: Quaternion,\n  /**\n   * Add b to self\n   * @param  {clay.Quaternion} b\n   * @return {clay.Quaternion}\n   */\n  add: function (b) {\n    quat.add(this.array, this.array, b.array);\n    this._dirty = true;\n    return this;\n  },\n  /**\n   * Calculate the w component from x, y, z component\n   * @return {clay.Quaternion}\n   */\n  calculateW: function () {\n    quat.calculateW(this.array, this.array);\n    this._dirty = true;\n    return this;\n  },\n  /**\n   * Set x, y and z components\n   * @param  {number}  x\n   * @param  {number}  y\n   * @param  {number}  z\n   * @param  {number}  w\n   * @return {clay.Quaternion}\n   */\n  set: function (x, y, z, w) {\n    this.array[0] = x;\n    this.array[1] = y;\n    this.array[2] = z;\n    this.array[3] = w;\n    this._dirty = true;\n    return this;\n  },\n  /**\n   * Set x, y, z and w components from array\n   * @param  {Float32Array|number[]} arr\n   * @return {clay.Quaternion}\n   */\n  setArray: function (arr) {\n    this.array[0] = arr[0];\n    this.array[1] = arr[1];\n    this.array[2] = arr[2];\n    this.array[3] = arr[3];\n    this._dirty = true;\n    return this;\n  },\n  /**\n   * Clone a new Quaternion\n   * @return {clay.Quaternion}\n   */\n  clone: function () {\n    return new Quaternion(this.x, this.y, this.z, this.w);\n  },\n  /**\n   * Calculates the conjugate of self If the quaternion is normalized,\n   * this function is faster than invert and produces the same result.\n   *\n   * @return {clay.Quaternion}\n   */\n  conjugate: function () {\n    quat.conjugate(this.array, this.array);\n    this._dirty = true;\n    return this;\n  },\n  /**\n   * Copy from b\n   * @param  {clay.Quaternion} b\n   * @return {clay.Quaternion}\n   */\n  copy: function (b) {\n    quat.copy(this.array, b.array);\n    this._dirty = true;\n    return this;\n  },\n  /**\n   * Dot product of self and b\n   * @param  {clay.Quaternion} b\n   * @return {number}\n   */\n  dot: function (b) {\n    return quat.dot(this.array, b.array);\n  },\n  /**\n   * Set from the given 3x3 rotation matrix\n   * @param  {clay.Matrix3} m\n   * @return {clay.Quaternion}\n   */\n  fromMat3: function (m) {\n    quat.fromMat3(this.array, m.array);\n    this._dirty = true;\n    return this;\n  },\n  /**\n   * Set from the given 4x4 rotation matrix\n   * The 4th column and 4th row will be droped\n   * @param  {clay.Matrix4} m\n   * @return {clay.Quaternion}\n   */\n  fromMat4: function () {\n    var m3 = mat3.create();\n    return function (m) {\n      mat3.fromMat4(m3, m.array);\n      // TODO Not like mat4, mat3 in glmatrix seems to be row-based\n      mat3.transpose(m3, m3);\n      quat.fromMat3(this.array, m3);\n      this._dirty = true;\n      return this;\n    };\n  }(),\n  /**\n   * Set to identity quaternion\n   * @return {clay.Quaternion}\n   */\n  identity: function () {\n    quat.identity(this.array);\n    this._dirty = true;\n    return this;\n  },\n  /**\n   * Invert self\n   * @return {clay.Quaternion}\n   */\n  invert: function () {\n    quat.invert(this.array, this.array);\n    this._dirty = true;\n    return this;\n  },\n  /**\n   * Alias of length\n   * @return {number}\n   */\n  len: function () {\n    return quat.len(this.array);\n  },\n  /**\n   * Calculate the length\n   * @return {number}\n   */\n  length: function () {\n    return quat.length(this.array);\n  },\n  /**\n   * Linear interpolation between a and b\n   * @param  {clay.Quaternion} a\n   * @param  {clay.Quaternion} b\n   * @param  {number}  t\n   * @return {clay.Quaternion}\n   */\n  lerp: function (a, b, t) {\n    quat.lerp(this.array, a.array, b.array, t);\n    this._dirty = true;\n    return this;\n  },\n  /**\n   * Alias for multiply\n   * @param  {clay.Quaternion} b\n   * @return {clay.Quaternion}\n   */\n  mul: function (b) {\n    quat.mul(this.array, this.array, b.array);\n    this._dirty = true;\n    return this;\n  },\n  /**\n   * Alias for multiplyLeft\n   * @param  {clay.Quaternion} a\n   * @return {clay.Quaternion}\n   */\n  mulLeft: function (a) {\n    quat.multiply(this.array, a.array, this.array);\n    this._dirty = true;\n    return this;\n  },\n  /**\n   * Mutiply self and b\n   * @param  {clay.Quaternion} b\n   * @return {clay.Quaternion}\n   */\n  multiply: function (b) {\n    quat.multiply(this.array, this.array, b.array);\n    this._dirty = true;\n    return this;\n  },\n  /**\n   * Mutiply a and self\n   * Quaternion mutiply is not commutative, so the result of mutiplyLeft is different with multiply.\n   * @param  {clay.Quaternion} a\n   * @return {clay.Quaternion}\n   */\n  multiplyLeft: function (a) {\n    quat.multiply(this.array, a.array, this.array);\n    this._dirty = true;\n    return this;\n  },\n  /**\n   * Normalize self\n   * @return {clay.Quaternion}\n   */\n  normalize: function () {\n    quat.normalize(this.array, this.array);\n    this._dirty = true;\n    return this;\n  },\n  /**\n   * Rotate self by a given radian about X axis\n   * @param {number} rad\n   * @return {clay.Quaternion}\n   */\n  rotateX: function (rad) {\n    quat.rotateX(this.array, this.array, rad);\n    this._dirty = true;\n    return this;\n  },\n  /**\n   * Rotate self by a given radian about Y axis\n   * @param {number} rad\n   * @return {clay.Quaternion}\n   */\n  rotateY: function (rad) {\n    quat.rotateY(this.array, this.array, rad);\n    this._dirty = true;\n    return this;\n  },\n  /**\n   * Rotate self by a given radian about Z axis\n   * @param {number} rad\n   * @return {clay.Quaternion}\n   */\n  rotateZ: function (rad) {\n    quat.rotateZ(this.array, this.array, rad);\n    this._dirty = true;\n    return this;\n  },\n  /**\n   * Sets self to represent the shortest rotation from Vector3 a to Vector3 b.\n   * a and b needs to be normalized\n   * @param  {clay.Vector3} a\n   * @param  {clay.Vector3} b\n   * @return {clay.Quaternion}\n   */\n  rotationTo: function (a, b) {\n    quat.rotationTo(this.array, a.array, b.array);\n    this._dirty = true;\n    return this;\n  },\n  /**\n   * Sets self with values corresponding to the given axes\n   * @param {clay.Vector3} view\n   * @param {clay.Vector3} right\n   * @param {clay.Vector3} up\n   * @return {clay.Quaternion}\n   */\n  setAxes: function (view, right, up) {\n    quat.setAxes(this.array, view.array, right.array, up.array);\n    this._dirty = true;\n    return this;\n  },\n  /**\n   * Sets self with a rotation axis and rotation angle\n   * @param {clay.Vector3} axis\n   * @param {number} rad\n   * @return {clay.Quaternion}\n   */\n  setAxisAngle: function (axis, rad) {\n    quat.setAxisAngle(this.array, axis.array, rad);\n    this._dirty = true;\n    return this;\n  },\n  /**\n   * Perform spherical linear interpolation between a and b\n   * @param  {clay.Quaternion} a\n   * @param  {clay.Quaternion} b\n   * @param  {number} t\n   * @return {clay.Quaternion}\n   */\n  slerp: function (a, b, t) {\n    quat.slerp(this.array, a.array, b.array, t);\n    this._dirty = true;\n    return this;\n  },\n  /**\n   * Alias for squaredLength\n   * @return {number}\n   */\n  sqrLen: function () {\n    return quat.sqrLen(this.array);\n  },\n  /**\n   * Squared length of self\n   * @return {number}\n   */\n  squaredLength: function () {\n    return quat.squaredLength(this.array);\n  },\n  /**\n   * Set from euler\n   * @param {clay.Vector3} v\n   * @param {String} order\n   */\n  fromEuler: function (v, order) {\n    return Quaternion.fromEuler(this, v, order);\n  },\n  toString: function () {\n    return '[' + Array.prototype.join.call(this.array, ',') + ']';\n  },\n  toArray: function () {\n    return Array.prototype.slice.call(this.array);\n  }\n};\nvar defineProperty = Object.defineProperty;\n// Getter and Setter\nif (defineProperty) {\n  var proto = Quaternion.prototype;\n  /**\n   * @name x\n   * @type {number}\n   * @memberOf clay.Quaternion\n   * @instance\n   */\n  defineProperty(proto, 'x', {\n    get: function () {\n      return this.array[0];\n    },\n    set: function (value) {\n      this.array[0] = value;\n      this._dirty = true;\n    }\n  });\n\n  /**\n   * @name y\n   * @type {number}\n   * @memberOf clay.Quaternion\n   * @instance\n   */\n  defineProperty(proto, 'y', {\n    get: function () {\n      return this.array[1];\n    },\n    set: function (value) {\n      this.array[1] = value;\n      this._dirty = true;\n    }\n  });\n\n  /**\n   * @name z\n   * @type {number}\n   * @memberOf clay.Quaternion\n   * @instance\n   */\n  defineProperty(proto, 'z', {\n    get: function () {\n      return this.array[2];\n    },\n    set: function (value) {\n      this.array[2] = value;\n      this._dirty = true;\n    }\n  });\n\n  /**\n   * @name w\n   * @type {number}\n   * @memberOf clay.Quaternion\n   * @instance\n   */\n  defineProperty(proto, 'w', {\n    get: function () {\n      return this.array[3];\n    },\n    set: function (value) {\n      this.array[3] = value;\n      this._dirty = true;\n    }\n  });\n}\n\n// Supply methods that are not in place\n\n/**\n * @param  {clay.Quaternion} out\n * @param  {clay.Quaternion} a\n * @param  {clay.Quaternion} b\n * @return {clay.Quaternion}\n */\nQuaternion.add = function (out, a, b) {\n  quat.add(out.array, a.array, b.array);\n  out._dirty = true;\n  return out;\n};\n\n/**\n * @param  {clay.Quaternion} out\n * @param  {number}     x\n * @param  {number}     y\n * @param  {number}     z\n * @param  {number}     w\n * @return {clay.Quaternion}\n */\nQuaternion.set = function (out, x, y, z, w) {\n  quat.set(out.array, x, y, z, w);\n  out._dirty = true;\n};\n\n/**\n * @param  {clay.Quaternion} out\n * @param  {clay.Quaternion} b\n * @return {clay.Quaternion}\n */\nQuaternion.copy = function (out, b) {\n  quat.copy(out.array, b.array);\n  out._dirty = true;\n  return out;\n};\n\n/**\n * @param  {clay.Quaternion} out\n * @param  {clay.Quaternion} a\n * @return {clay.Quaternion}\n */\nQuaternion.calculateW = function (out, a) {\n  quat.calculateW(out.array, a.array);\n  out._dirty = true;\n  return out;\n};\n\n/**\n * @param  {clay.Quaternion} out\n * @param  {clay.Quaternion} a\n * @return {clay.Quaternion}\n */\nQuaternion.conjugate = function (out, a) {\n  quat.conjugate(out.array, a.array);\n  out._dirty = true;\n  return out;\n};\n\n/**\n * @param  {clay.Quaternion} out\n * @return {clay.Quaternion}\n */\nQuaternion.identity = function (out) {\n  quat.identity(out.array);\n  out._dirty = true;\n  return out;\n};\n\n/**\n * @param  {clay.Quaternion} out\n * @param  {clay.Quaternion} a\n * @return {clay.Quaternion}\n */\nQuaternion.invert = function (out, a) {\n  quat.invert(out.array, a.array);\n  out._dirty = true;\n  return out;\n};\n\n/**\n * @param  {clay.Quaternion} a\n * @param  {clay.Quaternion} b\n * @return {number}\n */\nQuaternion.dot = function (a, b) {\n  return quat.dot(a.array, b.array);\n};\n\n/**\n * @param  {clay.Quaternion} a\n * @return {number}\n */\nQuaternion.len = function (a) {\n  return quat.length(a.array);\n};\n\n// Quaternion.length = Quaternion.len;\n\n/**\n * @param  {clay.Quaternion} out\n * @param  {clay.Quaternion} a\n * @param  {clay.Quaternion} b\n * @param  {number}     t\n * @return {clay.Quaternion}\n */\nQuaternion.lerp = function (out, a, b, t) {\n  quat.lerp(out.array, a.array, b.array, t);\n  out._dirty = true;\n  return out;\n};\n\n/**\n * @param  {clay.Quaternion} out\n * @param  {clay.Quaternion} a\n * @param  {clay.Quaternion} b\n * @param  {number}     t\n * @return {clay.Quaternion}\n */\nQuaternion.slerp = function (out, a, b, t) {\n  quat.slerp(out.array, a.array, b.array, t);\n  out._dirty = true;\n  return out;\n};\n\n/**\n * @param  {clay.Quaternion} out\n * @param  {clay.Quaternion} a\n * @param  {clay.Quaternion} b\n * @return {clay.Quaternion}\n */\nQuaternion.mul = function (out, a, b) {\n  quat.multiply(out.array, a.array, b.array);\n  out._dirty = true;\n  return out;\n};\n\n/**\n * @function\n * @param  {clay.Quaternion} out\n * @param  {clay.Quaternion} a\n * @param  {clay.Quaternion} b\n * @return {clay.Quaternion}\n */\nQuaternion.multiply = Quaternion.mul;\n\n/**\n * @param  {clay.Quaternion} out\n * @param  {clay.Quaternion} a\n * @param  {number}     rad\n * @return {clay.Quaternion}\n */\nQuaternion.rotateX = function (out, a, rad) {\n  quat.rotateX(out.array, a.array, rad);\n  out._dirty = true;\n  return out;\n};\n\n/**\n * @param  {clay.Quaternion} out\n * @param  {clay.Quaternion} a\n * @param  {number}     rad\n * @return {clay.Quaternion}\n */\nQuaternion.rotateY = function (out, a, rad) {\n  quat.rotateY(out.array, a.array, rad);\n  out._dirty = true;\n  return out;\n};\n\n/**\n * @param  {clay.Quaternion} out\n * @param  {clay.Quaternion} a\n * @param  {number}     rad\n * @return {clay.Quaternion}\n */\nQuaternion.rotateZ = function (out, a, rad) {\n  quat.rotateZ(out.array, a.array, rad);\n  out._dirty = true;\n  return out;\n};\n\n/**\n * @param  {clay.Quaternion} out\n * @param  {clay.Vector3}    axis\n * @param  {number}     rad\n * @return {clay.Quaternion}\n */\nQuaternion.setAxisAngle = function (out, axis, rad) {\n  quat.setAxisAngle(out.array, axis.array, rad);\n  out._dirty = true;\n  return out;\n};\n\n/**\n * @param  {clay.Quaternion} out\n * @param  {clay.Quaternion} a\n * @return {clay.Quaternion}\n */\nQuaternion.normalize = function (out, a) {\n  quat.normalize(out.array, a.array);\n  out._dirty = true;\n  return out;\n};\n\n/**\n * @param  {clay.Quaternion} a\n * @return {number}\n */\nQuaternion.sqrLen = function (a) {\n  return quat.sqrLen(a.array);\n};\n\n/**\n * @function\n * @param  {clay.Quaternion} a\n * @return {number}\n */\nQuaternion.squaredLength = Quaternion.sqrLen;\n\n/**\n * @param  {clay.Quaternion} out\n * @param  {clay.Matrix3}    m\n * @return {clay.Quaternion}\n */\nQuaternion.fromMat3 = function (out, m) {\n  quat.fromMat3(out.array, m.array);\n  out._dirty = true;\n  return out;\n};\n\n/**\n * @param  {clay.Quaternion} out\n * @param  {clay.Vector3}    view\n * @param  {clay.Vector3}    right\n * @param  {clay.Vector3}    up\n * @return {clay.Quaternion}\n */\nQuaternion.setAxes = function (out, view, right, up) {\n  quat.setAxes(out.array, view.array, right.array, up.array);\n  out._dirty = true;\n  return out;\n};\n\n/**\n * @param  {clay.Quaternion} out\n * @param  {clay.Vector3}    a\n * @param  {clay.Vector3}    b\n * @return {clay.Quaternion}\n */\nQuaternion.rotationTo = function (out, a, b) {\n  quat.rotationTo(out.array, a.array, b.array);\n  out._dirty = true;\n  return out;\n};\n\n/**\n * Set quaternion from euler\n * @param {clay.Quaternion} out\n * @param {clay.Vector3} v\n * @param {String} order\n */\nQuaternion.fromEuler = function (out, v, order) {\n  out._dirty = true;\n  v = v.array;\n  var target = out.array;\n  var c1 = Math.cos(v[0] / 2);\n  var c2 = Math.cos(v[1] / 2);\n  var c3 = Math.cos(v[2] / 2);\n  var s1 = Math.sin(v[0] / 2);\n  var s2 = Math.sin(v[1] / 2);\n  var s3 = Math.sin(v[2] / 2);\n  var order = (order || 'XYZ').toUpperCase();\n\n  // http://www.mathworks.com/matlabcentral/fileexchange/\n  //  20696-function-to-convert-between-dcm-euler-angles-quaternions-and-euler-vectors/\n  //  content/SpinCalc.m\n\n  switch (order) {\n    case 'XYZ':\n      target[0] = s1 * c2 * c3 + c1 * s2 * s3;\n      target[1] = c1 * s2 * c3 - s1 * c2 * s3;\n      target[2] = c1 * c2 * s3 + s1 * s2 * c3;\n      target[3] = c1 * c2 * c3 - s1 * s2 * s3;\n      break;\n    case 'YXZ':\n      target[0] = s1 * c2 * c3 + c1 * s2 * s3;\n      target[1] = c1 * s2 * c3 - s1 * c2 * s3;\n      target[2] = c1 * c2 * s3 - s1 * s2 * c3;\n      target[3] = c1 * c2 * c3 + s1 * s2 * s3;\n      break;\n    case 'ZXY':\n      target[0] = s1 * c2 * c3 - c1 * s2 * s3;\n      target[1] = c1 * s2 * c3 + s1 * c2 * s3;\n      target[2] = c1 * c2 * s3 + s1 * s2 * c3;\n      target[3] = c1 * c2 * c3 - s1 * s2 * s3;\n      break;\n    case 'ZYX':\n      target[0] = s1 * c2 * c3 - c1 * s2 * s3;\n      target[1] = c1 * s2 * c3 + s1 * c2 * s3;\n      target[2] = c1 * c2 * s3 - s1 * s2 * c3;\n      target[3] = c1 * c2 * c3 + s1 * s2 * s3;\n      break;\n    case 'YZX':\n      target[0] = s1 * c2 * c3 + c1 * s2 * s3;\n      target[1] = c1 * s2 * c3 + s1 * c2 * s3;\n      target[2] = c1 * c2 * s3 - s1 * s2 * c3;\n      target[3] = c1 * c2 * c3 - s1 * s2 * s3;\n      break;\n    case 'XZY':\n      target[0] = s1 * c2 * c3 - c1 * s2 * s3;\n      target[1] = c1 * s2 * c3 - s1 * c2 * s3;\n      target[2] = c1 * c2 * s3 + s1 * s2 * c3;\n      target[3] = c1 * c2 * c3 + s1 * s2 * s3;\n      break;\n  }\n};\nexport default Quaternion;","map":{"version":3,"names":["quat","mat3","Quaternion","x","y","z","w","undefined","array","fromValues","_dirty","prototype","constructor","add","b","calculateW","set","setArray","arr","clone","conjugate","copy","dot","fromMat3","m","fromMat4","m3","create","transpose","identity","invert","len","length","lerp","a","t","mul","mulLeft","multiply","multiplyLeft","normalize","rotateX","rad","rotateY","rotateZ","rotationTo","setAxes","view","right","up","setAxisAngle","axis","slerp","sqrLen","squaredLength","fromEuler","v","order","toString","Array","join","call","toArray","slice","defineProperty","Object","proto","get","value","out","target","c1","Math","cos","c2","c3","s1","sin","s2","s3","toUpperCase"],"sources":["E:/mytest/node_modules/claygl/src/math/Quaternion.js"],"sourcesContent":["import quat from '../glmatrix/quat';\nimport mat3 from '../glmatrix/mat3';\n\n/**\n * @constructor\n * @alias clay.Quaternion\n * @param {number} x\n * @param {number} y\n * @param {number} z\n * @param {number} w\n */\nvar Quaternion = function (x, y, z, w) {\n\n    x = x || 0;\n    y = y || 0;\n    z = z || 0;\n    w = w === undefined ? 1 : w;\n\n    /**\n     * Storage of Quaternion, read and write of x, y, z, w will change the values in array\n     * All methods also operate on the array instead of x, y, z, w components\n     * @name array\n     * @type {Float32Array}\n     * @memberOf clay.Quaternion#\n     */\n    this.array = quat.fromValues(x, y, z, w);\n\n    /**\n     * Dirty flag is used by the Node to determine\n     * if the matrix is updated to latest\n     * @name _dirty\n     * @type {boolean}\n     * @memberOf clay.Quaternion#\n     */\n    this._dirty = true;\n};\n\nQuaternion.prototype = {\n\n    constructor: Quaternion,\n\n    /**\n     * Add b to self\n     * @param  {clay.Quaternion} b\n     * @return {clay.Quaternion}\n     */\n    add: function (b) {\n        quat.add(this.array, this.array, b.array);\n        this._dirty = true;\n        return this;\n    },\n\n    /**\n     * Calculate the w component from x, y, z component\n     * @return {clay.Quaternion}\n     */\n    calculateW: function () {\n        quat.calculateW(this.array, this.array);\n        this._dirty = true;\n        return this;\n    },\n\n    /**\n     * Set x, y and z components\n     * @param  {number}  x\n     * @param  {number}  y\n     * @param  {number}  z\n     * @param  {number}  w\n     * @return {clay.Quaternion}\n     */\n    set: function (x, y, z, w) {\n        this.array[0] = x;\n        this.array[1] = y;\n        this.array[2] = z;\n        this.array[3] = w;\n        this._dirty = true;\n        return this;\n    },\n\n    /**\n     * Set x, y, z and w components from array\n     * @param  {Float32Array|number[]} arr\n     * @return {clay.Quaternion}\n     */\n    setArray: function (arr) {\n        this.array[0] = arr[0];\n        this.array[1] = arr[1];\n        this.array[2] = arr[2];\n        this.array[3] = arr[3];\n\n        this._dirty = true;\n        return this;\n    },\n\n    /**\n     * Clone a new Quaternion\n     * @return {clay.Quaternion}\n     */\n    clone: function () {\n        return new Quaternion(this.x, this.y, this.z, this.w);\n    },\n\n    /**\n     * Calculates the conjugate of self If the quaternion is normalized,\n     * this function is faster than invert and produces the same result.\n     *\n     * @return {clay.Quaternion}\n     */\n    conjugate: function () {\n        quat.conjugate(this.array, this.array);\n        this._dirty = true;\n        return this;\n    },\n\n    /**\n     * Copy from b\n     * @param  {clay.Quaternion} b\n     * @return {clay.Quaternion}\n     */\n    copy: function (b) {\n        quat.copy(this.array, b.array);\n        this._dirty = true;\n        return this;\n    },\n\n    /**\n     * Dot product of self and b\n     * @param  {clay.Quaternion} b\n     * @return {number}\n     */\n    dot: function (b) {\n        return quat.dot(this.array, b.array);\n    },\n\n    /**\n     * Set from the given 3x3 rotation matrix\n     * @param  {clay.Matrix3} m\n     * @return {clay.Quaternion}\n     */\n    fromMat3: function (m) {\n        quat.fromMat3(this.array, m.array);\n        this._dirty = true;\n        return this;\n    },\n\n    /**\n     * Set from the given 4x4 rotation matrix\n     * The 4th column and 4th row will be droped\n     * @param  {clay.Matrix4} m\n     * @return {clay.Quaternion}\n     */\n    fromMat4: (function () {\n        var m3 = mat3.create();\n        return function (m) {\n            mat3.fromMat4(m3, m.array);\n            // TODO Not like mat4, mat3 in glmatrix seems to be row-based\n            mat3.transpose(m3, m3);\n            quat.fromMat3(this.array, m3);\n            this._dirty = true;\n            return this;\n        };\n    })(),\n\n    /**\n     * Set to identity quaternion\n     * @return {clay.Quaternion}\n     */\n    identity: function () {\n        quat.identity(this.array);\n        this._dirty = true;\n        return this;\n    },\n    /**\n     * Invert self\n     * @return {clay.Quaternion}\n     */\n    invert: function () {\n        quat.invert(this.array, this.array);\n        this._dirty = true;\n        return this;\n    },\n    /**\n     * Alias of length\n     * @return {number}\n     */\n    len: function () {\n        return quat.len(this.array);\n    },\n\n    /**\n     * Calculate the length\n     * @return {number}\n     */\n    length: function () {\n        return quat.length(this.array);\n    },\n\n    /**\n     * Linear interpolation between a and b\n     * @param  {clay.Quaternion} a\n     * @param  {clay.Quaternion} b\n     * @param  {number}  t\n     * @return {clay.Quaternion}\n     */\n    lerp: function (a, b, t) {\n        quat.lerp(this.array, a.array, b.array, t);\n        this._dirty = true;\n        return this;\n    },\n\n    /**\n     * Alias for multiply\n     * @param  {clay.Quaternion} b\n     * @return {clay.Quaternion}\n     */\n    mul: function (b) {\n        quat.mul(this.array, this.array, b.array);\n        this._dirty = true;\n        return this;\n    },\n\n    /**\n     * Alias for multiplyLeft\n     * @param  {clay.Quaternion} a\n     * @return {clay.Quaternion}\n     */\n    mulLeft: function (a) {\n        quat.multiply(this.array, a.array, this.array);\n        this._dirty = true;\n        return this;\n    },\n\n    /**\n     * Mutiply self and b\n     * @param  {clay.Quaternion} b\n     * @return {clay.Quaternion}\n     */\n    multiply: function (b) {\n        quat.multiply(this.array, this.array, b.array);\n        this._dirty = true;\n        return this;\n    },\n\n    /**\n     * Mutiply a and self\n     * Quaternion mutiply is not commutative, so the result of mutiplyLeft is different with multiply.\n     * @param  {clay.Quaternion} a\n     * @return {clay.Quaternion}\n     */\n    multiplyLeft: function (a) {\n        quat.multiply(this.array, a.array, this.array);\n        this._dirty = true;\n        return this;\n    },\n\n    /**\n     * Normalize self\n     * @return {clay.Quaternion}\n     */\n    normalize: function () {\n        quat.normalize(this.array, this.array);\n        this._dirty = true;\n        return this;\n    },\n\n    /**\n     * Rotate self by a given radian about X axis\n     * @param {number} rad\n     * @return {clay.Quaternion}\n     */\n    rotateX: function (rad) {\n        quat.rotateX(this.array, this.array, rad);\n        this._dirty = true;\n        return this;\n    },\n\n    /**\n     * Rotate self by a given radian about Y axis\n     * @param {number} rad\n     * @return {clay.Quaternion}\n     */\n    rotateY: function (rad) {\n        quat.rotateY(this.array, this.array, rad);\n        this._dirty = true;\n        return this;\n    },\n\n    /**\n     * Rotate self by a given radian about Z axis\n     * @param {number} rad\n     * @return {clay.Quaternion}\n     */\n    rotateZ: function (rad) {\n        quat.rotateZ(this.array, this.array, rad);\n        this._dirty = true;\n        return this;\n    },\n\n    /**\n     * Sets self to represent the shortest rotation from Vector3 a to Vector3 b.\n     * a and b needs to be normalized\n     * @param  {clay.Vector3} a\n     * @param  {clay.Vector3} b\n     * @return {clay.Quaternion}\n     */\n    rotationTo: function (a, b) {\n        quat.rotationTo(this.array, a.array, b.array);\n        this._dirty = true;\n        return this;\n    },\n    /**\n     * Sets self with values corresponding to the given axes\n     * @param {clay.Vector3} view\n     * @param {clay.Vector3} right\n     * @param {clay.Vector3} up\n     * @return {clay.Quaternion}\n     */\n    setAxes: function (view, right, up) {\n        quat.setAxes(this.array, view.array, right.array, up.array);\n        this._dirty = true;\n        return this;\n    },\n\n    /**\n     * Sets self with a rotation axis and rotation angle\n     * @param {clay.Vector3} axis\n     * @param {number} rad\n     * @return {clay.Quaternion}\n     */\n    setAxisAngle: function (axis, rad) {\n        quat.setAxisAngle(this.array, axis.array, rad);\n        this._dirty = true;\n        return this;\n    },\n    /**\n     * Perform spherical linear interpolation between a and b\n     * @param  {clay.Quaternion} a\n     * @param  {clay.Quaternion} b\n     * @param  {number} t\n     * @return {clay.Quaternion}\n     */\n    slerp: function (a, b, t) {\n        quat.slerp(this.array, a.array, b.array, t);\n        this._dirty = true;\n        return this;\n    },\n\n    /**\n     * Alias for squaredLength\n     * @return {number}\n     */\n    sqrLen: function () {\n        return quat.sqrLen(this.array);\n    },\n\n    /**\n     * Squared length of self\n     * @return {number}\n     */\n    squaredLength: function () {\n        return quat.squaredLength(this.array);\n    },\n\n    /**\n     * Set from euler\n     * @param {clay.Vector3} v\n     * @param {String} order\n     */\n    fromEuler: function (v, order) {\n        return Quaternion.fromEuler(this, v, order);\n    },\n\n    toString: function () {\n        return '[' + Array.prototype.join.call(this.array, ',') + ']';\n    },\n\n    toArray: function () {\n        return Array.prototype.slice.call(this.array);\n    }\n};\n\nvar defineProperty = Object.defineProperty;\n// Getter and Setter\nif (defineProperty) {\n\n    var proto = Quaternion.prototype;\n    /**\n     * @name x\n     * @type {number}\n     * @memberOf clay.Quaternion\n     * @instance\n     */\n    defineProperty(proto, 'x', {\n        get: function () {\n            return this.array[0];\n        },\n        set: function (value) {\n            this.array[0] = value;\n            this._dirty = true;\n        }\n    });\n\n    /**\n     * @name y\n     * @type {number}\n     * @memberOf clay.Quaternion\n     * @instance\n     */\n    defineProperty(proto, 'y', {\n        get: function () {\n            return this.array[1];\n        },\n        set: function (value) {\n            this.array[1] = value;\n            this._dirty = true;\n        }\n    });\n\n    /**\n     * @name z\n     * @type {number}\n     * @memberOf clay.Quaternion\n     * @instance\n     */\n    defineProperty(proto, 'z', {\n        get: function () {\n            return this.array[2];\n        },\n        set: function (value) {\n            this.array[2] = value;\n            this._dirty = true;\n        }\n    });\n\n    /**\n     * @name w\n     * @type {number}\n     * @memberOf clay.Quaternion\n     * @instance\n     */\n    defineProperty(proto, 'w', {\n        get: function () {\n            return this.array[3];\n        },\n        set: function (value) {\n            this.array[3] = value;\n            this._dirty = true;\n        }\n    });\n}\n\n// Supply methods that are not in place\n\n/**\n * @param  {clay.Quaternion} out\n * @param  {clay.Quaternion} a\n * @param  {clay.Quaternion} b\n * @return {clay.Quaternion}\n */\nQuaternion.add = function (out, a, b) {\n    quat.add(out.array, a.array, b.array);\n    out._dirty = true;\n    return out;\n};\n\n/**\n * @param  {clay.Quaternion} out\n * @param  {number}     x\n * @param  {number}     y\n * @param  {number}     z\n * @param  {number}     w\n * @return {clay.Quaternion}\n */\nQuaternion.set = function (out, x, y, z, w) {\n    quat.set(out.array, x, y, z, w);\n    out._dirty = true;\n};\n\n/**\n * @param  {clay.Quaternion} out\n * @param  {clay.Quaternion} b\n * @return {clay.Quaternion}\n */\nQuaternion.copy = function (out, b) {\n    quat.copy(out.array, b.array);\n    out._dirty = true;\n    return out;\n};\n\n/**\n * @param  {clay.Quaternion} out\n * @param  {clay.Quaternion} a\n * @return {clay.Quaternion}\n */\nQuaternion.calculateW = function (out, a) {\n    quat.calculateW(out.array, a.array);\n    out._dirty = true;\n    return out;\n};\n\n/**\n * @param  {clay.Quaternion} out\n * @param  {clay.Quaternion} a\n * @return {clay.Quaternion}\n */\nQuaternion.conjugate = function (out, a) {\n    quat.conjugate(out.array, a.array);\n    out._dirty = true;\n    return out;\n};\n\n/**\n * @param  {clay.Quaternion} out\n * @return {clay.Quaternion}\n */\nQuaternion.identity = function (out) {\n    quat.identity(out.array);\n    out._dirty = true;\n    return out;\n};\n\n/**\n * @param  {clay.Quaternion} out\n * @param  {clay.Quaternion} a\n * @return {clay.Quaternion}\n */\nQuaternion.invert = function (out, a) {\n    quat.invert(out.array, a.array);\n    out._dirty = true;\n    return out;\n};\n\n/**\n * @param  {clay.Quaternion} a\n * @param  {clay.Quaternion} b\n * @return {number}\n */\nQuaternion.dot = function (a, b) {\n    return quat.dot(a.array, b.array);\n};\n\n/**\n * @param  {clay.Quaternion} a\n * @return {number}\n */\nQuaternion.len = function (a) {\n    return quat.length(a.array);\n};\n\n// Quaternion.length = Quaternion.len;\n\n/**\n * @param  {clay.Quaternion} out\n * @param  {clay.Quaternion} a\n * @param  {clay.Quaternion} b\n * @param  {number}     t\n * @return {clay.Quaternion}\n */\nQuaternion.lerp = function (out, a, b, t) {\n    quat.lerp(out.array, a.array, b.array, t);\n    out._dirty = true;\n    return out;\n};\n\n/**\n * @param  {clay.Quaternion} out\n * @param  {clay.Quaternion} a\n * @param  {clay.Quaternion} b\n * @param  {number}     t\n * @return {clay.Quaternion}\n */\nQuaternion.slerp = function (out, a, b, t) {\n    quat.slerp(out.array, a.array, b.array, t);\n    out._dirty = true;\n    return out;\n};\n\n/**\n * @param  {clay.Quaternion} out\n * @param  {clay.Quaternion} a\n * @param  {clay.Quaternion} b\n * @return {clay.Quaternion}\n */\nQuaternion.mul = function (out, a, b) {\n    quat.multiply(out.array, a.array, b.array);\n    out._dirty = true;\n    return out;\n};\n\n/**\n * @function\n * @param  {clay.Quaternion} out\n * @param  {clay.Quaternion} a\n * @param  {clay.Quaternion} b\n * @return {clay.Quaternion}\n */\nQuaternion.multiply = Quaternion.mul;\n\n/**\n * @param  {clay.Quaternion} out\n * @param  {clay.Quaternion} a\n * @param  {number}     rad\n * @return {clay.Quaternion}\n */\nQuaternion.rotateX = function (out, a, rad) {\n    quat.rotateX(out.array, a.array, rad);\n    out._dirty = true;\n    return out;\n};\n\n/**\n * @param  {clay.Quaternion} out\n * @param  {clay.Quaternion} a\n * @param  {number}     rad\n * @return {clay.Quaternion}\n */\nQuaternion.rotateY = function (out, a, rad) {\n    quat.rotateY(out.array, a.array, rad);\n    out._dirty = true;\n    return out;\n};\n\n/**\n * @param  {clay.Quaternion} out\n * @param  {clay.Quaternion} a\n * @param  {number}     rad\n * @return {clay.Quaternion}\n */\nQuaternion.rotateZ = function (out, a, rad) {\n    quat.rotateZ(out.array, a.array, rad);\n    out._dirty = true;\n    return out;\n};\n\n/**\n * @param  {clay.Quaternion} out\n * @param  {clay.Vector3}    axis\n * @param  {number}     rad\n * @return {clay.Quaternion}\n */\nQuaternion.setAxisAngle = function (out, axis, rad) {\n    quat.setAxisAngle(out.array, axis.array, rad);\n    out._dirty = true;\n    return out;\n};\n\n/**\n * @param  {clay.Quaternion} out\n * @param  {clay.Quaternion} a\n * @return {clay.Quaternion}\n */\nQuaternion.normalize = function (out, a) {\n    quat.normalize(out.array, a.array);\n    out._dirty = true;\n    return out;\n};\n\n/**\n * @param  {clay.Quaternion} a\n * @return {number}\n */\nQuaternion.sqrLen = function (a) {\n    return quat.sqrLen(a.array);\n};\n\n/**\n * @function\n * @param  {clay.Quaternion} a\n * @return {number}\n */\nQuaternion.squaredLength = Quaternion.sqrLen;\n\n/**\n * @param  {clay.Quaternion} out\n * @param  {clay.Matrix3}    m\n * @return {clay.Quaternion}\n */\nQuaternion.fromMat3 = function (out, m) {\n    quat.fromMat3(out.array, m.array);\n    out._dirty = true;\n    return out;\n};\n\n/**\n * @param  {clay.Quaternion} out\n * @param  {clay.Vector3}    view\n * @param  {clay.Vector3}    right\n * @param  {clay.Vector3}    up\n * @return {clay.Quaternion}\n */\nQuaternion.setAxes = function (out, view, right, up) {\n    quat.setAxes(out.array, view.array, right.array, up.array);\n    out._dirty = true;\n    return out;\n};\n\n/**\n * @param  {clay.Quaternion} out\n * @param  {clay.Vector3}    a\n * @param  {clay.Vector3}    b\n * @return {clay.Quaternion}\n */\nQuaternion.rotationTo = function (out, a, b) {\n    quat.rotationTo(out.array, a.array, b.array);\n    out._dirty = true;\n    return out;\n};\n\n/**\n * Set quaternion from euler\n * @param {clay.Quaternion} out\n * @param {clay.Vector3} v\n * @param {String} order\n */\nQuaternion.fromEuler = function (out, v, order) {\n\n    out._dirty = true;\n\n    v = v.array;\n    var target = out.array;\n    var c1 = Math.cos(v[0] / 2);\n    var c2 = Math.cos(v[1] / 2);\n    var c3 = Math.cos(v[2] / 2);\n    var s1 = Math.sin(v[0] / 2);\n    var s2 = Math.sin(v[1] / 2);\n    var s3 = Math.sin(v[2] / 2);\n\n    var order = (order || 'XYZ').toUpperCase();\n\n    // http://www.mathworks.com/matlabcentral/fileexchange/\n    //  20696-function-to-convert-between-dcm-euler-angles-quaternions-and-euler-vectors/\n    //  content/SpinCalc.m\n\n    switch (order) {\n        case 'XYZ':\n            target[0] = s1 * c2 * c3 + c1 * s2 * s3;\n            target[1] = c1 * s2 * c3 - s1 * c2 * s3;\n            target[2] = c1 * c2 * s3 + s1 * s2 * c3;\n            target[3] = c1 * c2 * c3 - s1 * s2 * s3;\n            break;\n        case 'YXZ':\n            target[0] = s1 * c2 * c3 + c1 * s2 * s3;\n            target[1] = c1 * s2 * c3 - s1 * c2 * s3;\n            target[2] = c1 * c2 * s3 - s1 * s2 * c3;\n            target[3] = c1 * c2 * c3 + s1 * s2 * s3;\n            break;\n        case 'ZXY':\n            target[0] = s1 * c2 * c3 - c1 * s2 * s3;\n            target[1] = c1 * s2 * c3 + s1 * c2 * s3;\n            target[2] = c1 * c2 * s3 + s1 * s2 * c3;\n            target[3] = c1 * c2 * c3 - s1 * s2 * s3;\n            break;\n        case 'ZYX':\n            target[0] = s1 * c2 * c3 - c1 * s2 * s3;\n            target[1] = c1 * s2 * c3 + s1 * c2 * s3;\n            target[2] = c1 * c2 * s3 - s1 * s2 * c3;\n            target[3] = c1 * c2 * c3 + s1 * s2 * s3;\n            break;\n        case 'YZX':\n            target[0] = s1 * c2 * c3 + c1 * s2 * s3;\n            target[1] = c1 * s2 * c3 + s1 * c2 * s3;\n            target[2] = c1 * c2 * s3 - s1 * s2 * c3;\n            target[3] = c1 * c2 * c3 - s1 * s2 * s3;\n            break;\n        case 'XZY':\n            target[0] = s1 * c2 * c3 - c1 * s2 * s3;\n            target[1] = c1 * s2 * c3 - s1 * c2 * s3;\n            target[2] = c1 * c2 * s3 + s1 * s2 * c3;\n            target[3] = c1 * c2 * c3 + s1 * s2 * s3;\n            break;\n    }\n};\n\nexport default Quaternion;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}