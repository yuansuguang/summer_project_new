{"ast":null,"code":"import \"core-js/modules/es.array-buffer.detached.js\";\nimport \"core-js/modules/es.array-buffer.transfer.js\";\nimport \"core-js/modules/es.array-buffer.transfer-to-fixed-length.js\";\nimport \"core-js/modules/es.typed-array.to-reversed.js\";\nimport \"core-js/modules/es.typed-array.to-sorted.js\";\nimport \"core-js/modules/es.typed-array.with.js\";\nimport \"core-js/modules/web.url-search-params.delete.js\";\nimport \"core-js/modules/web.url-search-params.has.js\";\nimport \"core-js/modules/web.url-search-params.size.js\";\nimport Texture2D from 'claygl/src/Texture2D';\nimport Texture from 'claygl/src/Texture';\nimport workerFunc from './forceAtlas2Worker.js';\nvar workerUrl = workerFunc.toString();\nworkerUrl = workerUrl.slice(workerUrl.indexOf('{') + 1, workerUrl.lastIndexOf('}'));\nvar defaultConfigs = {\n  barnesHutOptimize: true,\n  barnesHutTheta: 1.5,\n  repulsionByDegree: true,\n  linLogMode: false,\n  strongGravityMode: false,\n  gravity: 1.0,\n  scaling: 1.0,\n  edgeWeightInfluence: 1.0,\n  jitterTolerence: 0.1,\n  preventOverlap: false,\n  dissuadeHubs: false,\n  gravityCenter: null\n};\nvar ForceAtlas2 = function (options) {\n  for (var name in defaultConfigs) {\n    this[name] = defaultConfigs[name];\n  }\n  if (options) {\n    for (var name in options) {\n      this[name] = options[name];\n    }\n  }\n  this._nodes = [];\n  this._edges = [];\n  this._disposed = false;\n  this._positionTex = new Texture2D({\n    type: Texture.FLOAT,\n    flipY: false,\n    minFilter: Texture.NEAREST,\n    magFilter: Texture.NEAREST\n  });\n};\nForceAtlas2.prototype.initData = function (nodes, edges) {\n  var bb = new Blob([workerUrl]);\n  var blobURL = window.URL.createObjectURL(bb);\n  this._worker = new Worker(blobURL);\n  this._worker.onmessage = this._$onupdate.bind(this);\n  this._nodes = nodes;\n  this._edges = edges;\n  this._frame = 0;\n  var nNodes = nodes.length;\n  var nEdges = edges.length;\n  var positionArr = new Float32Array(nNodes * 2);\n  var massArr = new Float32Array(nNodes);\n  var sizeArr = new Float32Array(nNodes);\n  var edgeArr = new Float32Array(nEdges * 2);\n  var edgeWeightArr = new Float32Array(nEdges);\n  for (var i = 0; i < nodes.length; i++) {\n    var node = nodes[i];\n    positionArr[i * 2] = node.x;\n    positionArr[i * 2 + 1] = node.y;\n    massArr[i] = node.mass == null ? 1 : node.mass;\n    sizeArr[i] = node.size == null ? 1 : node.size;\n  }\n  for (var i = 0; i < edges.length; i++) {\n    var edge = edges[i];\n    var source = edge.node1;\n    var target = edge.node2;\n    edgeArr[i * 2] = source;\n    edgeArr[i * 2 + 1] = target;\n    edgeWeightArr[i] = edge.weight == null ? 1 : edge.weight;\n  }\n  var textureWidth = Math.ceil(Math.sqrt(nodes.length));\n  var textureHeight = textureWidth;\n  var pixels = new Float32Array(textureWidth * textureHeight * 4);\n  var positionTex = this._positionTex;\n  positionTex.width = textureWidth;\n  positionTex.height = textureHeight;\n  positionTex.pixels = pixels;\n  this._worker.postMessage({\n    cmd: 'init',\n    nodesPosition: positionArr,\n    nodesMass: massArr,\n    nodesSize: sizeArr,\n    edges: edgeArr,\n    edgesWeight: edgeWeightArr\n  });\n  this._globalSpeed = Infinity;\n};\nForceAtlas2.prototype.updateOption = function (options) {\n  var config = {}; // Default config\n\n  for (var name in defaultConfigs) {\n    config[name] = defaultConfigs[name];\n  }\n  var nodes = this._nodes;\n  var edges = this._edges; // Config according to data scale\n\n  var nNodes = nodes.length;\n  if (nNodes > 50000) {\n    config.jitterTolerence = 10;\n  } else if (nNodes > 5000) {\n    config.jitterTolerence = 1;\n  } else {\n    config.jitterTolerence = 0.1;\n  }\n  if (nNodes > 100) {\n    config.scaling = 2.0;\n  } else {\n    config.scaling = 10.0;\n  }\n  if (nNodes > 1000) {\n    config.barnesHutOptimize = true;\n  } else {\n    config.barnesHutOptimize = false;\n  }\n  if (options) {\n    for (var name in defaultConfigs) {\n      if (options[name] != null) {\n        config[name] = options[name];\n      }\n    }\n  }\n  if (!config.gravityCenter) {\n    var min = [Infinity, Infinity];\n    var max = [-Infinity, -Infinity];\n    for (var i = 0; i < nodes.length; i++) {\n      min[0] = Math.min(nodes[i].x, min[0]);\n      min[1] = Math.min(nodes[i].y, min[1]);\n      max[0] = Math.max(nodes[i].x, max[0]);\n      max[1] = Math.max(nodes[i].y, max[1]);\n    }\n    config.gravityCenter = [(min[0] + max[0]) * 0.5, (min[1] + max[1]) * 0.5];\n  } // Update inDegree, outDegree\n\n  for (var i = 0; i < edges.length; i++) {\n    var node1 = edges[i].node1;\n    var node2 = edges[i].node2;\n    nodes[node1].degree = (nodes[node1].degree || 0) + 1;\n    nodes[node2].degree = (nodes[node2].degree || 0) + 1;\n  }\n  if (this._worker) {\n    this._worker.postMessage({\n      cmd: 'updateConfig',\n      config: config\n    });\n  }\n}; // Steps per call, to keep sync with rendering\n\nForceAtlas2.prototype.update = function (renderer, steps, cb) {\n  if (steps == null) {\n    steps = 1;\n  }\n  steps = Math.max(steps, 1);\n  this._frame += steps;\n  this._onupdate = cb;\n  if (this._worker) {\n    this._worker.postMessage({\n      cmd: 'update',\n      steps: Math.round(steps)\n    });\n  }\n};\nForceAtlas2.prototype._$onupdate = function (e) {\n  // Incase the worker keep postMessage of last frame after it is disposed\n  if (this._disposed) {\n    return;\n  }\n  var positionArr = new Float32Array(e.data.buffer);\n  this._globalSpeed = e.data.globalSpeed;\n  this._positionArr = positionArr;\n  this._updateTexture(positionArr);\n  this._onupdate && this._onupdate();\n};\nForceAtlas2.prototype.getNodePositionTexture = function () {\n  return this._positionTex;\n};\nForceAtlas2.prototype.getNodeUV = function (nodeIndex, uv) {\n  uv = uv || [];\n  var textureWidth = this._positionTex.width;\n  var textureHeight = this._positionTex.height;\n  uv[0] = nodeIndex % textureWidth / (textureWidth - 1);\n  uv[1] = Math.floor(nodeIndex / textureWidth) / (textureHeight - 1);\n  return uv;\n};\nForceAtlas2.prototype.getNodes = function () {\n  return this._nodes;\n};\nForceAtlas2.prototype.getEdges = function () {\n  return this._edges;\n};\nForceAtlas2.prototype.isFinished = function (maxSteps) {\n  return this._frame > maxSteps;\n};\nForceAtlas2.prototype.getNodePosition = function (renderer, out) {\n  if (!out) {\n    out = new Float32Array(this._nodes.length * 2);\n  }\n  if (this._positionArr) {\n    for (var i = 0; i < this._positionArr.length; i++) {\n      out[i] = this._positionArr[i];\n    }\n  }\n  return out;\n};\nForceAtlas2.prototype._updateTexture = function (positionArr) {\n  var pixels = this._positionTex.pixels;\n  var offset = 0;\n  for (var i = 0; i < positionArr.length;) {\n    pixels[offset++] = positionArr[i++];\n    pixels[offset++] = positionArr[i++];\n    pixels[offset++] = 1;\n    pixels[offset++] = 1;\n  }\n  this._positionTex.dirty();\n};\nForceAtlas2.prototype.dispose = function (renderer) {\n  this._disposed = true;\n  this._worker = null;\n};\nexport default ForceAtlas2;","map":{"version":3,"names":["Texture2D","Texture","workerFunc","workerUrl","toString","slice","indexOf","lastIndexOf","defaultConfigs","barnesHutOptimize","barnesHutTheta","repulsionByDegree","linLogMode","strongGravityMode","gravity","scaling","edgeWeightInfluence","jitterTolerence","preventOverlap","dissuadeHubs","gravityCenter","ForceAtlas2","options","name","_nodes","_edges","_disposed","_positionTex","type","FLOAT","flipY","minFilter","NEAREST","magFilter","prototype","initData","nodes","edges","bb","Blob","blobURL","window","URL","createObjectURL","_worker","Worker","onmessage","_$onupdate","bind","_frame","nNodes","length","nEdges","positionArr","Float32Array","massArr","sizeArr","edgeArr","edgeWeightArr","i","node","x","y","mass","size","edge","source","node1","target","node2","weight","textureWidth","Math","ceil","sqrt","textureHeight","pixels","positionTex","width","height","postMessage","cmd","nodesPosition","nodesMass","nodesSize","edgesWeight","_globalSpeed","Infinity","updateOption","config","min","max","degree","update","renderer","steps","cb","_onupdate","round","e","data","buffer","globalSpeed","_positionArr","_updateTexture","getNodePositionTexture","getNodeUV","nodeIndex","uv","floor","getNodes","getEdges","isFinished","maxSteps","getNodePosition","out","offset","dirty","dispose"],"sources":["E:/mytest/node_modules/echarts-gl/lib/chart/graphGL/ForceAtlas2.js"],"sourcesContent":["import Texture2D from 'claygl/src/Texture2D';\nimport Texture from 'claygl/src/Texture';\nimport workerFunc from './forceAtlas2Worker.js';\nvar workerUrl = workerFunc.toString();\nworkerUrl = workerUrl.slice(workerUrl.indexOf('{') + 1, workerUrl.lastIndexOf('}'));\nvar defaultConfigs = {\n  barnesHutOptimize: true,\n  barnesHutTheta: 1.5,\n  repulsionByDegree: true,\n  linLogMode: false,\n  strongGravityMode: false,\n  gravity: 1.0,\n  scaling: 1.0,\n  edgeWeightInfluence: 1.0,\n  jitterTolerence: 0.1,\n  preventOverlap: false,\n  dissuadeHubs: false,\n  gravityCenter: null\n};\n\nvar ForceAtlas2 = function (options) {\n  for (var name in defaultConfigs) {\n    this[name] = defaultConfigs[name];\n  }\n\n  if (options) {\n    for (var name in options) {\n      this[name] = options[name];\n    }\n  }\n\n  this._nodes = [];\n  this._edges = [];\n  this._disposed = false;\n  this._positionTex = new Texture2D({\n    type: Texture.FLOAT,\n    flipY: false,\n    minFilter: Texture.NEAREST,\n    magFilter: Texture.NEAREST\n  });\n};\n\nForceAtlas2.prototype.initData = function (nodes, edges) {\n  var bb = new Blob([workerUrl]);\n  var blobURL = window.URL.createObjectURL(bb);\n  this._worker = new Worker(blobURL);\n  this._worker.onmessage = this._$onupdate.bind(this);\n  this._nodes = nodes;\n  this._edges = edges;\n  this._frame = 0;\n  var nNodes = nodes.length;\n  var nEdges = edges.length;\n  var positionArr = new Float32Array(nNodes * 2);\n  var massArr = new Float32Array(nNodes);\n  var sizeArr = new Float32Array(nNodes);\n  var edgeArr = new Float32Array(nEdges * 2);\n  var edgeWeightArr = new Float32Array(nEdges);\n\n  for (var i = 0; i < nodes.length; i++) {\n    var node = nodes[i];\n    positionArr[i * 2] = node.x;\n    positionArr[i * 2 + 1] = node.y;\n    massArr[i] = node.mass == null ? 1 : node.mass;\n    sizeArr[i] = node.size == null ? 1 : node.size;\n  }\n\n  for (var i = 0; i < edges.length; i++) {\n    var edge = edges[i];\n    var source = edge.node1;\n    var target = edge.node2;\n    edgeArr[i * 2] = source;\n    edgeArr[i * 2 + 1] = target;\n    edgeWeightArr[i] = edge.weight == null ? 1 : edge.weight;\n  }\n\n  var textureWidth = Math.ceil(Math.sqrt(nodes.length));\n  var textureHeight = textureWidth;\n  var pixels = new Float32Array(textureWidth * textureHeight * 4);\n  var positionTex = this._positionTex;\n  positionTex.width = textureWidth;\n  positionTex.height = textureHeight;\n  positionTex.pixels = pixels;\n\n  this._worker.postMessage({\n    cmd: 'init',\n    nodesPosition: positionArr,\n    nodesMass: massArr,\n    nodesSize: sizeArr,\n    edges: edgeArr,\n    edgesWeight: edgeWeightArr\n  });\n\n  this._globalSpeed = Infinity;\n};\n\nForceAtlas2.prototype.updateOption = function (options) {\n  var config = {}; // Default config\n\n  for (var name in defaultConfigs) {\n    config[name] = defaultConfigs[name];\n  }\n\n  var nodes = this._nodes;\n  var edges = this._edges; // Config according to data scale\n\n  var nNodes = nodes.length;\n\n  if (nNodes > 50000) {\n    config.jitterTolerence = 10;\n  } else if (nNodes > 5000) {\n    config.jitterTolerence = 1;\n  } else {\n    config.jitterTolerence = 0.1;\n  }\n\n  if (nNodes > 100) {\n    config.scaling = 2.0;\n  } else {\n    config.scaling = 10.0;\n  }\n\n  if (nNodes > 1000) {\n    config.barnesHutOptimize = true;\n  } else {\n    config.barnesHutOptimize = false;\n  }\n\n  if (options) {\n    for (var name in defaultConfigs) {\n      if (options[name] != null) {\n        config[name] = options[name];\n      }\n    }\n  }\n\n  if (!config.gravityCenter) {\n    var min = [Infinity, Infinity];\n    var max = [-Infinity, -Infinity];\n\n    for (var i = 0; i < nodes.length; i++) {\n      min[0] = Math.min(nodes[i].x, min[0]);\n      min[1] = Math.min(nodes[i].y, min[1]);\n      max[0] = Math.max(nodes[i].x, max[0]);\n      max[1] = Math.max(nodes[i].y, max[1]);\n    }\n\n    config.gravityCenter = [(min[0] + max[0]) * 0.5, (min[1] + max[1]) * 0.5];\n  } // Update inDegree, outDegree\n\n\n  for (var i = 0; i < edges.length; i++) {\n    var node1 = edges[i].node1;\n    var node2 = edges[i].node2;\n    nodes[node1].degree = (nodes[node1].degree || 0) + 1;\n    nodes[node2].degree = (nodes[node2].degree || 0) + 1;\n  }\n\n  if (this._worker) {\n    this._worker.postMessage({\n      cmd: 'updateConfig',\n      config: config\n    });\n  }\n}; // Steps per call, to keep sync with rendering\n\n\nForceAtlas2.prototype.update = function (renderer, steps, cb) {\n  if (steps == null) {\n    steps = 1;\n  }\n\n  steps = Math.max(steps, 1);\n  this._frame += steps;\n  this._onupdate = cb;\n\n  if (this._worker) {\n    this._worker.postMessage({\n      cmd: 'update',\n      steps: Math.round(steps)\n    });\n  }\n};\n\nForceAtlas2.prototype._$onupdate = function (e) {\n  // Incase the worker keep postMessage of last frame after it is disposed\n  if (this._disposed) {\n    return;\n  }\n\n  var positionArr = new Float32Array(e.data.buffer);\n  this._globalSpeed = e.data.globalSpeed;\n  this._positionArr = positionArr;\n\n  this._updateTexture(positionArr);\n\n  this._onupdate && this._onupdate();\n};\n\nForceAtlas2.prototype.getNodePositionTexture = function () {\n  return this._positionTex;\n};\n\nForceAtlas2.prototype.getNodeUV = function (nodeIndex, uv) {\n  uv = uv || [];\n  var textureWidth = this._positionTex.width;\n  var textureHeight = this._positionTex.height;\n  uv[0] = nodeIndex % textureWidth / (textureWidth - 1);\n  uv[1] = Math.floor(nodeIndex / textureWidth) / (textureHeight - 1);\n  return uv;\n};\n\nForceAtlas2.prototype.getNodes = function () {\n  return this._nodes;\n};\n\nForceAtlas2.prototype.getEdges = function () {\n  return this._edges;\n};\n\nForceAtlas2.prototype.isFinished = function (maxSteps) {\n  return this._frame > maxSteps;\n};\n\nForceAtlas2.prototype.getNodePosition = function (renderer, out) {\n  if (!out) {\n    out = new Float32Array(this._nodes.length * 2);\n  }\n\n  if (this._positionArr) {\n    for (var i = 0; i < this._positionArr.length; i++) {\n      out[i] = this._positionArr[i];\n    }\n  }\n\n  return out;\n};\n\nForceAtlas2.prototype._updateTexture = function (positionArr) {\n  var pixels = this._positionTex.pixels;\n  var offset = 0;\n\n  for (var i = 0; i < positionArr.length;) {\n    pixels[offset++] = positionArr[i++];\n    pixels[offset++] = positionArr[i++];\n    pixels[offset++] = 1;\n    pixels[offset++] = 1;\n  }\n\n  this._positionTex.dirty();\n};\n\nForceAtlas2.prototype.dispose = function (renderer) {\n  this._disposed = true;\n  this._worker = null;\n};\n\nexport default ForceAtlas2;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}