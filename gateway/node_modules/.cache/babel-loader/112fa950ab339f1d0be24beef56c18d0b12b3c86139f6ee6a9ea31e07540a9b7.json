{"ast":null,"code":"import * as echarts from 'echarts/lib/echarts';\nimport graphicGL from '../../util/graphicGL';\nimport OrbitControl from '../../util/OrbitControl';\nimport SceneHelper from '../../component/common/SceneHelper';\nimport Geo3DBuilder from '../../component/common/Geo3DBuilder';\nexport default echarts.ChartView.extend({\n  type: 'map3D',\n  __ecgl__: true,\n  init: function (ecModel, api) {\n    this._geo3DBuilder = new Geo3DBuilder(api);\n    this.groupGL = new graphicGL.Node();\n  },\n  render: function (map3DModel, ecModel, api) {\n    var coordSys = map3DModel.coordinateSystem;\n    if (!coordSys || !coordSys.viewGL) {\n      return;\n    }\n    this.groupGL.add(this._geo3DBuilder.rootNode);\n    coordSys.viewGL.add(this.groupGL);\n    var geo3D;\n    if (coordSys.type === 'geo3D') {\n      geo3D = coordSys;\n      if (!this._sceneHelper) {\n        this._sceneHelper = new SceneHelper();\n        this._sceneHelper.initLight(this.groupGL);\n      }\n      this._sceneHelper.setScene(coordSys.viewGL.scene);\n      this._sceneHelper.updateLight(map3DModel); // Set post effect\n\n      coordSys.viewGL.setPostEffect(map3DModel.getModel('postEffect'), api);\n      coordSys.viewGL.setTemporalSuperSampling(map3DModel.getModel('temporalSuperSampling'));\n      var control = this._control;\n      if (!control) {\n        control = this._control = new OrbitControl({\n          zr: api.getZr()\n        });\n        this._control.init();\n      }\n      var viewControlModel = map3DModel.getModel('viewControl');\n      control.setViewGL(coordSys.viewGL);\n      control.setFromViewControlModel(viewControlModel, 0);\n      control.off('update');\n      control.on('update', function () {\n        api.dispatchAction({\n          type: 'map3DChangeCamera',\n          alpha: control.getAlpha(),\n          beta: control.getBeta(),\n          distance: control.getDistance(),\n          from: this.uid,\n          map3DId: map3DModel.id\n        });\n      });\n      this._geo3DBuilder.extrudeY = true;\n    } else {\n      if (this._control) {\n        this._control.dispose();\n        this._control = null;\n      }\n      if (this._sceneHelper) {\n        this._sceneHelper.dispose();\n        this._sceneHelper = null;\n      }\n      geo3D = map3DModel.getData().getLayout('geo3D');\n      this._geo3DBuilder.extrudeY = false;\n    }\n    this._geo3DBuilder.update(map3DModel, ecModel, api, 0, map3DModel.getData().count()); // Must update after geo3D.viewGL.setPostEffect to determine linear space\n\n    var srgbDefineMethod = coordSys.viewGL.isLinearSpace() ? 'define' : 'undefine';\n    this._geo3DBuilder.rootNode.traverse(function (mesh) {\n      if (mesh.material) {\n        mesh.material[srgbDefineMethod]('fragment', 'SRGB_DECODE');\n      }\n    });\n  },\n  afterRender: function (map3DModel, ecModel, api, layerGL) {\n    var renderer = layerGL.renderer;\n    var coordSys = map3DModel.coordinateSystem;\n    if (coordSys && coordSys.type === 'geo3D') {\n      this._sceneHelper.updateAmbientCubemap(renderer, map3DModel, api);\n      this._sceneHelper.updateSkybox(renderer, map3DModel, api);\n    }\n  },\n  dispose: function () {\n    this.groupGL.removeAll();\n    this._control.dispose();\n    this._geo3DBuilder.dispose();\n  }\n});","map":{"version":3,"names":["echarts","graphicGL","OrbitControl","SceneHelper","Geo3DBuilder","ChartView","extend","type","__ecgl__","init","ecModel","api","_geo3DBuilder","groupGL","Node","render","map3DModel","coordSys","coordinateSystem","viewGL","add","rootNode","geo3D","_sceneHelper","initLight","setScene","scene","updateLight","setPostEffect","getModel","setTemporalSuperSampling","control","_control","zr","getZr","viewControlModel","setViewGL","setFromViewControlModel","off","on","dispatchAction","alpha","getAlpha","beta","getBeta","distance","getDistance","from","uid","map3DId","id","extrudeY","dispose","getData","getLayout","update","count","srgbDefineMethod","isLinearSpace","traverse","mesh","material","afterRender","layerGL","renderer","updateAmbientCubemap","updateSkybox","removeAll"],"sources":["E:/QuestionairePlanet_Fronted/mytest/node_modules/echarts-gl/lib/chart/map3D/Map3DView.js"],"sourcesContent":["import * as echarts from 'echarts/lib/echarts';\nimport graphicGL from '../../util/graphicGL';\nimport OrbitControl from '../../util/OrbitControl';\nimport SceneHelper from '../../component/common/SceneHelper';\nimport Geo3DBuilder from '../../component/common/Geo3DBuilder';\nexport default echarts.ChartView.extend({\n  type: 'map3D',\n  __ecgl__: true,\n  init: function (ecModel, api) {\n    this._geo3DBuilder = new Geo3DBuilder(api);\n    this.groupGL = new graphicGL.Node();\n  },\n  render: function (map3DModel, ecModel, api) {\n    var coordSys = map3DModel.coordinateSystem;\n\n    if (!coordSys || !coordSys.viewGL) {\n      return;\n    }\n\n    this.groupGL.add(this._geo3DBuilder.rootNode);\n    coordSys.viewGL.add(this.groupGL);\n    var geo3D;\n\n    if (coordSys.type === 'geo3D') {\n      geo3D = coordSys;\n\n      if (!this._sceneHelper) {\n        this._sceneHelper = new SceneHelper();\n\n        this._sceneHelper.initLight(this.groupGL);\n      }\n\n      this._sceneHelper.setScene(coordSys.viewGL.scene);\n\n      this._sceneHelper.updateLight(map3DModel); // Set post effect\n\n\n      coordSys.viewGL.setPostEffect(map3DModel.getModel('postEffect'), api);\n      coordSys.viewGL.setTemporalSuperSampling(map3DModel.getModel('temporalSuperSampling'));\n      var control = this._control;\n\n      if (!control) {\n        control = this._control = new OrbitControl({\n          zr: api.getZr()\n        });\n\n        this._control.init();\n      }\n\n      var viewControlModel = map3DModel.getModel('viewControl');\n      control.setViewGL(coordSys.viewGL);\n      control.setFromViewControlModel(viewControlModel, 0);\n      control.off('update');\n      control.on('update', function () {\n        api.dispatchAction({\n          type: 'map3DChangeCamera',\n          alpha: control.getAlpha(),\n          beta: control.getBeta(),\n          distance: control.getDistance(),\n          from: this.uid,\n          map3DId: map3DModel.id\n        });\n      });\n      this._geo3DBuilder.extrudeY = true;\n    } else {\n      if (this._control) {\n        this._control.dispose();\n\n        this._control = null;\n      }\n\n      if (this._sceneHelper) {\n        this._sceneHelper.dispose();\n\n        this._sceneHelper = null;\n      }\n\n      geo3D = map3DModel.getData().getLayout('geo3D');\n      this._geo3DBuilder.extrudeY = false;\n    }\n\n    this._geo3DBuilder.update(map3DModel, ecModel, api, 0, map3DModel.getData().count()); // Must update after geo3D.viewGL.setPostEffect to determine linear space\n\n\n    var srgbDefineMethod = coordSys.viewGL.isLinearSpace() ? 'define' : 'undefine';\n\n    this._geo3DBuilder.rootNode.traverse(function (mesh) {\n      if (mesh.material) {\n        mesh.material[srgbDefineMethod]('fragment', 'SRGB_DECODE');\n      }\n    });\n  },\n  afterRender: function (map3DModel, ecModel, api, layerGL) {\n    var renderer = layerGL.renderer;\n    var coordSys = map3DModel.coordinateSystem;\n\n    if (coordSys && coordSys.type === 'geo3D') {\n      this._sceneHelper.updateAmbientCubemap(renderer, map3DModel, api);\n\n      this._sceneHelper.updateSkybox(renderer, map3DModel, api);\n    }\n  },\n  dispose: function () {\n    this.groupGL.removeAll();\n\n    this._control.dispose();\n\n    this._geo3DBuilder.dispose();\n  }\n});"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}