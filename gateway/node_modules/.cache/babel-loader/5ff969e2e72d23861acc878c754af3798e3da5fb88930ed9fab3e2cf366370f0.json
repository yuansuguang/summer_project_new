{"ast":null,"code":"import \"core-js/modules/es.array-buffer.detached.js\";\nimport \"core-js/modules/es.array-buffer.transfer.js\";\nimport \"core-js/modules/es.array-buffer.transfer-to-fixed-length.js\";\nimport \"core-js/modules/es.typed-array.to-reversed.js\";\nimport \"core-js/modules/es.typed-array.to-sorted.js\";\nimport \"core-js/modules/es.typed-array.with.js\";\nimport graphicGL from '../../util/graphicGL';\nimport Pass from 'claygl/src/compositor/Pass';\nimport FrameBuffer from 'claygl/src/FrameBuffer';\nimport forceAtlas2Code from './forceAtlas2.glsl.js';\ngraphicGL.Shader.import(forceAtlas2Code);\nvar defaultConfigs = {\n  repulsionByDegree: true,\n  linLogMode: false,\n  strongGravityMode: false,\n  gravity: 1.0,\n  scaling: 1.0,\n  edgeWeightInfluence: 1.0,\n  jitterTolerence: 0.1,\n  preventOverlap: false,\n  dissuadeHubs: false,\n  gravityCenter: null\n};\nfunction ForceAtlas2GPU(options) {\n  var textureOpt = {\n    type: graphicGL.Texture.FLOAT,\n    minFilter: graphicGL.Texture.NEAREST,\n    magFilter: graphicGL.Texture.NEAREST\n  };\n  this._positionSourceTex = new graphicGL.Texture2D(textureOpt);\n  this._positionSourceTex.flipY = false;\n  this._positionTex = new graphicGL.Texture2D(textureOpt);\n  this._positionPrevTex = new graphicGL.Texture2D(textureOpt);\n  this._forceTex = new graphicGL.Texture2D(textureOpt);\n  this._forcePrevTex = new graphicGL.Texture2D(textureOpt);\n  this._weightedSumTex = new graphicGL.Texture2D(textureOpt);\n  this._weightedSumTex.width = this._weightedSumTex.height = 1;\n  this._globalSpeedTex = new graphicGL.Texture2D(textureOpt);\n  this._globalSpeedPrevTex = new graphicGL.Texture2D(textureOpt);\n  this._globalSpeedTex.width = this._globalSpeedTex.height = 1;\n  this._globalSpeedPrevTex.width = this._globalSpeedPrevTex.height = 1;\n  this._nodeRepulsionPass = new Pass({\n    fragment: graphicGL.Shader.source('ecgl.forceAtlas2.updateNodeRepulsion')\n  });\n  this._positionPass = new Pass({\n    fragment: graphicGL.Shader.source('ecgl.forceAtlas2.updatePosition')\n  });\n  this._globalSpeedPass = new Pass({\n    fragment: graphicGL.Shader.source('ecgl.forceAtlas2.calcGlobalSpeed')\n  });\n  this._copyPass = new Pass({\n    fragment: graphicGL.Shader.source('clay.compositor.output')\n  });\n  var additiveBlend = function (gl) {\n    gl.blendEquation(gl.FUNC_ADD);\n    gl.blendFunc(gl.ONE, gl.ONE);\n  };\n  this._edgeForceMesh = new graphicGL.Mesh({\n    geometry: new graphicGL.Geometry({\n      attributes: {\n        node1: new graphicGL.Geometry.Attribute('node1', 'float', 2),\n        node2: new graphicGL.Geometry.Attribute('node2', 'float', 2),\n        weight: new graphicGL.Geometry.Attribute('weight', 'float', 1)\n      },\n      dynamic: true,\n      mainAttribute: 'node1'\n    }),\n    material: new graphicGL.Material({\n      transparent: true,\n      shader: graphicGL.createShader('ecgl.forceAtlas2.updateEdgeAttraction'),\n      blend: additiveBlend,\n      depthMask: false,\n      depthText: false\n    }),\n    mode: graphicGL.Mesh.POINTS\n  });\n  this._weightedSumMesh = new graphicGL.Mesh({\n    geometry: new graphicGL.Geometry({\n      attributes: {\n        node: new graphicGL.Geometry.Attribute('node', 'float', 2)\n      },\n      dynamic: true,\n      mainAttribute: 'node'\n    }),\n    material: new graphicGL.Material({\n      transparent: true,\n      shader: graphicGL.createShader('ecgl.forceAtlas2.calcWeightedSum'),\n      blend: additiveBlend,\n      depthMask: false,\n      depthText: false\n    }),\n    mode: graphicGL.Mesh.POINTS\n  });\n  this._framebuffer = new FrameBuffer({\n    depthBuffer: false\n  });\n  this._dummyCamera = new graphicGL.OrthographicCamera({\n    left: -1,\n    right: 1,\n    top: 1,\n    bottom: -1,\n    near: 0,\n    far: 100\n  });\n  this._globalSpeed = 0;\n}\nForceAtlas2GPU.prototype.updateOption = function (options) {\n  // Default config\n  for (var name in defaultConfigs) {\n    this[name] = defaultConfigs[name];\n  } // Config according to data scale\n\n  var nNodes = this._nodes.length;\n  if (nNodes > 50000) {\n    this.jitterTolerence = 10;\n  } else if (nNodes > 5000) {\n    this.jitterTolerence = 1;\n  } else {\n    this.jitterTolerence = 0.1;\n  }\n  if (nNodes > 100) {\n    this.scaling = 2.0;\n  } else {\n    this.scaling = 10.0;\n  } // this.edgeWeightInfluence = 1;\n  // this.gravity = 1;\n  // this.strongGravityMode = false;\n\n  if (options) {\n    for (var name in defaultConfigs) {\n      if (options[name] != null) {\n        this[name] = options[name];\n      }\n    }\n  }\n  if (this.repulsionByDegree) {\n    var positionBuffer = this._positionSourceTex.pixels;\n    for (var i = 0; i < this._nodes.length; i++) {\n      positionBuffer[i * 4 + 2] = (this._nodes[i].degree || 0) + 1;\n    }\n  }\n};\nForceAtlas2GPU.prototype._updateGravityCenter = function (options) {\n  var nodes = this._nodes;\n  var edges = this._edges;\n  if (!this.gravityCenter) {\n    var min = [Infinity, Infinity];\n    var max = [-Infinity, -Infinity];\n    for (var i = 0; i < nodes.length; i++) {\n      min[0] = Math.min(nodes[i].x, min[0]);\n      min[1] = Math.min(nodes[i].y, min[1]);\n      max[0] = Math.max(nodes[i].x, max[0]);\n      max[1] = Math.max(nodes[i].y, max[1]);\n    }\n    this._gravityCenter = [(min[0] + max[0]) * 0.5, (min[1] + max[1]) * 0.5];\n  } else {\n    this._gravityCenter = this.gravityCenter;\n  } // Update inDegree, outDegree\n\n  for (var i = 0; i < edges.length; i++) {\n    var node1 = edges[i].node1;\n    var node2 = edges[i].node2;\n    nodes[node1].degree = (nodes[node1].degree || 0) + 1;\n    nodes[node2].degree = (nodes[node2].degree || 0) + 1;\n  }\n};\n/**\n * @param {Array.<Object>} [{ x, y, mass }] nodes\n * @param {Array.<Object>} [{ node1, node2, weight }] edges\n */\n\nForceAtlas2GPU.prototype.initData = function (nodes, edges) {\n  this._nodes = nodes;\n  this._edges = edges;\n  this._updateGravityCenter();\n  var textureWidth = Math.ceil(Math.sqrt(nodes.length));\n  var textureHeight = textureWidth;\n  var positionBuffer = new Float32Array(textureWidth * textureHeight * 4);\n  this._resize(textureWidth, textureHeight);\n  var offset = 0;\n  for (var i = 0; i < nodes.length; i++) {\n    var node = nodes[i];\n    positionBuffer[offset++] = node.x || 0;\n    positionBuffer[offset++] = node.y || 0;\n    positionBuffer[offset++] = node.mass || 1;\n    positionBuffer[offset++] = node.size || 1;\n  }\n  this._positionSourceTex.pixels = positionBuffer;\n  var edgeGeometry = this._edgeForceMesh.geometry;\n  var edgeLen = edges.length;\n  edgeGeometry.attributes.node1.init(edgeLen * 2);\n  edgeGeometry.attributes.node2.init(edgeLen * 2);\n  edgeGeometry.attributes.weight.init(edgeLen * 2);\n  var uv = [];\n  for (var i = 0; i < edges.length; i++) {\n    var attributes = edgeGeometry.attributes;\n    var weight = edges[i].weight;\n    if (weight == null) {\n      weight = 1;\n    } // Two way.\n\n    attributes.node1.set(i, this.getNodeUV(edges[i].node1, uv));\n    attributes.node2.set(i, this.getNodeUV(edges[i].node2, uv));\n    attributes.weight.set(i, weight);\n    attributes.node1.set(i + edgeLen, this.getNodeUV(edges[i].node2, uv));\n    attributes.node2.set(i + edgeLen, this.getNodeUV(edges[i].node1, uv));\n    attributes.weight.set(i + edgeLen, weight);\n  }\n  var weigtedSumGeo = this._weightedSumMesh.geometry;\n  weigtedSumGeo.attributes.node.init(nodes.length);\n  for (var i = 0; i < nodes.length; i++) {\n    weigtedSumGeo.attributes.node.set(i, this.getNodeUV(i, uv));\n  }\n  edgeGeometry.dirty();\n  weigtedSumGeo.dirty();\n  this._nodeRepulsionPass.material.define('fragment', 'NODE_COUNT', nodes.length);\n  this._nodeRepulsionPass.material.setUniform('textureSize', [textureWidth, textureHeight]);\n  this._inited = false;\n  this._frame = 0;\n};\nForceAtlas2GPU.prototype.getNodes = function () {\n  return this._nodes;\n};\nForceAtlas2GPU.prototype.getEdges = function () {\n  return this._edges;\n};\nForceAtlas2GPU.prototype.step = function (renderer) {\n  if (!this._inited) {\n    this._initFromSource(renderer);\n    this._inited = true;\n  }\n  this._frame++;\n  this._framebuffer.attach(this._forceTex);\n  this._framebuffer.bind(renderer);\n  var nodeRepulsionPass = this._nodeRepulsionPass; // Calc node repulsion, gravity\n\n  nodeRepulsionPass.setUniform('strongGravityMode', this.strongGravityMode);\n  nodeRepulsionPass.setUniform('gravity', this.gravity);\n  nodeRepulsionPass.setUniform('gravityCenter', this._gravityCenter);\n  nodeRepulsionPass.setUniform('scaling', this.scaling);\n  nodeRepulsionPass.setUniform('preventOverlap', this.preventOverlap);\n  nodeRepulsionPass.setUniform('positionTex', this._positionPrevTex);\n  nodeRepulsionPass.render(renderer); // Calc edge attraction force\n\n  var edgeForceMesh = this._edgeForceMesh;\n  edgeForceMesh.material.set('linLogMode', this.linLogMode);\n  edgeForceMesh.material.set('edgeWeightInfluence', this.edgeWeightInfluence);\n  edgeForceMesh.material.set('preventOverlap', this.preventOverlap);\n  edgeForceMesh.material.set('positionTex', this._positionPrevTex);\n  renderer.gl.enable(renderer.gl.BLEND);\n  renderer.renderPass([edgeForceMesh], this._dummyCamera); // Calc weighted sum.\n\n  this._framebuffer.attach(this._weightedSumTex);\n  renderer.gl.clearColor(0, 0, 0, 0);\n  renderer.gl.clear(renderer.gl.COLOR_BUFFER_BIT);\n  renderer.gl.enable(renderer.gl.BLEND);\n  var weightedSumMesh = this._weightedSumMesh;\n  weightedSumMesh.material.set('positionTex', this._positionPrevTex);\n  weightedSumMesh.material.set('forceTex', this._forceTex);\n  weightedSumMesh.material.set('forcePrevTex', this._forcePrevTex);\n  renderer.renderPass([weightedSumMesh], this._dummyCamera); // Calc global speed.\n\n  this._framebuffer.attach(this._globalSpeedTex);\n  var globalSpeedPass = this._globalSpeedPass;\n  globalSpeedPass.setUniform('globalSpeedPrevTex', this._globalSpeedPrevTex);\n  globalSpeedPass.setUniform('weightedSumTex', this._weightedSumTex);\n  globalSpeedPass.setUniform('jitterTolerence', this.jitterTolerence);\n  renderer.gl.disable(renderer.gl.BLEND);\n  globalSpeedPass.render(renderer); // Update position.\n\n  var positionPass = this._positionPass;\n  this._framebuffer.attach(this._positionTex);\n  positionPass.setUniform('globalSpeedTex', this._globalSpeedTex);\n  positionPass.setUniform('positionTex', this._positionPrevTex);\n  positionPass.setUniform('forceTex', this._forceTex);\n  positionPass.setUniform('forcePrevTex', this._forcePrevTex);\n  positionPass.render(renderer);\n  this._framebuffer.unbind(renderer);\n  this._swapTexture();\n};\nForceAtlas2GPU.prototype.update = function (renderer, steps, cb) {\n  if (steps == null) {\n    steps = 1;\n  }\n  steps = Math.max(steps, 1);\n  for (var i = 0; i < steps; i++) {\n    this.step(renderer);\n  }\n  cb && cb();\n};\nForceAtlas2GPU.prototype.getNodePositionTexture = function () {\n  return this._inited // Texture already been swapped.\n  ? this._positionPrevTex : this._positionSourceTex;\n};\nForceAtlas2GPU.prototype.getNodeUV = function (nodeIndex, uv) {\n  uv = uv || [];\n  var textureWidth = this._positionTex.width;\n  var textureHeight = this._positionTex.height;\n  uv[0] = nodeIndex % textureWidth / (textureWidth - 1);\n  uv[1] = Math.floor(nodeIndex / textureWidth) / (textureHeight - 1) || 0;\n  return uv;\n};\nForceAtlas2GPU.prototype.getNodePosition = function (renderer, out) {\n  var positionArr = this._positionArr;\n  var width = this._positionTex.width;\n  var height = this._positionTex.height;\n  var size = width * height;\n  if (!positionArr || positionArr.length !== size * 4) {\n    positionArr = this._positionArr = new Float32Array(size * 4);\n  }\n  this._framebuffer.bind(renderer);\n  this._framebuffer.attach(this._positionPrevTex);\n  renderer.gl.readPixels(0, 0, width, height, renderer.gl.RGBA, renderer.gl.FLOAT, positionArr);\n  this._framebuffer.unbind(renderer);\n  if (!out) {\n    out = new Float32Array(this._nodes.length * 2);\n  }\n  for (var i = 0; i < this._nodes.length; i++) {\n    out[i * 2] = positionArr[i * 4];\n    out[i * 2 + 1] = positionArr[i * 4 + 1];\n  }\n  return out;\n};\nForceAtlas2GPU.prototype.getTextureData = function (renderer, textureName) {\n  var tex = this['_' + textureName + 'Tex'];\n  var width = tex.width;\n  var height = tex.height;\n  this._framebuffer.bind(renderer);\n  this._framebuffer.attach(tex);\n  var arr = new Float32Array(width * height * 4);\n  renderer.gl.readPixels(0, 0, width, height, renderer.gl.RGBA, renderer.gl.FLOAT, arr);\n  this._framebuffer.unbind(renderer);\n  return arr;\n};\nForceAtlas2GPU.prototype.getTextureSize = function () {\n  return {\n    width: this._positionTex.width,\n    height: this._positionTex.height\n  };\n};\nForceAtlas2GPU.prototype.isFinished = function (maxSteps) {\n  return this._frame > maxSteps;\n};\nForceAtlas2GPU.prototype._swapTexture = function () {\n  var tmp = this._positionPrevTex;\n  this._positionPrevTex = this._positionTex;\n  this._positionTex = tmp;\n  var tmp = this._forcePrevTex;\n  this._forcePrevTex = this._forceTex;\n  this._forceTex = tmp;\n  var tmp = this._globalSpeedPrevTex;\n  this._globalSpeedPrevTex = this._globalSpeedTex;\n  this._globalSpeedTex = tmp;\n};\nForceAtlas2GPU.prototype._initFromSource = function (renderer) {\n  this._framebuffer.attach(this._positionPrevTex);\n  this._framebuffer.bind(renderer);\n  this._copyPass.setUniform('texture', this._positionSourceTex);\n  this._copyPass.render(renderer);\n  renderer.gl.clearColor(0, 0, 0, 0);\n  this._framebuffer.attach(this._forcePrevTex);\n  renderer.gl.clear(renderer.gl.COLOR_BUFFER_BIT);\n  this._framebuffer.attach(this._globalSpeedPrevTex);\n  renderer.gl.clear(renderer.gl.COLOR_BUFFER_BIT);\n  this._framebuffer.unbind(renderer);\n};\nForceAtlas2GPU.prototype._resize = function (width, height) {\n  ['_positionSourceTex', '_positionTex', '_positionPrevTex', '_forceTex', '_forcePrevTex'].forEach(function (texName) {\n    this[texName].width = width;\n    this[texName].height = height;\n    this[texName].dirty();\n  }, this);\n};\nForceAtlas2GPU.prototype.dispose = function (renderer) {\n  this._framebuffer.dispose(renderer);\n  this._copyPass.dispose(renderer);\n  this._nodeRepulsionPass.dispose(renderer);\n  this._positionPass.dispose(renderer);\n  this._globalSpeedPass.dispose(renderer);\n  this._edgeForceMesh.geometry.dispose(renderer);\n  this._weightedSumMesh.geometry.dispose(renderer);\n  this._positionSourceTex.dispose(renderer);\n  this._positionTex.dispose(renderer);\n  this._positionPrevTex.dispose(renderer);\n  this._forceTex.dispose(renderer);\n  this._forcePrevTex.dispose(renderer);\n  this._weightedSumTex.dispose(renderer);\n  this._globalSpeedTex.dispose(renderer);\n  this._globalSpeedPrevTex.dispose(renderer);\n};\nexport default ForceAtlas2GPU;","map":{"version":3,"names":["graphicGL","Pass","FrameBuffer","forceAtlas2Code","Shader","import","defaultConfigs","repulsionByDegree","linLogMode","strongGravityMode","gravity","scaling","edgeWeightInfluence","jitterTolerence","preventOverlap","dissuadeHubs","gravityCenter","ForceAtlas2GPU","options","textureOpt","type","Texture","FLOAT","minFilter","NEAREST","magFilter","_positionSourceTex","Texture2D","flipY","_positionTex","_positionPrevTex","_forceTex","_forcePrevTex","_weightedSumTex","width","height","_globalSpeedTex","_globalSpeedPrevTex","_nodeRepulsionPass","fragment","source","_positionPass","_globalSpeedPass","_copyPass","additiveBlend","gl","blendEquation","FUNC_ADD","blendFunc","ONE","_edgeForceMesh","Mesh","geometry","Geometry","attributes","node1","Attribute","node2","weight","dynamic","mainAttribute","material","Material","transparent","shader","createShader","blend","depthMask","depthText","mode","POINTS","_weightedSumMesh","node","_framebuffer","depthBuffer","_dummyCamera","OrthographicCamera","left","right","top","bottom","near","far","_globalSpeed","prototype","updateOption","name","nNodes","_nodes","length","positionBuffer","pixels","i","degree","_updateGravityCenter","nodes","edges","_edges","min","Infinity","max","Math","x","y","_gravityCenter","initData","textureWidth","ceil","sqrt","textureHeight","Float32Array","_resize","offset","mass","size","edgeGeometry","edgeLen","init","uv","set","getNodeUV","weigtedSumGeo","dirty","define","setUniform","_inited","_frame","getNodes","getEdges","step","renderer","_initFromSource","attach","bind","nodeRepulsionPass","render","edgeForceMesh","enable","BLEND","renderPass","clearColor","clear","COLOR_BUFFER_BIT","weightedSumMesh","globalSpeedPass","disable","positionPass","unbind","_swapTexture","update","steps","cb","getNodePositionTexture","nodeIndex","floor","getNodePosition","out","positionArr","_positionArr","readPixels","RGBA","getTextureData","textureName","tex","arr","getTextureSize","isFinished","maxSteps","tmp","forEach","texName","dispose"],"sources":["E:/QuestionairePlanet_Fronted/mytest/node_modules/echarts-gl/lib/chart/graphGL/ForceAtlas2GPU.js"],"sourcesContent":["import graphicGL from '../../util/graphicGL';\nimport Pass from 'claygl/src/compositor/Pass';\nimport FrameBuffer from 'claygl/src/FrameBuffer';\nimport forceAtlas2Code from './forceAtlas2.glsl.js';\ngraphicGL.Shader.import(forceAtlas2Code);\nvar defaultConfigs = {\n  repulsionByDegree: true,\n  linLogMode: false,\n  strongGravityMode: false,\n  gravity: 1.0,\n  scaling: 1.0,\n  edgeWeightInfluence: 1.0,\n  jitterTolerence: 0.1,\n  preventOverlap: false,\n  dissuadeHubs: false,\n  gravityCenter: null\n};\n\nfunction ForceAtlas2GPU(options) {\n  var textureOpt = {\n    type: graphicGL.Texture.FLOAT,\n    minFilter: graphicGL.Texture.NEAREST,\n    magFilter: graphicGL.Texture.NEAREST\n  };\n  this._positionSourceTex = new graphicGL.Texture2D(textureOpt);\n  this._positionSourceTex.flipY = false;\n  this._positionTex = new graphicGL.Texture2D(textureOpt);\n  this._positionPrevTex = new graphicGL.Texture2D(textureOpt);\n  this._forceTex = new graphicGL.Texture2D(textureOpt);\n  this._forcePrevTex = new graphicGL.Texture2D(textureOpt);\n  this._weightedSumTex = new graphicGL.Texture2D(textureOpt);\n  this._weightedSumTex.width = this._weightedSumTex.height = 1;\n  this._globalSpeedTex = new graphicGL.Texture2D(textureOpt);\n  this._globalSpeedPrevTex = new graphicGL.Texture2D(textureOpt);\n  this._globalSpeedTex.width = this._globalSpeedTex.height = 1;\n  this._globalSpeedPrevTex.width = this._globalSpeedPrevTex.height = 1;\n  this._nodeRepulsionPass = new Pass({\n    fragment: graphicGL.Shader.source('ecgl.forceAtlas2.updateNodeRepulsion')\n  });\n  this._positionPass = new Pass({\n    fragment: graphicGL.Shader.source('ecgl.forceAtlas2.updatePosition')\n  });\n  this._globalSpeedPass = new Pass({\n    fragment: graphicGL.Shader.source('ecgl.forceAtlas2.calcGlobalSpeed')\n  });\n  this._copyPass = new Pass({\n    fragment: graphicGL.Shader.source('clay.compositor.output')\n  });\n\n  var additiveBlend = function (gl) {\n    gl.blendEquation(gl.FUNC_ADD);\n    gl.blendFunc(gl.ONE, gl.ONE);\n  };\n\n  this._edgeForceMesh = new graphicGL.Mesh({\n    geometry: new graphicGL.Geometry({\n      attributes: {\n        node1: new graphicGL.Geometry.Attribute('node1', 'float', 2),\n        node2: new graphicGL.Geometry.Attribute('node2', 'float', 2),\n        weight: new graphicGL.Geometry.Attribute('weight', 'float', 1)\n      },\n      dynamic: true,\n      mainAttribute: 'node1'\n    }),\n    material: new graphicGL.Material({\n      transparent: true,\n      shader: graphicGL.createShader('ecgl.forceAtlas2.updateEdgeAttraction'),\n      blend: additiveBlend,\n      depthMask: false,\n      depthText: false\n    }),\n    mode: graphicGL.Mesh.POINTS\n  });\n  this._weightedSumMesh = new graphicGL.Mesh({\n    geometry: new graphicGL.Geometry({\n      attributes: {\n        node: new graphicGL.Geometry.Attribute('node', 'float', 2)\n      },\n      dynamic: true,\n      mainAttribute: 'node'\n    }),\n    material: new graphicGL.Material({\n      transparent: true,\n      shader: graphicGL.createShader('ecgl.forceAtlas2.calcWeightedSum'),\n      blend: additiveBlend,\n      depthMask: false,\n      depthText: false\n    }),\n    mode: graphicGL.Mesh.POINTS\n  });\n  this._framebuffer = new FrameBuffer({\n    depthBuffer: false\n  });\n  this._dummyCamera = new graphicGL.OrthographicCamera({\n    left: -1,\n    right: 1,\n    top: 1,\n    bottom: -1,\n    near: 0,\n    far: 100\n  });\n  this._globalSpeed = 0;\n}\n\nForceAtlas2GPU.prototype.updateOption = function (options) {\n  // Default config\n  for (var name in defaultConfigs) {\n    this[name] = defaultConfigs[name];\n  } // Config according to data scale\n\n\n  var nNodes = this._nodes.length;\n\n  if (nNodes > 50000) {\n    this.jitterTolerence = 10;\n  } else if (nNodes > 5000) {\n    this.jitterTolerence = 1;\n  } else {\n    this.jitterTolerence = 0.1;\n  }\n\n  if (nNodes > 100) {\n    this.scaling = 2.0;\n  } else {\n    this.scaling = 10.0;\n  } // this.edgeWeightInfluence = 1;\n  // this.gravity = 1;\n  // this.strongGravityMode = false;\n\n\n  if (options) {\n    for (var name in defaultConfigs) {\n      if (options[name] != null) {\n        this[name] = options[name];\n      }\n    }\n  }\n\n  if (this.repulsionByDegree) {\n    var positionBuffer = this._positionSourceTex.pixels;\n\n    for (var i = 0; i < this._nodes.length; i++) {\n      positionBuffer[i * 4 + 2] = (this._nodes[i].degree || 0) + 1;\n    }\n  }\n};\n\nForceAtlas2GPU.prototype._updateGravityCenter = function (options) {\n  var nodes = this._nodes;\n  var edges = this._edges;\n\n  if (!this.gravityCenter) {\n    var min = [Infinity, Infinity];\n    var max = [-Infinity, -Infinity];\n\n    for (var i = 0; i < nodes.length; i++) {\n      min[0] = Math.min(nodes[i].x, min[0]);\n      min[1] = Math.min(nodes[i].y, min[1]);\n      max[0] = Math.max(nodes[i].x, max[0]);\n      max[1] = Math.max(nodes[i].y, max[1]);\n    }\n\n    this._gravityCenter = [(min[0] + max[0]) * 0.5, (min[1] + max[1]) * 0.5];\n  } else {\n    this._gravityCenter = this.gravityCenter;\n  } // Update inDegree, outDegree\n\n\n  for (var i = 0; i < edges.length; i++) {\n    var node1 = edges[i].node1;\n    var node2 = edges[i].node2;\n    nodes[node1].degree = (nodes[node1].degree || 0) + 1;\n    nodes[node2].degree = (nodes[node2].degree || 0) + 1;\n  }\n};\n/**\n * @param {Array.<Object>} [{ x, y, mass }] nodes\n * @param {Array.<Object>} [{ node1, node2, weight }] edges\n */\n\n\nForceAtlas2GPU.prototype.initData = function (nodes, edges) {\n  this._nodes = nodes;\n  this._edges = edges;\n\n  this._updateGravityCenter();\n\n  var textureWidth = Math.ceil(Math.sqrt(nodes.length));\n  var textureHeight = textureWidth;\n  var positionBuffer = new Float32Array(textureWidth * textureHeight * 4);\n\n  this._resize(textureWidth, textureHeight);\n\n  var offset = 0;\n\n  for (var i = 0; i < nodes.length; i++) {\n    var node = nodes[i];\n    positionBuffer[offset++] = node.x || 0;\n    positionBuffer[offset++] = node.y || 0;\n    positionBuffer[offset++] = node.mass || 1;\n    positionBuffer[offset++] = node.size || 1;\n  }\n\n  this._positionSourceTex.pixels = positionBuffer;\n  var edgeGeometry = this._edgeForceMesh.geometry;\n  var edgeLen = edges.length;\n  edgeGeometry.attributes.node1.init(edgeLen * 2);\n  edgeGeometry.attributes.node2.init(edgeLen * 2);\n  edgeGeometry.attributes.weight.init(edgeLen * 2);\n  var uv = [];\n\n  for (var i = 0; i < edges.length; i++) {\n    var attributes = edgeGeometry.attributes;\n    var weight = edges[i].weight;\n\n    if (weight == null) {\n      weight = 1;\n    } // Two way.\n\n\n    attributes.node1.set(i, this.getNodeUV(edges[i].node1, uv));\n    attributes.node2.set(i, this.getNodeUV(edges[i].node2, uv));\n    attributes.weight.set(i, weight);\n    attributes.node1.set(i + edgeLen, this.getNodeUV(edges[i].node2, uv));\n    attributes.node2.set(i + edgeLen, this.getNodeUV(edges[i].node1, uv));\n    attributes.weight.set(i + edgeLen, weight);\n  }\n\n  var weigtedSumGeo = this._weightedSumMesh.geometry;\n  weigtedSumGeo.attributes.node.init(nodes.length);\n\n  for (var i = 0; i < nodes.length; i++) {\n    weigtedSumGeo.attributes.node.set(i, this.getNodeUV(i, uv));\n  }\n\n  edgeGeometry.dirty();\n  weigtedSumGeo.dirty();\n\n  this._nodeRepulsionPass.material.define('fragment', 'NODE_COUNT', nodes.length);\n\n  this._nodeRepulsionPass.material.setUniform('textureSize', [textureWidth, textureHeight]);\n\n  this._inited = false;\n  this._frame = 0;\n};\n\nForceAtlas2GPU.prototype.getNodes = function () {\n  return this._nodes;\n};\n\nForceAtlas2GPU.prototype.getEdges = function () {\n  return this._edges;\n};\n\nForceAtlas2GPU.prototype.step = function (renderer) {\n  if (!this._inited) {\n    this._initFromSource(renderer);\n\n    this._inited = true;\n  }\n\n  this._frame++;\n\n  this._framebuffer.attach(this._forceTex);\n\n  this._framebuffer.bind(renderer);\n\n  var nodeRepulsionPass = this._nodeRepulsionPass; // Calc node repulsion, gravity\n\n  nodeRepulsionPass.setUniform('strongGravityMode', this.strongGravityMode);\n  nodeRepulsionPass.setUniform('gravity', this.gravity);\n  nodeRepulsionPass.setUniform('gravityCenter', this._gravityCenter);\n  nodeRepulsionPass.setUniform('scaling', this.scaling);\n  nodeRepulsionPass.setUniform('preventOverlap', this.preventOverlap);\n  nodeRepulsionPass.setUniform('positionTex', this._positionPrevTex);\n  nodeRepulsionPass.render(renderer); // Calc edge attraction force\n\n  var edgeForceMesh = this._edgeForceMesh;\n  edgeForceMesh.material.set('linLogMode', this.linLogMode);\n  edgeForceMesh.material.set('edgeWeightInfluence', this.edgeWeightInfluence);\n  edgeForceMesh.material.set('preventOverlap', this.preventOverlap);\n  edgeForceMesh.material.set('positionTex', this._positionPrevTex);\n  renderer.gl.enable(renderer.gl.BLEND);\n  renderer.renderPass([edgeForceMesh], this._dummyCamera); // Calc weighted sum.\n\n  this._framebuffer.attach(this._weightedSumTex);\n\n  renderer.gl.clearColor(0, 0, 0, 0);\n  renderer.gl.clear(renderer.gl.COLOR_BUFFER_BIT);\n  renderer.gl.enable(renderer.gl.BLEND);\n  var weightedSumMesh = this._weightedSumMesh;\n  weightedSumMesh.material.set('positionTex', this._positionPrevTex);\n  weightedSumMesh.material.set('forceTex', this._forceTex);\n  weightedSumMesh.material.set('forcePrevTex', this._forcePrevTex);\n  renderer.renderPass([weightedSumMesh], this._dummyCamera); // Calc global speed.\n\n  this._framebuffer.attach(this._globalSpeedTex);\n\n  var globalSpeedPass = this._globalSpeedPass;\n  globalSpeedPass.setUniform('globalSpeedPrevTex', this._globalSpeedPrevTex);\n  globalSpeedPass.setUniform('weightedSumTex', this._weightedSumTex);\n  globalSpeedPass.setUniform('jitterTolerence', this.jitterTolerence);\n  renderer.gl.disable(renderer.gl.BLEND);\n  globalSpeedPass.render(renderer); // Update position.\n\n  var positionPass = this._positionPass;\n\n  this._framebuffer.attach(this._positionTex);\n\n  positionPass.setUniform('globalSpeedTex', this._globalSpeedTex);\n  positionPass.setUniform('positionTex', this._positionPrevTex);\n  positionPass.setUniform('forceTex', this._forceTex);\n  positionPass.setUniform('forcePrevTex', this._forcePrevTex);\n  positionPass.render(renderer);\n\n  this._framebuffer.unbind(renderer);\n\n  this._swapTexture();\n};\n\nForceAtlas2GPU.prototype.update = function (renderer, steps, cb) {\n  if (steps == null) {\n    steps = 1;\n  }\n\n  steps = Math.max(steps, 1);\n\n  for (var i = 0; i < steps; i++) {\n    this.step(renderer);\n  }\n\n  cb && cb();\n};\n\nForceAtlas2GPU.prototype.getNodePositionTexture = function () {\n  return this._inited // Texture already been swapped.\n  ? this._positionPrevTex : this._positionSourceTex;\n};\n\nForceAtlas2GPU.prototype.getNodeUV = function (nodeIndex, uv) {\n  uv = uv || [];\n  var textureWidth = this._positionTex.width;\n  var textureHeight = this._positionTex.height;\n  uv[0] = nodeIndex % textureWidth / (textureWidth - 1);\n  uv[1] = Math.floor(nodeIndex / textureWidth) / (textureHeight - 1) || 0;\n  return uv;\n};\n\nForceAtlas2GPU.prototype.getNodePosition = function (renderer, out) {\n  var positionArr = this._positionArr;\n  var width = this._positionTex.width;\n  var height = this._positionTex.height;\n  var size = width * height;\n\n  if (!positionArr || positionArr.length !== size * 4) {\n    positionArr = this._positionArr = new Float32Array(size * 4);\n  }\n\n  this._framebuffer.bind(renderer);\n\n  this._framebuffer.attach(this._positionPrevTex);\n\n  renderer.gl.readPixels(0, 0, width, height, renderer.gl.RGBA, renderer.gl.FLOAT, positionArr);\n\n  this._framebuffer.unbind(renderer);\n\n  if (!out) {\n    out = new Float32Array(this._nodes.length * 2);\n  }\n\n  for (var i = 0; i < this._nodes.length; i++) {\n    out[i * 2] = positionArr[i * 4];\n    out[i * 2 + 1] = positionArr[i * 4 + 1];\n  }\n\n  return out;\n};\n\nForceAtlas2GPU.prototype.getTextureData = function (renderer, textureName) {\n  var tex = this['_' + textureName + 'Tex'];\n  var width = tex.width;\n  var height = tex.height;\n\n  this._framebuffer.bind(renderer);\n\n  this._framebuffer.attach(tex);\n\n  var arr = new Float32Array(width * height * 4);\n  renderer.gl.readPixels(0, 0, width, height, renderer.gl.RGBA, renderer.gl.FLOAT, arr);\n\n  this._framebuffer.unbind(renderer);\n\n  return arr;\n};\n\nForceAtlas2GPU.prototype.getTextureSize = function () {\n  return {\n    width: this._positionTex.width,\n    height: this._positionTex.height\n  };\n};\n\nForceAtlas2GPU.prototype.isFinished = function (maxSteps) {\n  return this._frame > maxSteps;\n};\n\nForceAtlas2GPU.prototype._swapTexture = function () {\n  var tmp = this._positionPrevTex;\n  this._positionPrevTex = this._positionTex;\n  this._positionTex = tmp;\n  var tmp = this._forcePrevTex;\n  this._forcePrevTex = this._forceTex;\n  this._forceTex = tmp;\n  var tmp = this._globalSpeedPrevTex;\n  this._globalSpeedPrevTex = this._globalSpeedTex;\n  this._globalSpeedTex = tmp;\n};\n\nForceAtlas2GPU.prototype._initFromSource = function (renderer) {\n  this._framebuffer.attach(this._positionPrevTex);\n\n  this._framebuffer.bind(renderer);\n\n  this._copyPass.setUniform('texture', this._positionSourceTex);\n\n  this._copyPass.render(renderer);\n\n  renderer.gl.clearColor(0, 0, 0, 0);\n\n  this._framebuffer.attach(this._forcePrevTex);\n\n  renderer.gl.clear(renderer.gl.COLOR_BUFFER_BIT);\n\n  this._framebuffer.attach(this._globalSpeedPrevTex);\n\n  renderer.gl.clear(renderer.gl.COLOR_BUFFER_BIT);\n\n  this._framebuffer.unbind(renderer);\n};\n\nForceAtlas2GPU.prototype._resize = function (width, height) {\n  ['_positionSourceTex', '_positionTex', '_positionPrevTex', '_forceTex', '_forcePrevTex'].forEach(function (texName) {\n    this[texName].width = width;\n    this[texName].height = height;\n    this[texName].dirty();\n  }, this);\n};\n\nForceAtlas2GPU.prototype.dispose = function (renderer) {\n  this._framebuffer.dispose(renderer);\n\n  this._copyPass.dispose(renderer);\n\n  this._nodeRepulsionPass.dispose(renderer);\n\n  this._positionPass.dispose(renderer);\n\n  this._globalSpeedPass.dispose(renderer);\n\n  this._edgeForceMesh.geometry.dispose(renderer);\n\n  this._weightedSumMesh.geometry.dispose(renderer);\n\n  this._positionSourceTex.dispose(renderer);\n\n  this._positionTex.dispose(renderer);\n\n  this._positionPrevTex.dispose(renderer);\n\n  this._forceTex.dispose(renderer);\n\n  this._forcePrevTex.dispose(renderer);\n\n  this._weightedSumTex.dispose(renderer);\n\n  this._globalSpeedTex.dispose(renderer);\n\n  this._globalSpeedPrevTex.dispose(renderer);\n};\n\nexport default ForceAtlas2GPU;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}