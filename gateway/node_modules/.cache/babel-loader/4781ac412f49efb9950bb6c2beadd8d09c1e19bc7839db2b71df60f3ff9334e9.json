{"ast":null,"code":"import * as echarts from 'echarts/lib/echarts';\nimport graphicGL from '../../util/graphicGL';\nimport retrieve from '../../util/retrieve';\nimport Lines3DGeometry from '../../util/geometry/Lines3D';\nimport QuadsGeometry from '../../util/geometry/Quads';\nvar firstNotNull = retrieve.firstNotNull;\nvar dimIndicesMap = {\n  // Left to right\n  x: 0,\n  // Far to near\n  y: 2,\n  // Bottom to up\n  z: 1\n};\nfunction updateFacePlane(node, plane, otherAxis, dir) {\n  var coord = [0, 0, 0];\n  var distance = dir < 0 ? otherAxis.getExtentMin() : otherAxis.getExtentMax();\n  coord[dimIndicesMap[otherAxis.dim]] = distance;\n  node.position.setArray(coord);\n  node.rotation.identity(); // Negative distance because on the opposite of normal direction.\n\n  plane.distance = -Math.abs(distance);\n  plane.normal.set(0, 0, 0);\n  if (otherAxis.dim === 'x') {\n    node.rotation.rotateY(dir * Math.PI / 2);\n    plane.normal.x = -dir;\n  } else if (otherAxis.dim === 'z') {\n    node.rotation.rotateX(-dir * Math.PI / 2);\n    plane.normal.y = -dir;\n  } else {\n    if (dir > 0) {\n      node.rotation.rotateY(Math.PI);\n    }\n    plane.normal.z = -dir;\n  }\n}\nfunction Grid3DFace(faceInfo, linesMaterial, quadsMaterial) {\n  this.rootNode = new graphicGL.Node();\n  var linesMesh = new graphicGL.Mesh({\n    geometry: new Lines3DGeometry({\n      useNativeLine: false\n    }),\n    material: linesMaterial,\n    castShadow: false,\n    ignorePicking: true,\n    $ignorePicking: true,\n    renderOrder: 1\n  });\n  var quadsMesh = new graphicGL.Mesh({\n    geometry: new QuadsGeometry(),\n    material: quadsMaterial,\n    castShadow: false,\n    culling: false,\n    ignorePicking: true,\n    $ignorePicking: true,\n    renderOrder: 0\n  }); // Quads are behind lines.\n\n  this.rootNode.add(quadsMesh);\n  this.rootNode.add(linesMesh);\n  this.faceInfo = faceInfo;\n  this.plane = new graphicGL.Plane();\n  this.linesMesh = linesMesh;\n  this.quadsMesh = quadsMesh;\n}\nGrid3DFace.prototype.update = function (grid3DModel, ecModel, api) {\n  var cartesian = grid3DModel.coordinateSystem;\n  var axes = [cartesian.getAxis(this.faceInfo[0]), cartesian.getAxis(this.faceInfo[1])];\n  var lineGeometry = this.linesMesh.geometry;\n  var quadsGeometry = this.quadsMesh.geometry;\n  lineGeometry.convertToDynamicArray(true);\n  quadsGeometry.convertToDynamicArray(true);\n  this._updateSplitLines(lineGeometry, axes, grid3DModel, api);\n  this._udpateSplitAreas(quadsGeometry, axes, grid3DModel, api);\n  lineGeometry.convertToTypedArray();\n  quadsGeometry.convertToTypedArray();\n  var otherAxis = cartesian.getAxis(this.faceInfo[2]);\n  updateFacePlane(this.rootNode, this.plane, otherAxis, this.faceInfo[3]);\n};\nGrid3DFace.prototype._updateSplitLines = function (geometry, axes, grid3DModel, api) {\n  var dpr = api.getDevicePixelRatio();\n  axes.forEach(function (axis, idx) {\n    var axisModel = axis.model;\n    var otherExtent = axes[1 - idx].getExtent();\n    if (axis.scale.isBlank()) {\n      return;\n    }\n    var splitLineModel = axisModel.getModel('splitLine', grid3DModel.getModel('splitLine')); // Render splitLines\n\n    if (splitLineModel.get('show')) {\n      var lineStyleModel = splitLineModel.getModel('lineStyle');\n      var lineColors = lineStyleModel.get('color');\n      var opacity = firstNotNull(lineStyleModel.get('opacity'), 1.0);\n      var lineWidth = firstNotNull(lineStyleModel.get('width'), 1.0);\n      lineColors = echarts.util.isArray(lineColors) ? lineColors : [lineColors];\n      var ticksCoords = axis.getTicksCoords({\n        tickModel: splitLineModel\n      });\n      var count = 0;\n      for (var i = 0; i < ticksCoords.length; i++) {\n        var tickCoord = ticksCoords[i].coord;\n        var lineColor = graphicGL.parseColor(lineColors[count % lineColors.length]);\n        lineColor[3] *= opacity;\n        var p0 = [0, 0, 0];\n        var p1 = [0, 0, 0]; // 0 - x, 1 - y\n\n        p0[idx] = p1[idx] = tickCoord;\n        p0[1 - idx] = otherExtent[0];\n        p1[1 - idx] = otherExtent[1];\n        geometry.addLine(p0, p1, lineColor, lineWidth * dpr);\n        count++;\n      }\n    }\n  });\n};\nGrid3DFace.prototype._udpateSplitAreas = function (geometry, axes, grid3DModel, api) {\n  axes.forEach(function (axis, idx) {\n    var axisModel = axis.model;\n    var otherExtent = axes[1 - idx].getExtent();\n    if (axis.scale.isBlank()) {\n      return;\n    }\n    var splitAreaModel = axisModel.getModel('splitArea', grid3DModel.getModel('splitArea')); // Render splitAreas\n\n    if (splitAreaModel.get('show')) {\n      var areaStyleModel = splitAreaModel.getModel('areaStyle');\n      var colors = areaStyleModel.get('color');\n      var opacity = firstNotNull(areaStyleModel.get('opacity'), 1.0);\n      colors = echarts.util.isArray(colors) ? colors : [colors];\n      var ticksCoords = axis.getTicksCoords({\n        tickModel: splitAreaModel,\n        clamp: true\n      });\n      var count = 0;\n      var prevP0 = [0, 0, 0];\n      var prevP1 = [0, 0, 0]; // 0 - x, 1 - y\n\n      for (var i = 0; i < ticksCoords.length; i++) {\n        var tickCoord = ticksCoords[i].coord;\n        var p0 = [0, 0, 0];\n        var p1 = [0, 0, 0]; // 0 - x, 1 - y\n\n        p0[idx] = p1[idx] = tickCoord;\n        p0[1 - idx] = otherExtent[0];\n        p1[1 - idx] = otherExtent[1];\n        if (i === 0) {\n          prevP0 = p0;\n          prevP1 = p1;\n          continue;\n        }\n        var color = graphicGL.parseColor(colors[count % colors.length]);\n        color[3] *= opacity;\n        geometry.addQuad([prevP0, p0, p1, prevP1], color);\n        prevP0 = p0;\n        prevP1 = p1;\n        count++;\n      }\n    }\n  });\n};\nexport default Grid3DFace;","map":{"version":3,"names":["echarts","graphicGL","retrieve","Lines3DGeometry","QuadsGeometry","firstNotNull","dimIndicesMap","x","y","z","updateFacePlane","node","plane","otherAxis","dir","coord","distance","getExtentMin","getExtentMax","dim","position","setArray","rotation","identity","Math","abs","normal","set","rotateY","PI","rotateX","Grid3DFace","faceInfo","linesMaterial","quadsMaterial","rootNode","Node","linesMesh","Mesh","geometry","useNativeLine","material","castShadow","ignorePicking","$ignorePicking","renderOrder","quadsMesh","culling","add","Plane","prototype","update","grid3DModel","ecModel","api","cartesian","coordinateSystem","axes","getAxis","lineGeometry","quadsGeometry","convertToDynamicArray","_updateSplitLines","_udpateSplitAreas","convertToTypedArray","dpr","getDevicePixelRatio","forEach","axis","idx","axisModel","model","otherExtent","getExtent","scale","isBlank","splitLineModel","getModel","get","lineStyleModel","lineColors","opacity","lineWidth","util","isArray","ticksCoords","getTicksCoords","tickModel","count","i","length","tickCoord","lineColor","parseColor","p0","p1","addLine","splitAreaModel","areaStyleModel","colors","clamp","prevP0","prevP1","color","addQuad"],"sources":["E:/QuestionairePlanet_Fronted/mytest/node_modules/echarts-gl/lib/component/grid3D/Grid3DFace.js"],"sourcesContent":["import * as echarts from 'echarts/lib/echarts';\nimport graphicGL from '../../util/graphicGL';\nimport retrieve from '../../util/retrieve';\nimport Lines3DGeometry from '../../util/geometry/Lines3D';\nimport QuadsGeometry from '../../util/geometry/Quads';\nvar firstNotNull = retrieve.firstNotNull;\nvar dimIndicesMap = {\n  // Left to right\n  x: 0,\n  // Far to near\n  y: 2,\n  // Bottom to up\n  z: 1\n};\n\nfunction updateFacePlane(node, plane, otherAxis, dir) {\n  var coord = [0, 0, 0];\n  var distance = dir < 0 ? otherAxis.getExtentMin() : otherAxis.getExtentMax();\n  coord[dimIndicesMap[otherAxis.dim]] = distance;\n  node.position.setArray(coord);\n  node.rotation.identity(); // Negative distance because on the opposite of normal direction.\n\n  plane.distance = -Math.abs(distance);\n  plane.normal.set(0, 0, 0);\n\n  if (otherAxis.dim === 'x') {\n    node.rotation.rotateY(dir * Math.PI / 2);\n    plane.normal.x = -dir;\n  } else if (otherAxis.dim === 'z') {\n    node.rotation.rotateX(-dir * Math.PI / 2);\n    plane.normal.y = -dir;\n  } else {\n    if (dir > 0) {\n      node.rotation.rotateY(Math.PI);\n    }\n\n    plane.normal.z = -dir;\n  }\n}\n\nfunction Grid3DFace(faceInfo, linesMaterial, quadsMaterial) {\n  this.rootNode = new graphicGL.Node();\n  var linesMesh = new graphicGL.Mesh({\n    geometry: new Lines3DGeometry({\n      useNativeLine: false\n    }),\n    material: linesMaterial,\n    castShadow: false,\n    ignorePicking: true,\n    $ignorePicking: true,\n    renderOrder: 1\n  });\n  var quadsMesh = new graphicGL.Mesh({\n    geometry: new QuadsGeometry(),\n    material: quadsMaterial,\n    castShadow: false,\n    culling: false,\n    ignorePicking: true,\n    $ignorePicking: true,\n    renderOrder: 0\n  }); // Quads are behind lines.\n\n  this.rootNode.add(quadsMesh);\n  this.rootNode.add(linesMesh);\n  this.faceInfo = faceInfo;\n  this.plane = new graphicGL.Plane();\n  this.linesMesh = linesMesh;\n  this.quadsMesh = quadsMesh;\n}\n\nGrid3DFace.prototype.update = function (grid3DModel, ecModel, api) {\n  var cartesian = grid3DModel.coordinateSystem;\n  var axes = [cartesian.getAxis(this.faceInfo[0]), cartesian.getAxis(this.faceInfo[1])];\n  var lineGeometry = this.linesMesh.geometry;\n  var quadsGeometry = this.quadsMesh.geometry;\n  lineGeometry.convertToDynamicArray(true);\n  quadsGeometry.convertToDynamicArray(true);\n\n  this._updateSplitLines(lineGeometry, axes, grid3DModel, api);\n\n  this._udpateSplitAreas(quadsGeometry, axes, grid3DModel, api);\n\n  lineGeometry.convertToTypedArray();\n  quadsGeometry.convertToTypedArray();\n  var otherAxis = cartesian.getAxis(this.faceInfo[2]);\n  updateFacePlane(this.rootNode, this.plane, otherAxis, this.faceInfo[3]);\n};\n\nGrid3DFace.prototype._updateSplitLines = function (geometry, axes, grid3DModel, api) {\n  var dpr = api.getDevicePixelRatio();\n  axes.forEach(function (axis, idx) {\n    var axisModel = axis.model;\n    var otherExtent = axes[1 - idx].getExtent();\n\n    if (axis.scale.isBlank()) {\n      return;\n    }\n\n    var splitLineModel = axisModel.getModel('splitLine', grid3DModel.getModel('splitLine')); // Render splitLines\n\n    if (splitLineModel.get('show')) {\n      var lineStyleModel = splitLineModel.getModel('lineStyle');\n      var lineColors = lineStyleModel.get('color');\n      var opacity = firstNotNull(lineStyleModel.get('opacity'), 1.0);\n      var lineWidth = firstNotNull(lineStyleModel.get('width'), 1.0);\n      lineColors = echarts.util.isArray(lineColors) ? lineColors : [lineColors];\n      var ticksCoords = axis.getTicksCoords({\n        tickModel: splitLineModel\n      });\n      var count = 0;\n\n      for (var i = 0; i < ticksCoords.length; i++) {\n        var tickCoord = ticksCoords[i].coord;\n        var lineColor = graphicGL.parseColor(lineColors[count % lineColors.length]);\n        lineColor[3] *= opacity;\n        var p0 = [0, 0, 0];\n        var p1 = [0, 0, 0]; // 0 - x, 1 - y\n\n        p0[idx] = p1[idx] = tickCoord;\n        p0[1 - idx] = otherExtent[0];\n        p1[1 - idx] = otherExtent[1];\n        geometry.addLine(p0, p1, lineColor, lineWidth * dpr);\n        count++;\n      }\n    }\n  });\n};\n\nGrid3DFace.prototype._udpateSplitAreas = function (geometry, axes, grid3DModel, api) {\n  axes.forEach(function (axis, idx) {\n    var axisModel = axis.model;\n    var otherExtent = axes[1 - idx].getExtent();\n\n    if (axis.scale.isBlank()) {\n      return;\n    }\n\n    var splitAreaModel = axisModel.getModel('splitArea', grid3DModel.getModel('splitArea')); // Render splitAreas\n\n    if (splitAreaModel.get('show')) {\n      var areaStyleModel = splitAreaModel.getModel('areaStyle');\n      var colors = areaStyleModel.get('color');\n      var opacity = firstNotNull(areaStyleModel.get('opacity'), 1.0);\n      colors = echarts.util.isArray(colors) ? colors : [colors];\n      var ticksCoords = axis.getTicksCoords({\n        tickModel: splitAreaModel,\n        clamp: true\n      });\n      var count = 0;\n      var prevP0 = [0, 0, 0];\n      var prevP1 = [0, 0, 0]; // 0 - x, 1 - y\n\n      for (var i = 0; i < ticksCoords.length; i++) {\n        var tickCoord = ticksCoords[i].coord;\n        var p0 = [0, 0, 0];\n        var p1 = [0, 0, 0]; // 0 - x, 1 - y\n\n        p0[idx] = p1[idx] = tickCoord;\n        p0[1 - idx] = otherExtent[0];\n        p1[1 - idx] = otherExtent[1];\n\n        if (i === 0) {\n          prevP0 = p0;\n          prevP1 = p1;\n          continue;\n        }\n\n        var color = graphicGL.parseColor(colors[count % colors.length]);\n        color[3] *= opacity;\n        geometry.addQuad([prevP0, p0, p1, prevP1], color);\n        prevP0 = p0;\n        prevP1 = p1;\n        count++;\n      }\n    }\n  });\n};\n\nexport default Grid3DFace;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}