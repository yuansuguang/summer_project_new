{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport * as echarts from 'echarts/lib/echarts';\nimport { createTextStyle } from 'echarts/lib/label/labelStyle';\nimport graphicGL from '../../util/graphicGL';\nimport Lines3DGeometry from '../../util/geometry/Lines3D';\nimport retrieve from '../../util/retrieve';\nimport LabelsMesh from '../../util/mesh/LabelsMesh';\nvar firstNotNull = retrieve.firstNotNull;\nvar dimIndicesMap = {\n  // Left to right\n  x: 0,\n  // Far to near\n  y: 2,\n  // Bottom to up\n  z: 1\n};\nfunction Grid3DAxis(dim, linesMaterial) {\n  var linesMesh = new graphicGL.Mesh({\n    geometry: new Lines3DGeometry({\n      useNativeLine: false\n    }),\n    material: linesMaterial,\n    castShadow: false,\n    ignorePicking: true,\n    renderOrder: 2\n  });\n  var axisLabelsMesh = new LabelsMesh();\n  axisLabelsMesh.material.depthMask = false;\n  var rootNode = new graphicGL.Node();\n  rootNode.add(linesMesh);\n  rootNode.add(axisLabelsMesh);\n  this.rootNode = rootNode;\n  this.dim = dim;\n  this.linesMesh = linesMesh;\n  this.labelsMesh = axisLabelsMesh;\n  this.axisLineCoords = null;\n  this.labelElements = [];\n}\nvar otherDim = {\n  x: 'y',\n  y: 'x',\n  z: 'y'\n};\nGrid3DAxis.prototype.update = function (grid3DModel, axisLabelSurface, api) {\n  var cartesian = grid3DModel.coordinateSystem;\n  var axis = cartesian.getAxis(this.dim);\n  var linesGeo = this.linesMesh.geometry;\n  var labelsGeo = this.labelsMesh.geometry;\n  linesGeo.convertToDynamicArray(true);\n  labelsGeo.convertToDynamicArray(true);\n  var axisModel = axis.model;\n  var extent = axis.getExtent();\n  var dpr = api.getDevicePixelRatio();\n  var axisLineModel = axisModel.getModel('axisLine', grid3DModel.getModel('axisLine'));\n  var axisTickModel = axisModel.getModel('axisTick', grid3DModel.getModel('axisTick'));\n  var axisLabelModel = axisModel.getModel('axisLabel', grid3DModel.getModel('axisLabel'));\n  var axisLineColor = axisLineModel.get('lineStyle.color'); // Render axisLine\n\n  if (axisLineModel.get('show')) {\n    var axisLineStyleModel = axisLineModel.getModel('lineStyle');\n    var p0 = [0, 0, 0];\n    var p1 = [0, 0, 0];\n    var idx = dimIndicesMap[axis.dim];\n    p0[idx] = extent[0];\n    p1[idx] = extent[1]; // Save some useful info.\n\n    this.axisLineCoords = [p0, p1];\n    var color = graphicGL.parseColor(axisLineColor);\n    var lineWidth = firstNotNull(axisLineStyleModel.get('width'), 1.0);\n    var opacity = firstNotNull(axisLineStyleModel.get('opacity'), 1.0);\n    color[3] *= opacity;\n    linesGeo.addLine(p0, p1, color, lineWidth * dpr);\n  } // Render axis ticksCoords\n\n  if (axisTickModel.get('show')) {\n    var lineStyleModel = axisTickModel.getModel('lineStyle');\n    var lineColor = graphicGL.parseColor(firstNotNull(lineStyleModel.get('color'), axisLineColor));\n    var lineWidth = firstNotNull(lineStyleModel.get('width'), 1.0);\n    lineColor[3] *= firstNotNull(lineStyleModel.get('opacity'), 1.0);\n    var ticksCoords = axis.getTicksCoords();\n    var tickLength = axisTickModel.get('length');\n    for (var i = 0; i < ticksCoords.length; i++) {\n      var tickCoord = ticksCoords[i].coord;\n      var p0 = [0, 0, 0];\n      var p1 = [0, 0, 0];\n      var idx = dimIndicesMap[axis.dim];\n      var otherIdx = dimIndicesMap[otherDim[axis.dim]]; // 0 : x, 1 : y\n\n      p0[idx] = p1[idx] = tickCoord;\n      p1[otherIdx] = tickLength;\n      linesGeo.addLine(p0, p1, lineColor, lineWidth * dpr);\n    }\n  }\n  this.labelElements = [];\n  var dpr = api.getDevicePixelRatio();\n  if (axisLabelModel.get('show')) {\n    var ticksCoords = axis.getTicksCoords();\n    var categoryData = axisModel.get('data');\n    var labelMargin = axisLabelModel.get('margin');\n    var labels = axis.getViewLabels();\n    for (var i = 0; i < labels.length; i++) {\n      var tickValue = labels[i].tickValue;\n      var formattedLabel = labels[i].formattedLabel;\n      var rawLabel = labels[i].rawLabel;\n      var tickCoord = axis.dataToCoord(tickValue);\n      var p = [0, 0, 0];\n      var idx = dimIndicesMap[axis.dim];\n      var otherIdx = dimIndicesMap[otherDim[axis.dim]]; // 0 : x, 1 : y\n\n      p[idx] = p[idx] = tickCoord;\n      p[otherIdx] = labelMargin;\n      var itemTextStyleModel = axisLabelModel;\n      if (categoryData && categoryData[tickValue] && categoryData[tickValue].textStyle) {\n        itemTextStyleModel = new echarts.Model(categoryData[tickValue].textStyle, axisLabelModel, axisModel.ecModel);\n      }\n      var textColor = firstNotNull(itemTextStyleModel.get('color'), axisLineColor);\n      var textEl = new echarts.graphic.Text({\n        style: createTextStyle(itemTextStyleModel, {\n          text: formattedLabel,\n          fill: typeof textColor === 'function' ? textColor(\n          // (1) In category axis with data zoom, tick is not the original\n          // index of axis.data. So tick should not be exposed to user\n          // in category axis.\n          // (2) Compatible with previous version, which always returns labelStr.\n          // But in interval scale labelStr is like '223,445', which maked\n          // user repalce ','. So we modify it to return original val but remain\n          // it as 'string' to avoid error in replacing.\n          axis.type === 'category' ? rawLabel : axis.type === 'value' ? tickValue + '' : tickValue, i) : textColor,\n          verticalAlign: 'top',\n          align: 'left'\n        })\n      });\n      var coords = axisLabelSurface.add(textEl);\n      var rect = textEl.getBoundingRect();\n      labelsGeo.addSprite(p, [rect.width * dpr, rect.height * dpr], coords);\n      this.labelElements.push(textEl);\n    }\n  }\n  if (axisModel.get('name')) {\n    var nameTextStyleModel = axisModel.getModel('nameTextStyle');\n    var p = [0, 0, 0];\n    var idx = dimIndicesMap[axis.dim];\n    var otherIdx = dimIndicesMap[otherDim[axis.dim]];\n    var labelColor = firstNotNull(nameTextStyleModel.get('color'), axisLineColor);\n    var strokeColor = nameTextStyleModel.get('borderColor');\n    var lineWidth = nameTextStyleModel.get('borderWidth'); // TODO start and end\n\n    p[idx] = p[idx] = (extent[0] + extent[1]) / 2;\n    p[otherIdx] = axisModel.get('nameGap');\n    var textEl = new echarts.graphic.Text({\n      style: createTextStyle(nameTextStyleModel, {\n        text: axisModel.get('name'),\n        fill: labelColor,\n        stroke: strokeColor,\n        lineWidth: lineWidth\n      })\n    });\n    var coords = axisLabelSurface.add(textEl);\n    var rect = textEl.getBoundingRect();\n    labelsGeo.addSprite(p, [rect.width * dpr, rect.height * dpr], coords);\n    textEl.__idx = this.labelElements.length;\n    this.nameLabelElement = textEl;\n  }\n  this.labelsMesh.material.set('textureAtlas', axisLabelSurface.getTexture());\n  this.labelsMesh.material.set('uvScale', axisLabelSurface.getCoordsScale());\n  linesGeo.convertToTypedArray();\n  labelsGeo.convertToTypedArray();\n};\nGrid3DAxis.prototype.setSpriteAlign = function (textAlign, textVerticalAlign, api) {\n  var dpr = api.getDevicePixelRatio();\n  var labelGeo = this.labelsMesh.geometry;\n  for (var i = 0; i < this.labelElements.length; i++) {\n    var labelEl = this.labelElements[i];\n    var rect = labelEl.getBoundingRect();\n    labelGeo.setSpriteAlign(i, [rect.width * dpr, rect.height * dpr], textAlign, textVerticalAlign);\n  } // name label\n\n  var nameLabelEl = this.nameLabelElement;\n  if (nameLabelEl) {\n    var rect = nameLabelEl.getBoundingRect();\n    labelGeo.setSpriteAlign(nameLabelEl.__idx, [rect.width * dpr, rect.height * dpr], textAlign, textVerticalAlign);\n    labelGeo.dirty();\n  }\n  this.textAlign = textAlign;\n  this.textVerticalAlign = textVerticalAlign;\n};\nexport default Grid3DAxis;","map":{"version":3,"names":["echarts","createTextStyle","graphicGL","Lines3DGeometry","retrieve","LabelsMesh","firstNotNull","dimIndicesMap","x","y","z","Grid3DAxis","dim","linesMaterial","linesMesh","Mesh","geometry","useNativeLine","material","castShadow","ignorePicking","renderOrder","axisLabelsMesh","depthMask","rootNode","Node","add","labelsMesh","axisLineCoords","labelElements","otherDim","prototype","update","grid3DModel","axisLabelSurface","api","cartesian","coordinateSystem","axis","getAxis","linesGeo","labelsGeo","convertToDynamicArray","axisModel","model","extent","getExtent","dpr","getDevicePixelRatio","axisLineModel","getModel","axisTickModel","axisLabelModel","axisLineColor","get","axisLineStyleModel","p0","p1","idx","color","parseColor","lineWidth","opacity","addLine","lineStyleModel","lineColor","ticksCoords","getTicksCoords","tickLength","i","length","tickCoord","coord","otherIdx","categoryData","labelMargin","labels","getViewLabels","tickValue","formattedLabel","rawLabel","dataToCoord","p","itemTextStyleModel","textStyle","Model","ecModel","textColor","textEl","graphic","Text","style","text","fill","type","verticalAlign","align","coords","rect","getBoundingRect","addSprite","width","height","push","nameTextStyleModel","labelColor","strokeColor","stroke","__idx","nameLabelElement","set","getTexture","getCoordsScale","convertToTypedArray","setSpriteAlign","textAlign","textVerticalAlign","labelGeo","labelEl","nameLabelEl","dirty"],"sources":["E:/QuestionairePlanet_Fronted/mytest/node_modules/echarts-gl/lib/component/grid3D/Grid3DAxis.js"],"sourcesContent":["import * as echarts from 'echarts/lib/echarts';\nimport { createTextStyle } from 'echarts/lib/label/labelStyle';\nimport graphicGL from '../../util/graphicGL';\nimport Lines3DGeometry from '../../util/geometry/Lines3D';\nimport retrieve from '../../util/retrieve';\nimport LabelsMesh from '../../util/mesh/LabelsMesh';\nvar firstNotNull = retrieve.firstNotNull;\nvar dimIndicesMap = {\n  // Left to right\n  x: 0,\n  // Far to near\n  y: 2,\n  // Bottom to up\n  z: 1\n};\n\nfunction Grid3DAxis(dim, linesMaterial) {\n  var linesMesh = new graphicGL.Mesh({\n    geometry: new Lines3DGeometry({\n      useNativeLine: false\n    }),\n    material: linesMaterial,\n    castShadow: false,\n    ignorePicking: true,\n    renderOrder: 2\n  });\n  var axisLabelsMesh = new LabelsMesh();\n  axisLabelsMesh.material.depthMask = false;\n  var rootNode = new graphicGL.Node();\n  rootNode.add(linesMesh);\n  rootNode.add(axisLabelsMesh);\n  this.rootNode = rootNode;\n  this.dim = dim;\n  this.linesMesh = linesMesh;\n  this.labelsMesh = axisLabelsMesh;\n  this.axisLineCoords = null;\n  this.labelElements = [];\n}\n\nvar otherDim = {\n  x: 'y',\n  y: 'x',\n  z: 'y'\n};\n\nGrid3DAxis.prototype.update = function (grid3DModel, axisLabelSurface, api) {\n  var cartesian = grid3DModel.coordinateSystem;\n  var axis = cartesian.getAxis(this.dim);\n  var linesGeo = this.linesMesh.geometry;\n  var labelsGeo = this.labelsMesh.geometry;\n  linesGeo.convertToDynamicArray(true);\n  labelsGeo.convertToDynamicArray(true);\n  var axisModel = axis.model;\n  var extent = axis.getExtent();\n  var dpr = api.getDevicePixelRatio();\n  var axisLineModel = axisModel.getModel('axisLine', grid3DModel.getModel('axisLine'));\n  var axisTickModel = axisModel.getModel('axisTick', grid3DModel.getModel('axisTick'));\n  var axisLabelModel = axisModel.getModel('axisLabel', grid3DModel.getModel('axisLabel'));\n  var axisLineColor = axisLineModel.get('lineStyle.color'); // Render axisLine\n\n  if (axisLineModel.get('show')) {\n    var axisLineStyleModel = axisLineModel.getModel('lineStyle');\n    var p0 = [0, 0, 0];\n    var p1 = [0, 0, 0];\n    var idx = dimIndicesMap[axis.dim];\n    p0[idx] = extent[0];\n    p1[idx] = extent[1]; // Save some useful info.\n\n    this.axisLineCoords = [p0, p1];\n    var color = graphicGL.parseColor(axisLineColor);\n    var lineWidth = firstNotNull(axisLineStyleModel.get('width'), 1.0);\n    var opacity = firstNotNull(axisLineStyleModel.get('opacity'), 1.0);\n    color[3] *= opacity;\n    linesGeo.addLine(p0, p1, color, lineWidth * dpr);\n  } // Render axis ticksCoords\n\n\n  if (axisTickModel.get('show')) {\n    var lineStyleModel = axisTickModel.getModel('lineStyle');\n    var lineColor = graphicGL.parseColor(firstNotNull(lineStyleModel.get('color'), axisLineColor));\n    var lineWidth = firstNotNull(lineStyleModel.get('width'), 1.0);\n    lineColor[3] *= firstNotNull(lineStyleModel.get('opacity'), 1.0);\n    var ticksCoords = axis.getTicksCoords();\n    var tickLength = axisTickModel.get('length');\n\n    for (var i = 0; i < ticksCoords.length; i++) {\n      var tickCoord = ticksCoords[i].coord;\n      var p0 = [0, 0, 0];\n      var p1 = [0, 0, 0];\n      var idx = dimIndicesMap[axis.dim];\n      var otherIdx = dimIndicesMap[otherDim[axis.dim]]; // 0 : x, 1 : y\n\n      p0[idx] = p1[idx] = tickCoord;\n      p1[otherIdx] = tickLength;\n      linesGeo.addLine(p0, p1, lineColor, lineWidth * dpr);\n    }\n  }\n\n  this.labelElements = [];\n  var dpr = api.getDevicePixelRatio();\n\n  if (axisLabelModel.get('show')) {\n    var ticksCoords = axis.getTicksCoords();\n    var categoryData = axisModel.get('data');\n    var labelMargin = axisLabelModel.get('margin');\n    var labels = axis.getViewLabels();\n\n    for (var i = 0; i < labels.length; i++) {\n      var tickValue = labels[i].tickValue;\n      var formattedLabel = labels[i].formattedLabel;\n      var rawLabel = labels[i].rawLabel;\n      var tickCoord = axis.dataToCoord(tickValue);\n      var p = [0, 0, 0];\n      var idx = dimIndicesMap[axis.dim];\n      var otherIdx = dimIndicesMap[otherDim[axis.dim]]; // 0 : x, 1 : y\n\n      p[idx] = p[idx] = tickCoord;\n      p[otherIdx] = labelMargin;\n      var itemTextStyleModel = axisLabelModel;\n\n      if (categoryData && categoryData[tickValue] && categoryData[tickValue].textStyle) {\n        itemTextStyleModel = new echarts.Model(categoryData[tickValue].textStyle, axisLabelModel, axisModel.ecModel);\n      }\n\n      var textColor = firstNotNull(itemTextStyleModel.get('color'), axisLineColor);\n      var textEl = new echarts.graphic.Text({\n        style: createTextStyle(itemTextStyleModel, {\n          text: formattedLabel,\n          fill: typeof textColor === 'function' ? textColor( // (1) In category axis with data zoom, tick is not the original\n          // index of axis.data. So tick should not be exposed to user\n          // in category axis.\n          // (2) Compatible with previous version, which always returns labelStr.\n          // But in interval scale labelStr is like '223,445', which maked\n          // user repalce ','. So we modify it to return original val but remain\n          // it as 'string' to avoid error in replacing.\n          axis.type === 'category' ? rawLabel : axis.type === 'value' ? tickValue + '' : tickValue, i) : textColor,\n          verticalAlign: 'top',\n          align: 'left'\n        })\n      });\n      var coords = axisLabelSurface.add(textEl);\n      var rect = textEl.getBoundingRect();\n      labelsGeo.addSprite(p, [rect.width * dpr, rect.height * dpr], coords);\n      this.labelElements.push(textEl);\n    }\n  }\n\n  if (axisModel.get('name')) {\n    var nameTextStyleModel = axisModel.getModel('nameTextStyle');\n    var p = [0, 0, 0];\n    var idx = dimIndicesMap[axis.dim];\n    var otherIdx = dimIndicesMap[otherDim[axis.dim]];\n    var labelColor = firstNotNull(nameTextStyleModel.get('color'), axisLineColor);\n    var strokeColor = nameTextStyleModel.get('borderColor');\n    var lineWidth = nameTextStyleModel.get('borderWidth'); // TODO start and end\n\n    p[idx] = p[idx] = (extent[0] + extent[1]) / 2;\n    p[otherIdx] = axisModel.get('nameGap');\n    var textEl = new echarts.graphic.Text({\n      style: createTextStyle(nameTextStyleModel, {\n        text: axisModel.get('name'),\n        fill: labelColor,\n        stroke: strokeColor,\n        lineWidth: lineWidth\n      })\n    });\n    var coords = axisLabelSurface.add(textEl);\n    var rect = textEl.getBoundingRect();\n    labelsGeo.addSprite(p, [rect.width * dpr, rect.height * dpr], coords);\n    textEl.__idx = this.labelElements.length;\n    this.nameLabelElement = textEl;\n  }\n\n  this.labelsMesh.material.set('textureAtlas', axisLabelSurface.getTexture());\n  this.labelsMesh.material.set('uvScale', axisLabelSurface.getCoordsScale());\n  linesGeo.convertToTypedArray();\n  labelsGeo.convertToTypedArray();\n};\n\nGrid3DAxis.prototype.setSpriteAlign = function (textAlign, textVerticalAlign, api) {\n  var dpr = api.getDevicePixelRatio();\n  var labelGeo = this.labelsMesh.geometry;\n\n  for (var i = 0; i < this.labelElements.length; i++) {\n    var labelEl = this.labelElements[i];\n    var rect = labelEl.getBoundingRect();\n    labelGeo.setSpriteAlign(i, [rect.width * dpr, rect.height * dpr], textAlign, textVerticalAlign);\n  } // name label\n\n\n  var nameLabelEl = this.nameLabelElement;\n\n  if (nameLabelEl) {\n    var rect = nameLabelEl.getBoundingRect();\n    labelGeo.setSpriteAlign(nameLabelEl.__idx, [rect.width * dpr, rect.height * dpr], textAlign, textVerticalAlign);\n    labelGeo.dirty();\n  }\n\n  this.textAlign = textAlign;\n  this.textVerticalAlign = textVerticalAlign;\n};\n\nexport default Grid3DAxis;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}