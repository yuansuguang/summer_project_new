{"ast":null,"code":"export default {\n  data() {\n    return {\n      loginForm: {\n        user: '',\n        pass: ''\n      }\n    };\n  },\n  methods: {\n    // login() {\n    //   // 在这里执行登录操作，可以发送请求到后端验证用户身份，可以留到后端实现的时候再弄\n    //   // 此处为示例，仅在控制台输出用户名和密码\n    //   const self = this;\n    //   const formData = new FormData();\n    //   formData.append(\"username\", self.username);\n    //   formData.append(\"password\", self.password);\n\n    //   self.$axios({\n    //     method: 'post',\n    //     url: '/user/api/login/',\n    //     data: formData,\n    //   }).then(res => {\n    //     switch (res.data.status_code) {\n    //       case 1:\n    //         this.$store.dispatch('saveUserInfo', {user: {\n    //             'username': this.form.username,\n    //             'confirmed': true,\n    //           }});\n    //         this.$message.success('登录成功！');\n    //         break;\n    //       case 2:\n    //         this.$message.success('already logged in');\n    //         break;\n    //       case 3:\n    //         this.$message.success('username not found');\n    //         break;\n    //       case 4:\n    //         this.$message.success('unverified account');\n    //         break;\n    //       case 5:\n    //         this.$message.success('wrong password');\n    //         break;\n    //       case -1:\n    //         this.$message.success('sys error');\n    //         break;\n    //     }\n    //   })\n    //   .catch(err => {\n    //       console.log(err);\n    //     })\n    //   console.log('用户名：', this.username);\n    //   console.log('密码：', this.password);\n    //   // 登录成功后可以进行页面跳转或其他操作\n    // }\n    login() {\n      // 此处修正为访问loginForm的属性\n      const formData = new FormData();\n      formData.append(\"username\", this.loginForm.user);\n      formData.append(\"password\", this.loginForm.pass);\n      this.$axios({\n        method: 'post',\n        url: '/user/api/login/',\n        data: formData\n      }).then(res => {\n        switch (res.data.status_code) {\n          case 1:\n            this.$store.dispatch('saveUserInfo', {\n              user: {\n                'username': this.loginForm.username,\n                'confirmed': true\n              }\n            });\n            this.$message.success('登录成功！');\n            break;\n          case 2:\n            break;\n          case 3:\n            break;\n          case 4:\n            break;\n          case 5:\n            break;\n          case -1:\n            break;\n        }\n      }).catch(err => {\n        console.log(err);\n      });\n      console.log('用户名：', this.loginForm.user); // 修改为loginForm.user\n      console.log('密码：', this.loginForm.pass); // 修改为loginForm.pass\n      // 登录成功后可以进行页面跳转或其他操作\n    }\n  }\n};","map":{"version":3,"names":["data","loginForm","user","pass","methods","login","formData","FormData","append","$axios","method","url","then","res","status_code","$store","dispatch","username","$message","success","catch","err","console","log"],"sources":["E:\\mytest\\src\\views\\accountpane\\loginPane.vue"],"sourcesContent":["<template>\r\n  <div class=\"login\"\r\n    style=\"display: flex; justify-content: center; align-items: center; height: 98vh; background-color: azure;\">\r\n    <div class=\"mainLogin\" style=\"width: 400px; border-radius: 10px; background-color: white\" :style=\"{\r\n      boxShadow: `var(--el-box-shadow-dark)`\r\n    }\">\r\n      <el-container>\r\n        <el-header>\r\n          <h2>登录</h2>\r\n        </el-header>\r\n        <el-main style=\"display: flex; justify-content: center;\">\r\n          <el-form ref=\"loginForm\" style=\"max-width: 400px\" :model=\"loginForm\" status-icon :rules=\"loginRules\"\r\n            size=\"default\" label-width=\"auto\" class=\"loginForm\">\r\n            <el-form-item label=\"用户名\" prop=\"user\">\r\n              <el-input v-model=\"loginForm.user\" autocomplete=\"off\" />\r\n            </el-form-item>\r\n            <el-form-item label=\"密码\" prop=\"pass\">\r\n              <el-input v-model=\"loginForm.pass\" type=\"password\" autocomplete=\"off\" />\r\n            </el-form-item>\r\n            <el-form-item>\r\n              <el-button type=\"primary\" @click=\"login()\">\r\n                登录\r\n              </el-button>\r\n            </el-form-item>\r\n          </el-form>\r\n        </el-main>\r\n      </el-container>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n  <script>\r\n  export default {\r\n    data() {\r\n    return {\r\n      loginForm: {\r\n        user: '',\r\n        pass: '',\r\n      },\r\n    };\r\n  },\r\n    methods: {\r\n      // login() {\r\n      //   // 在这里执行登录操作，可以发送请求到后端验证用户身份，可以留到后端实现的时候再弄\r\n      //   // 此处为示例，仅在控制台输出用户名和密码\r\n      //   const self = this;\r\n      //   const formData = new FormData();\r\n      //   formData.append(\"username\", self.username);\r\n      //   formData.append(\"password\", self.password);\r\n\r\n      //   self.$axios({\r\n      //     method: 'post',\r\n      //     url: '/user/api/login/',\r\n      //     data: formData,\r\n      //   }).then(res => {\r\n      //     switch (res.data.status_code) {\r\n      //       case 1:\r\n      //         this.$store.dispatch('saveUserInfo', {user: {\r\n      //             'username': this.form.username,\r\n      //             'confirmed': true,\r\n      //           }});\r\n      //         this.$message.success('登录成功！');\r\n      //         break;\r\n      //       case 2:\r\n      //         this.$message.success('already logged in');\r\n      //         break;\r\n      //       case 3:\r\n      //         this.$message.success('username not found');\r\n      //         break;\r\n      //       case 4:\r\n      //         this.$message.success('unverified account');\r\n      //         break;\r\n      //       case 5:\r\n      //         this.$message.success('wrong password');\r\n      //         break;\r\n      //       case -1:\r\n      //         this.$message.success('sys error');\r\n      //         break;\r\n      //     }\r\n      //   })\r\n      //   .catch(err => {\r\n      //       console.log(err);\r\n      //     })\r\n      //   console.log('用户名：', this.username);\r\n      //   console.log('密码：', this.password);\r\n      //   // 登录成功后可以进行页面跳转或其他操作\r\n      // }\r\n      login() {\r\n        // 此处修正为访问loginForm的属性\r\n        const formData = new FormData();\r\n        formData.append(\"username\", this.loginForm.user);\r\n        formData.append(\"password\", this.loginForm.pass);\r\n\r\n        this.$axios({\r\n          method: 'post',\r\n          url: '/user/api/login/',\r\n          data: formData,\r\n        }).then(res => {\r\n          switch (res.data.status_code) {\r\n            case 1:\r\n              this.$store.dispatch('saveUserInfo', {user: {\r\n                        'username': this.loginForm.username,\r\n                        'confirmed': true,\r\n                      }});\r\n              this.$message.success('登录成功！');\r\n              break;\r\n            case 2:\r\n              break;\r\n            case 3:\r\n              break;\r\n            case 4:\r\n              break;\r\n            case 5:\r\n              break;\r\n            case -1:\r\n              break;\r\n                    }\r\n        }).catch(err => {\r\n          console.log(err);\r\n        });\r\n        console.log('用户名：', this.loginForm.user);  // 修改为loginForm.user\r\n        console.log('密码：', this.loginForm.pass);   // 修改为loginForm.pass\r\n        // 登录成功后可以进行页面跳转或其他操作\r\n      }\r\n    }\r\n  };\r\n  </script>\r\n  \r\n  <style scoped>\r\n  .login-container {\r\n    max-width: 400px;\r\n    margin: 0 auto;\r\n    padding: 20px;\r\n    border: 1px solid #ccc;\r\n    border-radius: 5px;\r\n  }\r\n  \r\n  .form-group {\r\n    margin-bottom: 15px;\r\n  }\r\n  \r\n  label {\r\n    display: block;\r\n  }\r\n  \r\n  input[type=\"text\"],\r\n  input[type=\"password\"] {\r\n    width: 100%;\r\n    padding: 10px;\r\n    border: 1px solid #ccc;\r\n    border-radius: 3px;\r\n  }\r\n  \r\n  button {\r\n    width: 100%;\r\n    padding: 10px;\r\n    background-color: #007bff;\r\n    color: #fff;\r\n    border: none;\r\n    border-radius: 3px;\r\n    cursor: pointer;\r\n  }\r\n  \r\n  button:hover {\r\n    background-color: #0056b3;\r\n  }\r\n  </style>\r\n  "],"mappings":"AAgCE,eAAe;EACbA,IAAIA,CAAA,EAAG;IACP,OAAO;MACLC,SAAS,EAAE;QACTC,IAAI,EAAE,EAAE;QACRC,IAAI,EAAE;MACR;IACF,CAAC;EACH,CAAC;EACCC,OAAO,EAAE;IACP;IACA;IACA;IACA;IACA;IACA;IACA;;IAEA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACAC,KAAKA,CAAA,EAAG;MACN;MACA,MAAMC,QAAO,GAAI,IAAIC,QAAQ,CAAC,CAAC;MAC/BD,QAAQ,CAACE,MAAM,CAAC,UAAU,EAAE,IAAI,CAACP,SAAS,CAACC,IAAI,CAAC;MAChDI,QAAQ,CAACE,MAAM,CAAC,UAAU,EAAE,IAAI,CAACP,SAAS,CAACE,IAAI,CAAC;MAEhD,IAAI,CAACM,MAAM,CAAC;QACVC,MAAM,EAAE,MAAM;QACdC,GAAG,EAAE,kBAAkB;QACvBX,IAAI,EAAEM;MACR,CAAC,CAAC,CAACM,IAAI,CAACC,GAAE,IAAK;QACb,QAAQA,GAAG,CAACb,IAAI,CAACc,WAAW;UAC1B,KAAK,CAAC;YACJ,IAAI,CAACC,MAAM,CAACC,QAAQ,CAAC,cAAc,EAAE;cAACd,IAAI,EAAE;gBAClC,UAAU,EAAE,IAAI,CAACD,SAAS,CAACgB,QAAQ;gBACnC,WAAW,EAAE;cACf;YAAC,CAAC,CAAC;YACX,IAAI,CAACC,QAAQ,CAACC,OAAO,CAAC,OAAO,CAAC;YAC9B;UACF,KAAK,CAAC;YACJ;UACF,KAAK,CAAC;YACJ;UACF,KAAK,CAAC;YACJ;UACF,KAAK,CAAC;YACJ;UACF,KAAK,CAAC,CAAC;YACL;QACM;MACZ,CAAC,CAAC,CAACC,KAAK,CAACC,GAAE,IAAK;QACdC,OAAO,CAACC,GAAG,CAACF,GAAG,CAAC;MAClB,CAAC,CAAC;MACFC,OAAO,CAACC,GAAG,CAAC,MAAM,EAAE,IAAI,CAACtB,SAAS,CAACC,IAAI,CAAC,EAAG;MAC3CoB,OAAO,CAACC,GAAG,CAAC,KAAK,EAAE,IAAI,CAACtB,SAAS,CAACE,IAAI,CAAC,EAAI;MAC3C;IACF;EACF;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}