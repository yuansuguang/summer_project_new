{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.array-buffer.detached.js\";\nimport \"core-js/modules/es.array-buffer.transfer.js\";\nimport \"core-js/modules/es.array-buffer.transfer-to-fixed-length.js\";\nimport \"core-js/modules/es.typed-array.to-reversed.js\";\nimport \"core-js/modules/es.typed-array.to-sorted.js\";\nimport \"core-js/modules/es.typed-array.with.js\";\nimport * as echarts from 'echarts/lib/echarts';\nimport graphicGL from '../../util/graphicGL';\nimport retrieve from '../../util/retrieve';\nimport Lines3DGeometry from '../../util/geometry/Lines3D';\nimport Matrix4 from 'claygl/src/math/Matrix4';\nimport Vector3 from 'claygl/src/math/Vector3';\nimport * as lineContain from 'zrender/lib/contain/line';\nimport glmatrix from 'claygl/src/dep/glmatrix';\nimport { getItemVisualColor, getItemVisualOpacity } from '../../util/visual';\nimport lines3DGLSL from '../../util/shader/lines3D.glsl.js';\nvar vec3 = glmatrix.vec3;\ngraphicGL.Shader.import(lines3DGLSL);\nexport default echarts.ChartView.extend({\n  type: 'line3D',\n  __ecgl__: true,\n  init: function (ecModel, api) {\n    this.groupGL = new graphicGL.Node();\n    this._api = api;\n  },\n  render: function (seriesModel, ecModel, api) {\n    var tmp = this._prevLine3DMesh;\n    this._prevLine3DMesh = this._line3DMesh;\n    this._line3DMesh = tmp;\n    if (!this._line3DMesh) {\n      this._line3DMesh = new graphicGL.Mesh({\n        geometry: new Lines3DGeometry({\n          useNativeLine: false,\n          sortTriangles: true\n        }),\n        material: new graphicGL.Material({\n          shader: graphicGL.createShader('ecgl.meshLines3D')\n        }),\n        // Render after axes\n        renderOrder: 10\n      });\n      this._line3DMesh.geometry.pick = this._pick.bind(this);\n    }\n    this.groupGL.remove(this._prevLine3DMesh);\n    this.groupGL.add(this._line3DMesh);\n    var coordSys = seriesModel.coordinateSystem;\n    if (coordSys && coordSys.viewGL) {\n      coordSys.viewGL.add(this.groupGL); // TODO\n\n      var methodName = coordSys.viewGL.isLinearSpace() ? 'define' : 'undefine';\n      this._line3DMesh.material[methodName]('fragment', 'SRGB_DECODE');\n    }\n    this._doRender(seriesModel, api);\n    this._data = seriesModel.getData();\n    this._camera = coordSys.viewGL.camera;\n    this.updateCamera();\n    this._updateAnimation(seriesModel);\n  },\n  updateCamera: function () {\n    this._updateNDCPosition();\n  },\n  _doRender: function (seriesModel, api) {\n    var data = seriesModel.getData();\n    var lineMesh = this._line3DMesh;\n    lineMesh.geometry.resetOffset();\n    var points = data.getLayout('points');\n    var colorArr = [];\n    var vertexColors = new Float32Array(points.length / 3 * 4);\n    var colorOffset = 0;\n    var hasTransparent = false;\n    data.each(function (idx) {\n      var color = getItemVisualColor(data, idx);\n      var opacity = getItemVisualOpacity(data, idx);\n      if (opacity == null) {\n        opacity = 1;\n      }\n      graphicGL.parseColor(color, colorArr);\n      colorArr[3] *= opacity;\n      vertexColors[colorOffset++] = colorArr[0];\n      vertexColors[colorOffset++] = colorArr[1];\n      vertexColors[colorOffset++] = colorArr[2];\n      vertexColors[colorOffset++] = colorArr[3];\n      if (colorArr[3] < 0.99) {\n        hasTransparent = true;\n      }\n    });\n    lineMesh.geometry.setVertexCount(lineMesh.geometry.getPolylineVertexCount(points));\n    lineMesh.geometry.setTriangleCount(lineMesh.geometry.getPolylineTriangleCount(points));\n    lineMesh.geometry.addPolyline(points, vertexColors, retrieve.firstNotNull(seriesModel.get('lineStyle.width'), 1));\n    lineMesh.geometry.dirty();\n    lineMesh.geometry.updateBoundingBox();\n    var material = lineMesh.material;\n    material.transparent = hasTransparent;\n    material.depthMask = !hasTransparent;\n    var debugWireframeModel = seriesModel.getModel('debug.wireframe');\n    if (debugWireframeModel.get('show')) {\n      lineMesh.geometry.createAttribute('barycentric', 'float', 3);\n      lineMesh.geometry.generateBarycentric();\n      lineMesh.material.set('both', 'WIREFRAME_TRIANGLE');\n      lineMesh.material.set('wireframeLineColor', graphicGL.parseColor(debugWireframeModel.get('lineStyle.color') || 'rgba(0,0,0,0.5)'));\n      lineMesh.material.set('wireframeLineWidth', retrieve.firstNotNull(debugWireframeModel.get('lineStyle.width'), 1));\n    } else {\n      lineMesh.material.set('both', 'WIREFRAME_TRIANGLE');\n    }\n    this._points = points;\n    this._initHandler(seriesModel, api);\n  },\n  _updateAnimation: function (seriesModel) {\n    graphicGL.updateVertexAnimation([['prevPosition', 'position'], ['prevPositionPrev', 'positionPrev'], ['prevPositionNext', 'positionNext']], this._prevLine3DMesh, this._line3DMesh, seriesModel);\n  },\n  _initHandler: function (seriesModel, api) {\n    var data = seriesModel.getData();\n    var coordSys = seriesModel.coordinateSystem;\n    var lineMesh = this._line3DMesh;\n    var lastDataIndex = -1;\n    lineMesh.seriesIndex = seriesModel.seriesIndex;\n    lineMesh.off('mousemove');\n    lineMesh.off('mouseout');\n    lineMesh.on('mousemove', function (e) {\n      var value = coordSys.pointToData(e.point.array);\n      var dataIndex = data.indicesOfNearest('x', value[0])[0];\n      if (dataIndex !== lastDataIndex) {\n        // this._downplay(lastDataIndex);\n        // this._highlight(dataIndex);\n        api.dispatchAction({\n          type: 'grid3DShowAxisPointer',\n          value: [data.get('x', dataIndex), data.get('y', dataIndex), data.get('z', dataIndex)]\n        });\n        lineMesh.dataIndex = dataIndex;\n      }\n      lastDataIndex = dataIndex;\n    }, this);\n    lineMesh.on('mouseout', function (e) {\n      // this._downplay(lastDataIndex);\n      lastDataIndex = -1;\n      lineMesh.dataIndex = -1;\n      api.dispatchAction({\n        type: 'grid3DHideAxisPointer'\n      });\n    }, this);\n  },\n  // _highlight: function (dataIndex) {\n  //     var data = this._data;\n  //     if (!data) {\n  //         return;\n  //     }\n  // },\n  // _downplay: function (dataIndex) {\n  //     var data = this._data;\n  //     if (!data) {\n  //         return;\n  //     }\n  // },\n  _updateNDCPosition: function () {\n    var worldViewProjection = new Matrix4();\n    var camera = this._camera;\n    Matrix4.multiply(worldViewProjection, camera.projectionMatrix, camera.viewMatrix);\n    var positionNDC = this._positionNDC;\n    var points = this._points;\n    var nPoints = points.length / 3;\n    if (!positionNDC || positionNDC.length / 2 !== nPoints) {\n      positionNDC = this._positionNDC = new Float32Array(nPoints * 2);\n    }\n    var pos = [];\n    for (var i = 0; i < nPoints; i++) {\n      var i3 = i * 3;\n      var i2 = i * 2;\n      pos[0] = points[i3];\n      pos[1] = points[i3 + 1];\n      pos[2] = points[i3 + 2];\n      pos[3] = 1;\n      vec3.transformMat4(pos, pos, worldViewProjection.array);\n      positionNDC[i2] = pos[0] / pos[3];\n      positionNDC[i2 + 1] = pos[1] / pos[3];\n    }\n  },\n  _pick: function (x, y, renderer, camera, renderable, out) {\n    var positionNDC = this._positionNDC;\n    var seriesModel = this._data.hostModel;\n    var lineWidth = seriesModel.get('lineStyle.width');\n    var dataIndex = -1;\n    var width = renderer.viewport.width;\n    var height = renderer.viewport.height;\n    var halfWidth = width * 0.5;\n    var halfHeight = height * 0.5;\n    x = (x + 1) * halfWidth;\n    y = (y + 1) * halfHeight;\n    for (var i = 1; i < positionNDC.length / 2; i++) {\n      var x0 = (positionNDC[(i - 1) * 2] + 1) * halfWidth;\n      var y0 = (positionNDC[(i - 1) * 2 + 1] + 1) * halfHeight;\n      var x1 = (positionNDC[i * 2] + 1) * halfWidth;\n      var y1 = (positionNDC[i * 2 + 1] + 1) * halfHeight;\n      if (lineContain.containStroke(x0, y0, x1, y1, lineWidth, x, y)) {\n        var dist0 = (x0 - x) * (x0 - x) + (y0 - y) * (y0 - y);\n        var dist1 = (x1 - x) * (x1 - x) + (y1 - y) * (y1 - y); // Nearest point.\n\n        dataIndex = dist0 < dist1 ? i - 1 : i;\n      }\n    }\n    if (dataIndex >= 0) {\n      var i3 = dataIndex * 3;\n      var point = new Vector3(this._points[i3], this._points[i3 + 1], this._points[i3 + 2]);\n      out.push({\n        dataIndex: dataIndex,\n        point: point,\n        pointWorld: point.clone(),\n        target: this._line3DMesh,\n        distance: this._camera.getWorldPosition().dist(point)\n      });\n    }\n  },\n  remove: function () {\n    this.groupGL.removeAll();\n  },\n  dispose: function () {\n    this.groupGL.removeAll();\n  }\n});","map":{"version":3,"names":["echarts","graphicGL","retrieve","Lines3DGeometry","Matrix4","Vector3","lineContain","glmatrix","getItemVisualColor","getItemVisualOpacity","lines3DGLSL","vec3","Shader","import","ChartView","extend","type","__ecgl__","init","ecModel","api","groupGL","Node","_api","render","seriesModel","tmp","_prevLine3DMesh","_line3DMesh","Mesh","geometry","useNativeLine","sortTriangles","material","Material","shader","createShader","renderOrder","pick","_pick","bind","remove","add","coordSys","coordinateSystem","viewGL","methodName","isLinearSpace","_doRender","_data","getData","_camera","camera","updateCamera","_updateAnimation","_updateNDCPosition","data","lineMesh","resetOffset","points","getLayout","colorArr","vertexColors","Float32Array","length","colorOffset","hasTransparent","each","idx","color","opacity","parseColor","setVertexCount","getPolylineVertexCount","setTriangleCount","getPolylineTriangleCount","addPolyline","firstNotNull","get","dirty","updateBoundingBox","transparent","depthMask","debugWireframeModel","getModel","createAttribute","generateBarycentric","set","_points","_initHandler","updateVertexAnimation","lastDataIndex","seriesIndex","off","on","e","value","pointToData","point","array","dataIndex","indicesOfNearest","dispatchAction","worldViewProjection","multiply","projectionMatrix","viewMatrix","positionNDC","_positionNDC","nPoints","pos","i","i3","i2","transformMat4","x","y","renderer","renderable","out","hostModel","lineWidth","width","viewport","height","halfWidth","halfHeight","x0","y0","x1","y1","containStroke","dist0","dist1","push","pointWorld","clone","target","distance","getWorldPosition","dist","removeAll","dispose"],"sources":["E:/mytest/node_modules/echarts-gl/lib/chart/line3D/Line3DView.js"],"sourcesContent":["import * as echarts from 'echarts/lib/echarts';\nimport graphicGL from '../../util/graphicGL';\nimport retrieve from '../../util/retrieve';\nimport Lines3DGeometry from '../../util/geometry/Lines3D';\nimport Matrix4 from 'claygl/src/math/Matrix4';\nimport Vector3 from 'claygl/src/math/Vector3';\nimport * as lineContain from 'zrender/lib/contain/line';\nimport glmatrix from 'claygl/src/dep/glmatrix';\nimport { getItemVisualColor, getItemVisualOpacity } from '../../util/visual';\nimport lines3DGLSL from '../../util/shader/lines3D.glsl.js';\nvar vec3 = glmatrix.vec3;\ngraphicGL.Shader.import(lines3DGLSL);\nexport default echarts.ChartView.extend({\n  type: 'line3D',\n  __ecgl__: true,\n  init: function (ecModel, api) {\n    this.groupGL = new graphicGL.Node();\n    this._api = api;\n  },\n  render: function (seriesModel, ecModel, api) {\n    var tmp = this._prevLine3DMesh;\n    this._prevLine3DMesh = this._line3DMesh;\n    this._line3DMesh = tmp;\n\n    if (!this._line3DMesh) {\n      this._line3DMesh = new graphicGL.Mesh({\n        geometry: new Lines3DGeometry({\n          useNativeLine: false,\n          sortTriangles: true\n        }),\n        material: new graphicGL.Material({\n          shader: graphicGL.createShader('ecgl.meshLines3D')\n        }),\n        // Render after axes\n        renderOrder: 10\n      });\n      this._line3DMesh.geometry.pick = this._pick.bind(this);\n    }\n\n    this.groupGL.remove(this._prevLine3DMesh);\n    this.groupGL.add(this._line3DMesh);\n    var coordSys = seriesModel.coordinateSystem;\n\n    if (coordSys && coordSys.viewGL) {\n      coordSys.viewGL.add(this.groupGL); // TODO\n\n      var methodName = coordSys.viewGL.isLinearSpace() ? 'define' : 'undefine';\n\n      this._line3DMesh.material[methodName]('fragment', 'SRGB_DECODE');\n    }\n\n    this._doRender(seriesModel, api);\n\n    this._data = seriesModel.getData();\n    this._camera = coordSys.viewGL.camera;\n    this.updateCamera();\n\n    this._updateAnimation(seriesModel);\n  },\n  updateCamera: function () {\n    this._updateNDCPosition();\n  },\n  _doRender: function (seriesModel, api) {\n    var data = seriesModel.getData();\n    var lineMesh = this._line3DMesh;\n    lineMesh.geometry.resetOffset();\n    var points = data.getLayout('points');\n    var colorArr = [];\n    var vertexColors = new Float32Array(points.length / 3 * 4);\n    var colorOffset = 0;\n    var hasTransparent = false;\n    data.each(function (idx) {\n      var color = getItemVisualColor(data, idx);\n      var opacity = getItemVisualOpacity(data, idx);\n\n      if (opacity == null) {\n        opacity = 1;\n      }\n\n      graphicGL.parseColor(color, colorArr);\n      colorArr[3] *= opacity;\n      vertexColors[colorOffset++] = colorArr[0];\n      vertexColors[colorOffset++] = colorArr[1];\n      vertexColors[colorOffset++] = colorArr[2];\n      vertexColors[colorOffset++] = colorArr[3];\n\n      if (colorArr[3] < 0.99) {\n        hasTransparent = true;\n      }\n    });\n    lineMesh.geometry.setVertexCount(lineMesh.geometry.getPolylineVertexCount(points));\n    lineMesh.geometry.setTriangleCount(lineMesh.geometry.getPolylineTriangleCount(points));\n    lineMesh.geometry.addPolyline(points, vertexColors, retrieve.firstNotNull(seriesModel.get('lineStyle.width'), 1));\n    lineMesh.geometry.dirty();\n    lineMesh.geometry.updateBoundingBox();\n    var material = lineMesh.material;\n    material.transparent = hasTransparent;\n    material.depthMask = !hasTransparent;\n    var debugWireframeModel = seriesModel.getModel('debug.wireframe');\n\n    if (debugWireframeModel.get('show')) {\n      lineMesh.geometry.createAttribute('barycentric', 'float', 3);\n      lineMesh.geometry.generateBarycentric();\n      lineMesh.material.set('both', 'WIREFRAME_TRIANGLE');\n      lineMesh.material.set('wireframeLineColor', graphicGL.parseColor(debugWireframeModel.get('lineStyle.color') || 'rgba(0,0,0,0.5)'));\n      lineMesh.material.set('wireframeLineWidth', retrieve.firstNotNull(debugWireframeModel.get('lineStyle.width'), 1));\n    } else {\n      lineMesh.material.set('both', 'WIREFRAME_TRIANGLE');\n    }\n\n    this._points = points;\n\n    this._initHandler(seriesModel, api);\n  },\n  _updateAnimation: function (seriesModel) {\n    graphicGL.updateVertexAnimation([['prevPosition', 'position'], ['prevPositionPrev', 'positionPrev'], ['prevPositionNext', 'positionNext']], this._prevLine3DMesh, this._line3DMesh, seriesModel);\n  },\n  _initHandler: function (seriesModel, api) {\n    var data = seriesModel.getData();\n    var coordSys = seriesModel.coordinateSystem;\n    var lineMesh = this._line3DMesh;\n    var lastDataIndex = -1;\n    lineMesh.seriesIndex = seriesModel.seriesIndex;\n    lineMesh.off('mousemove');\n    lineMesh.off('mouseout');\n    lineMesh.on('mousemove', function (e) {\n      var value = coordSys.pointToData(e.point.array);\n      var dataIndex = data.indicesOfNearest('x', value[0])[0];\n\n      if (dataIndex !== lastDataIndex) {\n        // this._downplay(lastDataIndex);\n        // this._highlight(dataIndex);\n        api.dispatchAction({\n          type: 'grid3DShowAxisPointer',\n          value: [data.get('x', dataIndex), data.get('y', dataIndex), data.get('z', dataIndex)]\n        });\n        lineMesh.dataIndex = dataIndex;\n      }\n\n      lastDataIndex = dataIndex;\n    }, this);\n    lineMesh.on('mouseout', function (e) {\n      // this._downplay(lastDataIndex);\n      lastDataIndex = -1;\n      lineMesh.dataIndex = -1;\n      api.dispatchAction({\n        type: 'grid3DHideAxisPointer'\n      });\n    }, this);\n  },\n  // _highlight: function (dataIndex) {\n  //     var data = this._data;\n  //     if (!data) {\n  //         return;\n  //     }\n  // },\n  // _downplay: function (dataIndex) {\n  //     var data = this._data;\n  //     if (!data) {\n  //         return;\n  //     }\n  // },\n  _updateNDCPosition: function () {\n    var worldViewProjection = new Matrix4();\n    var camera = this._camera;\n    Matrix4.multiply(worldViewProjection, camera.projectionMatrix, camera.viewMatrix);\n    var positionNDC = this._positionNDC;\n    var points = this._points;\n    var nPoints = points.length / 3;\n\n    if (!positionNDC || positionNDC.length / 2 !== nPoints) {\n      positionNDC = this._positionNDC = new Float32Array(nPoints * 2);\n    }\n\n    var pos = [];\n\n    for (var i = 0; i < nPoints; i++) {\n      var i3 = i * 3;\n      var i2 = i * 2;\n      pos[0] = points[i3];\n      pos[1] = points[i3 + 1];\n      pos[2] = points[i3 + 2];\n      pos[3] = 1;\n      vec3.transformMat4(pos, pos, worldViewProjection.array);\n      positionNDC[i2] = pos[0] / pos[3];\n      positionNDC[i2 + 1] = pos[1] / pos[3];\n    }\n  },\n  _pick: function (x, y, renderer, camera, renderable, out) {\n    var positionNDC = this._positionNDC;\n    var seriesModel = this._data.hostModel;\n    var lineWidth = seriesModel.get('lineStyle.width');\n    var dataIndex = -1;\n    var width = renderer.viewport.width;\n    var height = renderer.viewport.height;\n    var halfWidth = width * 0.5;\n    var halfHeight = height * 0.5;\n    x = (x + 1) * halfWidth;\n    y = (y + 1) * halfHeight;\n\n    for (var i = 1; i < positionNDC.length / 2; i++) {\n      var x0 = (positionNDC[(i - 1) * 2] + 1) * halfWidth;\n      var y0 = (positionNDC[(i - 1) * 2 + 1] + 1) * halfHeight;\n      var x1 = (positionNDC[i * 2] + 1) * halfWidth;\n      var y1 = (positionNDC[i * 2 + 1] + 1) * halfHeight;\n\n      if (lineContain.containStroke(x0, y0, x1, y1, lineWidth, x, y)) {\n        var dist0 = (x0 - x) * (x0 - x) + (y0 - y) * (y0 - y);\n        var dist1 = (x1 - x) * (x1 - x) + (y1 - y) * (y1 - y); // Nearest point.\n\n        dataIndex = dist0 < dist1 ? i - 1 : i;\n      }\n    }\n\n    if (dataIndex >= 0) {\n      var i3 = dataIndex * 3;\n      var point = new Vector3(this._points[i3], this._points[i3 + 1], this._points[i3 + 2]);\n      out.push({\n        dataIndex: dataIndex,\n        point: point,\n        pointWorld: point.clone(),\n        target: this._line3DMesh,\n        distance: this._camera.getWorldPosition().dist(point)\n      });\n    }\n  },\n  remove: function () {\n    this.groupGL.removeAll();\n  },\n  dispose: function () {\n    this.groupGL.removeAll();\n  }\n});"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}