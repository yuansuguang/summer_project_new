{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport Chart from 'chart.js/auto';\nimport XLSX from 'xlsx';\nimport html2canvas from 'html2canvas';\nimport jsPDF from 'jspdf';\nexport default {\n  props: {\n    correctAnswer: {\n      // 接收正确答案\n      type: String,\n      default: ''\n    }\n  },\n  data() {\n    return {\n      options: [],\n      // 选项统计数据，包括名称、人数、占比\n      showChart: false,\n      // 是否显示图表\n      chartType: '',\n      // 图表类型\n      chartData: null,\n      // 图表数据\n      chartLabels: [],\n      // 图表标签\n      correctRate: 0 // 本题正确率\n    };\n  },\n  mounted() {\n    // 假设从后端获取的数据\n    this.options = this.calculatePercentage(this.getData());\n    this.calculateCorrectRate();\n    //this.generateChart();\n  },\n  methods: {\n    exportToExcel() {\n      const tableData = this.getTableData(); // 获取表格数据\n      const wb = XLSX.utils.book_new();\n      const ws = XLSX.utils.json_to_sheet(tableData);\n      XLSX.utils.book_append_sheet(wb, ws, 'Sheet1');\n      XLSX.writeFile(wb, 'table_data.xlsx');\n    },\n    getTableData() {\n      const tableData = this.options.map(option => ({\n        name: option.name,\n        count: option.count,\n        percentage: option.percentage\n      }));\n      tableData.push({\n        name: '本题正确率',\n        count: this.correctRate,\n        percentage: this.correctRate\n      });\n      return tableData;\n    },\n    getData() {\n      // 获取后端数据的方法\n      return [{\n        name: '选项1',\n        count: 10\n      }, {\n        name: '选项2',\n        count: 15\n      }, {\n        name: '选项3',\n        count: 300\n      }, {\n        name: '选项4',\n        count: 8\n      }, {\n        name: '选项5',\n        count: 10\n      }];\n    },\n    calculatePercentage(data) {\n      // 计算占比\n      const total = data.reduce((sum, option) => sum + option.count, 0);\n      return data.map(option => ({\n        ...option,\n        percentage: (option.count / total * 100).toFixed(2)\n      }));\n    },\n    calculateCorrectRate() {\n      // 计算本题正确率\n      const totalResponses = this.options.reduce((sum, option) => sum + option.count, 0);\n      const correctResponses = this.options.find(option => option.name === this.correctAnswer)?.count || 0;\n      this.correctRate = (correctResponses / totalResponses * 100).toFixed(2);\n    },\n    toggleChart(type) {\n      if (this.chartType === type) {\n        // 如果当前已经显示该类型的图表，则收起图表\n        this.showChart = false;\n        this.chartType = '';\n      } else {\n        // 否则，显示对应类型的图表\n        this.showChart = true;\n        this.chartType = type;\n        //this.generateChart();\n        this.$nextTick(() => {\n          this.generateChart();\n        });\n      }\n    },\n    generateChart() {\n      // 生成图表\n      if (this.chartData) {\n        this.chartData.destroy();\n      }\n      const ctx = this.$refs.chartCanvas.getContext('2d');\n      const data = {\n        labels: this.options.map(option => option.name),\n        datasets: [{\n          label: '占比',\n          data: this.options.map(option => parseFloat(option.percentage)),\n          backgroundColor: ['rgba(255, 99, 132, 0.2)', 'rgba(54, 162, 235, 0.2)', 'rgba(255, 206, 86, 0.2)', 'rgba(75, 192, 192, 0.2)'],\n          borderColor: ['rgba(255, 99, 132, 1)', 'rgba(54, 162, 235, 1)', 'rgba(255, 206, 86, 1)', 'rgba(75, 192, 192, 1)'],\n          borderWidth: 1\n        }]\n      };\n      const options = {\n        scales: {\n          y: {\n            beginAtZero: true\n          }\n        }\n      };\n      this.chartData = new Chart(ctx, {\n        type: this.chartType,\n        data: data,\n        options: options\n      });\n    }\n  }\n};","map":{"version":3,"names":["Chart","XLSX","html2canvas","jsPDF","props","correctAnswer","type","String","default","data","options","showChart","chartType","chartData","chartLabels","correctRate","mounted","calculatePercentage","getData","calculateCorrectRate","methods","exportToExcel","tableData","getTableData","wb","utils","book_new","ws","json_to_sheet","book_append_sheet","writeFile","map","option","name","count","percentage","push","total","reduce","sum","toFixed","totalResponses","correctResponses","find","toggleChart","$nextTick","generateChart","destroy","ctx","$refs","chartCanvas","getContext","labels","datasets","label","parseFloat","backgroundColor","borderColor","borderWidth","scales","y","beginAtZero"],"sources":["E:\\mytest\\src\\views\\qn-data\\qnDataview.vue"],"sourcesContent":["<template>\r\n  <div class=\"mytable\">\r\n    <h2>选项统计</h2>\r\n    <table>\r\n      <thead>\r\n        <tr>\r\n          <th>选项</th>\r\n          <th>选择人数</th>\r\n          <th>占比</th>\r\n        </tr>\r\n      </thead>\r\n      <tbody>\r\n        <tr v-for=\"(option, index) in options\" :key=\"index\">\r\n          <td>{{ option.name }}</td>\r\n          <td>{{ option.count }}</td>\r\n          <td>\r\n            <div class=\"percentage-bar\">\r\n              <div class=\"percentage-fill\" :style=\"{ width: option.percentage + '%' }\">\r\n                {{ option.percentage }}%\r\n              </div>\r\n            </div>\r\n          </td>\r\n        </tr>\r\n        <tr>\r\n          <td>本题正确率</td>\r\n          <td>{{ correctRate }}</td>\r\n          <td>\r\n            <div class=\"percentage-bar\">\r\n              <div class=\"percentage-fill\" :style=\"{ width: correctRate + '%' }\">\r\n                {{ correctRate }}%\r\n              </div>\r\n            </div>\r\n          </td>\r\n        </tr>\r\n      </tbody>\r\n    </table>\r\n\r\n    <!-- 图表展示按钮 -->\r\n    <div class=\"chart-buttons\">\r\n      <button @click=\"toggleChart('bar')\">柱状图</button>\r\n      <button @click=\"toggleChart('line')\">折线图</button>\r\n      <button @click=\"toggleChart('pie')\">饼状图</button>\r\n      <button @click=\"exportToExcel\">导出为 Excel</button>\r\n    </div>\r\n\r\n    <!-- 图表展示区域 -->\r\n    <div v-if=\"showChart\" class=\"chart-container\">\r\n      <canvas ref=\"chartCanvas\"></canvas>\r\n    </div>\r\n\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport Chart from 'chart.js/auto';\r\nimport XLSX from 'xlsx';\r\nimport html2canvas from 'html2canvas';\r\nimport jsPDF from 'jspdf';\r\n\r\nexport default {\r\n  props: {\r\n    correctAnswer: { // 接收正确答案\r\n      type: String,\r\n      default: ''\r\n    }\r\n  },\r\n  data() {\r\n    return {\r\n      options: [], // 选项统计数据，包括名称、人数、占比\r\n      showChart: false, // 是否显示图表\r\n      chartType: '', // 图表类型\r\n      chartData: null, // 图表数据\r\n      chartLabels: [], // 图表标签\r\n      correctRate: 0 // 本题正确率\r\n    };\r\n  },\r\n  mounted() {\r\n    // 假设从后端获取的数据\r\n    this.options = this.calculatePercentage(this.getData());\r\n    this.calculateCorrectRate();\r\n    //this.generateChart();\r\n  },\r\n  methods: {\r\n    exportToExcel() {\r\n      const tableData = this.getTableData(); // 获取表格数据\r\n      const wb = XLSX.utils.book_new();\r\n      const ws = XLSX.utils.json_to_sheet(tableData);\r\n      XLSX.utils.book_append_sheet(wb, ws, 'Sheet1');\r\n      XLSX.writeFile(wb, 'table_data.xlsx');\r\n    },\r\n    getTableData() {\r\n      const tableData = this.options.map(option => ({\r\n        name: option.name,\r\n        count: option.count,\r\n        percentage: option.percentage,\r\n      }));\r\n      tableData.push({ name: '本题正确率', count: this.correctRate, percentage: this.correctRate });\r\n      return tableData;\r\n    },\r\n    getData() {\r\n      // 获取后端数据的方法\r\n      return [{ name: '选项1', count: 10 }, { name: '选项2', count: 15 }, { name: '选项3', count: 300 }, { name: '选项4', count: 8 }, { name: '选项5', count: 10 }];\r\n    },\r\n    calculatePercentage(data) {\r\n      // 计算占比\r\n      const total = data.reduce((sum, option) => sum + option.count, 0);\r\n      return data.map(option => ({\r\n        ...option,\r\n        percentage: ((option.count / total) * 100).toFixed(2)\r\n      }));\r\n    },\r\n    calculateCorrectRate() {\r\n      // 计算本题正确率\r\n      const totalResponses = this.options.reduce((sum, option) => sum + option.count, 0);\r\n      const correctResponses = this.options.find(option => option.name === this.correctAnswer)?.count || 0;\r\n      this.correctRate = ((correctResponses / totalResponses) * 100).toFixed(2);\r\n    },\r\n    toggleChart(type) {\r\n      if (this.chartType === type) {\r\n        // 如果当前已经显示该类型的图表，则收起图表\r\n        this.showChart = false;\r\n        this.chartType = '';\r\n      } else {\r\n        // 否则，显示对应类型的图表\r\n        this.showChart = true;\r\n        this.chartType = type;\r\n        //this.generateChart();\r\n        this.$nextTick(() => {\r\n          this.generateChart();\r\n          \r\n        });\r\n      }\r\n    },\r\n    generateChart() {\r\n      // 生成图表\r\n      if (this.chartData) {\r\n        this.chartData.destroy();\r\n      }\r\n      const ctx = this.$refs.chartCanvas.getContext('2d');\r\n      const data = {\r\n        labels: this.options.map(option => option.name),\r\n        datasets: [{\r\n          label: '占比',\r\n          data: this.options.map(option => parseFloat(option.percentage)),\r\n          backgroundColor: [\r\n            'rgba(255, 99, 132, 0.2)',\r\n            'rgba(54, 162, 235, 0.2)',\r\n            'rgba(255, 206, 86, 0.2)',\r\n            'rgba(75, 192, 192, 0.2)'\r\n          ],\r\n          borderColor: [\r\n            'rgba(255, 99, 132, 1)',\r\n            'rgba(54, 162, 235, 1)',\r\n            'rgba(255, 206, 86, 1)',\r\n            'rgba(75, 192, 192, 1)'\r\n          ],\r\n          borderWidth: 1\r\n        }]\r\n      };\r\n      const options = {\r\n        scales: {\r\n          y: {\r\n            beginAtZero: true\r\n          }\r\n        }\r\n      };\r\n      this.chartData = new Chart(ctx, {\r\n        type: this.chartType,\r\n        data: data,\r\n        options: options\r\n      });\r\n    }\r\n  }\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n\r\n.mytable{\r\n  display: grid;\r\n  place-items: center;\r\n  /* height: 100vh;  */\r\n}\r\ntable td{\r\n  width: 150px;\r\n}\r\n.percentage-bar {\r\n  width: 100%;\r\n  height: 20px;\r\n  background-color: #f0f0f0;\r\n}\r\n\r\n.percentage-fill {\r\n  height: 100%;\r\n  background-color: #007bff;\r\n  color: #fff;\r\n  text-align: center;\r\n  line-height: 20px;\r\n}\r\n\r\n.chart-buttons button {\r\n  margin-right: 10px;\r\n}\r\n\r\n.chart-container {\r\n  margin-top: 20px;\r\n}\r\n</style>\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}