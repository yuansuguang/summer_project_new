{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport Mesh from 'claygl/src/Mesh';\nimport Renderer from 'claygl/src/Renderer';\nimport Texture2D from 'claygl/src/Texture2D';\nimport Texture from 'claygl/src/Texture';\nimport Shader from 'claygl/src/Shader';\nimport Material from 'claygl/src/Material';\nimport Node3D from 'claygl/src/Node';\nimport Geometry from 'claygl/src/Geometry';\nimport * as echarts from 'echarts/lib/echarts';\nimport Scene from 'claygl/src/Scene';\nimport LRUCache from 'zrender/lib/core/LRU';\nimport textureUtil from 'claygl/src/util/texture';\nimport EChartsSurface from './EChartsSurface';\nimport AmbientCubemapLight from 'claygl/src/light/AmbientCubemap';\nimport AmbientSHLight from 'claygl/src/light/AmbientSH';\nimport shUtil from 'claygl/src/util/sh';\nimport retrieve from './retrieve';\nimport SphereGeometry from 'claygl/src/geometry/Sphere';\nimport PlaneGeometry from 'claygl/src/geometry/Plane';\nimport CubeGeometry from 'claygl/src/geometry/Cube';\nimport AmbientLight from 'claygl/src/light/Ambient';\nimport DirectionalLight from 'claygl/src/light/Directional';\nimport PointLight from 'claygl/src/light/Point';\nimport SpotLight from 'claygl/src/light/Spot';\nimport PerspectiveCamera from 'claygl/src/camera/Perspective';\nimport OrthographicCamera from 'claygl/src/camera/Orthographic'; // Math\n\nimport Vector2 from 'claygl/src/math/Vector2';\nimport Vector3 from 'claygl/src/math/Vector3';\nimport Vector4 from 'claygl/src/math/Vector4';\nimport Quaternion from 'claygl/src/math/Quaternion';\nimport Matrix2 from 'claygl/src/math/Matrix2';\nimport Matrix2d from 'claygl/src/math/Matrix2d';\nimport Matrix3 from 'claygl/src/math/Matrix3';\nimport Matrix4 from 'claygl/src/math/Matrix4';\nimport Plane from 'claygl/src/math/Plane';\nimport Ray from 'claygl/src/math/Ray';\nimport BoundingBox from 'claygl/src/math/BoundingBox';\nimport Frustum from 'claygl/src/math/Frustum';\nimport animatableMixin from './animatableMixin'; // Some common shaders\n\nimport utilGLSL from 'claygl/src/shader/source/util.glsl.js';\nimport prezGLSL from 'claygl/src/shader/source/prez.glsl.js';\nimport commonGLSL from './shader/common.glsl.js';\nimport colorGLSL from './shader/color.glsl.js';\nimport lambertGLSL from './shader/lambert.glsl.js';\nimport realisticGLSL from './shader/realistic.glsl.js';\nimport hatchingGLSL from './shader/hatching.glsl.js';\nimport shadowGLSL from './shader/shadow.glsl.js';\nObject.assign(Node3D.prototype, animatableMixin);\nShader.import(utilGLSL);\nShader.import(prezGLSL);\nShader.import(commonGLSL);\nShader.import(colorGLSL);\nShader.import(lambertGLSL);\nShader.import(realisticGLSL);\nShader.import(hatchingGLSL);\nShader.import(shadowGLSL);\nfunction isValueNone(value) {\n  return !value || value === 'none';\n}\nfunction isValueImage(value) {\n  return value instanceof HTMLCanvasElement || value instanceof HTMLImageElement || value instanceof Image;\n}\nfunction isECharts(value) {\n  return value.getZr && value.setOption;\n} // Overwrite addToScene and removeFromScene\n\nvar oldAddToScene = Scene.prototype.addToScene;\nvar oldRemoveFromScene = Scene.prototype.removeFromScene;\nScene.prototype.addToScene = function (node) {\n  oldAddToScene.call(this, node);\n  if (this.__zr) {\n    var zr = this.__zr;\n    node.traverse(function (child) {\n      child.__zr = zr;\n      if (child.addAnimatorsToZr) {\n        child.addAnimatorsToZr(zr);\n      }\n    });\n  }\n};\nScene.prototype.removeFromScene = function (node) {\n  oldRemoveFromScene.call(this, node);\n  node.traverse(function (child) {\n    var zr = child.__zr;\n    child.__zr = null;\n    if (zr && child.removeAnimatorsFromZr) {\n      child.removeAnimatorsFromZr(zr);\n    }\n  });\n};\n/**\n * @param {string} textureName\n * @param {string|HTMLImageElement|HTMLCanvasElement} imgValue\n * @param {module:echarts/ExtensionAPI} api\n * @param {Object} [textureOpts]\n */\n\nMaterial.prototype.setTextureImage = function (textureName, imgValue, api, textureOpts) {\n  if (!this.shader) {\n    return;\n  }\n  var zr = api.getZr();\n  var material = this;\n  var texture;\n  material.autoUpdateTextureStatus = false; // disableTexture first\n\n  material.disableTexture(textureName);\n  if (!isValueNone(imgValue)) {\n    texture = graphicGL.loadTexture(imgValue, api, textureOpts, function (texture) {\n      material.enableTexture(textureName);\n      zr && zr.refresh();\n    }); // Set texture immediately for other code to verify if have this texture.\n\n    material.set(textureName, texture);\n  }\n  return texture;\n};\nvar graphicGL = {};\ngraphicGL.Renderer = Renderer;\ngraphicGL.Node = Node3D;\ngraphicGL.Mesh = Mesh;\ngraphicGL.Shader = Shader;\ngraphicGL.Material = Material;\ngraphicGL.Texture = Texture;\ngraphicGL.Texture2D = Texture2D; // Geometries\n\ngraphicGL.Geometry = Geometry;\ngraphicGL.SphereGeometry = SphereGeometry;\ngraphicGL.PlaneGeometry = PlaneGeometry;\ngraphicGL.CubeGeometry = CubeGeometry; // Lights\n\ngraphicGL.AmbientLight = AmbientLight;\ngraphicGL.DirectionalLight = DirectionalLight;\ngraphicGL.PointLight = PointLight;\ngraphicGL.SpotLight = SpotLight; // Cameras\n\ngraphicGL.PerspectiveCamera = PerspectiveCamera;\ngraphicGL.OrthographicCamera = OrthographicCamera; // Math\n\ngraphicGL.Vector2 = Vector2;\ngraphicGL.Vector3 = Vector3;\ngraphicGL.Vector4 = Vector4;\ngraphicGL.Quaternion = Quaternion;\ngraphicGL.Matrix2 = Matrix2;\ngraphicGL.Matrix2d = Matrix2d;\ngraphicGL.Matrix3 = Matrix3;\ngraphicGL.Matrix4 = Matrix4;\ngraphicGL.Plane = Plane;\ngraphicGL.Ray = Ray;\ngraphicGL.BoundingBox = BoundingBox;\ngraphicGL.Frustum = Frustum; // Texture utilities\n\nvar blankImage = null;\nfunction getBlankImage() {\n  if (blankImage !== null) {\n    return blankImage;\n  }\n  blankImage = textureUtil.createBlank('rgba(255,255,255,0)').image;\n  return blankImage;\n}\nfunction nearestPowerOfTwo(val) {\n  return Math.pow(2, Math.round(Math.log(val) / Math.LN2));\n}\nfunction convertTextureToPowerOfTwo(texture) {\n  if ((texture.wrapS === Texture.REPEAT || texture.wrapT === Texture.REPEAT) && texture.image) {\n    // var canvas = document.createElement('canvas');\n    var width = nearestPowerOfTwo(texture.width);\n    var height = nearestPowerOfTwo(texture.height);\n    if (width !== texture.width || height !== texture.height) {\n      var canvas = document.createElement('canvas');\n      canvas.width = width;\n      canvas.height = height;\n      var ctx = canvas.getContext('2d');\n      ctx.drawImage(texture.image, 0, 0, width, height);\n      texture.image = canvas;\n    }\n  }\n}\n/**\n * @param {string|HTMLImageElement|HTMLCanvasElement} imgValue\n * @param {module:echarts/ExtensionAPI} api\n * @param {Object} [textureOpts]\n * @param {Function} cb\n */\n// TODO Promise, test\n\ngraphicGL.loadTexture = function (imgValue, api, textureOpts, cb) {\n  if (typeof textureOpts === 'function') {\n    cb = textureOpts;\n    textureOpts = {};\n  }\n  textureOpts = textureOpts || {};\n  var keys = Object.keys(textureOpts).sort();\n  var prefix = '';\n  for (var i = 0; i < keys.length; i++) {\n    prefix += keys[i] + '_' + textureOpts[keys[i]] + '_';\n  }\n  var textureCache = api.__textureCache = api.__textureCache || new LRUCache(20);\n  if (isECharts(imgValue)) {\n    var id = imgValue.__textureid__;\n    var textureObj = textureCache.get(prefix + id);\n    if (!textureObj) {\n      var surface = new EChartsSurface(imgValue);\n      surface.onupdate = function () {\n        api.getZr().refresh();\n      };\n      textureObj = {\n        texture: surface.getTexture()\n      };\n      for (var i = 0; i < keys.length; i++) {\n        textureObj.texture[keys[i]] = textureOpts[keys[i]];\n      }\n      id = imgValue.__textureid__ || '__ecgl_ec__' + textureObj.texture.__uid__;\n      imgValue.__textureid__ = id;\n      textureCache.put(prefix + id, textureObj);\n      cb && cb(textureObj.texture);\n    } else {\n      textureObj.texture.surface.setECharts(imgValue);\n      cb && cb(textureObj.texture);\n    }\n    return textureObj.texture;\n  } else if (isValueImage(imgValue)) {\n    var id = imgValue.__textureid__;\n    var textureObj = textureCache.get(prefix + id);\n    if (!textureObj) {\n      textureObj = {\n        texture: new graphicGL.Texture2D({\n          image: imgValue\n        })\n      };\n      for (var i = 0; i < keys.length; i++) {\n        textureObj.texture[keys[i]] = textureOpts[keys[i]];\n      }\n      id = imgValue.__textureid__ || '__ecgl_image__' + textureObj.texture.__uid__;\n      imgValue.__textureid__ = id;\n      textureCache.put(prefix + id, textureObj);\n      convertTextureToPowerOfTwo(textureObj.texture); // TODO Next tick?\n\n      cb && cb(textureObj.texture);\n    }\n    return textureObj.texture;\n  } else {\n    var textureObj = textureCache.get(prefix + imgValue);\n    if (textureObj) {\n      if (textureObj.callbacks) {\n        // Add to pending callbacks\n        textureObj.callbacks.push(cb);\n      } else {\n        // TODO Next tick?\n        cb && cb(textureObj.texture);\n      }\n    } else {\n      // Maybe base64\n      if (imgValue.match(/.hdr$|^data:application\\/octet-stream/)) {\n        textureObj = {\n          callbacks: [cb]\n        };\n        var texture = textureUtil.loadTexture(imgValue, {\n          exposure: textureOpts.exposure,\n          fileType: 'hdr'\n        }, function () {\n          texture.dirty();\n          textureObj.callbacks.forEach(function (cb) {\n            cb && cb(texture);\n          });\n          textureObj.callbacks = null;\n        });\n        textureObj.texture = texture;\n        textureCache.put(prefix + imgValue, textureObj);\n      } else {\n        var texture = new graphicGL.Texture2D({\n          image: new Image()\n        });\n        for (var i = 0; i < keys.length; i++) {\n          texture[keys[i]] = textureOpts[keys[i]];\n        }\n        textureObj = {\n          texture: texture,\n          callbacks: [cb]\n        };\n        var originalImage = texture.image;\n        originalImage.onload = function () {\n          texture.image = originalImage;\n          convertTextureToPowerOfTwo(texture);\n          texture.dirty();\n          textureObj.callbacks.forEach(function (cb) {\n            cb && cb(texture);\n          });\n          textureObj.callbacks = null;\n        };\n        originalImage.crossOrigin = 'Anonymous';\n        originalImage.src = imgValue; // Use blank image as place holder.\n\n        texture.image = getBlankImage();\n        textureCache.put(prefix + imgValue, textureObj);\n      }\n    }\n    return textureObj.texture;\n  }\n};\n/**\n * Create ambientCubemap and ambientSH light. respectively to have specular and diffuse light\n * @return {Object} { specular, diffuse }\n */\n\ngraphicGL.createAmbientCubemap = function (opt, renderer, api, cb) {\n  opt = opt || {};\n  var textureUrl = opt.texture;\n  var exposure = retrieve.firstNotNull(opt.exposure, 1.0);\n  var ambientCubemap = new AmbientCubemapLight({\n    intensity: retrieve.firstNotNull(opt.specularIntensity, 1.0)\n  });\n  var ambientSH = new AmbientSHLight({\n    intensity: retrieve.firstNotNull(opt.diffuseIntensity, 1.0),\n    coefficients: [0.844, 0.712, 0.691, -0.037, 0.083, 0.167, 0.343, 0.288, 0.299, -0.041, -0.021, -0.009, -0.003, -0.041, -0.064, -0.011, -0.007, -0.004, -0.031, 0.034, 0.081, -0.060, -0.049, -0.060, 0.046, 0.056, 0.050]\n  });\n  ambientCubemap.cubemap = graphicGL.loadTexture(textureUrl, api, {\n    exposure: exposure\n  }, function () {\n    // TODO Performance when multiple view\n    ambientCubemap.cubemap.flipY = false;\n    if (process.env.NODE_ENV !== 'production') {\n      var time = Date.now();\n    }\n    ambientCubemap.prefilter(renderer, 32);\n    if (process.env.NODE_ENV !== 'production') {\n      var dTime = Date.now() - time;\n      console.log('Prefilter environment map: ' + dTime + 'ms');\n    }\n    ambientSH.coefficients = shUtil.projectEnvironmentMap(renderer, ambientCubemap.cubemap, {\n      lod: 1\n    });\n    cb && cb(); // TODO Refresh ?\n  });\n  return {\n    specular: ambientCubemap,\n    diffuse: ambientSH\n  };\n};\n/**\n * Create a blank texture for placeholder\n */\n\ngraphicGL.createBlankTexture = textureUtil.createBlank;\n/**\n * If value is image\n * @param {*}\n * @return {boolean}\n */\n\ngraphicGL.isImage = isValueImage;\ngraphicGL.additiveBlend = function (gl) {\n  gl.blendEquation(gl.FUNC_ADD);\n  gl.blendFunc(gl.SRC_ALPHA, gl.ONE);\n};\n/**\n * @param {string|Array.<number>} colorStr\n * @param {Array.<number>} [rgba]\n * @return {Array.<number>} rgba\n */\n\ngraphicGL.parseColor = function (colorStr, rgba) {\n  if (colorStr instanceof Array) {\n    if (!rgba) {\n      rgba = [];\n    } // Color has been parsed.\n\n    rgba[0] = colorStr[0];\n    rgba[1] = colorStr[1];\n    rgba[2] = colorStr[2];\n    if (colorStr.length > 3) {\n      rgba[3] = colorStr[3];\n    } else {\n      rgba[3] = 1;\n    }\n    return rgba;\n  }\n  rgba = echarts.color.parse(colorStr || '#000', rgba) || [0, 0, 0, 0];\n  rgba[0] /= 255;\n  rgba[1] /= 255;\n  rgba[2] /= 255;\n  return rgba;\n};\n/**\n * Convert alpha beta rotation to direction.\n * @param {number} alpha\n * @param {number} beta\n * @return {Array.<number>}\n */\n\ngraphicGL.directionFromAlphaBeta = function (alpha, beta) {\n  var theta = alpha / 180 * Math.PI + Math.PI / 2;\n  var phi = -beta / 180 * Math.PI + Math.PI / 2;\n  var dir = [];\n  var r = Math.sin(theta);\n  dir[0] = r * Math.cos(phi);\n  dir[1] = -Math.cos(theta);\n  dir[2] = r * Math.sin(phi);\n  return dir;\n};\n/**\n * Get shadow resolution from shadowQuality configuration\n */\n\ngraphicGL.getShadowResolution = function (shadowQuality) {\n  var shadowResolution = 1024;\n  switch (shadowQuality) {\n    case 'low':\n      shadowResolution = 512;\n      break;\n    case 'medium':\n      break;\n    case 'high':\n      shadowResolution = 2048;\n      break;\n    case 'ultra':\n      shadowResolution = 4096;\n      break;\n  }\n  return shadowResolution;\n};\n/**\n * Shading utilities\n */\n\ngraphicGL.COMMON_SHADERS = ['lambert', 'color', 'realistic', 'hatching', 'shadow'];\n/**\n * Create shader including vertex and fragment\n * @param {string} prefix.\n */\n\ngraphicGL.createShader = function (prefix) {\n  if (prefix === 'ecgl.shadow') {\n    prefix = 'ecgl.displayShadow';\n  }\n  var vertexShaderStr = Shader.source(prefix + '.vertex');\n  var fragmentShaderStr = Shader.source(prefix + '.fragment');\n  if (!vertexShaderStr) {\n    console.error('Vertex shader of \\'%s\\' not exits', prefix);\n  }\n  if (!fragmentShaderStr) {\n    console.error('Fragment shader of \\'%s\\' not exits', prefix);\n  }\n  var shader = new Shader(vertexShaderStr, fragmentShaderStr);\n  shader.name = prefix;\n  return shader;\n};\ngraphicGL.createMaterial = function (prefix, defines) {\n  if (!(defines instanceof Array)) {\n    defines = [defines];\n  }\n  var shader = graphicGL.createShader(prefix);\n  var material = new Material({\n    shader: shader\n  });\n  defines.forEach(function (defineName) {\n    if (typeof defineName === 'string') {\n      material.define(defineName);\n    }\n  });\n  return material;\n};\n/**\n * Set material from model.\n * @param {clay.Material} material\n * @param {module:echarts/model/Model} model\n * @param {module:echarts/ExtensionAPI} api\n */\n\ngraphicGL.setMaterialFromModel = function (shading, material, model, api) {\n  material.autoUpdateTextureStatus = false;\n  var materialModel = model.getModel(shading + 'Material');\n  var detailTexture = materialModel.get('detailTexture');\n  var uvRepeat = retrieve.firstNotNull(materialModel.get('textureTiling'), 1.0);\n  var uvOffset = retrieve.firstNotNull(materialModel.get('textureOffset'), 0.0);\n  if (typeof uvRepeat === 'number') {\n    uvRepeat = [uvRepeat, uvRepeat];\n  }\n  if (typeof uvOffset === 'number') {\n    uvOffset = [uvOffset, uvOffset];\n  }\n  var repeatParam = uvRepeat[0] > 1 || uvRepeat[1] > 1 ? graphicGL.Texture.REPEAT : graphicGL.Texture.CLAMP_TO_EDGE;\n  var textureOpt = {\n    anisotropic: 8,\n    wrapS: repeatParam,\n    wrapT: repeatParam\n  };\n  if (shading === 'realistic') {\n    var roughness = materialModel.get('roughness');\n    var metalness = materialModel.get('metalness');\n    if (metalness != null) {\n      // Try to treat as a texture, TODO More check\n      if (isNaN(metalness)) {\n        material.setTextureImage('metalnessMap', metalness, api, textureOpt);\n        metalness = retrieve.firstNotNull(materialModel.get('metalnessAdjust'), 0.5);\n      }\n    } else {\n      // Default metalness.\n      metalness = 0;\n    }\n    if (roughness != null) {\n      // Try to treat as a texture, TODO More check\n      if (isNaN(roughness)) {\n        material.setTextureImage('roughnessMap', roughness, api, textureOpt);\n        roughness = retrieve.firstNotNull(materialModel.get('roughnessAdjust'), 0.5);\n      }\n    } else {\n      // Default roughness.\n      roughness = 0.5;\n    }\n    var normalTextureVal = materialModel.get('normalTexture');\n    material.setTextureImage('detailMap', detailTexture, api, textureOpt);\n    material.setTextureImage('normalMap', normalTextureVal, api, textureOpt);\n    material.set({\n      roughness: roughness,\n      metalness: metalness,\n      detailUvRepeat: uvRepeat,\n      detailUvOffset: uvOffset\n    }); // var normalTexture = material.get('normalMap');\n    // if (normalTexture) {\n    // PENDING\n    // normalTexture.format = Texture.SRGB;\n    // }\n  } else if (shading === 'lambert') {\n    material.setTextureImage('detailMap', detailTexture, api, textureOpt);\n    material.set({\n      detailUvRepeat: uvRepeat,\n      detailUvOffset: uvOffset\n    });\n  } else if (shading === 'color') {\n    material.setTextureImage('detailMap', detailTexture, api, textureOpt);\n    material.set({\n      detailUvRepeat: uvRepeat,\n      detailUvOffset: uvOffset\n    });\n  } else if (shading === 'hatching') {\n    var tams = materialModel.get('hatchingTextures') || [];\n    if (tams.length < 6) {\n      if (process.env.NODE_ENV !== 'production') {\n        console.error('Invalid hatchingTextures.');\n      }\n    }\n    for (var i = 0; i < 6; i++) {\n      material.setTextureImage('hatch' + (i + 1), tams[i], api, {\n        anisotropic: 8,\n        wrapS: graphicGL.Texture.REPEAT,\n        wrapT: graphicGL.Texture.REPEAT\n      });\n    }\n    material.set({\n      detailUvRepeat: uvRepeat,\n      detailUvOffset: uvOffset\n    });\n  }\n};\ngraphicGL.updateVertexAnimation = function (mappingAttributes, previousMesh, currentMesh, seriesModel) {\n  var enableAnimation = seriesModel.get('animation');\n  var duration = seriesModel.get('animationDurationUpdate');\n  var easing = seriesModel.get('animationEasingUpdate');\n  var shadowDepthMaterial = currentMesh.shadowDepthMaterial;\n  if (enableAnimation && previousMesh && duration > 0 // Only animate when bar count are not changed\n  && previousMesh.geometry.vertexCount === currentMesh.geometry.vertexCount) {\n    currentMesh.material.define('vertex', 'VERTEX_ANIMATION');\n    currentMesh.ignorePreZ = true;\n    if (shadowDepthMaterial) {\n      shadowDepthMaterial.define('vertex', 'VERTEX_ANIMATION');\n    }\n    for (var i = 0; i < mappingAttributes.length; i++) {\n      currentMesh.geometry.attributes[mappingAttributes[i][0]].value = previousMesh.geometry.attributes[mappingAttributes[i][1]].value;\n    }\n    currentMesh.geometry.dirty();\n    currentMesh.__percent = 0;\n    currentMesh.material.set('percent', 0);\n    currentMesh.stopAnimation();\n    currentMesh.animate().when(duration, {\n      __percent: 1\n    }).during(function () {\n      currentMesh.material.set('percent', currentMesh.__percent);\n      if (shadowDepthMaterial) {\n        shadowDepthMaterial.set('percent', currentMesh.__percent);\n      }\n    }).done(function () {\n      currentMesh.ignorePreZ = false;\n      currentMesh.material.undefine('vertex', 'VERTEX_ANIMATION');\n      if (shadowDepthMaterial) {\n        shadowDepthMaterial.undefine('vertex', 'VERTEX_ANIMATION');\n      }\n    }).start(easing);\n  } else {\n    currentMesh.material.undefine('vertex', 'VERTEX_ANIMATION');\n    if (shadowDepthMaterial) {\n      shadowDepthMaterial.undefine('vertex', 'VERTEX_ANIMATION');\n    }\n  }\n};\nexport default graphicGL;","map":{"version":3,"names":["Mesh","Renderer","Texture2D","Texture","Shader","Material","Node3D","Geometry","echarts","Scene","LRUCache","textureUtil","EChartsSurface","AmbientCubemapLight","AmbientSHLight","shUtil","retrieve","SphereGeometry","PlaneGeometry","CubeGeometry","AmbientLight","DirectionalLight","PointLight","SpotLight","PerspectiveCamera","OrthographicCamera","Vector2","Vector3","Vector4","Quaternion","Matrix2","Matrix2d","Matrix3","Matrix4","Plane","Ray","BoundingBox","Frustum","animatableMixin","utilGLSL","prezGLSL","commonGLSL","colorGLSL","lambertGLSL","realisticGLSL","hatchingGLSL","shadowGLSL","Object","assign","prototype","import","isValueNone","value","isValueImage","HTMLCanvasElement","HTMLImageElement","Image","isECharts","getZr","setOption","oldAddToScene","addToScene","oldRemoveFromScene","removeFromScene","node","call","__zr","zr","traverse","child","addAnimatorsToZr","removeAnimatorsFromZr","setTextureImage","textureName","imgValue","api","textureOpts","shader","material","texture","autoUpdateTextureStatus","disableTexture","graphicGL","loadTexture","enableTexture","refresh","set","Node","blankImage","getBlankImage","createBlank","image","nearestPowerOfTwo","val","Math","pow","round","log","LN2","convertTextureToPowerOfTwo","wrapS","REPEAT","wrapT","width","height","canvas","document","createElement","ctx","getContext","drawImage","cb","keys","sort","prefix","i","length","textureCache","__textureCache","id","__textureid__","textureObj","get","surface","onupdate","getTexture","__uid__","put","setECharts","callbacks","push","match","exposure","fileType","dirty","forEach","originalImage","onload","crossOrigin","src","createAmbientCubemap","opt","renderer","textureUrl","firstNotNull","ambientCubemap","intensity","specularIntensity","ambientSH","diffuseIntensity","coefficients","cubemap","flipY","process","env","NODE_ENV","time","Date","now","prefilter","dTime","console","projectEnvironmentMap","lod","specular","diffuse","createBlankTexture","isImage","additiveBlend","gl","blendEquation","FUNC_ADD","blendFunc","SRC_ALPHA","ONE","parseColor","colorStr","rgba","Array","color","parse","directionFromAlphaBeta","alpha","beta","theta","PI","phi","dir","r","sin","cos","getShadowResolution","shadowQuality","shadowResolution","COMMON_SHADERS","createShader","vertexShaderStr","source","fragmentShaderStr","error","name","createMaterial","defines","defineName","define","setMaterialFromModel","shading","model","materialModel","getModel","detailTexture","uvRepeat","uvOffset","repeatParam","CLAMP_TO_EDGE","textureOpt","anisotropic","roughness","metalness","isNaN","normalTextureVal","detailUvRepeat","detailUvOffset","tams","updateVertexAnimation","mappingAttributes","previousMesh","currentMesh","seriesModel","enableAnimation","duration","easing","shadowDepthMaterial","geometry","vertexCount","ignorePreZ","attributes","__percent","stopAnimation","animate","when","during","done","undefine","start"],"sources":["E:/QuestionairePlanet_Fronted/mytest/node_modules/echarts-gl/lib/util/graphicGL.js"],"sourcesContent":["import Mesh from 'claygl/src/Mesh';\nimport Renderer from 'claygl/src/Renderer';\nimport Texture2D from 'claygl/src/Texture2D';\nimport Texture from 'claygl/src/Texture';\nimport Shader from 'claygl/src/Shader';\nimport Material from 'claygl/src/Material';\nimport Node3D from 'claygl/src/Node';\nimport Geometry from 'claygl/src/Geometry';\nimport * as echarts from 'echarts/lib/echarts';\nimport Scene from 'claygl/src/Scene';\nimport LRUCache from 'zrender/lib/core/LRU';\nimport textureUtil from 'claygl/src/util/texture';\nimport EChartsSurface from './EChartsSurface';\nimport AmbientCubemapLight from 'claygl/src/light/AmbientCubemap';\nimport AmbientSHLight from 'claygl/src/light/AmbientSH';\nimport shUtil from 'claygl/src/util/sh';\nimport retrieve from './retrieve';\nimport SphereGeometry from 'claygl/src/geometry/Sphere';\nimport PlaneGeometry from 'claygl/src/geometry/Plane';\nimport CubeGeometry from 'claygl/src/geometry/Cube';\nimport AmbientLight from 'claygl/src/light/Ambient';\nimport DirectionalLight from 'claygl/src/light/Directional';\nimport PointLight from 'claygl/src/light/Point';\nimport SpotLight from 'claygl/src/light/Spot';\nimport PerspectiveCamera from 'claygl/src/camera/Perspective';\nimport OrthographicCamera from 'claygl/src/camera/Orthographic'; // Math\n\nimport Vector2 from 'claygl/src/math/Vector2';\nimport Vector3 from 'claygl/src/math/Vector3';\nimport Vector4 from 'claygl/src/math/Vector4';\nimport Quaternion from 'claygl/src/math/Quaternion';\nimport Matrix2 from 'claygl/src/math/Matrix2';\nimport Matrix2d from 'claygl/src/math/Matrix2d';\nimport Matrix3 from 'claygl/src/math/Matrix3';\nimport Matrix4 from 'claygl/src/math/Matrix4';\nimport Plane from 'claygl/src/math/Plane';\nimport Ray from 'claygl/src/math/Ray';\nimport BoundingBox from 'claygl/src/math/BoundingBox';\nimport Frustum from 'claygl/src/math/Frustum';\nimport animatableMixin from './animatableMixin'; // Some common shaders\n\nimport utilGLSL from 'claygl/src/shader/source/util.glsl.js';\nimport prezGLSL from 'claygl/src/shader/source/prez.glsl.js';\nimport commonGLSL from './shader/common.glsl.js';\nimport colorGLSL from './shader/color.glsl.js';\nimport lambertGLSL from './shader/lambert.glsl.js';\nimport realisticGLSL from './shader/realistic.glsl.js';\nimport hatchingGLSL from './shader/hatching.glsl.js';\nimport shadowGLSL from './shader/shadow.glsl.js';\nObject.assign(Node3D.prototype, animatableMixin);\nShader.import(utilGLSL);\nShader.import(prezGLSL);\nShader.import(commonGLSL);\nShader.import(colorGLSL);\nShader.import(lambertGLSL);\nShader.import(realisticGLSL);\nShader.import(hatchingGLSL);\nShader.import(shadowGLSL);\n\nfunction isValueNone(value) {\n  return !value || value === 'none';\n}\n\nfunction isValueImage(value) {\n  return value instanceof HTMLCanvasElement || value instanceof HTMLImageElement || value instanceof Image;\n}\n\nfunction isECharts(value) {\n  return value.getZr && value.setOption;\n} // Overwrite addToScene and removeFromScene\n\n\nvar oldAddToScene = Scene.prototype.addToScene;\nvar oldRemoveFromScene = Scene.prototype.removeFromScene;\n\nScene.prototype.addToScene = function (node) {\n  oldAddToScene.call(this, node);\n\n  if (this.__zr) {\n    var zr = this.__zr;\n    node.traverse(function (child) {\n      child.__zr = zr;\n\n      if (child.addAnimatorsToZr) {\n        child.addAnimatorsToZr(zr);\n      }\n    });\n  }\n};\n\nScene.prototype.removeFromScene = function (node) {\n  oldRemoveFromScene.call(this, node);\n  node.traverse(function (child) {\n    var zr = child.__zr;\n    child.__zr = null;\n\n    if (zr && child.removeAnimatorsFromZr) {\n      child.removeAnimatorsFromZr(zr);\n    }\n  });\n};\n/**\n * @param {string} textureName\n * @param {string|HTMLImageElement|HTMLCanvasElement} imgValue\n * @param {module:echarts/ExtensionAPI} api\n * @param {Object} [textureOpts]\n */\n\n\nMaterial.prototype.setTextureImage = function (textureName, imgValue, api, textureOpts) {\n  if (!this.shader) {\n    return;\n  }\n\n  var zr = api.getZr();\n  var material = this;\n  var texture;\n  material.autoUpdateTextureStatus = false; // disableTexture first\n\n  material.disableTexture(textureName);\n\n  if (!isValueNone(imgValue)) {\n    texture = graphicGL.loadTexture(imgValue, api, textureOpts, function (texture) {\n      material.enableTexture(textureName);\n      zr && zr.refresh();\n    }); // Set texture immediately for other code to verify if have this texture.\n\n    material.set(textureName, texture);\n  }\n\n  return texture;\n};\n\nvar graphicGL = {};\ngraphicGL.Renderer = Renderer;\ngraphicGL.Node = Node3D;\ngraphicGL.Mesh = Mesh;\ngraphicGL.Shader = Shader;\ngraphicGL.Material = Material;\ngraphicGL.Texture = Texture;\ngraphicGL.Texture2D = Texture2D; // Geometries\n\ngraphicGL.Geometry = Geometry;\ngraphicGL.SphereGeometry = SphereGeometry;\ngraphicGL.PlaneGeometry = PlaneGeometry;\ngraphicGL.CubeGeometry = CubeGeometry; // Lights\n\ngraphicGL.AmbientLight = AmbientLight;\ngraphicGL.DirectionalLight = DirectionalLight;\ngraphicGL.PointLight = PointLight;\ngraphicGL.SpotLight = SpotLight; // Cameras\n\ngraphicGL.PerspectiveCamera = PerspectiveCamera;\ngraphicGL.OrthographicCamera = OrthographicCamera; // Math\n\ngraphicGL.Vector2 = Vector2;\ngraphicGL.Vector3 = Vector3;\ngraphicGL.Vector4 = Vector4;\ngraphicGL.Quaternion = Quaternion;\ngraphicGL.Matrix2 = Matrix2;\ngraphicGL.Matrix2d = Matrix2d;\ngraphicGL.Matrix3 = Matrix3;\ngraphicGL.Matrix4 = Matrix4;\ngraphicGL.Plane = Plane;\ngraphicGL.Ray = Ray;\ngraphicGL.BoundingBox = BoundingBox;\ngraphicGL.Frustum = Frustum; // Texture utilities\n\nvar blankImage = null;\n\nfunction getBlankImage() {\n  if (blankImage !== null) {\n    return blankImage;\n  }\n\n  blankImage = textureUtil.createBlank('rgba(255,255,255,0)').image;\n  return blankImage;\n}\n\nfunction nearestPowerOfTwo(val) {\n  return Math.pow(2, Math.round(Math.log(val) / Math.LN2));\n}\n\nfunction convertTextureToPowerOfTwo(texture) {\n  if ((texture.wrapS === Texture.REPEAT || texture.wrapT === Texture.REPEAT) && texture.image) {\n    // var canvas = document.createElement('canvas');\n    var width = nearestPowerOfTwo(texture.width);\n    var height = nearestPowerOfTwo(texture.height);\n\n    if (width !== texture.width || height !== texture.height) {\n      var canvas = document.createElement('canvas');\n      canvas.width = width;\n      canvas.height = height;\n      var ctx = canvas.getContext('2d');\n      ctx.drawImage(texture.image, 0, 0, width, height);\n      texture.image = canvas;\n    }\n  }\n}\n/**\n * @param {string|HTMLImageElement|HTMLCanvasElement} imgValue\n * @param {module:echarts/ExtensionAPI} api\n * @param {Object} [textureOpts]\n * @param {Function} cb\n */\n// TODO Promise, test\n\n\ngraphicGL.loadTexture = function (imgValue, api, textureOpts, cb) {\n  if (typeof textureOpts === 'function') {\n    cb = textureOpts;\n    textureOpts = {};\n  }\n\n  textureOpts = textureOpts || {};\n  var keys = Object.keys(textureOpts).sort();\n  var prefix = '';\n\n  for (var i = 0; i < keys.length; i++) {\n    prefix += keys[i] + '_' + textureOpts[keys[i]] + '_';\n  }\n\n  var textureCache = api.__textureCache = api.__textureCache || new LRUCache(20);\n\n  if (isECharts(imgValue)) {\n    var id = imgValue.__textureid__;\n    var textureObj = textureCache.get(prefix + id);\n\n    if (!textureObj) {\n      var surface = new EChartsSurface(imgValue);\n\n      surface.onupdate = function () {\n        api.getZr().refresh();\n      };\n\n      textureObj = {\n        texture: surface.getTexture()\n      };\n\n      for (var i = 0; i < keys.length; i++) {\n        textureObj.texture[keys[i]] = textureOpts[keys[i]];\n      }\n\n      id = imgValue.__textureid__ || '__ecgl_ec__' + textureObj.texture.__uid__;\n      imgValue.__textureid__ = id;\n      textureCache.put(prefix + id, textureObj);\n      cb && cb(textureObj.texture);\n    } else {\n      textureObj.texture.surface.setECharts(imgValue);\n      cb && cb(textureObj.texture);\n    }\n\n    return textureObj.texture;\n  } else if (isValueImage(imgValue)) {\n    var id = imgValue.__textureid__;\n    var textureObj = textureCache.get(prefix + id);\n\n    if (!textureObj) {\n      textureObj = {\n        texture: new graphicGL.Texture2D({\n          image: imgValue\n        })\n      };\n\n      for (var i = 0; i < keys.length; i++) {\n        textureObj.texture[keys[i]] = textureOpts[keys[i]];\n      }\n\n      id = imgValue.__textureid__ || '__ecgl_image__' + textureObj.texture.__uid__;\n      imgValue.__textureid__ = id;\n      textureCache.put(prefix + id, textureObj);\n      convertTextureToPowerOfTwo(textureObj.texture); // TODO Next tick?\n\n      cb && cb(textureObj.texture);\n    }\n\n    return textureObj.texture;\n  } else {\n    var textureObj = textureCache.get(prefix + imgValue);\n\n    if (textureObj) {\n      if (textureObj.callbacks) {\n        // Add to pending callbacks\n        textureObj.callbacks.push(cb);\n      } else {\n        // TODO Next tick?\n        cb && cb(textureObj.texture);\n      }\n    } else {\n      // Maybe base64\n      if (imgValue.match(/.hdr$|^data:application\\/octet-stream/)) {\n        textureObj = {\n          callbacks: [cb]\n        };\n        var texture = textureUtil.loadTexture(imgValue, {\n          exposure: textureOpts.exposure,\n          fileType: 'hdr'\n        }, function () {\n          texture.dirty();\n          textureObj.callbacks.forEach(function (cb) {\n            cb && cb(texture);\n          });\n          textureObj.callbacks = null;\n        });\n        textureObj.texture = texture;\n        textureCache.put(prefix + imgValue, textureObj);\n      } else {\n        var texture = new graphicGL.Texture2D({\n          image: new Image()\n        });\n\n        for (var i = 0; i < keys.length; i++) {\n          texture[keys[i]] = textureOpts[keys[i]];\n        }\n\n        textureObj = {\n          texture: texture,\n          callbacks: [cb]\n        };\n        var originalImage = texture.image;\n\n        originalImage.onload = function () {\n          texture.image = originalImage;\n          convertTextureToPowerOfTwo(texture);\n          texture.dirty();\n          textureObj.callbacks.forEach(function (cb) {\n            cb && cb(texture);\n          });\n          textureObj.callbacks = null;\n        };\n\n        originalImage.crossOrigin = 'Anonymous';\n        originalImage.src = imgValue; // Use blank image as place holder.\n\n        texture.image = getBlankImage();\n        textureCache.put(prefix + imgValue, textureObj);\n      }\n    }\n\n    return textureObj.texture;\n  }\n};\n/**\n * Create ambientCubemap and ambientSH light. respectively to have specular and diffuse light\n * @return {Object} { specular, diffuse }\n */\n\n\ngraphicGL.createAmbientCubemap = function (opt, renderer, api, cb) {\n  opt = opt || {};\n  var textureUrl = opt.texture;\n  var exposure = retrieve.firstNotNull(opt.exposure, 1.0);\n  var ambientCubemap = new AmbientCubemapLight({\n    intensity: retrieve.firstNotNull(opt.specularIntensity, 1.0)\n  });\n  var ambientSH = new AmbientSHLight({\n    intensity: retrieve.firstNotNull(opt.diffuseIntensity, 1.0),\n    coefficients: [0.844, 0.712, 0.691, -0.037, 0.083, 0.167, 0.343, 0.288, 0.299, -0.041, -0.021, -0.009, -0.003, -0.041, -0.064, -0.011, -0.007, -0.004, -0.031, 0.034, 0.081, -0.060, -0.049, -0.060, 0.046, 0.056, 0.050]\n  });\n  ambientCubemap.cubemap = graphicGL.loadTexture(textureUrl, api, {\n    exposure: exposure\n  }, function () {\n    // TODO Performance when multiple view\n    ambientCubemap.cubemap.flipY = false;\n\n    if (process.env.NODE_ENV !== 'production') {\n      var time = Date.now();\n    }\n\n    ambientCubemap.prefilter(renderer, 32);\n\n    if (process.env.NODE_ENV !== 'production') {\n      var dTime = Date.now() - time;\n      console.log('Prefilter environment map: ' + dTime + 'ms');\n    }\n\n    ambientSH.coefficients = shUtil.projectEnvironmentMap(renderer, ambientCubemap.cubemap, {\n      lod: 1\n    });\n    cb && cb(); // TODO Refresh ?\n  });\n  return {\n    specular: ambientCubemap,\n    diffuse: ambientSH\n  };\n};\n/**\n * Create a blank texture for placeholder\n */\n\n\ngraphicGL.createBlankTexture = textureUtil.createBlank;\n/**\n * If value is image\n * @param {*}\n * @return {boolean}\n */\n\ngraphicGL.isImage = isValueImage;\n\ngraphicGL.additiveBlend = function (gl) {\n  gl.blendEquation(gl.FUNC_ADD);\n  gl.blendFunc(gl.SRC_ALPHA, gl.ONE);\n};\n/**\n * @param {string|Array.<number>} colorStr\n * @param {Array.<number>} [rgba]\n * @return {Array.<number>} rgba\n */\n\n\ngraphicGL.parseColor = function (colorStr, rgba) {\n  if (colorStr instanceof Array) {\n    if (!rgba) {\n      rgba = [];\n    } // Color has been parsed.\n\n\n    rgba[0] = colorStr[0];\n    rgba[1] = colorStr[1];\n    rgba[2] = colorStr[2];\n\n    if (colorStr.length > 3) {\n      rgba[3] = colorStr[3];\n    } else {\n      rgba[3] = 1;\n    }\n\n    return rgba;\n  }\n\n  rgba = echarts.color.parse(colorStr || '#000', rgba) || [0, 0, 0, 0];\n  rgba[0] /= 255;\n  rgba[1] /= 255;\n  rgba[2] /= 255;\n  return rgba;\n};\n/**\n * Convert alpha beta rotation to direction.\n * @param {number} alpha\n * @param {number} beta\n * @return {Array.<number>}\n */\n\n\ngraphicGL.directionFromAlphaBeta = function (alpha, beta) {\n  var theta = alpha / 180 * Math.PI + Math.PI / 2;\n  var phi = -beta / 180 * Math.PI + Math.PI / 2;\n  var dir = [];\n  var r = Math.sin(theta);\n  dir[0] = r * Math.cos(phi);\n  dir[1] = -Math.cos(theta);\n  dir[2] = r * Math.sin(phi);\n  return dir;\n};\n/**\n * Get shadow resolution from shadowQuality configuration\n */\n\n\ngraphicGL.getShadowResolution = function (shadowQuality) {\n  var shadowResolution = 1024;\n\n  switch (shadowQuality) {\n    case 'low':\n      shadowResolution = 512;\n      break;\n\n    case 'medium':\n      break;\n\n    case 'high':\n      shadowResolution = 2048;\n      break;\n\n    case 'ultra':\n      shadowResolution = 4096;\n      break;\n  }\n\n  return shadowResolution;\n};\n/**\n * Shading utilities\n */\n\n\ngraphicGL.COMMON_SHADERS = ['lambert', 'color', 'realistic', 'hatching', 'shadow'];\n/**\n * Create shader including vertex and fragment\n * @param {string} prefix.\n */\n\ngraphicGL.createShader = function (prefix) {\n  if (prefix === 'ecgl.shadow') {\n    prefix = 'ecgl.displayShadow';\n  }\n\n  var vertexShaderStr = Shader.source(prefix + '.vertex');\n  var fragmentShaderStr = Shader.source(prefix + '.fragment');\n\n  if (!vertexShaderStr) {\n    console.error('Vertex shader of \\'%s\\' not exits', prefix);\n  }\n\n  if (!fragmentShaderStr) {\n    console.error('Fragment shader of \\'%s\\' not exits', prefix);\n  }\n\n  var shader = new Shader(vertexShaderStr, fragmentShaderStr);\n  shader.name = prefix;\n  return shader;\n};\n\ngraphicGL.createMaterial = function (prefix, defines) {\n  if (!(defines instanceof Array)) {\n    defines = [defines];\n  }\n\n  var shader = graphicGL.createShader(prefix);\n  var material = new Material({\n    shader: shader\n  });\n  defines.forEach(function (defineName) {\n    if (typeof defineName === 'string') {\n      material.define(defineName);\n    }\n  });\n  return material;\n};\n/**\n * Set material from model.\n * @param {clay.Material} material\n * @param {module:echarts/model/Model} model\n * @param {module:echarts/ExtensionAPI} api\n */\n\n\ngraphicGL.setMaterialFromModel = function (shading, material, model, api) {\n  material.autoUpdateTextureStatus = false;\n  var materialModel = model.getModel(shading + 'Material');\n  var detailTexture = materialModel.get('detailTexture');\n  var uvRepeat = retrieve.firstNotNull(materialModel.get('textureTiling'), 1.0);\n  var uvOffset = retrieve.firstNotNull(materialModel.get('textureOffset'), 0.0);\n\n  if (typeof uvRepeat === 'number') {\n    uvRepeat = [uvRepeat, uvRepeat];\n  }\n\n  if (typeof uvOffset === 'number') {\n    uvOffset = [uvOffset, uvOffset];\n  }\n\n  var repeatParam = uvRepeat[0] > 1 || uvRepeat[1] > 1 ? graphicGL.Texture.REPEAT : graphicGL.Texture.CLAMP_TO_EDGE;\n  var textureOpt = {\n    anisotropic: 8,\n    wrapS: repeatParam,\n    wrapT: repeatParam\n  };\n\n  if (shading === 'realistic') {\n    var roughness = materialModel.get('roughness');\n    var metalness = materialModel.get('metalness');\n\n    if (metalness != null) {\n      // Try to treat as a texture, TODO More check\n      if (isNaN(metalness)) {\n        material.setTextureImage('metalnessMap', metalness, api, textureOpt);\n        metalness = retrieve.firstNotNull(materialModel.get('metalnessAdjust'), 0.5);\n      }\n    } else {\n      // Default metalness.\n      metalness = 0;\n    }\n\n    if (roughness != null) {\n      // Try to treat as a texture, TODO More check\n      if (isNaN(roughness)) {\n        material.setTextureImage('roughnessMap', roughness, api, textureOpt);\n        roughness = retrieve.firstNotNull(materialModel.get('roughnessAdjust'), 0.5);\n      }\n    } else {\n      // Default roughness.\n      roughness = 0.5;\n    }\n\n    var normalTextureVal = materialModel.get('normalTexture');\n    material.setTextureImage('detailMap', detailTexture, api, textureOpt);\n    material.setTextureImage('normalMap', normalTextureVal, api, textureOpt);\n    material.set({\n      roughness: roughness,\n      metalness: metalness,\n      detailUvRepeat: uvRepeat,\n      detailUvOffset: uvOffset\n    }); // var normalTexture = material.get('normalMap');\n    // if (normalTexture) {\n    // PENDING\n    // normalTexture.format = Texture.SRGB;\n    // }\n  } else if (shading === 'lambert') {\n    material.setTextureImage('detailMap', detailTexture, api, textureOpt);\n    material.set({\n      detailUvRepeat: uvRepeat,\n      detailUvOffset: uvOffset\n    });\n  } else if (shading === 'color') {\n    material.setTextureImage('detailMap', detailTexture, api, textureOpt);\n    material.set({\n      detailUvRepeat: uvRepeat,\n      detailUvOffset: uvOffset\n    });\n  } else if (shading === 'hatching') {\n    var tams = materialModel.get('hatchingTextures') || [];\n\n    if (tams.length < 6) {\n      if (process.env.NODE_ENV !== 'production') {\n        console.error('Invalid hatchingTextures.');\n      }\n    }\n\n    for (var i = 0; i < 6; i++) {\n      material.setTextureImage('hatch' + (i + 1), tams[i], api, {\n        anisotropic: 8,\n        wrapS: graphicGL.Texture.REPEAT,\n        wrapT: graphicGL.Texture.REPEAT\n      });\n    }\n\n    material.set({\n      detailUvRepeat: uvRepeat,\n      detailUvOffset: uvOffset\n    });\n  }\n};\n\ngraphicGL.updateVertexAnimation = function (mappingAttributes, previousMesh, currentMesh, seriesModel) {\n  var enableAnimation = seriesModel.get('animation');\n  var duration = seriesModel.get('animationDurationUpdate');\n  var easing = seriesModel.get('animationEasingUpdate');\n  var shadowDepthMaterial = currentMesh.shadowDepthMaterial;\n\n  if (enableAnimation && previousMesh && duration > 0 // Only animate when bar count are not changed\n  && previousMesh.geometry.vertexCount === currentMesh.geometry.vertexCount) {\n    currentMesh.material.define('vertex', 'VERTEX_ANIMATION');\n    currentMesh.ignorePreZ = true;\n\n    if (shadowDepthMaterial) {\n      shadowDepthMaterial.define('vertex', 'VERTEX_ANIMATION');\n    }\n\n    for (var i = 0; i < mappingAttributes.length; i++) {\n      currentMesh.geometry.attributes[mappingAttributes[i][0]].value = previousMesh.geometry.attributes[mappingAttributes[i][1]].value;\n    }\n\n    currentMesh.geometry.dirty();\n    currentMesh.__percent = 0;\n    currentMesh.material.set('percent', 0);\n    currentMesh.stopAnimation();\n    currentMesh.animate().when(duration, {\n      __percent: 1\n    }).during(function () {\n      currentMesh.material.set('percent', currentMesh.__percent);\n\n      if (shadowDepthMaterial) {\n        shadowDepthMaterial.set('percent', currentMesh.__percent);\n      }\n    }).done(function () {\n      currentMesh.ignorePreZ = false;\n      currentMesh.material.undefine('vertex', 'VERTEX_ANIMATION');\n\n      if (shadowDepthMaterial) {\n        shadowDepthMaterial.undefine('vertex', 'VERTEX_ANIMATION');\n      }\n    }).start(easing);\n  } else {\n    currentMesh.material.undefine('vertex', 'VERTEX_ANIMATION');\n\n    if (shadowDepthMaterial) {\n      shadowDepthMaterial.undefine('vertex', 'VERTEX_ANIMATION');\n    }\n  }\n};\n\nexport default graphicGL;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}