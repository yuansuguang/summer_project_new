{"ast":null,"code":"import Texture from './Texture';\nimport glenum from './core/glenum';\nimport vendor from './core/vendor';\nimport mathUtil from './math/util';\nvar isPowerOfTwo = mathUtil.isPowerOfTwo;\nfunction nearestPowerOfTwo(val) {\n  return Math.pow(2, Math.round(Math.log(val) / Math.LN2));\n}\nfunction convertTextureToPowerOfTwo(texture, canvas) {\n  // var canvas = document.createElement('canvas');\n  var width = nearestPowerOfTwo(texture.width);\n  var height = nearestPowerOfTwo(texture.height);\n  canvas = canvas || document.createElement('canvas');\n  canvas.width = width;\n  canvas.height = height;\n  var ctx = canvas.getContext('2d');\n  ctx.drawImage(texture.image, 0, 0, width, height);\n  return canvas;\n}\n\n/**\n * @constructor clay.Texture2D\n * @extends clay.Texture\n *\n * @example\n *     ...\n *     var mat = new clay.Material({\n *         shader: clay.shader.library.get('clay.phong', 'diffuseMap')\n *     });\n *     var diffuseMap = new clay.Texture2D();\n *     diffuseMap.load('assets/textures/diffuse.jpg');\n *     mat.set('diffuseMap', diffuseMap);\n *     ...\n *     diffuseMap.success(function () {\n *         // Wait for the diffuse texture loaded\n *         animation.on('frame', function (frameTime) {\n *             renderer.render(scene, camera);\n *         });\n *     });\n */\nvar Texture2D = Texture.extend(function () {\n  return /** @lends clay.Texture2D# */{\n    /**\n     * @type {?HTMLImageElement|HTMLCanvasElemnet}\n     */\n    // TODO mark dirty when assigned.\n    image: null,\n    /**\n     * Pixels data. Will be ignored if image is set.\n     * @type {?Uint8Array|Float32Array}\n     */\n    pixels: null,\n    /**\n     * @type {Array.<Object>}\n     * @example\n     *     [{\n     *         image: mipmap0,\n     *         pixels: null\n     *     }, {\n     *         image: mipmap1,\n     *         pixels: null\n     *     }, ....]\n     */\n    mipmaps: [],\n    /**\n     * If convert texture to power-of-two\n     * @type {boolean}\n     */\n    convertToPOT: false\n  };\n}, {\n  textureType: 'texture2D',\n  update: function (renderer) {\n    var _gl = renderer.gl;\n    _gl.bindTexture(_gl.TEXTURE_2D, this._cache.get('webgl_texture'));\n    this.updateCommon(renderer);\n    var glFormat = this.format;\n    var glType = this.type;\n\n    // Convert to pot is only available when using image/canvas/video element.\n    var convertToPOT = !!(this.convertToPOT && !this.mipmaps.length && this.image && (this.wrapS === Texture.REPEAT || this.wrapT === Texture.REPEAT) && this.NPOT);\n    _gl.texParameteri(_gl.TEXTURE_2D, _gl.TEXTURE_WRAP_S, convertToPOT ? this.wrapS : this.getAvailableWrapS());\n    _gl.texParameteri(_gl.TEXTURE_2D, _gl.TEXTURE_WRAP_T, convertToPOT ? this.wrapT : this.getAvailableWrapT());\n    _gl.texParameteri(_gl.TEXTURE_2D, _gl.TEXTURE_MAG_FILTER, convertToPOT ? this.magFilter : this.getAvailableMagFilter());\n    _gl.texParameteri(_gl.TEXTURE_2D, _gl.TEXTURE_MIN_FILTER, convertToPOT ? this.minFilter : this.getAvailableMinFilter());\n    var anisotropicExt = renderer.getGLExtension('EXT_texture_filter_anisotropic');\n    if (anisotropicExt && this.anisotropic > 1) {\n      _gl.texParameterf(_gl.TEXTURE_2D, anisotropicExt.TEXTURE_MAX_ANISOTROPY_EXT, this.anisotropic);\n    }\n\n    // Fallback to float type if browser don't have half float extension\n    if (glType === 36193) {\n      var halfFloatExt = renderer.getGLExtension('OES_texture_half_float');\n      if (!halfFloatExt) {\n        glType = glenum.FLOAT;\n      }\n    }\n    if (this.mipmaps.length) {\n      var width = this.width;\n      var height = this.height;\n      for (var i = 0; i < this.mipmaps.length; i++) {\n        var mipmap = this.mipmaps[i];\n        this._updateTextureData(_gl, mipmap, i, width, height, glFormat, glType, false);\n        width /= 2;\n        height /= 2;\n      }\n    } else {\n      this._updateTextureData(_gl, this, 0, this.width, this.height, glFormat, glType, convertToPOT);\n      if (this.useMipmap && (!this.NPOT || convertToPOT)) {\n        _gl.generateMipmap(_gl.TEXTURE_2D);\n      }\n    }\n    _gl.bindTexture(_gl.TEXTURE_2D, null);\n  },\n  _updateTextureData: function (_gl, data, level, width, height, glFormat, glType, convertToPOT) {\n    if (data.image) {\n      var imgData = data.image;\n      if (convertToPOT) {\n        this._potCanvas = convertTextureToPowerOfTwo(this, this._potCanvas);\n        imgData = this._potCanvas;\n      }\n      _gl.texImage2D(_gl.TEXTURE_2D, level, glFormat, glFormat, glType, imgData);\n    } else {\n      // Can be used as a blank texture when writing render to texture(RTT)\n      if (glFormat <= Texture.COMPRESSED_RGBA_S3TC_DXT5_EXT && glFormat >= Texture.COMPRESSED_RGB_S3TC_DXT1_EXT) {\n        _gl.compressedTexImage2D(_gl.TEXTURE_2D, level, glFormat, width, height, 0, data.pixels);\n      } else {\n        // Is a render target if pixels is null\n        _gl.texImage2D(_gl.TEXTURE_2D, level, glFormat, width, height, 0, glFormat, glType, data.pixels);\n      }\n    }\n  },\n  /**\n   * @param  {clay.Renderer} renderer\n   * @memberOf clay.Texture2D.prototype\n   */\n  generateMipmap: function (renderer) {\n    var _gl = renderer.gl;\n    if (this.useMipmap && !this.NPOT) {\n      _gl.bindTexture(_gl.TEXTURE_2D, this._cache.get('webgl_texture'));\n      _gl.generateMipmap(_gl.TEXTURE_2D);\n    }\n  },\n  isPowerOfTwo: function () {\n    return isPowerOfTwo(this.width) && isPowerOfTwo(this.height);\n  },\n  isRenderable: function () {\n    if (this.image) {\n      return this.image.width > 0 && this.image.height > 0;\n    } else {\n      return !!(this.width && this.height);\n    }\n  },\n  bind: function (renderer) {\n    renderer.gl.bindTexture(renderer.gl.TEXTURE_2D, this.getWebGLTexture(renderer));\n  },\n  unbind: function (renderer) {\n    renderer.gl.bindTexture(renderer.gl.TEXTURE_2D, null);\n  },\n  load: function (src, crossOrigin) {\n    var image = vendor.createImage();\n    if (crossOrigin) {\n      image.crossOrigin = crossOrigin;\n    }\n    var self = this;\n    image.onload = function () {\n      self.dirty();\n      self.trigger('success', self);\n    };\n    image.onerror = function () {\n      self.trigger('error', self);\n    };\n    image.src = src;\n    this.image = image;\n    return this;\n  }\n});\nObject.defineProperty(Texture2D.prototype, 'width', {\n  get: function () {\n    if (this.image) {\n      return this.image.width;\n    }\n    return this._width;\n  },\n  set: function (value) {\n    if (this.image) {\n      console.warn('Texture from image can\\'t set width');\n    } else {\n      if (this._width !== value) {\n        this.dirty();\n      }\n      this._width = value;\n    }\n  }\n});\nObject.defineProperty(Texture2D.prototype, 'height', {\n  get: function () {\n    if (this.image) {\n      return this.image.height;\n    }\n    return this._height;\n  },\n  set: function (value) {\n    if (this.image) {\n      console.warn('Texture from image can\\'t set height');\n    } else {\n      if (this._height !== value) {\n        this.dirty();\n      }\n      this._height = value;\n    }\n  }\n});\nexport default Texture2D;","map":{"version":3,"names":["Texture","glenum","vendor","mathUtil","isPowerOfTwo","nearestPowerOfTwo","val","Math","pow","round","log","LN2","convertTextureToPowerOfTwo","texture","canvas","width","height","document","createElement","ctx","getContext","drawImage","image","Texture2D","extend","pixels","mipmaps","convertToPOT","textureType","update","renderer","_gl","gl","bindTexture","TEXTURE_2D","_cache","get","updateCommon","glFormat","format","glType","type","length","wrapS","REPEAT","wrapT","NPOT","texParameteri","TEXTURE_WRAP_S","getAvailableWrapS","TEXTURE_WRAP_T","getAvailableWrapT","TEXTURE_MAG_FILTER","magFilter","getAvailableMagFilter","TEXTURE_MIN_FILTER","minFilter","getAvailableMinFilter","anisotropicExt","getGLExtension","anisotropic","texParameterf","TEXTURE_MAX_ANISOTROPY_EXT","halfFloatExt","FLOAT","i","mipmap","_updateTextureData","useMipmap","generateMipmap","data","level","imgData","_potCanvas","texImage2D","COMPRESSED_RGBA_S3TC_DXT5_EXT","COMPRESSED_RGB_S3TC_DXT1_EXT","compressedTexImage2D","isRenderable","bind","getWebGLTexture","unbind","load","src","crossOrigin","createImage","self","onload","dirty","trigger","onerror","Object","defineProperty","prototype","_width","set","value","console","warn","_height"],"sources":["E:/mytest/node_modules/claygl/src/Texture2D.js"],"sourcesContent":["import Texture from './Texture';\nimport glenum from './core/glenum';\nimport vendor from './core/vendor';\nimport mathUtil from './math/util';\nvar isPowerOfTwo = mathUtil.isPowerOfTwo;\n\nfunction nearestPowerOfTwo(val) {\n    return Math.pow(2, Math.round(Math.log(val) / Math.LN2));\n}\nfunction convertTextureToPowerOfTwo(texture, canvas) {\n    // var canvas = document.createElement('canvas');\n    var width = nearestPowerOfTwo(texture.width);\n    var height = nearestPowerOfTwo(texture.height);\n    canvas = canvas || document.createElement('canvas');\n    canvas.width = width;\n    canvas.height = height;\n    var ctx = canvas.getContext('2d');\n    ctx.drawImage(texture.image, 0, 0, width, height);\n\n    return canvas;\n}\n\n/**\n * @constructor clay.Texture2D\n * @extends clay.Texture\n *\n * @example\n *     ...\n *     var mat = new clay.Material({\n *         shader: clay.shader.library.get('clay.phong', 'diffuseMap')\n *     });\n *     var diffuseMap = new clay.Texture2D();\n *     diffuseMap.load('assets/textures/diffuse.jpg');\n *     mat.set('diffuseMap', diffuseMap);\n *     ...\n *     diffuseMap.success(function () {\n *         // Wait for the diffuse texture loaded\n *         animation.on('frame', function (frameTime) {\n *             renderer.render(scene, camera);\n *         });\n *     });\n */\nvar Texture2D = Texture.extend(function () {\n    return /** @lends clay.Texture2D# */ {\n        /**\n         * @type {?HTMLImageElement|HTMLCanvasElemnet}\n         */\n        // TODO mark dirty when assigned.\n        image: null,\n        /**\n         * Pixels data. Will be ignored if image is set.\n         * @type {?Uint8Array|Float32Array}\n         */\n        pixels: null,\n        /**\n         * @type {Array.<Object>}\n         * @example\n         *     [{\n         *         image: mipmap0,\n         *         pixels: null\n         *     }, {\n         *         image: mipmap1,\n         *         pixels: null\n         *     }, ....]\n         */\n        mipmaps: [],\n\n        /**\n         * If convert texture to power-of-two\n         * @type {boolean}\n         */\n        convertToPOT: false\n    };\n}, {\n\n    textureType: 'texture2D',\n\n    update: function (renderer) {\n\n        var _gl = renderer.gl;\n        _gl.bindTexture(_gl.TEXTURE_2D, this._cache.get('webgl_texture'));\n\n        this.updateCommon(renderer);\n\n        var glFormat = this.format;\n        var glType = this.type;\n\n        // Convert to pot is only available when using image/canvas/video element.\n        var convertToPOT = !!(this.convertToPOT\n            && !this.mipmaps.length && this.image\n            && (this.wrapS === Texture.REPEAT || this.wrapT === Texture.REPEAT)\n            && this.NPOT\n        );\n\n        _gl.texParameteri(_gl.TEXTURE_2D, _gl.TEXTURE_WRAP_S, convertToPOT ? this.wrapS : this.getAvailableWrapS());\n        _gl.texParameteri(_gl.TEXTURE_2D, _gl.TEXTURE_WRAP_T, convertToPOT ? this.wrapT : this.getAvailableWrapT());\n\n        _gl.texParameteri(_gl.TEXTURE_2D, _gl.TEXTURE_MAG_FILTER, convertToPOT ? this.magFilter : this.getAvailableMagFilter());\n        _gl.texParameteri(_gl.TEXTURE_2D, _gl.TEXTURE_MIN_FILTER, convertToPOT ? this.minFilter : this.getAvailableMinFilter());\n\n        var anisotropicExt = renderer.getGLExtension('EXT_texture_filter_anisotropic');\n        if (anisotropicExt && this.anisotropic > 1) {\n            _gl.texParameterf(_gl.TEXTURE_2D, anisotropicExt.TEXTURE_MAX_ANISOTROPY_EXT, this.anisotropic);\n        }\n\n        // Fallback to float type if browser don't have half float extension\n        if (glType === 36193) {\n            var halfFloatExt = renderer.getGLExtension('OES_texture_half_float');\n            if (!halfFloatExt) {\n                glType = glenum.FLOAT;\n            }\n        }\n\n        if (this.mipmaps.length) {\n            var width = this.width;\n            var height = this.height;\n            for (var i = 0; i < this.mipmaps.length; i++) {\n                var mipmap = this.mipmaps[i];\n                this._updateTextureData(_gl, mipmap, i, width, height, glFormat, glType, false);\n                width /= 2;\n                height /= 2;\n            }\n        }\n        else {\n            this._updateTextureData(_gl, this, 0, this.width, this.height, glFormat, glType, convertToPOT);\n\n            if (this.useMipmap && (!this.NPOT || convertToPOT)) {\n                _gl.generateMipmap(_gl.TEXTURE_2D);\n            }\n        }\n\n        _gl.bindTexture(_gl.TEXTURE_2D, null);\n    },\n\n    _updateTextureData: function (_gl, data, level, width, height, glFormat, glType, convertToPOT) {\n        if (data.image) {\n            var imgData = data.image;\n            if (convertToPOT) {\n                this._potCanvas = convertTextureToPowerOfTwo(this, this._potCanvas);\n                imgData = this._potCanvas;\n            }\n            _gl.texImage2D(_gl.TEXTURE_2D, level, glFormat, glFormat, glType, imgData);\n        }\n        else {\n            // Can be used as a blank texture when writing render to texture(RTT)\n            if (\n                glFormat <= Texture.COMPRESSED_RGBA_S3TC_DXT5_EXT\n                && glFormat >= Texture.COMPRESSED_RGB_S3TC_DXT1_EXT\n            ) {\n                _gl.compressedTexImage2D(_gl.TEXTURE_2D, level, glFormat, width, height, 0, data.pixels);\n            }\n            else {\n                // Is a render target if pixels is null\n                _gl.texImage2D(_gl.TEXTURE_2D, level, glFormat, width, height, 0, glFormat, glType, data.pixels);\n            }\n        }\n    },\n\n    /**\n     * @param  {clay.Renderer} renderer\n     * @memberOf clay.Texture2D.prototype\n     */\n    generateMipmap: function (renderer) {\n        var _gl = renderer.gl;\n        if (this.useMipmap && !this.NPOT) {\n            _gl.bindTexture(_gl.TEXTURE_2D, this._cache.get('webgl_texture'));\n            _gl.generateMipmap(_gl.TEXTURE_2D);\n        }\n    },\n\n    isPowerOfTwo: function () {\n        return isPowerOfTwo(this.width) && isPowerOfTwo(this.height);\n    },\n\n    isRenderable: function () {\n        if (this.image) {\n            return this.image.width > 0 && this.image.height > 0;\n        }\n        else {\n            return !!(this.width && this.height);\n        }\n    },\n\n    bind: function (renderer) {\n        renderer.gl.bindTexture(renderer.gl.TEXTURE_2D, this.getWebGLTexture(renderer));\n    },\n\n    unbind: function (renderer) {\n        renderer.gl.bindTexture(renderer.gl.TEXTURE_2D, null);\n    },\n\n    load: function (src, crossOrigin) {\n        var image = vendor.createImage();\n        if (crossOrigin) {\n            image.crossOrigin = crossOrigin;\n        }\n        var self = this;\n        image.onload = function () {\n            self.dirty();\n            self.trigger('success', self);\n        };\n        image.onerror = function () {\n            self.trigger('error', self);\n        };\n\n        image.src = src;\n        this.image = image;\n\n        return this;\n    }\n});\n\nObject.defineProperty(Texture2D.prototype, 'width', {\n    get: function () {\n        if (this.image) {\n            return this.image.width;\n        }\n        return this._width;\n    },\n    set: function (value) {\n        if (this.image) {\n            console.warn('Texture from image can\\'t set width');\n        }\n        else {\n            if (this._width !== value) {\n                this.dirty();\n            }\n            this._width = value;\n        }\n    }\n});\nObject.defineProperty(Texture2D.prototype, 'height', {\n    get: function () {\n        if (this.image) {\n            return this.image.height;\n        }\n        return this._height;\n    },\n    set: function (value) {\n        if (this.image) {\n            console.warn('Texture from image can\\'t set height');\n        }\n        else {\n            if (this._height !== value) {\n                this.dirty();\n            }\n            this._height = value;\n        }\n    }\n});\n\nexport default Texture2D;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}