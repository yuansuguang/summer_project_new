{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport Texture2D from '../Texture2D';\nimport glenum from '../core/glenum';\nimport util from '../core/util';\nvar TexturePool = function () {\n  this._pool = {};\n  this._allocatedTextures = [];\n};\nTexturePool.prototype = {\n  constructor: TexturePool,\n  get: function (parameters) {\n    var key = generateKey(parameters);\n    if (!this._pool.hasOwnProperty(key)) {\n      this._pool[key] = [];\n    }\n    var list = this._pool[key];\n    if (!list.length) {\n      var texture = new Texture2D(parameters);\n      this._allocatedTextures.push(texture);\n      return texture;\n    }\n    return list.pop();\n  },\n  put: function (texture) {\n    var key = generateKey(texture);\n    if (!this._pool.hasOwnProperty(key)) {\n      this._pool[key] = [];\n    }\n    var list = this._pool[key];\n    list.push(texture);\n  },\n  clear: function (renderer) {\n    for (var i = 0; i < this._allocatedTextures.length; i++) {\n      this._allocatedTextures[i].dispose(renderer);\n    }\n    this._pool = {};\n    this._allocatedTextures = [];\n  }\n};\nvar defaultParams = {\n  width: 512,\n  height: 512,\n  type: glenum.UNSIGNED_BYTE,\n  format: glenum.RGBA,\n  wrapS: glenum.CLAMP_TO_EDGE,\n  wrapT: glenum.CLAMP_TO_EDGE,\n  minFilter: glenum.LINEAR_MIPMAP_LINEAR,\n  magFilter: glenum.LINEAR,\n  useMipmap: true,\n  anisotropic: 1,\n  flipY: true,\n  unpackAlignment: 4,\n  premultiplyAlpha: false\n};\nvar defaultParamPropList = Object.keys(defaultParams);\nfunction generateKey(parameters) {\n  util.defaultsWithPropList(parameters, defaultParams, defaultParamPropList);\n  fallBack(parameters);\n  var key = '';\n  for (var i = 0; i < defaultParamPropList.length; i++) {\n    var name = defaultParamPropList[i];\n    var chunk = parameters[name].toString();\n    key += chunk;\n  }\n  return key;\n}\nfunction fallBack(target) {\n  var IPOT = isPowerOfTwo(target.width, target.height);\n  if (target.format === glenum.DEPTH_COMPONENT) {\n    target.useMipmap = false;\n  }\n  if (!IPOT || !target.useMipmap) {\n    if (target.minFilter == glenum.NEAREST_MIPMAP_NEAREST || target.minFilter == glenum.NEAREST_MIPMAP_LINEAR) {\n      target.minFilter = glenum.NEAREST;\n    } else if (target.minFilter == glenum.LINEAR_MIPMAP_LINEAR || target.minFilter == glenum.LINEAR_MIPMAP_NEAREST) {\n      target.minFilter = glenum.LINEAR;\n    }\n  }\n  if (!IPOT) {\n    target.wrapS = glenum.CLAMP_TO_EDGE;\n    target.wrapT = glenum.CLAMP_TO_EDGE;\n  }\n}\nfunction isPowerOfTwo(width, height) {\n  return (width & width - 1) === 0 && (height & height - 1) === 0;\n}\nexport default TexturePool;","map":{"version":3,"names":["Texture2D","glenum","util","TexturePool","_pool","_allocatedTextures","prototype","constructor","get","parameters","key","generateKey","hasOwnProperty","list","length","texture","push","pop","put","clear","renderer","i","dispose","defaultParams","width","height","type","UNSIGNED_BYTE","format","RGBA","wrapS","CLAMP_TO_EDGE","wrapT","minFilter","LINEAR_MIPMAP_LINEAR","magFilter","LINEAR","useMipmap","anisotropic","flipY","unpackAlignment","premultiplyAlpha","defaultParamPropList","Object","keys","defaultsWithPropList","fallBack","name","chunk","toString","target","IPOT","isPowerOfTwo","DEPTH_COMPONENT","NEAREST_MIPMAP_NEAREST","NEAREST_MIPMAP_LINEAR","NEAREST","LINEAR_MIPMAP_NEAREST"],"sources":["E:/mytest/node_modules/claygl/src/compositor/TexturePool.js"],"sourcesContent":["import Texture2D from '../Texture2D';\nimport glenum from '../core/glenum';\nimport util from '../core/util';\n\nvar TexturePool = function () {\n\n    this._pool = {};\n\n    this._allocatedTextures = [];\n};\n\nTexturePool.prototype = {\n\n    constructor: TexturePool,\n\n    get: function (parameters) {\n        var key = generateKey(parameters);\n        if (!this._pool.hasOwnProperty(key)) {\n            this._pool[key] = [];\n        }\n        var list = this._pool[key];\n        if (!list.length) {\n            var texture = new Texture2D(parameters);\n            this._allocatedTextures.push(texture);\n            return texture;\n        }\n        return list.pop();\n    },\n\n    put: function (texture) {\n        var key = generateKey(texture);\n        if (!this._pool.hasOwnProperty(key)) {\n            this._pool[key] = [];\n        }\n        var list = this._pool[key];\n        list.push(texture);\n    },\n\n    clear: function (renderer) {\n        for (var i = 0; i < this._allocatedTextures.length; i++) {\n            this._allocatedTextures[i].dispose(renderer);\n        }\n        this._pool = {};\n        this._allocatedTextures = [];\n    }\n};\n\nvar defaultParams = {\n    width: 512,\n    height: 512,\n    type: glenum.UNSIGNED_BYTE,\n    format: glenum.RGBA,\n    wrapS: glenum.CLAMP_TO_EDGE,\n    wrapT: glenum.CLAMP_TO_EDGE,\n    minFilter: glenum.LINEAR_MIPMAP_LINEAR,\n    magFilter: glenum.LINEAR,\n    useMipmap: true,\n    anisotropic: 1,\n    flipY: true,\n    unpackAlignment: 4,\n    premultiplyAlpha: false\n};\n\nvar defaultParamPropList = Object.keys(defaultParams);\n\nfunction generateKey(parameters) {\n    util.defaultsWithPropList(parameters, defaultParams, defaultParamPropList);\n    fallBack(parameters);\n\n    var key = '';\n    for (var i = 0; i < defaultParamPropList.length; i++) {\n        var name = defaultParamPropList[i];\n        var chunk = parameters[name].toString();\n        key += chunk;\n    }\n    return key;\n}\n\nfunction fallBack(target) {\n\n    var IPOT = isPowerOfTwo(target.width, target.height);\n\n    if (target.format === glenum.DEPTH_COMPONENT) {\n        target.useMipmap = false;\n    }\n\n    if (!IPOT || !target.useMipmap) {\n        if (target.minFilter == glenum.NEAREST_MIPMAP_NEAREST ||\n            target.minFilter == glenum.NEAREST_MIPMAP_LINEAR) {\n            target.minFilter = glenum.NEAREST;\n        } else if (\n            target.minFilter == glenum.LINEAR_MIPMAP_LINEAR ||\n            target.minFilter == glenum.LINEAR_MIPMAP_NEAREST\n        ) {\n            target.minFilter = glenum.LINEAR;\n        }\n    }\n    if (!IPOT) {\n        target.wrapS = glenum.CLAMP_TO_EDGE;\n        target.wrapT = glenum.CLAMP_TO_EDGE;\n    }\n}\n\nfunction isPowerOfTwo(width, height) {\n    return (width & (width-1)) === 0 &&\n            (height & (height-1)) === 0;\n}\n\nexport default TexturePool;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}