{"ast":null,"code":"import { ref } from 'vue';\nexport default {\n  data() {\n    var ruleFormRef = ref();\n    var validateUser = (rule, value, callback) => {\n      if (value === '') {\n        callback(new Error('The username cannot be NULL'));\n      } else {\n        callback();\n      }\n    };\n    var validatePass = (rule, value, callback) => {\n      if (value === '') {\n        callback(new Error('Please input the password'));\n      } else {\n        if (this.ruleForm.checkPass !== '') {\n          if (!ruleFormRef.value) return;\n          ruleFormRef.value.validateField('checkPass');\n        }\n        callback();\n      }\n    };\n    var validatePass2 = (rule, value, callback) => {\n      if (value === '') {\n        callback(new Error('Please input the password again'));\n      } else if (value !== this.ruleForm.pass) {\n        callback(new Error(\"Two inputs don't match!\"));\n      } else {\n        callback();\n      }\n    };\n    var validatePhone = (rule, value, callback) => {\n      if (!value) {\n        return callback(new Error('Please input the phone number'));\n      }\n      setTimeout(() => {\n        if (!Number.isInteger(value)) {\n          callback(new Error('Please input digits'));\n        } else {\n          if (value < 10000000000) {\n            callback(new Error('Phone number must be 1XXXXXXXXXX'));\n          } else if (value >= 20000000000) {\n            callback(new Error('Phone number must be 1XXXXXXXXXX'));\n          } else {\n            callback();\n          }\n        }\n      }, 1000);\n    };\n\n    // var rules = reactive({\n    //   user: [{ validator: validateUser, trigger: 'blur' }],\n    //   pass: [{ validator: validatePass, trigger: 'blur' }],\n    //   checkPass: [{ validator: validatePass2, trigger: 'blur' }],\n    //   phone: [{ validator: validatePhone, trigger: 'blur' }],\n    // })\n\n    var submitForm = formEl => {\n      if (!formEl) return;\n      formEl.validate(valid => {\n        if (valid) {\n          console.log('submit!');\n        } else {\n          console.log('error submit!');\n        }\n      });\n    };\n    var resetForm = formEl => {\n      if (!formEl) return;\n      formEl.resetFields();\n    };\n    return {\n      ruleForm: {\n        user: '',\n        pass: '',\n        checkPass: '',\n        phone: ''\n      },\n      rules: {\n        user: [{\n          validator: validateUser,\n          trigger: 'blur'\n        }],\n        pass: [{\n          validator: validatePass,\n          trigger: 'blur'\n        }],\n        checkPass: [{\n          validator: validatePass2,\n          trigger: 'blur'\n        }],\n        phone: [{\n          validator: validatePhone,\n          trigger: 'blur'\n        }]\n      }\n    };\n\n    // var rules = reactive({\n    //   user: [{ validator: validateUser, trigger: 'blur' }],\n    //   pass: [{ validator: validatePass, trigger: 'blur' }],\n    //   checkPass: [{ validator: validatePass2, trigger: 'blur' }],\n    //   phone: [{ validator: validatePhone, trigger: 'blur' }],\n    // })\n\n    // var submitForm = (formEl) => {\n    //   if (!formEl) return\n    //   formEl.validate((valid) => {\n    //     if (valid) {\n    //       console.log('submit!')\n    //     } else {\n    //       console.log('error submit!')\n    //     }\n    //   })\n    // }\n\n    // var resetForm = (formEl) => {\n    //   if (!formEl) return\n    //   formEl.resetFields()\n    // }\n  }\n};","map":{"version":3,"names":["ref","data","ruleFormRef","validateUser","rule","value","callback","Error","validatePass","ruleForm","checkPass","validateField","validatePass2","pass","validatePhone","setTimeout","Number","isInteger","submitForm","formEl","validate","valid","console","log","resetForm","resetFields","user","phone","rules","validator","trigger"],"sources":["E:\\mytest\\src\\views\\accountpane\\registerPane.vue"],"sourcesContent":["<template>\r\n  <div class=\"register\"\r\n    style=\" display: flex; justify-content: center; align-items: center;  height: 100vh; background-color:azure;\">\r\n    <div class=\"mainReg\" style=\"width: 600px; max-height: 2000px; border-radius: 10px; background-color: white\" :style=\"{\r\n      boxShadow: `var(--el-box-shadow-dark)`\r\n    }\">\r\n      <el-container>\r\n        <el-header>\r\n          <h2>Register</h2>\r\n        </el-header>\r\n        <el-main style=\"display: flex; justify-content: center;\">\r\n          <el-form ref=\"ruleFormRef\" style=\"max-width: 1000px \" :model=\"ruleForm\" status-icon :rules=\"rules\"\r\n            size=\"default\" label-width=\"auto\" class=\"registerForm\">\r\n            <el-form-item label=\"Username\" prop=\"user\">\r\n              <el-input v-model=\"ruleForm.user\" type=\"username\" autocomplete=\"off\" />\r\n            </el-form-item>\r\n            <el-form-item label=\"Password\" prop=\"pass\">\r\n              <el-input v-model=\"ruleForm.pass\" type=\"password\" autocomplete=\"off\" />\r\n            </el-form-item>\r\n            <el-form-item label=\"Confirm\" prop=\"checkPass\">\r\n              <el-input v-model=\"ruleForm.checkPass\" type=\"password\" autocomplete=\"off\" />\r\n            </el-form-item>\r\n            <el-form-item label=\"邮箱\" prop=\"phone\">\r\n              <el-input v-model.number=\"ruleForm.phone\" type=\"phone\" autocomplete=\"off\" />\r\n              <!-- v-model.number=\"ruleForm.phone\" -->\r\n            </el-form-item>\r\n            <el-form-item>\r\n              <el-button type=\"primary\" @click=\"submitForm(ruleFormRef)\">\r\n                Submit\r\n              </el-button>\r\n              <el-button @click=\"resetForm(ruleFormRef)\">Reset</el-button>\r\n            </el-form-item>\r\n          </el-form>\r\n        </el-main>\r\n\r\n      </el-container>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { ref } from 'vue'\r\n\r\nexport default {\r\n  data() {\r\n    var ruleFormRef = ref()\r\n\r\n    var validateUser = (rule, value, callback) => {\r\n      if (value === '') {\r\n        callback(new Error('The username cannot be NULL'))\r\n      } else {\r\n        callback()\r\n      }\r\n    }\r\n    var validatePass = (rule, value, callback) => {\r\n      if (value === '') {\r\n        callback(new Error('Please input the password'))\r\n      } else {\r\n        if (this.ruleForm.checkPass !== '') {\r\n          if (!ruleFormRef.value) return\r\n          ruleFormRef.value.validateField('checkPass')\r\n        }\r\n        callback()\r\n      }\r\n    }\r\n\r\n    var validatePass2 = (rule, value, callback) => {\r\n      if (value === '') {\r\n        callback(new Error('Please input the password again'))\r\n      } else if (value !== this.ruleForm.pass) {\r\n        callback(new Error(\"Two inputs don't match!\"))\r\n      } else {\r\n        callback()\r\n      }\r\n    }\r\n\r\n    var validatePhone = (rule, value, callback) => {\r\n      if (!value) {\r\n        return callback(new Error('Please input the phone number'))\r\n      }\r\n      setTimeout(() => {\r\n        if (!Number.isInteger(value)) {\r\n          callback(new Error('Please input digits'))\r\n        } else {\r\n          if (value < 10000000000) {\r\n            callback(new Error('Phone number must be 1XXXXXXXXXX'))\r\n          } else if (value >= 20000000000) {\r\n            callback(new Error('Phone number must be 1XXXXXXXXXX'))\r\n          }\r\n          else {\r\n            callback()\r\n          }\r\n        }\r\n      }, 1000)\r\n    }\r\n\r\n    // var rules = reactive({\r\n    //   user: [{ validator: validateUser, trigger: 'blur' }],\r\n    //   pass: [{ validator: validatePass, trigger: 'blur' }],\r\n    //   checkPass: [{ validator: validatePass2, trigger: 'blur' }],\r\n    //   phone: [{ validator: validatePhone, trigger: 'blur' }],\r\n    // })\r\n\r\n    var submitForm = (formEl) => {\r\n      if (!formEl) return\r\n      formEl.validate((valid) => {\r\n        if (valid) {\r\n          console.log('submit!')\r\n        } else {\r\n          console.log('error submit!')\r\n        }\r\n      })\r\n    }\r\n\r\n    var resetForm = (formEl) => {\r\n      if (!formEl) return\r\n      formEl.resetFields()\r\n    }\r\n\r\n    return  {\r\n      ruleForm:{\r\n        user: '',\r\n        pass: '',\r\n        checkPass: '',\r\n        phone: ''\r\n      },\r\n      rules :{\r\n        user: [{ validator: validateUser, trigger: 'blur' }],\r\n        pass: [{ validator: validatePass, trigger: 'blur' }],\r\n        checkPass: [{ validator: validatePass2, trigger: 'blur' }],\r\n        phone: [{ validator: validatePhone, trigger: 'blur' }],\r\n      }\r\n    }\r\n\r\n    // var rules = reactive({\r\n    //   user: [{ validator: validateUser, trigger: 'blur' }],\r\n    //   pass: [{ validator: validatePass, trigger: 'blur' }],\r\n    //   checkPass: [{ validator: validatePass2, trigger: 'blur' }],\r\n    //   phone: [{ validator: validatePhone, trigger: 'blur' }],\r\n    // })\r\n\r\n    // var submitForm = (formEl) => {\r\n    //   if (!formEl) return\r\n    //   formEl.validate((valid) => {\r\n    //     if (valid) {\r\n    //       console.log('submit!')\r\n    //     } else {\r\n    //       console.log('error submit!')\r\n    //     }\r\n    //   })\r\n    // }\r\n\r\n    // var resetForm = (formEl) => {\r\n    //   if (!formEl) return\r\n    //   formEl.resetFields()\r\n    // }\r\n  }\r\n}\r\n\r\n\r\n\r\n</script>\r\n\r\n<style scoped>\r\n.register .mainReg {\r\n  border: 1px solid var(--el-border-color);\r\n}\r\n</style>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}