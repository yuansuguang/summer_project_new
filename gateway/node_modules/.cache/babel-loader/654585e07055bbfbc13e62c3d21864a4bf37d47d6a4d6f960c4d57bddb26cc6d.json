{"ast":null,"code":"// TODO ECharts GL must be imported whatever component,charts is imported.\nimport '../../echarts-gl';\nimport Grid3DModel from './Grid3DModel';\nimport Grid3DView from './Grid3DView';\nimport grid3DCreator from '../../coord/grid3DCreator';\nimport Axis3DModel from './Axis3DModel';\nimport createAxis3DModel from './createAxis3DModel';\nfunction getAxisType(axisDim, option) {\n  // Default axis with data is category axis\n  return option.type || (option.data ? 'category' : 'value');\n}\nexport function install(registers) {\n  registers.registerComponentModel(Grid3DModel);\n  registers.registerComponentView(Grid3DView);\n  registers.registerCoordinateSystem('grid3D', grid3DCreator);\n  ['x', 'y', 'z'].forEach(function (dim) {\n    createAxis3DModel(registers, dim, Axis3DModel, getAxisType, {\n      name: dim.toUpperCase()\n    });\n    const AxisView = registers.ComponentView.extend({\n      type: dim + 'Axis3D'\n    });\n    registers.registerComponentView(AxisView);\n  });\n  registers.registerAction({\n    type: 'grid3DChangeCamera',\n    event: 'grid3dcamerachanged',\n    update: 'series:updateCamera'\n  }, function (payload, ecModel) {\n    ecModel.eachComponent({\n      mainType: 'grid3D',\n      query: payload\n    }, function (componentModel) {\n      componentModel.setView(payload);\n    });\n  });\n  registers.registerAction({\n    type: 'grid3DShowAxisPointer',\n    event: 'grid3dshowaxispointer',\n    update: 'grid3D:showAxisPointer'\n  }, function (payload, ecModel) {});\n  registers.registerAction({\n    type: 'grid3DHideAxisPointer',\n    event: 'grid3dhideaxispointer',\n    update: 'grid3D:hideAxisPointer'\n  }, function (payload, ecModel) {});\n}","map":{"version":3,"names":["Grid3DModel","Grid3DView","grid3DCreator","Axis3DModel","createAxis3DModel","getAxisType","axisDim","option","type","data","install","registers","registerComponentModel","registerComponentView","registerCoordinateSystem","forEach","dim","name","toUpperCase","AxisView","ComponentView","extend","registerAction","event","update","payload","ecModel","eachComponent","mainType","query","componentModel","setView"],"sources":["E:/mytest/node_modules/echarts-gl/lib/component/grid3D/install.js"],"sourcesContent":["// TODO ECharts GL must be imported whatever component,charts is imported.\nimport '../../echarts-gl';\nimport Grid3DModel from './Grid3DModel';\nimport Grid3DView from './Grid3DView';\nimport grid3DCreator from '../../coord/grid3DCreator';\nimport Axis3DModel from './Axis3DModel';\nimport createAxis3DModel from './createAxis3DModel';\n\nfunction getAxisType(axisDim, option) {\n  // Default axis with data is category axis\n  return option.type || (option.data ? 'category' : 'value');\n}\n\nexport function install(registers) {\n  registers.registerComponentModel(Grid3DModel);\n  registers.registerComponentView(Grid3DView);\n  registers.registerCoordinateSystem('grid3D', grid3DCreator);\n  ['x', 'y', 'z'].forEach(function (dim) {\n    createAxis3DModel(registers, dim, Axis3DModel, getAxisType, {\n      name: dim.toUpperCase()\n    });\n    const AxisView = registers.ComponentView.extend({\n      type: dim + 'Axis3D'\n    });\n    registers.registerComponentView(AxisView);\n  });\n  registers.registerAction({\n    type: 'grid3DChangeCamera',\n    event: 'grid3dcamerachanged',\n    update: 'series:updateCamera'\n  }, function (payload, ecModel) {\n    ecModel.eachComponent({\n      mainType: 'grid3D',\n      query: payload\n    }, function (componentModel) {\n      componentModel.setView(payload);\n    });\n  });\n  registers.registerAction({\n    type: 'grid3DShowAxisPointer',\n    event: 'grid3dshowaxispointer',\n    update: 'grid3D:showAxisPointer'\n  }, function (payload, ecModel) {});\n  registers.registerAction({\n    type: 'grid3DHideAxisPointer',\n    event: 'grid3dhideaxispointer',\n    update: 'grid3D:hideAxisPointer'\n  }, function (payload, ecModel) {});\n}"],"mappings":"AAAA;AACA,OAAO,kBAAkB;AACzB,OAAOA,WAAW,MAAM,eAAe;AACvC,OAAOC,UAAU,MAAM,cAAc;AACrC,OAAOC,aAAa,MAAM,2BAA2B;AACrD,OAAOC,WAAW,MAAM,eAAe;AACvC,OAAOC,iBAAiB,MAAM,qBAAqB;AAEnD,SAASC,WAAWA,CAACC,OAAO,EAAEC,MAAM,EAAE;EACpC;EACA,OAAOA,MAAM,CAACC,IAAI,KAAKD,MAAM,CAACE,IAAI,GAAG,UAAU,GAAG,OAAO,CAAC;AAC5D;AAEA,OAAO,SAASC,OAAOA,CAACC,SAAS,EAAE;EACjCA,SAAS,CAACC,sBAAsB,CAACZ,WAAW,CAAC;EAC7CW,SAAS,CAACE,qBAAqB,CAACZ,UAAU,CAAC;EAC3CU,SAAS,CAACG,wBAAwB,CAAC,QAAQ,EAAEZ,aAAa,CAAC;EAC3D,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC,CAACa,OAAO,CAAC,UAAUC,GAAG,EAAE;IACrCZ,iBAAiB,CAACO,SAAS,EAAEK,GAAG,EAAEb,WAAW,EAAEE,WAAW,EAAE;MAC1DY,IAAI,EAAED,GAAG,CAACE,WAAW,CAAC;IACxB,CAAC,CAAC;IACF,MAAMC,QAAQ,GAAGR,SAAS,CAACS,aAAa,CAACC,MAAM,CAAC;MAC9Cb,IAAI,EAAEQ,GAAG,GAAG;IACd,CAAC,CAAC;IACFL,SAAS,CAACE,qBAAqB,CAACM,QAAQ,CAAC;EAC3C,CAAC,CAAC;EACFR,SAAS,CAACW,cAAc,CAAC;IACvBd,IAAI,EAAE,oBAAoB;IAC1Be,KAAK,EAAE,qBAAqB;IAC5BC,MAAM,EAAE;EACV,CAAC,EAAE,UAAUC,OAAO,EAAEC,OAAO,EAAE;IAC7BA,OAAO,CAACC,aAAa,CAAC;MACpBC,QAAQ,EAAE,QAAQ;MAClBC,KAAK,EAAEJ;IACT,CAAC,EAAE,UAAUK,cAAc,EAAE;MAC3BA,cAAc,CAACC,OAAO,CAACN,OAAO,CAAC;IACjC,CAAC,CAAC;EACJ,CAAC,CAAC;EACFd,SAAS,CAACW,cAAc,CAAC;IACvBd,IAAI,EAAE,uBAAuB;IAC7Be,KAAK,EAAE,uBAAuB;IAC9BC,MAAM,EAAE;EACV,CAAC,EAAE,UAAUC,OAAO,EAAEC,OAAO,EAAE,CAAC,CAAC,CAAC;EAClCf,SAAS,CAACW,cAAc,CAAC;IACvBd,IAAI,EAAE,uBAAuB;IAC7Be,KAAK,EAAE,uBAAuB;IAC9BC,MAAM,EAAE;EACV,CAAC,EAAE,UAAUC,OAAO,EAAEC,OAAO,EAAE,CAAC,CAAC,CAAC;AACpC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}