{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport Chart from 'chart.js/auto';\nimport * as XLSX from 'xlsx';\nimport html2canvas from 'html2canvas';\nimport jsPDF from 'jspdf';\nimport 'element-plus/dist/index.css';\nexport default {\n  props: {\n    correctAnswer: {\n      // 接收正确答案\n      type: String,\n      default: ''\n    }\n  },\n  data() {\n    return {\n      currentQuestion: '',\n      // 当前被选中查看的问题ID\n      allquestions: [],\n      questions: [],\n      // 存储问卷的所有问题\n      options: [],\n      // 当前问题的选项统计数据\n      showChart: false,\n      chartType: '',\n      chartData: null,\n      chartLabels: [],\n      // 图表标签\n      correctRate: 0\n      // 其他数据...\n    };\n  },\n  computed: {\n    currentQuestionDescription() {\n      // 在问题列表中找到当前选中的问题并返回其描述\n      const currentQuestion = this.questions.find(question => question.id === this.currentQuestion);\n      return currentQuestion ? currentQuestion.description : '';\n    }\n  },\n  mounted() {\n    // 在组件挂载后，初始化问题数据\n    this.initQuestionsData();\n  },\n  watch: {\n    // 监听当前选定问题的变化，以更新相关的图表和统计信息\n    currentQuestion(newValue, oldValue) {\n      if (newValue !== oldValue) {\n        this.updateCurrentQuestionStatistics(newValue);\n      }\n    }\n  },\n  methods: {\n    initQuestionsData() {\n      const formData = new FormData();\n      formData.append('survey_id', this.$route.params.qnid);\n      this.$axios({\n        method: 'post',\n        url: '/question/api/listquestionforanalysis',\n        data: formData\n      }).then(res => {\n        switch (res.data.status_code) {\n          case 1:\n            this.allquestions = JSON.parse(res.data.data);\n            // for (var i = 0; i < this.questionnaires.length; i++) {\n            // if (this.questionnaires[i].questionType == '1')\n            //     this.questionnaires[i].questionType = '普通问卷'\n            // else if (this.questionnaires[i].questionType == '2')\n            //     this.questionnaires[i].questionType = '投票问卷'\n            // else if (this.questionnaires[i].questionType == '3')\n            //     this.questionnaires[i].questionType = '考试问卷'\n            // else\n            //     this.questionnaires[i].questionType = '报名问卷'\n            // }\n            console.log(this.allquestions);\n            console.log(this.allquestions.length);\n            console.log(\"success on fetching questions\");\n            for (let i = 0; i < this.allquestions.length; i++) {\n              const question = this.allquestions[i];\n              console.log(question.id, question.description);\n              var param = {\n                question_id: question.question_id\n              };\n              this.$axios({\n                method: 'post',\n                url: '/submit/api/get_question_statistics',\n                data: param\n              }).then(res => {\n                switch (res.data.status_code) {\n                  case 1:\n                    this.options = res.data.statistics;\n                    this.questions.push({\n                      id: question.question_id,\n                      description: question.description,\n                      options: this.options,\n                      correctAnswer: question.refer\n                    });\n                    for (var i = 0; i < this.questionnaires.length; i++) {\n                      if (this.questionnaires[i].questionType == '1') this.questionnaires[i].questionType = '普通问卷';else if (this.questionnaires[i].questionType == '2') this.questionnaires[i].questionType = '投票问卷';else if (this.questionnaires[i].questionType == '3') this.questionnaires[i].questionType = '考试问卷';else this.questionnaires[i].questionType = '报名问卷';\n                    }\n                    console.log(this.questions);\n                    console.log(\"success on getting statistics\");\n                    break;\n                  case 2:\n                    console.log(\"error 2\");\n                    break;\n                  case 3:\n                    console.log(\"error 3\");\n                    break;\n                  case 4:\n                    console.log(\"error 4\");\n                    break;\n                  case 5:\n                    console.log(\"error 5\");\n                    break;\n                  case -1:\n                    console.log(res.data.status_code);\n                    break;\n                }\n              }).catch(err => {\n                console.log(err);\n              });\n            }\n            console.log(\"checkpoint 2\");\n            break;\n          case 2:\n            console.log(\"error 2\");\n            break;\n          case 3:\n            console.log(\"error 3\");\n            break;\n          case 4:\n            console.log(\"error 4\");\n            break;\n          case 5:\n            console.log(\"error 5\");\n            break;\n          case -1:\n            break;\n        }\n      }).catch(err => {\n        console.log(err);\n      });\n      console.log(\"checkpoint 2\");\n      console.log(this.allquestions);\n      console.log(this.allquestions.length);\n\n      // for (let i = 0; i < this.allquestions.length; i++) {\n      //   const question = this.allquestions[i];\n      //   console.log(question.id, question.description);\n      //   var param = {\n      //         question_id: question.question_id,\n      //     };\n      //     this.$axios({\n      //       method: 'post',\n      //       url: '/submit/api/get_submission',\n      //       data: param,\n      //   }).then(res => {\n      //       switch (res.data.status_code) {\n      //       case 1:\n      //           this.options = res.data.statistics;\n      //           this.questions.push({\n      //             id: question.question_id,\n      //             description: question.description,\n      //             options: this.options,\n      //             correctAnswer: question.refer\n      //           })\n      //           // for (var i = 0; i < this.questionnaires.length; i++) {\n      //           // if (this.questionnaires[i].questionType == '1')\n      //           //     this.questionnaires[i].questionType = '普通问卷'\n      //           // else if (this.questionnaires[i].questionType == '2')\n      //           //     this.questionnaires[i].questionType = '投票问卷'\n      //           // else if (this.questionnaires[i].questionType == '3')\n      //           //     this.questionnaires[i].questionType = '考试问卷'\n      //           // else\n      //           //     this.questionnaires[i].questionType = '报名问卷'\n      //           // }\n      //           console.log(this.allquestions);\n      //           console.log(\"success on fetching questions\");\n      //           break;\n      //       case 2:\n      //           console.log(\"error 2\");\n      //           break;\n      //       case 3:\n      //           console.log(\"error 3\");\n      //           break;\n      //       case 4:\n      //           console.log(\"error 4\");\n      //           break;\n      //       case 5:\n      //           console.log(\"error 5\");\n      //           break;\n      //       case -1:\n      //           console.log(res.data.status_code);\n      //           break;\n      //       }\n      //   }).catch(err => {\n      //       console.log(err);\n      //   });\n      // }\n      // console.log(\"checkpoint 2\");\n      // this.questions = [\n      // {\n      //     id: 'q1',\n      //     description: '问题1：JavaScript是一种______语言。',\n      //     options: [\n      //     { id: 'q1o1', name: '编译型', count: 20 },\n      //     { id: 'q1o2', name: '解释型', count: 180 },\n      //     { id: 'q1o3', name: '汇编语言', count: 5 },\n      //     { id: 'q1o4', name: '标记语言', count: 15 }\n      //     ],\n      //     correctAnswer: 'q1o2'\n      // },\n      // {\n      //     id: 'q2',\n      //     description: '问题2：下列哪个是Vue.js的核心特性？',\n      //     options: [\n      //     { id: 'q2o1', name: '虚拟DOM', count: 150 },\n      //     { id: 'q2o2', name: '组件', count: 140 },\n      //     { id: 'q2o3', name: '响应式', count: 160 },\n      //     { id: 'q2o4', name: '以上都是', count: 100 }\n      //     ],\n      //     correctAnswer: 'q2o4'\n      // }\n      // // 可以根据需要添加更多的问题\n      // ];\n      // this.questions.push({\n      //   id: 'q3',\n      //   description: '问题3：Vue.js的生命周期钩子包括哪些？',\n      //   options: [\n      //     { id: 'q3o1', name: 'created', count: 100 },\n      //     { id: 'q3o2', name: 'mounted', count: 120 },\n      //     { id: 'q3o3', name: 'updated', count: 80 },\n      //     { id: 'q3o4', name: '以上都是', count: 200 }\n      //   ],\n      //   correctAnswer: 'q3o4'\n      // });\n      // 默认选中第一个问题进行展示\n      if (this.questions.length > 0) {\n        this.currentQuestion = this.questions[0].id;\n        this.updateCurrentQuestionStatistics(this.currentQuestion);\n      }\n    },\n    updateCurrentQuestionStatistics(questionId) {\n      // 根据当前选中的问题ID更新选项统计数据和正确率\n      const currentQuestion = this.questions.find(q => q.id === questionId);\n      if (currentQuestion) {\n        this.options = this.calculatePercentage(currentQuestion.options);\n        this.calculateCorrectRate();\n        // 确保你更新了showChart、chartType等变量后调用了generateChart\n        this.showChart = true; // 举一个例子\n        // 之后可以添加generateChart的调用，如果需要\n      }\n    },\n    // 保留其他方法...\n    exportToExcel() {\n      const tableData = this.getTableData(); // 获取表格数据\n      const wb = XLSX.utils.book_new();\n      const ws = XLSX.utils.json_to_sheet(tableData);\n      XLSX.utils.book_append_sheet(wb, ws, 'Sheet1');\n      XLSX.writeFile(wb, 'table_data.xlsx');\n    },\n    getTableData() {\n      const tableData = this.options.map(option => ({\n        name: option.name,\n        count: option.count,\n        percentage: option.percentage\n      }));\n      tableData.push({\n        name: '本题正确率',\n        count: this.correctRate,\n        percentage: this.correctRate\n      });\n      return tableData;\n    },\n    exportToPDF() {\n      const exportContent = document.getElementById('export-content');\n      if (!exportContent) {\n        console.error('未找到需要导出的内容');\n        return;\n      }\n      html2canvas(exportContent).then(canvas => {\n        const imgData = canvas.toDataURL('image/png');\n        const pdf = new jsPDF();\n        // 获取画布的宽度和高度，并以此为基础设置PDF中图片的尺寸\n        const imgProps = pdf.getImageProperties(imgData);\n        const pdfWidth = pdf.internal.pageSize.getWidth();\n        const pdfHeight = imgProps.height * pdfWidth / imgProps.width;\n\n        // 将图片添加到PDF中，并保持比例\n        pdf.addImage(imgData, 'PNG', 10, 10, pdfWidth - 20, pdfHeight); // 减去20是为了确保图片两侧有边距\n        pdf.save('table_and_chart.pdf');\n      }).catch(error => {\n        console.error('导出PDF时发生错误:', error);\n      });\n    },\n    getData() {\n      // 获取后端数据的方法\n      return [{\n        name: '选项1',\n        count: 10\n      }, {\n        name: '选项2',\n        count: 15\n      }, {\n        name: '选项3',\n        count: 300\n      }, {\n        name: '选项4',\n        count: 8\n      }, {\n        name: '选项5',\n        count: 10\n      }];\n    },\n    calculatePercentage(data) {\n      // 计算占比\n      const total = data.reduce((sum, option) => sum + option.count, 0);\n      return data.map(option => ({\n        ...option,\n        percentage: (option.count / total * 100).toFixed(2)\n      }));\n    },\n    calculateCorrectRate() {\n      // 计算本题正确率\n      const totalResponses = this.options.reduce((sum, option) => sum + option.count, 0);\n      const correctResponses = this.options.find(option => option.name === this.correctAnswer)?.count || 0;\n      this.correctRate = (correctResponses / totalResponses * 100).toFixed(2);\n    },\n    toggleChart(type) {\n      if (this.chartType === type) {\n        // 如果当前已经显示该类型的图表，则收起图表\n        this.showChart = false;\n        this.chartType = '';\n        // 销毁当前的图表实例\n        if (this.chartData) {\n          this.chartData.destroy();\n          this.chartData = null;\n        }\n      } else {\n        console.log('切换图表类型', type);\n        // 否则，显示对应类型的图表\n        this.showChart = true;\n        this.chartType = type;\n        this.$nextTick(() => {\n          this.generateChart(type);\n        });\n      }\n    },\n    generateChart(chartType) {\n      // 确保chartType有效且showChart为true\n      if (!chartType || !this.showChart) {\n        return;\n      }\n\n      // 现在不需要以下代码，因为我们将使用传入的chartType参数\n      // if (this.chartType === type) {\n      //   // 如果当前已经显示该类型的图表，则收起图表\n      //   this.showChart = false;\n      //   …\n\n      if (this.chartData) {\n        // 销毁当前图表实例\n        this.chartData.destroy();\n        this.chartData = null;\n      }\n      const ctx = this.$refs.chartCanvas.getContext('2d');\n      const labels = this.options.map(option => option.name);\n      const percentages = this.options.map(option => parseFloat(option.percentage));\n\n      // 使用数据数量来确定背景色和边框色数组的大小\n      const colors = this.generateColors(labels.length);\n      const data = {\n        labels,\n        datasets: [{\n          label: '占比',\n          data: percentages,\n          backgroundColor: colors.background,\n          borderColor: colors.border,\n          borderWidth: 1\n        }]\n      };\n      const options = {\n        scales: {\n          y: {\n            beginAtZero: true\n          }\n        }\n      };\n\n      // 只有在确实需要时才创建新的图表实例\n      if (ctx) {\n        this.chartData = new Chart(ctx, {\n          type: chartType,\n          data,\n          options\n        });\n      }\n    },\n    // 添加新方法用于生成颜色数组\n    generateColors(numOptions) {\n      const baseColors = ['rgba(255, 99, 132, 0.2)', 'rgba(54, 162, 235, 0.2)', 'rgba(255, 80, 192, 0.2)', 'rgba(255, 206, 86, 0.2)', 'rgba(75, 255, 192, 0.2)', 'rgba(130, 20, 255, 0.2)'];\n\n      // 循环生成颜色数组，如果选项数量超过预定义颜色数量，则循环使用这些颜色\n      const colors = {\n        background: [],\n        border: []\n      };\n      for (let i = 0; i < numOptions; i++) {\n        const index = i % baseColors.length;\n        colors.background.push(baseColors[index]);\n        colors.border.push(baseColors[index].replace('0.2)', '1)')); // 将透明度从0.2改为1\n      }\n      return colors;\n    }\n  }\n};","map":{"version":3,"names":["Chart","XLSX","html2canvas","jsPDF","props","correctAnswer","type","String","default","data","currentQuestion","allquestions","questions","options","showChart","chartType","chartData","chartLabels","correctRate","computed","currentQuestionDescription","find","question","id","description","mounted","initQuestionsData","watch","newValue","oldValue","updateCurrentQuestionStatistics","methods","formData","FormData","append","$route","params","qnid","$axios","method","url","then","res","status_code","JSON","parse","console","log","length","i","param","question_id","statistics","push","refer","questionnaires","questionType","catch","err","questionId","q","calculatePercentage","calculateCorrectRate","exportToExcel","tableData","getTableData","wb","utils","book_new","ws","json_to_sheet","book_append_sheet","writeFile","map","option","name","count","percentage","exportToPDF","exportContent","document","getElementById","error","canvas","imgData","toDataURL","pdf","imgProps","getImageProperties","pdfWidth","internal","pageSize","getWidth","pdfHeight","height","width","addImage","save","getData","total","reduce","sum","toFixed","totalResponses","correctResponses","toggleChart","destroy","$nextTick","generateChart","ctx","$refs","chartCanvas","getContext","labels","percentages","parseFloat","colors","generateColors","datasets","label","backgroundColor","background","borderColor","border","borderWidth","scales","y","beginAtZero","numOptions","baseColors","index","replace"],"sources":["E:\\mytest\\src\\views\\qn-data\\qnTestDataview.vue"],"sourcesContent":["<template>\r\n    <div class=\"common-layout\">\r\n      <el-container>\r\n        <el-header></el-header>\r\n        <el-main>\r\n          <div class=\"mytable\">\r\n            <h2>考试统计</h2>\r\n\r\n            <!-- 问题描述显示 -->\r\n            <div v-if=\"currentQuestion\" class=\"question-description\" style=\"margin-top: -60px;\">\r\n                <h3>{{ currentQuestionDescription }}</h3>\r\n            </div>\r\n\r\n            <el-table :data=\"options\" style=\"width: 50%\" height=\"250\" stripe fit size=\"large\">\r\n              <el-table-column fixed prop=\"name\" label=\"选项\" />\r\n              <el-table-column prop=\"count\" label=\"选择人数\" />\r\n              <el-table-column label=\"占比\" >\r\n                <template #default=\"scope\">\r\n                  <el-progress :percentage=\"parseFloat(scope.row.percentage)\" /> <!-- 注意：将占比转换成数值类型 -->\r\n                </template>              \r\n              </el-table-column>\r\n            </el-table>\r\n  \r\n            <!-- <div style=\"margin-top: 0px; margin-bottom: -30px; display: flex; justify-content: space-around; align-items: center; width: 50%;\">\r\n              <div>本题正确率:</div>\r\n              <div style=\"flex-shrink: 0; margin-right: 10px;\">{{ Math.round(correctRate) }} 人正确</div>\r\n              <el-progress :percentage=\"correctRate\" style=\"width: 100%; max-width: 300px;\"></el-progress>\r\n            </div> -->\r\n  \r\n            <!-- 图表展示按钮 -->\r\n            <div class=\"chart-buttons\">\r\n              <!-- 添加一个下拉菜单选择要查看的问题 -->\r\n              <el-select v-model=\"currentQuestion\" placeholder=\"请选择一个问题\">\r\n                <el-option\r\n                    v-for=\"(question, index) in questions\"\r\n                    :key=\"question.id\"\r\n                    :label=\"`问题 ${index + 1}`\"\r\n                    :value=\"question.id\">\r\n                </el-option>\r\n                </el-select>\r\n                <el-button type=\"primary\" @click=\"toggleChart('bar')\">柱状图</el-button>\r\n                <el-button type=\"primary\" @click=\"toggleChart('line')\">折线图</el-button>\r\n                <el-button type=\"primary\" @click=\"toggleChart('pie')\">饼状图</el-button>\r\n                <el-button type=\"primary\" @click=\"exportToExcel\">导出为 Excel</el-button>\r\n                <el-button type=\"primary\" @click=\"exportToWordAndPDF\">导出为 PDF</el-button>\r\n            </div>\r\n  \r\n            <!-- 图表展示区域 -->\r\n            <div id=\"export-content\" v-if=\"showChart\" class=\"chart-container\">\r\n              <canvas ref=\"chartCanvas\"></canvas>\r\n            </div>\r\n  \r\n          </div>\r\n        </el-main>\r\n      </el-container>\r\n    </div>\r\n    \r\n  </template>\r\n  \r\n  <script >\r\n  import Chart from 'chart.js/auto';\r\n  import * as XLSX from 'xlsx';\r\n  import html2canvas from 'html2canvas';\r\n  import jsPDF from 'jspdf';\r\n  import 'element-plus/dist/index.css';\r\n  \r\n  export default {\r\n    props: {\r\n      correctAnswer: { // 接收正确答案\r\n        type: String,\r\n        default: ''\r\n      }\r\n    },\r\n    data() {\r\n      return {\r\n        currentQuestion: '', // 当前被选中查看的问题ID\r\n        allquestions: [],\r\n        questions: [], // 存储问卷的所有问题\r\n        options: [], // 当前问题的选项统计数据\r\n        showChart: false,\r\n        chartType: '',\r\n        chartData: null,\r\n        chartLabels: [], // 图表标签\r\n        correctRate: 0,\r\n        // 其他数据...\r\n      };\r\n    },\r\n    computed: {\r\n        currentQuestionDescription() {\r\n        // 在问题列表中找到当前选中的问题并返回其描述\r\n            const currentQuestion = this.questions.find(question => question.id === this.currentQuestion);\r\n            return currentQuestion ? currentQuestion.description : '';\r\n        }\r\n    },\r\n    mounted() {\r\n        // 在组件挂载后，初始化问题数据\r\n        this.initQuestionsData();\r\n    },\r\n    watch: {\r\n      // 监听当前选定问题的变化，以更新相关的图表和统计信息\r\n      currentQuestion(newValue, oldValue) {\r\n        if(newValue !== oldValue) {\r\n          this.updateCurrentQuestionStatistics(newValue);\r\n        }\r\n      }\r\n    },\r\n    methods: {\r\n        initQuestionsData() {\r\n          const formData = new FormData();\r\n          formData.append('survey_id', this.$route.params.qnid);\r\n          this.$axios({\r\n                method: 'post',\r\n                url: '/question/api/listquestionforanalysis',\r\n                data: formData,\r\n            }).then(res => {\r\n                switch (res.data.status_code) {\r\n                case 1:\r\n                    this.allquestions = JSON.parse(res.data.data);\r\n                    // for (var i = 0; i < this.questionnaires.length; i++) {\r\n                    // if (this.questionnaires[i].questionType == '1')\r\n                    //     this.questionnaires[i].questionType = '普通问卷'\r\n                    // else if (this.questionnaires[i].questionType == '2')\r\n                    //     this.questionnaires[i].questionType = '投票问卷'\r\n                    // else if (this.questionnaires[i].questionType == '3')\r\n                    //     this.questionnaires[i].questionType = '考试问卷'\r\n                    // else\r\n                    //     this.questionnaires[i].questionType = '报名问卷'\r\n                    // }\r\n                    console.log(this.allquestions);\r\n                    console.log(this.allquestions.length);\r\n                    console.log(\"success on fetching questions\");\r\n                    for (let i = 0; i < this.allquestions.length; i++) {\r\n                      const question = this.allquestions[i];\r\n                      console.log(question.id, question.description);\r\n                      var param = {\r\n                            question_id: question.question_id,\r\n                        };\r\n                        this.$axios({\r\n                          method: 'post',\r\n                          url: '/submit/api/get_question_statistics',\r\n                          data: param,\r\n                      }).then(res => {\r\n                          switch (res.data.status_code) {\r\n                          case 1:\r\n                              this.options = res.data.statistics;\r\n                              this.questions.push({\r\n                                id: question.question_id,\r\n                                description: question.description,\r\n                                options: this.options,\r\n                                correctAnswer: question.refer\r\n                              })\r\n                              for (var i = 0; i < this.questionnaires.length; i++) {\r\n                              if (this.questionnaires[i].questionType == '1')\r\n                                  this.questionnaires[i].questionType = '普通问卷'\r\n                              else if (this.questionnaires[i].questionType == '2')\r\n                                  this.questionnaires[i].questionType = '投票问卷'\r\n                              else if (this.questionnaires[i].questionType == '3')\r\n                                  this.questionnaires[i].questionType = '考试问卷'\r\n                              else\r\n                                  this.questionnaires[i].questionType = '报名问卷'\r\n                              }\r\n                              console.log(this.questions);\r\n                              console.log(\"success on getting statistics\");\r\n                              break;\r\n                          case 2:\r\n                              console.log(\"error 2\");\r\n                              break;\r\n                          case 3:\r\n                              console.log(\"error 3\");\r\n                              break;\r\n                          case 4:\r\n                              console.log(\"error 4\");\r\n                              break;\r\n                          case 5:\r\n                              console.log(\"error 5\");\r\n                              break;\r\n                          case -1:\r\n                              console.log(res.data.status_code);\r\n                              break;\r\n                          }\r\n                      }).catch(err => {\r\n                          console.log(err);\r\n                      });\r\n                    }\r\n                    console.log(\"checkpoint 2\");\r\n                    break;\r\n                case 2:\r\n                    console.log(\"error 2\");\r\n                    break;\r\n                case 3:\r\n                    console.log(\"error 3\");\r\n                    break;\r\n                case 4:\r\n                    console.log(\"error 4\");\r\n                    break;\r\n                case 5:\r\n                    console.log(\"error 5\");\r\n                    break;\r\n                case -1:\r\n                    break;\r\n                }\r\n            }).catch(err => {\r\n                console.log(err);\r\n            });\r\n            console.log(\"checkpoint 2\");\r\n            console.log(this.allquestions);\r\n            console.log(this.allquestions.length);\r\n              \r\n            // for (let i = 0; i < this.allquestions.length; i++) {\r\n            //   const question = this.allquestions[i];\r\n            //   console.log(question.id, question.description);\r\n            //   var param = {\r\n            //         question_id: question.question_id,\r\n            //     };\r\n            //     this.$axios({\r\n            //       method: 'post',\r\n            //       url: '/submit/api/get_submission',\r\n            //       data: param,\r\n            //   }).then(res => {\r\n            //       switch (res.data.status_code) {\r\n            //       case 1:\r\n            //           this.options = res.data.statistics;\r\n            //           this.questions.push({\r\n            //             id: question.question_id,\r\n            //             description: question.description,\r\n            //             options: this.options,\r\n            //             correctAnswer: question.refer\r\n            //           })\r\n            //           // for (var i = 0; i < this.questionnaires.length; i++) {\r\n            //           // if (this.questionnaires[i].questionType == '1')\r\n            //           //     this.questionnaires[i].questionType = '普通问卷'\r\n            //           // else if (this.questionnaires[i].questionType == '2')\r\n            //           //     this.questionnaires[i].questionType = '投票问卷'\r\n            //           // else if (this.questionnaires[i].questionType == '3')\r\n            //           //     this.questionnaires[i].questionType = '考试问卷'\r\n            //           // else\r\n            //           //     this.questionnaires[i].questionType = '报名问卷'\r\n            //           // }\r\n            //           console.log(this.allquestions);\r\n            //           console.log(\"success on fetching questions\");\r\n            //           break;\r\n            //       case 2:\r\n            //           console.log(\"error 2\");\r\n            //           break;\r\n            //       case 3:\r\n            //           console.log(\"error 3\");\r\n            //           break;\r\n            //       case 4:\r\n            //           console.log(\"error 4\");\r\n            //           break;\r\n            //       case 5:\r\n            //           console.log(\"error 5\");\r\n            //           break;\r\n            //       case -1:\r\n            //           console.log(res.data.status_code);\r\n            //           break;\r\n            //       }\r\n            //   }).catch(err => {\r\n            //       console.log(err);\r\n            //   });\r\n            // }\r\n            // console.log(\"checkpoint 2\");\r\n            // this.questions = [\r\n            // {\r\n            //     id: 'q1',\r\n            //     description: '问题1：JavaScript是一种______语言。',\r\n            //     options: [\r\n            //     { id: 'q1o1', name: '编译型', count: 20 },\r\n            //     { id: 'q1o2', name: '解释型', count: 180 },\r\n            //     { id: 'q1o3', name: '汇编语言', count: 5 },\r\n            //     { id: 'q1o4', name: '标记语言', count: 15 }\r\n            //     ],\r\n            //     correctAnswer: 'q1o2'\r\n            // },\r\n            // {\r\n            //     id: 'q2',\r\n            //     description: '问题2：下列哪个是Vue.js的核心特性？',\r\n            //     options: [\r\n            //     { id: 'q2o1', name: '虚拟DOM', count: 150 },\r\n            //     { id: 'q2o2', name: '组件', count: 140 },\r\n            //     { id: 'q2o3', name: '响应式', count: 160 },\r\n            //     { id: 'q2o4', name: '以上都是', count: 100 }\r\n            //     ],\r\n            //     correctAnswer: 'q2o4'\r\n            // }\r\n            // // 可以根据需要添加更多的问题\r\n            // ];\r\n            // this.questions.push({\r\n            //   id: 'q3',\r\n            //   description: '问题3：Vue.js的生命周期钩子包括哪些？',\r\n            //   options: [\r\n            //     { id: 'q3o1', name: 'created', count: 100 },\r\n            //     { id: 'q3o2', name: 'mounted', count: 120 },\r\n            //     { id: 'q3o3', name: 'updated', count: 80 },\r\n            //     { id: 'q3o4', name: '以上都是', count: 200 }\r\n            //   ],\r\n            //   correctAnswer: 'q3o4'\r\n            // });\r\n            // 默认选中第一个问题进行展示\r\n            if(this.questions.length > 0) {\r\n            this.currentQuestion = this.questions[0].id;\r\n            this.updateCurrentQuestionStatistics(this.currentQuestion);\r\n            }\r\n        },\r\n        updateCurrentQuestionStatistics(questionId) {\r\n            // 根据当前选中的问题ID更新选项统计数据和正确率\r\n            const currentQuestion = this.questions.find(q => q.id === questionId);\r\n            if(currentQuestion) {\r\n                this.options = this.calculatePercentage(currentQuestion.options);\r\n                this.calculateCorrectRate(); \r\n                // 确保你更新了showChart、chartType等变量后调用了generateChart\r\n                this.showChart = true; // 举一个例子\r\n                // 之后可以添加generateChart的调用，如果需要\r\n            }\r\n            },\r\n        // 保留其他方法...\r\n        exportToExcel() {\r\n            const tableData = this.getTableData(); // 获取表格数据\r\n            const wb = XLSX.utils.book_new();\r\n            const ws = XLSX.utils.json_to_sheet(tableData);\r\n            XLSX.utils.book_append_sheet(wb, ws, 'Sheet1');\r\n            XLSX.writeFile(wb, 'table_data.xlsx');\r\n        },\r\n        getTableData() {\r\n            const tableData = this.options.map(option => ({\r\n            name: option.name,\r\n            count: option.count,\r\n            percentage: option.percentage,\r\n            }));\r\n            tableData.push({ name: '本题正确率', count: this.correctRate, percentage: this.correctRate });\r\n            return tableData;\r\n        },\r\n        exportToPDF() {\r\n            const exportContent = document.getElementById('export-content');\r\n            if (!exportContent) {\r\n            console.error('未找到需要导出的内容');\r\n            return;\r\n            }\r\n            html2canvas(exportContent).then(canvas => {\r\n            const imgData = canvas.toDataURL('image/png');\r\n            const pdf = new jsPDF();\r\n            // 获取画布的宽度和高度，并以此为基础设置PDF中图片的尺寸\r\n            const imgProps = pdf.getImageProperties(imgData);\r\n            const pdfWidth = pdf.internal.pageSize.getWidth();\r\n            const pdfHeight = (imgProps.height * pdfWidth) / imgProps.width;\r\n            \r\n            // 将图片添加到PDF中，并保持比例\r\n            pdf.addImage(imgData, 'PNG', 10, 10, pdfWidth - 20, pdfHeight); // 减去20是为了确保图片两侧有边距\r\n            pdf.save('table_and_chart.pdf');\r\n            }).catch(error => {\r\n            console.error('导出PDF时发生错误:', error);\r\n            });\r\n        },\r\n        getData() {\r\n            // 获取后端数据的方法\r\n            return [{ name: '选项1', count: 10 }, { name: '选项2', count: 15 }, { name: '选项3', count: 300 }, { name: '选项4', count: 8 }, { name: '选项5', count: 10 }];\r\n        },\r\n        calculatePercentage(data) {\r\n            // 计算占比\r\n            const total = data.reduce((sum, option) => sum + option.count, 0);\r\n            return data.map(option => ({\r\n            ...option,\r\n            percentage: ((option.count / total) * 100).toFixed(2)\r\n            }));\r\n        },\r\n        calculateCorrectRate() {\r\n            // 计算本题正确率\r\n            const totalResponses = this.options.reduce((sum, option) => sum + option.count, 0);\r\n            const correctResponses = this.options.find(option => option.name === this.correctAnswer)?.count || 0;\r\n            this.correctRate = ((correctResponses / totalResponses) * 100).toFixed(2);\r\n        },\r\n        toggleChart(type) {\r\n            if (this.chartType === type) {\r\n            // 如果当前已经显示该类型的图表，则收起图表\r\n                this.showChart = false;\r\n                this.chartType = '';\r\n                // 销毁当前的图表实例\r\n                if (this.chartData) {\r\n                    this.chartData.destroy();\r\n                    this.chartData = null;\r\n                }\r\n            } else {\r\n                console.log('切换图表类型', type);\r\n                // 否则，显示对应类型的图表\r\n                this.showChart = true;\r\n                this.chartType = type;\r\n                this.$nextTick(() => {\r\n                    this.generateChart(type);\r\n                });\r\n            }\r\n        },\r\n        generateChart(chartType) {\r\n            // 确保chartType有效且showChart为true\r\n            if (!chartType || !this.showChart) {\r\n                return;\r\n            }\r\n\r\n            // 现在不需要以下代码，因为我们将使用传入的chartType参数\r\n            // if (this.chartType === type) {\r\n            //   // 如果当前已经显示该类型的图表，则收起图表\r\n            //   this.showChart = false;\r\n            //   …\r\n\r\n            if (this.chartData) {\r\n                // 销毁当前图表实例\r\n                this.chartData.destroy();\r\n                this.chartData = null;\r\n            }\r\n\r\n            const ctx = this.$refs.chartCanvas.getContext('2d');\r\n            const labels = this.options.map(option => option.name);\r\n            const percentages = this.options.map(option => parseFloat(option.percentage));\r\n\r\n            // 使用数据数量来确定背景色和边框色数组的大小\r\n            const colors = this.generateColors(labels.length);\r\n\r\n            const data = {\r\n                labels,\r\n                datasets: [{\r\n                label: '占比',\r\n                data: percentages,\r\n                backgroundColor: colors.background,\r\n                borderColor: colors.border,\r\n                borderWidth: 1\r\n                }]\r\n            };\r\n\r\n            const options = {\r\n                scales: {\r\n                y: {\r\n                    beginAtZero: true\r\n                }\r\n                }\r\n            };\r\n\r\n            // 只有在确实需要时才创建新的图表实例\r\n            if (ctx) {\r\n                this.chartData = new Chart(ctx, {\r\n                type: chartType,\r\n                data,\r\n                options\r\n                });\r\n            }\r\n        },\r\n        \r\n        // 添加新方法用于生成颜色数组\r\n        generateColors(numOptions) {\r\n            const baseColors = [\r\n            'rgba(255, 99, 132, 0.2)',\r\n            'rgba(54, 162, 235, 0.2)',\r\n            'rgba(255, 80, 192, 0.2)',\r\n            'rgba(255, 206, 86, 0.2)',\r\n            'rgba(75, 255, 192, 0.2)',\r\n            'rgba(130, 20, 255, 0.2)',\r\n            ];\r\n    \r\n            // 循环生成颜色数组，如果选项数量超过预定义颜色数量，则循环使用这些颜色\r\n            const colors = {\r\n            background: [],\r\n            border: []\r\n            };\r\n            for (let i = 0; i < numOptions; i++) {\r\n            const index = i % baseColors.length;\r\n            colors.background.push(baseColors[index]);\r\n            colors.border.push(baseColors[index].replace('0.2)', '1)')); // 将透明度从0.2改为1\r\n            }\r\n            return colors;\r\n        },\r\n    }\r\n  };\r\n  </script>\r\n  \r\n  <style scoped>\r\n  .common-layout {\r\n    display: flex;  \r\n    flex-direction: column;\r\n    min-height: 100vh; /* 使得父容器至少有一个视窗的高度 */\r\n  }\r\n  \r\n  el-header, el-main, el-container {\r\n    display: flex;\r\n    flex-direction: column;\r\n  }\r\n  \r\n  el-main {\r\n    flex: 1;\r\n    display: flex;\r\n    justify-content: center; /* 在垂直方向上居中内容 */\r\n    align-items: center; /* 在水平方向上居中内容 */\r\n  }\r\n  \r\n  .mytable {\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: center;\r\n    padding: 20px;\r\n    background-color: #f9f9f9;\r\n    /* Added styles */\r\n    margin: 0 auto; /* 水平居中 */\r\n    max-width: 80%; /* 限制最大宽度，让内容不会过于分散 */\r\n    box-shadow: 0px 2px 15px rgba(0, 0, 0, 0.3);\r\n    border-radius: 5px;\r\n    overflow: hidden; /* 隐藏溢出的内容 */\r\n    border: 1px solid #d8d8d8;\r\n    border-bottom: 2px solid #d8d8d8;\r\n    border-radius: 5px;\r\n    background-color: #fff;\r\n    color: #565a5c;\r\n    font-family: \"Open Sans\", sans-serif;\r\n    font-weight: 400;\r\n    text-shadow: none;\r\n    box-sizing: border-box;\r\n    font-size: 12px;\r\n    line-height: 32px;\r\n    font-size: 1rem;\r\n    line-height: 6rem;\r\n    font-weight: 400;\r\n  }\r\n  .chart-container {\r\n    width: 600px; /* 调整为你希望的宽度 */\r\n    height: 400px; /* 调整为你希望的高度 */\r\n    margin: 0 auto; /* 水平居中 */\r\n    padding: 20px;\r\n    max-width: 80%; /* 限制最大宽度，让内容不会过于分散 */\r\n    display: flex;\r\n    justify-content: center; /* 在水平方向上居中内容 */\r\n    align-items: center; /* 在垂直方向上居中内容 */\r\n  }\r\n  </style>"],"mappings":"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CAAC;YACtB;UACJ,KAAK,CAAC;YACFD,OAAO,CAACC,GAAG,CAAC,SAAS,CAAC;YACtB;UACJ,KAAK,CAAC,CAAC;YACH;QACJ;MACJ,CAAC,CAAC,CAACU,KAAK,CAACC,GAAE,IAAK;QACZZ,OAAO,CAACC,GAAG,CAACW,GAAG,CAAC;MACpB,CAAC,CAAC;MACFZ,OAAO,CAACC,GAAG,CAAC,cAAc,CAAC;MAC3BD,OAAO,CAACC,GAAG,CAAC,IAAI,CAACpC,YAAY,CAAC;MAC9BmC,OAAO,CAACC,GAAG,CAAC,IAAI,CAACpC,YAAY,CAACqC,MAAM,CAAC;;MAErC;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA,IAAG,IAAI,CAACpC,SAAS,CAACoC,MAAK,GAAI,CAAC,EAAE;QAC9B,IAAI,CAACtC,eAAc,GAAI,IAAI,CAACE,SAAS,CAAC,CAAC,CAAC,CAACW,EAAE;QAC3C,IAAI,CAACO,+BAA+B,CAAC,IAAI,CAACpB,eAAe,CAAC;MAC1D;IACJ,CAAC;IACDoB,+BAA+BA,CAAC6B,UAAU,EAAE;MACxC;MACA,MAAMjD,eAAc,GAAI,IAAI,CAACE,SAAS,CAACS,IAAI,CAACuC,CAAA,IAAKA,CAAC,CAACrC,EAAC,KAAMoC,UAAU,CAAC;MACrE,IAAGjD,eAAe,EAAE;QAChB,IAAI,CAACG,OAAM,GAAI,IAAI,CAACgD,mBAAmB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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}